<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ai4cet6</title>
    <link href="/2024/10/10/gpt4cet6/"/>
    <url>/2024/10/10/gpt4cet6/</url>
    
    <content type="html"><![CDATA[<h1 id="用ai生成6级单词本"><a href="#用ai生成6级单词本" class="headerlink" title="用ai生成6级单词本"></a>用ai生成6级单词本</h1><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>最近看到了<a href="https://github.com/Ceelog/DictionaryByGPT4">Ceelog&#x2F;DictionaryByGPT4: 一本 GPT4 生成的单词书📚，超过 8000 个单词分析，涵盖了词义、例句、词根词缀、变形、文化背景、记忆技巧和小故事 (github.com)</a></p><p>就想着能不能自己搞个6级词汇本，正好<a href="https://open.bigmodel.cn/finance/resourcepack">智谱AI开放平台 (bigmodel.cn)</a>这边还有很多白嫖的token没有用</p><p>数据来源：<a href="https://github.com/mahavivo/english-wordlists/tree/master">mahavivo&#x2F;english-wordlists: 常用英语词汇表 (github.com)</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rich <span class="hljs-keyword">import</span> <span class="hljs-built_in">print</span><br><span class="hljs-keyword">from</span> zhipuai <span class="hljs-keyword">import</span> ZhipuAI<br><span class="hljs-keyword">import</span> zhipuai<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>client = ZhipuAI(api_key=<span class="hljs-string">&quot;&quot;</span>)  <span class="hljs-comment"># 请填写您自己的APIKey</span><br><br>propmt=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># 角色</span><br><span class="hljs-string"></span><br><span class="hljs-string">你是一名中英文双语教育专家，拥有帮助将中文视为母语的用户理解和记忆英语单词的专长，请根据用户提供的英语单词完成下列任务。</span><br><span class="hljs-string"></span><br><span class="hljs-string">## 任务</span><br><span class="hljs-string"></span><br><span class="hljs-string">### 分析词义</span><br><span class="hljs-string"></span><br><span class="hljs-string">- 系统地分析用户提供的英文单词，并用中文以简单易懂的方式解答；</span><br><span class="hljs-string"></span><br><span class="hljs-string">### 列举例句</span><br><span class="hljs-string"></span><br><span class="hljs-string">- 根据所需，为该单词提供至少 3 个不同场景下的使用方法和例句。并且附上中文翻译，以帮助用户更深入地理解单词意义。</span><br><span class="hljs-string"></span><br><span class="hljs-string">### 词根分析</span><br><span class="hljs-string"></span><br><span class="hljs-string">- 用中文分析并展示单词的词根；</span><br><span class="hljs-string">- 列出由词根衍生出来的其他单词；</span><br><span class="hljs-string"></span><br><span class="hljs-string">### 词缀分析</span><br><span class="hljs-string"></span><br><span class="hljs-string">- 用中文分析并展示单词的词缀，例如：单词 individual，前缀 in- 表示否定，-divid- 是词根，-u- 是中缀，用于连接和辅助发音，-al 是后缀，表示形容词；</span><br><span class="hljs-string">- 列出相同词缀的的其他单词；</span><br><span class="hljs-string"></span><br><span class="hljs-string">### 发展历史和文化背景</span><br><span class="hljs-string"></span><br><span class="hljs-string">- 用中文详细介绍单词的造词来源和发展历史，以及在欧美文化中的内涵</span><br><span class="hljs-string"></span><br><span class="hljs-string">### 单词变形</span><br><span class="hljs-string"></span><br><span class="hljs-string">- 列出单词对应的名词、单复数、动词、不同时态、形容词、副词等的变形以及对应的中文翻译。</span><br><span class="hljs-string">- 列出单词对应的固定搭配、组词以及对应的中文翻译。</span><br><span class="hljs-string"></span><br><span class="hljs-string">### 记忆辅助</span><br><span class="hljs-string"></span><br><span class="hljs-string">- 用中文提供一些高效的记忆技巧和窍门，以更好地记住英文单词。</span><br><span class="hljs-string"></span><br><span class="hljs-string">### 小故事</span><br><span class="hljs-string"></span><br><span class="hljs-string">- 用英文撰写一个有画面感的场景故事，包含用户提供的单词。</span><br><span class="hljs-string">- 要求使用简单的词汇，100 个单词以内。</span><br><span class="hljs-string">- 英文故事后面附带对应的中文翻译。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">try</span>:<br>    df = pd.read_excel(<span class="hljs-string">&#x27;wordlist.xlsx&#x27;</span>)<br>    <span class="hljs-comment"># 提取第一列的内容</span><br>    first_column = df.iloc[:, <span class="hljs-number">0</span>]  <span class="hljs-comment"># iloc[:, 0] 表示选择所有行的第一列</span><br>    <span class="hljs-comment"># 打印第一列的内容</span><br>    lines=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> first_column:<br>        lines+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> lines&lt;<span class="hljs-number">206</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;处理第<span class="hljs-subst">&#123;lines&#125;</span>行:<span class="hljs-subst">&#123;item&#125;</span>&quot;</span>)<br>        response = client.chat.completions.create(<br>        model=<span class="hljs-string">&quot;glm-4&quot;</span>,  <span class="hljs-comment"># 请填写您要调用的模型名称</span><br>        messages=[<br>            &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: propmt&#125;,<br>            &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: item&#125;<br>        ],<br>        )<br>        result=response.choices[<span class="hljs-number">0</span>].message.content<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;result.md&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(<span class="hljs-string">&#x27;---------------\n&#x27;</span>)<br>            f.write(<span class="hljs-string">f&#x27;## <span class="hljs-subst">&#123;item&#125;</span>\n&#x27;</span>)<br>            f.write(result+<span class="hljs-string">&#x27;\n\n&#x27;</span>)<br>    <br><span class="hljs-keyword">except</span> zhipuai.core._errors.APIRequestFailedError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;敏感词&#x27;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;未知的异常:&#x27;</span>,e)<br><br></code></pre></td></tr></table></figure><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>仅展示所有a开头的单词（abandon在第一行，所以没放进去）</p><hr><h2 id="abnormal"><a href="#abnormal" class="headerlink" title="abnormal"></a>abnormal</h2><h3 id="分析词义"><a href="#分析词义" class="headerlink" title="分析词义"></a>分析词义</h3><p>“abnormal” 是一个形容词，意味着不正常、异常或不符合常态。在医学、心理学或一般描述中，它用来指某事物或行为偏离了常规标准或期望。</p><h3 id="列举例句"><a href="#列举例句" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The doctor said the test results were abnormal.<br>医生说检验结果不正常。</p></li><li><p>She noticed an abnormal growth on her arm.<br>她注意到手臂上有一个异常的肿块。</p></li><li><p>The plant had abnormal leaves that were a different color.<br>这株植物的叶子异常，颜色不同。</p></li></ol><h3 id="词根分析"><a href="#词根分析" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“ab-“ 是一个前缀，意味着远离、脱离或相反。</li><li>“-normal” 是词根，表示正常或规范。</li></ul><h3 id="词缀分析"><a href="#词缀分析" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ab-“ 作为前缀，还出现在其他单词中，如 “abandon”（放弃）或 “abduct”（绑架）。</li><li>“-normal” 同样出现在如 “normalize”（使正常化）或 “subnormal”（低于正常的）等单词中。</li></ul><h3 id="发展历史和文化背景"><a href="#发展历史和文化背景" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“abnormal” 一词来源于拉丁语 “ab”（脱离）和 “norma”（规则或模具），最初用于描述与某种标准或规范不符的事物。在文化上，这个单词经常被用于描述行为、生理特征或统计上的异常。</p><h3 id="单词变形"><a href="#单词变形" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式：abnormality</li><li>副词形式：abnormally</li></ul><h3 id="记忆辅助"><a href="#记忆辅助" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “abnormal” 这个词，可以联想 “ab-“ 意味着脱离或相反，而 “normal” 是正常。所以 “abnormal” 就是“不正常”或“脱离正常”。</p><h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>One day, while taking a walk in the forest, Tom noticed an abnormal tree. Its leaves were purple, not green. He was fascinated by this abnormality in nature.<br>有一天，当汤姆在森林里散步时，他注意到一棵异常的树。它的叶子是紫色的，而不是绿色的。他对大自然中的这种异常感到着迷。</p><p>中文翻译：有一天，汤姆在森林里散步时，发现了一棵与众不同的树。它的叶子是紫色的，而不是平常的绿色。这种自然界中的不同寻常让他深感好奇。</p><hr><h2 id="abolish"><a href="#abolish" class="headerlink" title="abolish"></a>abolish</h2><h3 id="分析词义-1"><a href="#分析词义-1" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Abolish” 是一个动词，意思是彻底废除或取消某项法律、制度、习俗或做法。这个词语通常用于指那些已经被长期实行但后来被认为是不公正或不再需要的规章制度。</p><h3 id="列举例句-1"><a href="#列举例句-1" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The government plans to abolish the death penalty. （政府计划废除死刑。）</p><ul><li>政府打算彻底取消执行死刑这一刑罚。</li></ul></li><li><p>They successfully abolished slavery in the 19th century. （他们在19世纪成功废除了奴隶制。）</p><ul><li>他们最终在19世纪彻底废除了奴隶制度。</li></ul></li><li><p>The school decided to abolish the uniform policy next year. （学校决定明年废除校服政策。）</p><ul><li>学校决定从下一年开始取消必须穿校服的规定。</li></ul></li></ol><h3 id="词根分析-1"><a href="#词根分析-1" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“Ab-“ 是一个前缀，表示“远离”或“相反”的意思。</li><li>“-olish” 来自词根 “-lysis”，意为“分解”或“溶解”，在词义上引申为“废除”。</li></ul><h3 id="词缀分析-1"><a href="#词缀分析-1" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Ab-“ 前缀还出现在其他单词中，如 “abandon”（放弃）或 “abnormal”（不正常）。</li><li>“-ish” 后缀通常在动词后表示“使成为”或“有…的趋势”，但在”abolish”中，它与词根 “-lysis” 结合，具有特定的废除意义。</li></ul><h3 id="发展历史和文化背景-1"><a href="#发展历史和文化背景-1" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Abolish” 这个词源于拉丁语 “abolere”，意为“完全摧毁”或“取消”。它经常用于讨论法律和社会改革的重要议题，体现了社会正义和进步的价值。</p><h3 id="单词变形-1"><a href="#单词变形-1" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：abolition（废除行为或过程）</li><li>形容词：abolitive（废除的）</li><li>副词：abolishingly（以废除的方式）</li></ul><h3 id="记忆辅助-1"><a href="#记忆辅助-1" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “abolish”，可以将它与”abolition”（废除）联系起来。想象一下，一个国家废除了一种旧制度（比如奴隶制），这就是一个”abolition”，而执行这个行为的过程就是”abolish”。</p><h3 id="小故事-1"><a href="#小故事-1" class="headerlink" title="小故事"></a>小故事</h3><p>One day, the king decided to abolish slavery in his kingdom. He believed that all people should be free. The decree was announced, and the people celebrated their newfound freedom. The abolition of slavery brought peace and prosperity to the land.</p><p>有一天，国王决定在他的王国废除奴隶制。他相信所有人都应该是自由的。命令一经宣布，人们欢庆着他们新获得的自由。”Slavery”的废除给这片土地带来了和平与繁荣。</p><p>（中文翻译：有一天，国王决定在他的国家废除奴隶制。他认为所有人都应该享有自由。当命令公布后，人们庆祝他们新得到的自由。奴隶制的废除给这片土地带来了和平与繁荣。）</p><hr><h2 id="abortion"><a href="#abortion" class="headerlink" title="abortion"></a>abortion</h2><h3 id="分析词义-2"><a href="#分析词义-2" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Abortion”是一个医学术语，指的是怀孕期间的胚胎或胎儿在未达到生存能力之前被人为地终止，也就是常说的“流产”或“人工流产”。</p><h3 id="列举例句-2"><a href="#列举例句-2" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>Many countries have laws that regulate the conditions under which abortion is legal.<br>许多国家有法律规定在哪些情况下可以进行合法流产。</p></li><li><p>The debate on abortion is often emotionally charged, with strong opinions on both sides.<br>关于流产的辩论往往情绪化，双方意见都很强烈。</p></li><li><p>The doctor informed her that her pregnancy had complications and suggested an abortion.<br>医生告诉她怀孕出现了并发症，建议进行流产。</p></li></ol><h3 id="词根分析-2"><a href="#词根分析-2" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Abortion”的词根来自拉丁语”aboriri”，意为“消失”或“灭亡”。</p><h3 id="词缀分析-2"><a href="#词缀分析-2" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Ab-“：前缀，意为“远离”或“相反”。</li><li>“-ort-“：来自词根”aboriri”的部分。</li><li>“-ion”：后缀，在动词或名词后，表示“动作”或“状态”。</li></ul><h3 id="发展历史和文化背景-2"><a href="#发展历史和文化背景-2" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Abortion”一词的使用有着悠久的历史，但关于流产的行为和道德判断在不同文化和宗教中有不同的看法。在欧美文化中，这是一个敏感话题，涉及到女性权利、宗教信仰和法律规定等多方面的争议。</p><h3 id="单词变形-2"><a href="#单词变形-2" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：Abortion（单数），Abortions（复数）</li><li>动词：Abort（基本形态），Aborted（过去式），Aborting（现在分词），Aborts（第三人称单数）</li><li>形容词：Abortive（失败的，不成功的）</li></ul><h3 id="记忆辅助-2"><a href="#记忆辅助-2" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记忆”abortion”这个词，可以联想记忆：ab-（相反）+ ort（来自“出生”的词根）+ -ion（状态）→ 与出生相反的状态 → 流产。</p><h3 id="小故事-2"><a href="#小故事-2" class="headerlink" title="小故事"></a>小故事</h3><p>Mary was faced with a difficult decision. Her pregnancy had medical risks, and her doctor suggested an abortion. It was a painful choice, but she decided it was the best option for her health.<br>玛丽面临着一个艰难的决定。她的怀孕有医学风险，医生建议她进行流产。这是一个痛苦的选择，但她认为这是对她健康最好的选择。</p><h3 id="中文翻译"><a href="#中文翻译" class="headerlink" title="中文翻译"></a>中文翻译</h3><p>玛丽面临着艰难的抉择。她的怀孕存在医学风险，医生建议她做人工流产。虽然这是个痛苦的决定，但她认为这是保护自己健康的最佳选择。</p><hr><h2 id="abrupt"><a href="#abrupt" class="headerlink" title="abrupt"></a>abrupt</h2><h3 id="分析词义-3"><a href="#分析词义-3" class="headerlink" title="分析词义"></a>分析词义</h3><p>“abrupt” 是一个形容词，意思是突然的、意外的、生硬的或陡峭的。它描述的是某事物发生得很快，没有预兆，或者行为、态度等方面突然且唐突。</p><h3 id="列举例句-3"><a href="#列举例句-3" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The teacher’s abrupt change in the lesson plan confused the students.</p><ul><li>老师突然改变课程计划，让学生们感到困惑。（中文翻译）</li></ul></li><li><p>She made an abrupt decision to move to another city.</p><ul><li>她突然决定搬到另一个城市。（中文翻译）</li></ul></li><li><p>The path led to an abrupt cliff edge.</p><ul><li>小径通向一个陡峭的悬崖边缘。（中文翻译）</li></ul></li></ol><h3 id="词根分析-3"><a href="#词根分析-3" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“ab-“ 是一个前缀，表示远离、脱离或相反。</li><li>“-rupt” 是词根，来源于拉丁语 “rumpere”，意为打破、中断。</li></ul><h3 id="词缀分析-3"><a href="#词缀分析-3" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ab-“ 前缀还出现在其他单词中，如 “abandon”（放弃）和 “abnormal”（不正常的）。</li><li>“-rupt” 词根也出现在其他单词中，如 “bankrupt”（破产）和 “disrupt”（中断）。</li></ul><h3 id="发展历史和文化背景-3"><a href="#发展历史和文化背景-3" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“abrupt” 这个词来自拉丁语的 “abruptus”，”ab-“ 前缀和 “rumpere” 结合，字面意思是“打断”或“突然中断”。在欧美文化中，”abrupt” 描述的是一种突然、无预兆的变化或行为，有时带有负面的含义，比如突然的失业或关系破裂。</p><h3 id="单词变形-3"><a href="#单词变形-3" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：abruptness</li><li>副词：abruptly</li><li>动词：没有直接相关的动词形式，但可以使用相关的动词，如 “abruptly interrupt”（突然打断）。</li></ul><h3 id="记忆辅助-3"><a href="#记忆辅助-3" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “abrupt” 这个词可以联想到 “a abrupt break”，即“一个突然的断裂”，帮助你记忆它的突然和中断的含义。</p><h3 id="小故事-3"><a href="#小故事-3" class="headerlink" title="小故事"></a>小故事</h3><p>One day, an abrupt storm swept through the village. Homes were damaged, trees were uprooted, and the villagers were taken by surprise. They had to quickly find shelter to stay safe.</p><ul><li>一天，一场突如其来的风暴席卷了村庄。房屋受损，树木被连根拔起，村民们感到措手不及。他们不得不迅速寻找避难所以确保安全。</li></ul><p>The story highlights the adjective “abrupt” by describing a sudden event that caused disruption, which is typical of the word’s meaning.</p><ul><li>这个故事通过描述一个突然事件引起的混乱，突出了形容词 “abrupt”，这是该词含义的典型体现。</li></ul><hr><h2 id="absence"><a href="#absence" class="headerlink" title="absence"></a>absence</h2><h3 id="分析词义-4"><a href="#分析词义-4" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Absence” 这个词在英语中通常指的是某人或某物不在一个地方或某个情况中没有出现的状态。它也可以指缺乏某物或某种特质。</p><h3 id="列举例句-4"><a href="#列举例句-4" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>His absence from the meeting was noted by everyone.</p><ul><li>他缺席了会议，大家都注意到了。</li></ul></li><li><p>There was an absence of evidence to support the theory.</p><ul><li>没有证据支持这个理论。</li></ul></li><li><p>The teacher noticed the absence of attention in the students during the lecture.</p><ul><li>老师注意到在讲座期间学生们注意力不集中。</li></ul></li></ol><h3 id="词根分析-4"><a href="#词根分析-4" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Absence” 的词根是 “absent”，意为“不在场的”。前缀 “abs-“ 源自拉丁语 “ab-“，意味着“从…离开”。</p><h3 id="词缀分析-4"><a href="#词缀分析-4" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “abs-“：表示“远离”或“离开”。</li><li>词根 “-sent-“：来自拉丁语 “esse”，意为“存在”。</li><li>后缀 “-ence”：通常用于动词词根后，构成抽象名词，表示“状态”或“行为”。</li></ul><p>其他带有相同词缀的单词：</p><ul><li>“abandon”（放弃）带有 “abs-“ 前缀。</li><li>“appearance”（出现）和 “existence”（存在）都有 “-ence” 后缀。</li></ul><h3 id="发展历史和文化背景-4"><a href="#发展历史和文化背景-4" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Absence” 这个词源自拉丁语 “absentia”，最初在法律用语中使用，指某人未出席法庭。后来这个词的意义扩展到日常生活中，泛指任何形式的缺席或缺乏。</p><h3 id="单词变形-4"><a href="#单词变形-4" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：absences（复数）</li><li>形容词：absent（缺席的）</li><li>动词短语：be absent from（缺席，不在）</li></ul><h3 id="记忆辅助-4"><a href="#记忆辅助-4" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了帮助记忆 “absence”，可以联想 “abs”（像 “abs” 在健身中代表腹肌）和 “ence”，想象你的注意力或某人就像腹肌一样，从你的视野或场合中“缺席”了。</p><h3 id="小故事-4"><a href="#小故事-4" class="headerlink" title="小故事"></a>小故事</h3><p>John found himself in a quiet classroom, the absence of his classmates making the room feel eerie. It turned out to be a misunderstanding about the exam date.</p><p>约翰发现自己在一个安静的教室里，同学们的缺席让教室显得有些诡异。原来这是关于考试日期的一个误会。</p><p>教室里静悄悄的，约翰环顾四周，发现只有他一个人。他开始疑惑，是不是记错了考试日期。这个“缺席”的经历让他印象深刻。</p><hr><h2 id="absorb"><a href="#absorb" class="headerlink" title="absorb"></a>absorb</h2><h3 id="分析词义-5"><a href="#分析词义-5" class="headerlink" title="分析词义"></a>分析词义</h3><p>“absorb” 这个单词是动词，意味着“吸收”，就像海绵吸水一样。它可以用来指物理上的吸收，如液体被纸巾吸收；也可以指比喻意义上的吸收，如注意力被某事物完全吸收。</p><h3 id="列举例句-5"><a href="#列举例句-5" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The sponge absorbed the water quickly.<ul><li>海绵很快把水吸干了。</li></ul></li><li>She was so absorbed in her book that she didn’t hear the doorbell.<ul><li>她看书看得太入神，连门铃都没听见。</li></ul></li><li>The company has absorbed several smaller businesses over the past few years.<ul><li>过去几年里，这家公司兼并了几家小企业。</li></ul></li></ol><h3 id="词根分析-5"><a href="#词根分析-5" class="headerlink" title="词根分析"></a>词根分析</h3><p>“absorb” 的词根是 “sorb”，意味着“吸收”。前缀 “ab-“ 表示“远离”或“完全”。</p><h3 id="词缀分析-5"><a href="#词缀分析-5" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “ab-“: 表示方向或程度，如 “abduct”（绑架）,”abandon”（放弃）。</li><li>词根 “-sorb-“: 来自拉丁语 “sorbēre”，意为“吸收”。</li><li>后缀 “-b-“: 在这里起到连接作用，没有特定的意义。</li><li>后缀 “-orb-“: 变为 “-sorb-“，形式变化。</li></ul><h3 id="发展历史和文化背景-5"><a href="#发展历史和文化背景-5" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Absorb” 这个词源于拉丁语的 “sorbēre”，最初用于描述物理上的吸收现象。随着时间的发展，它的意义扩展到了心理或文化层面的“吸收”，例如信息、知识或文化的吸收。</p><h3 id="单词变形-5"><a href="#单词变形-5" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式: absorbency（吸收能力）</li><li>形容词形式: absorbent（能吸收的）</li><li>动词变形:<ul><li>现在分词: absorbing（正在吸收）</li><li>过去式: absorbed</li><li>过去分词: absorbed</li></ul></li></ul><h3 id="记忆辅助-5"><a href="#记忆辅助-5" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>可以将 “absorb” 和其名词形式 “absorbency” 一起记忆，通过构造句子来帮助记忆，如：“The absorbency of the sponge depends on how well it can absorb water.”</p><h3 id="小故事-5"><a href="#小故事-5" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was fascinated by the absorbent powers of a new type of sponge. He put it in a bowl of water and watched it absorb every drop. Amazed, he thought, “This is truly an absorbent wonder!”</p><p>汤姆对新型的海绵吸收能力非常着迷。他把海绵放在一碗水里，看着它吸干每一滴水。他惊讶地想：“这真是个吸收的奇迹！”</p><p>中文翻译：汤姆对新型海绵的吸水能力非常感兴趣。他把海绵放在一碗水里，看着它把水全部吸干。他惊讶地想：“这真是一种神奇的吸水材料！”</p><hr><h2 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h2><h3 id="分析词义-6"><a href="#分析词义-6" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Abstract”是一个形容词和名词，作为形容词时，它的意思是“抽象的，理论上的”，指不具体、不明确的，常用于描述概念、思想或艺术作品。作为名词，它指的是“摘要，梗概”，通常用于学术文章或报告前的简短总结。</p><h3 id="列举例句-6"><a href="#列举例句-6" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The concept of time is quite abstract and difficult to define clearly.<ul><li>时间这个概念非常抽象，很难被清楚地定义。</li></ul></li><li>She prefers abstract art to realistic paintings.<ul><li>她更喜欢抽象艺术而非写实绘画。</li></ul></li><li>The abstract of the research paper gives a brief overview of the study’s findings.<ul><li>研究论文的摘要简要概述了研究的发现。</li></ul></li></ol><h3 id="词根分析-6"><a href="#词根分析-6" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Abstract”来自拉丁语”abstractus”，意为“被带走的”，字面意思是“从…中抽取出来”。</p><h3 id="词缀分析-6"><a href="#词缀分析-6" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ab-“ 是前缀，意为“从…”，”tract-“ 是词根，意为“拖，拉”，”-us” 是拉丁语形容词后缀。</li></ul><h3 id="发展历史和文化背景-6"><a href="#发展历史和文化背景-6" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Abstract”在英语中的使用起源于14世纪，最初用于描述从具体事物中提取出来的概念或思想。在艺术领域，抽象艺术强调形式和色彩，而不是描绘具体的物体。</p><h3 id="单词变形-6"><a href="#单词变形-6" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词: abstraction（抽象概念）</li><li>动词: abstract（摘要，提炼）</li><li>形容词比较级: more abstract</li><li>形容词最高级: most abstract</li></ul><h3 id="记忆辅助-6"><a href="#记忆辅助-6" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住”abstract”可以通过联想记忆法：ab（看作“a boat”，一条船）+ tract（拖，拉）→想象一条船拖着很多概念和想法，形成抽象的思维。</p><h3 id="小故事-6"><a href="#小故事-6" class="headerlink" title="小故事"></a>小故事</h3><p>Alice couldn’t understand the abstract painting. To her, it was just a confusing mix of colors. But her friend explained that abstract art allows the viewer to see what they want, making every viewing experience unique.</p><p>爱丽丝看不懂那幅抽象画。对她来说，那只是一堆混乱的颜色。但她的朋友解释说，抽象艺术允许观众看到他们想看的东西，使得每一次观看都是独一无二的体验。</p><hr><h2 id="absurd"><a href="#absurd" class="headerlink" title="absurd"></a>absurd</h2><h3 id="分析词义-7"><a href="#分析词义-7" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Absurd” 这个单词是一个形容词，意思是“荒谬的，不合理的，可笑的”。当我们说某件事或某个观点是absurd时，我们是指它完全不符合逻辑或常识，以至于让人觉得难以置信或可笑。</p><h3 id="列举例句-7"><a href="#列举例句-7" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The idea that the Earth is flat is absurd.</p><ul><li>地球是平的这个想法是荒谬的。</li></ul></li><li><p>He found it absurd that people would wait in line for hours just to buy a new phone.</p><ul><li>他觉得人们为了买一部新手机而排队等上几个小时是荒唐的。</li></ul></li><li><p>The situation reached an absurd level when they started arguing over the color of the sky.</p><ul><li>当他们开始争论天空的颜色时，情况变得荒谬起来。</li></ul></li></ol><h3 id="词根分析-7"><a href="#词根分析-7" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Absurd” 这个单词来源于拉丁语 “absurdus”，这个词在拉丁语中意味着“discordant”或“out of tune”，后来发展出了“荒谬”的含义。</p><ul><li>词根：拉丁语 “surdus” 意为“聋的”，前缀 “ab-“ 表示“远离”或“脱离”。</li></ul><h3 id="词缀分析-7"><a href="#词缀分析-7" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀：ab- 表示“远离”或“脱离”。</li><li>词根：-surd- 源自拉丁语 “surdus”，意为“聋的”。</li><li>后缀：-d- 和 -urd- 之间的连接元音，在某些词形变化中帮助发音。</li><li>后缀：-absurd- 后面的无意义后缀，形成形容词。</li></ul><p>其他包含词根 -surd- 的单词：</p><ul><li>surd (数学用语，表示无理数的一部分)</li><li>deaf (聋的)</li></ul><h3 id="发展历史和文化背景-7"><a href="#发展历史和文化背景-7" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Absurd” 这个词在哲学和文化中有着重要的地位，特别是在20世纪的荒诞派戏剧中。”Theatre of the Absurd”（荒诞派戏剧）是一个戏剧运动的名称，它强调人类存在的荒谬性，以及人类努力寻找生命意义时的无能为力。</p><h3 id="单词变形-7"><a href="#单词变形-7" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式：absurdity</li><li>副词形式：absurdly（荒谬地）</li></ul><h3 id="记忆辅助-7"><a href="#记忆辅助-7" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “absurd” 这个单词，你可以想象一个场景：一个带着耳机的人（前缀 ab-，仿佛耳机“远离”了正确的声音），因为他听不到外面的声音，所以他做出了一个非常荒谬的决定（词根 -surd-，类似于“聋的”），这个决定让周围的人觉得非常可笑。</p><h3 id="小故事-7"><a href="#小故事-7" class="headerlink" title="小故事"></a>小故事</h3><p>Once, in a small town, a man named Joe claimed that chickens could fly to the moon. The townsfolk found his claim absurd and laughed it off. Joe, however, was determined to prove them wrong.</p><p>在一个小镇上，有个人叫乔，他声称鸡能飞到月球上。镇上的人觉得他的说法很荒谬，一笑置之。但乔却决心证明他们错了。</p><p>小镇上的人认为乔的想法很荒谬，但他依然坚持己见。</p><p>(中文翻译：在一个小镇上，有个名叫乔的人声称鸡能飞到月球上。镇上的人认为这很荒谬，只是把它当做一个笑话。但乔却决心证明他们的看法是错的。)</p><hr><h2 id="abundance"><a href="#abundance" class="headerlink" title="abundance"></a>abundance</h2><h3 id="分析词义-8"><a href="#分析词义-8" class="headerlink" title="分析词义"></a>分析词义</h3><p>“abundance” 是一个名词，意思是“大量”、“丰盛”或“充裕”。它用来描述某个东西数量很多，超过了普通的或者足够的量。</p><h3 id="列举例句-8"><a href="#列举例句-8" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The garden is filled with an abundance of colorful flowers.（花园里开着丰富多彩的鲜花。）</li><li>The region has an abundance of natural resources.（这个地区有丰富的自然资源。）</li><li>She lives her life with an abundance of joy and gratitude.（她过着充满欢乐和感激的生活。）</li></ol><h3 id="词根分析-8"><a href="#词根分析-8" class="headerlink" title="词根分析"></a>词根分析</h3><p>“abundance” 来自拉丁词“abundare”，意思是“溢出”，“泛滥”。</p><ul><li>词根 “ab-“ 意味着“从…出来”或“远离”。</li><li>词根 “-und-“ 来自 “undare”，意味着“波浪”，在这里引申为“溢出”。</li><li>后缀 “-ance” 通常加在动词后面，表示“状态”或“性质”。</li></ul><h3 id="词缀分析-8"><a href="#词缀分析-8" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “ab-“：出现在许多拉丁词中，如 “abandon”（放弃）,”abnormal”（不正常）。</li><li>后缀 “-ance”：出现在如 “difference”（不同）,”importance”（重要）等词中。</li></ul><h3 id="发展历史和文化背景-8"><a href="#发展历史和文化背景-8" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“abundance” 一词在中世纪英语中开始使用，来自古法语 “abondance”，而古法语则借自拉丁语。在欧美文化中，”abundance” 常用来形容物质或精神的丰富，是积极生活态度和繁荣的象征。</p><h3 id="单词变形-8"><a href="#单词变形-8" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>形容词：abundant（丰富的，大量的）</li><li>副词：abundantly（丰富地，大量地）</li></ul><h3 id="记忆辅助-8"><a href="#记忆辅助-8" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记忆 “abundance”，可以联想“ab-”（像是从一个地方出来）和 “-undance”（听起来像“波浪”，想象一大波东西涌出来，形成丰盛的景象）。</p><h3 id="小故事-8"><a href="#小故事-8" class="headerlink" title="小故事"></a>小故事</h3><p>In the countryside, the harvest season brought an abundance of crops. Fields were golden with wheat, and orchards heavy with fruit. Life was abundant, and the community celebrated the richness of nature’s gift.</p><p>在乡村，收获季节带来了丰富的作物。麦田金黄一片，果园里果实累累。生活丰富多彩，社区的人们庆祝大自然丰富的赠礼。</p><p>中文翻译：在乡村，丰收的季节带来了丰富的农作物。田野里麦子金黄，果园里硕果累累。生活显得十分丰盈，社区的人们一起庆祝大自然慷慨的馈赠。</p><hr><h2 id="abundant"><a href="#abundant" class="headerlink" title="abundant"></a>abundant</h2><h3 id="分析词义-9"><a href="#分析词义-9" class="headerlink" title="分析词义"></a>分析词义</h3><p>“abundant” 是一个形容词，意思是“大量的，充足的，丰富的”。它用来描述某个东西数量很多，超过了正常或必要的量。</p><h3 id="列举例句-9"><a href="#列举例句-9" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The garden is abundant with fruits and vegetables.<ul><li>花园里结满了水果和蔬菜。</li></ul></li><li>The region is known for its abundant natural resources.<ul><li>这个地区以其丰富的自然资源而闻名。</li></ul></li><li>She lives an abundant life, surrounded by friends and family.<ul><li>她生活富足，被朋友和家人环绕。</li></ul></li></ol><h3 id="词根分析-9"><a href="#词根分析-9" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“ab-“ 是一个前缀，意为“从…出来，远离”。</li><li>“-undant” 来自动词 “undare”，意为“波浪”，在这里表示“像波浪一样不断涌出”。</li></ul><h3 id="词缀分析-9"><a href="#词缀分析-9" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “ab-“ 还可以出现在其他单词中，如 “abandon”（放弃），”abnormal”（不正常的）。</li><li>后缀 “-ant” 通常用来形成形容词，表示“有…性质的”，例如 “ignorant”（无知的），”fluent”（流利的）。</li></ul><h3 id="发展历史和文化背景-9"><a href="#发展历史和文化背景-9" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“abundant” 这个词源自拉丁语 “abundare”，意味着“过量，溢出”。在欧美文化中，它经常被用来形容物质或精神的丰富，比如感恩节时对食物和生活的丰盛表达感激。</p><h3 id="单词变形-9"><a href="#单词变形-9" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式：abundance（n. 丰富，充足）</li><li>动词形式：abound（v. 大量存在，富足）</li><li>形容词比较级：more abundant</li><li>形容词最高级：most abundant</li></ul><h3 id="记忆辅助-9"><a href="#记忆辅助-9" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过联想记忆来记住 “abundant” 这个词：想象一个水龙头开到最大，水“ab-”（从里面）涌出来，”undant” 如波浪般不断涌出，形象地展现了“丰富，充足”的概念。</p><h3 id="小故事-9"><a href="#小故事-9" class="headerlink" title="小故事"></a>小故事</h3><p>One morning, the farmer found his field abundant with ripe wheat. Overjoyed, he knew the harvest would be bountiful this year.</p><ul><li>一天早上，农夫发现他的田地里长满了成熟的小麦。他欣喜若狂，知道今年的收成将会丰盛。</li></ul><p>中文翻译：</p><ul><li>一天早晨，农夫发现他的田野里到处都是成熟的小麦。他非常高兴，因为这预示着今年的收成会很好。</li></ul><hr><h2 id="abuse"><a href="#abuse" class="headerlink" title="abuse"></a>abuse</h2><h3 id="分析词义-10"><a href="#分析词义-10" class="headerlink" title="分析词义"></a>分析词义</h3><p>“abuse” 这个词通常指不正确或过度地使用某物，或者对某人进行伤害、侮辱等不当行为。在中文中，我们可以将其理解为“滥用”、“虐待”或“侮辱”。</p><h3 id="列举例句-10"><a href="#列举例句-10" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>Do not abuse the privileges given to you.<br>不要滥用你所得到的特权。</li><li>Child abuse is a serious crime that should be reported to the police.<br>儿童虐待是一项严重犯罪，应该报告给警察。</li><li>He was fired for verbally abusing his colleagues.<br>他因为言语侮辱同事而被解雇。</li></ol><h3 id="词根分析-10"><a href="#词根分析-10" class="headerlink" title="词根分析"></a>词根分析</h3><p>“abuse” 的词根是 “use”，意为“使用”。前缀 “ab-“ 通常表示“远离”或“不正常”，在这里增加了“错误使用”的含义。</p><h3 id="词缀分析-10"><a href="#词缀分析-10" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “ab-“</li><li>词根 “use”</li></ul><p>其他带有 “ab-“ 前缀的单词：</p><ul><li>abnormal（不正常的）</li><li>abscond（潜逃）</li></ul><h3 id="发展历史和文化背景-10"><a href="#发展历史和文化背景-10" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“abuse” 这个词来自拉丁语 “abusus”，意为“过度使用”或“误用”。在欧美文化中，这个词涵盖了对物品的滥用、对权力的滥用，以及对人身体或心理的虐待。</p><h3 id="单词变形-10"><a href="#单词变形-10" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：abuse（滥用）</li><li>动词：abuses, abusing（正在滥用）</li><li>形容词：abusive（虐待的，侮辱的）</li></ul><p>固定搭配：</p><ul><li>drug abuse（药物滥用）</li><li>abuse of power（权力滥用）</li></ul><h3 id="记忆辅助-10"><a href="#记忆辅助-10" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “abuse” 这个词，可以联想记忆：“ab-”（看作“啊不”），”use”（使用），即“啊，不可以这样使用”，就是“滥用”的意思。</p><h3 id="小故事-10"><a href="#小故事-10" class="headerlink" title="小故事"></a>小故事</h3><p>One day, Tom found his little brother, Tim, playing with his valuable camera. “Don’t abuse that camera!” Tom shouted. Tim stopped immediately, realizing his mistake.<br>有一天，汤姆发现他弟弟蒂姆在玩他的昂贵相机。”不要滥用那台相机！”汤姆大喊。蒂姆立刻停了下来，意识到自己的错误。</p><p>中文翻译：有一天，汤姆发现他的弟弟蒂姆在玩他的贵重相机。”不要滥用那台相机！”汤姆叫道。蒂姆立刻停止了，意识到自己做错了事。</p><hr><h2 id="academic"><a href="#academic" class="headerlink" title="academic"></a>academic</h2><h3 id="分析词义-11"><a href="#分析词义-11" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Academic” 这个单词既可以作形容词，也可以作名词。作为形容词时，它通常指的是与学校、教育或学术研究相关的。在中文中，我们可以把它理解为“学术的”、“学院的”、“理论的”。</p><h3 id="列举例句-11"><a href="#列举例句-11" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>He is an academic with a strong interest in ancient history.</p><ul><li>他是一位对古代历史有浓厚兴趣的学者。</li></ul></li><li><p>This journal is considered one of the most prestigious academic publications in the field.</p><ul><li>这个期刊被认为是该领域最有声望的学术出版物之一。</li></ul></li><li><p>The conference was an excellent opportunity for academics to share their research.</p><ul><li>这个会议为学者们分享他们的研究成果提供了一个极好的机会。</li></ul></li></ol><h3 id="词根分析-11"><a href="#词根分析-11" class="headerlink" title="词根分析"></a>词根分析</h3><p>词根为 “academ-“, 来自古希腊语 “akadēmia”，原意是“健身场所”，后来转义为“学习的地方”。</p><h3 id="词缀分析-11"><a href="#词缀分析-11" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀：无</li><li>词根：academ-</li><li>后缀：-ic，用于形容词，表示“与…有关的”</li></ul><h3 id="发展历史和文化背景-11"><a href="#发展历史和文化背景-11" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Academic” 一词起源于古希腊雅典的 “akadēmia”，那里是哲学家柏拉图讲学的地方。后来，这个词逐渐演变为指代所有与学习和学术研究相关的事物。</p><h3 id="单词变形-11"><a href="#单词变形-11" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：academia（学术界）</li><li>形容词：academical（学术的，较少使用）</li><li>动词：无直接相关动词</li><li>其他：academically（副词，学术上地）</li></ul><h3 id="记忆辅助-11"><a href="#记忆辅助-11" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “academic”，你可以想象自己在一个充满书籍和学术氛围的“academy”学院里，这里的每个人都在追求“-ic”学术上的成就。</p><h3 id="小故事-11"><a href="#小故事-11" class="headerlink" title="小故事"></a>小故事</h3><p>In the quiet library, surrounded by stacks of academic books, Tom found inspiration for his research. He spent hours buried in the academic world, exploring ancient cultures.</p><p>在安静的图书馆里，被一堆学术书籍围绕着，汤姆找到了他研究的灵感。他花了好几个小时沉浸在学术的世界里，探索古老文化。</p><p>在充满学术气息的图书馆中，汤姆被层层叠叠的书籍包围着，他在这里找到了研究的灵感。他花了数小时深入学术领域，钻研古代文化。</p><hr><h2 id="accelerate"><a href="#accelerate" class="headerlink" title="accelerate"></a>accelerate</h2><h3 id="分析词义-12"><a href="#分析词义-12" class="headerlink" title="分析词义"></a>分析词义</h3><p>“accelerate” 是一个动词，意思是使某事物速度变快，或者使过程加快。在日常生活中，我们可以用它来描述车辆加快速度，或者项目、进程的加快。</p><h3 id="列举例句-12"><a href="#列举例句-12" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The driver accelerated the car to pass the truck. （司机加速超过了那辆卡车。）<ul><li>场景：在公路上超车。</li></ul></li><li>We need to accelerate our efforts to finish the project on time. （我们需要加快努力，按时完成项目。）<ul><li>场景：工作环境中。</li></ul></li><li>The growth of the city is accelerating as more people move there. （随着越来越多的人搬去那里，城市的增长速度正在加快。）<ul><li>场景：描述城市发展。</li></ul></li></ol><h3 id="词根分析-12"><a href="#词根分析-12" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“acceler” 是词根，来自拉丁语 “accelerare”，意为“使快速”。</li><li>衍生单词：acceleration（加速），accelerator（加速器），decelerate（减速）</li></ul><h3 id="词缀分析-12"><a href="#词缀分析-12" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“accelerate” 中，”ate” 是动词后缀，表示“做……的动作”。</li><li>相同词缀的单词：agitate（搅动），calculate（计算）</li></ul><h3 id="发展历史和文化背景-12"><a href="#发展历史和文化背景-12" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“accelerate” 这个词起源于17世纪的拉丁语 “accelerare”。在欧美文化中，它不仅用于描述物理上的速度增加，也常用于比喻，如经济发展、科技进步等方面的速度提升。</p><h3 id="单词变形-12"><a href="#单词变形-12" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：acceleration</li><li>形容词：accelerated（加速的），accelerative（促进加速的）</li><li>副词：accelerately（加速地，非正式用法）</li><li>固定搭配：accelerate the pace of（加快……的步伐）</li></ul><h3 id="记忆辅助-12"><a href="#记忆辅助-12" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>可以将 “accelerate” 和 “celebrate” 两个词联想在一起，因为它们都有 “celebr” 这个部分。想象一下，我们在庆祝（celebrate）的时候，时间过得很快，就像是在加速（accelerate）。</p><h3 id="小故事-12"><a href="#小故事-12" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was driving his new car. He felt excited when he pressed the accelerator and the car accelerated quickly. He wanted to see how fast it could go.</p><p>汤姆开着他的新车。当他按下油门，车快速加速时，他感到很兴奋。他想知道车能开多快。</p><p>中文翻译：汤姆开着他的新车，当他按下加速踏板，车迅速加速，这让他感到很激动。他想要知道这辆车能够开多快。</p><hr><h2 id="acceptance"><a href="#acceptance" class="headerlink" title="acceptance"></a>acceptance</h2><h3 id="分析词义-13"><a href="#分析词义-13" class="headerlink" title="分析词义"></a>分析词义</h3><p>“acceptance” 是一个名词，意味着接受或者认可。它可以指对某个事物、情况或决定的同意，或者是无条件的接纳。</p><h3 id="列举例句-13"><a href="#列举例句-13" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The acceptance of the job offer was conditional on a pay rise.<ul><li>接受这份工作邀请是以加薪为条件的。</li></ul></li><li>The new policy has gained widespread acceptance among the public.<ul><li>新政策已经获得了公众的广泛接受。</li></ul></li><li>His acceptance speech at the awards ceremony was both humble and inspiring.<ul><li>他颁奖典礼上的获奖感言既谦逊又鼓舞人心。</li></ul></li></ol><h3 id="词根分析-13"><a href="#词根分析-13" class="headerlink" title="词根分析"></a>词根分析</h3><p>“acceptance” 来自动词 “accept”，词根是 “cept”，意为“抓取”或“接受”。</p><h3 id="词缀分析-13"><a href="#词缀分析-13" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ac-“ 是前缀，表示强调或动作的开始。</li><li>“-cept-“ 是词根，表示“抓取”或“接受”。</li><li>“-ance” 是后缀，通常用来形成名词，表达“状态”或“行为”。</li></ul><p>其他使用相同词根的单词：</p><ul><li>except（除了）</li><li>exception（例外）</li><li>concept（概念）</li><li>percept（知觉）</li></ul><h3 id="发展历史和文化背景-13"><a href="#发展历史和文化背景-13" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“acceptance” 这个词源自拉丁语 “acceptare”，意为”接收”或”抓取”。在欧美文化中，”acceptance” 常与包容、同意和社会认可相关联。</p><h3 id="单词变形-13"><a href="#单词变形-13" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：acceptance（接受）</li><li>动词：accept（接受）</li><li>形容词：acceptable（可接受的）</li><li>副词：acceptably（可接受地）</li></ul><p>固定搭配：</p><ul><li>give acceptance to（给予接受）</li><li>with acceptance（欣然地）</li></ul><h3 id="记忆辅助-13"><a href="#记忆辅助-13" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “acceptance” 可以通过将其拆分为 “ac-“（强调）+”cept”（抓取）+”-ance”（状态），想象你在强调抓取一个积极的状态，那就是接受。</p><h3 id="小故事-13"><a href="#小故事-13" class="headerlink" title="小故事"></a>小故事</h3><p>Tom received a gift from his friend. At first, he was hesitant, but then he showed acceptance with a warm smile. It was a book he had always wanted to read.</p><ul><li>汤姆收到了朋友的礼物。起初，他有些犹豫，但随后他带着温暖的微笑表示了接受。这是一本他一直想读的书。</li></ul><p>中文翻译：<br>汤姆收到了朋友的礼物。一开始他有点犹豫，但后来他微笑着表示了接受。这是一本他一直想读的书。</p><hr><h2 id="access"><a href="#access" class="headerlink" title="access"></a>access</h2><h3 id="分析词义-14"><a href="#分析词义-14" class="headerlink" title="分析词义"></a>分析词义</h3><p>“access” 这个词在英语中通常用作名词或动词。作为名词，它指的是“进入或使用某物的方法、权利或机会”。作为动词，”access” 意味着“到达、进入、获取”。</p><h3 id="列举例句-14"><a href="#列举例句-14" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p><strong>Verb</strong> - We need to access the internet to finish our research.<br><strong>中文</strong> - 我们需要上网来完成我们的研究。</p></li><li><p><strong>Noun</strong> - The students have free access to the library.<br><strong>中文</strong> - 学生们可以免费进入图书馆。</p></li><li><p><strong>Noun</strong> - The remote control gives you easy access to all the functions of the TV.<br><strong>中文</strong> - 遥控器让你能够轻松使用电视的所有功能。</p></li></ol><h3 id="词根分析-14"><a href="#词根分析-14" class="headerlink" title="词根分析"></a>词根分析</h3><p>“access” 这个词没有明显的词根，但是可以从它的拉丁语来源来看。”Accessus” 在拉丁语中意味着“接近”或“进入”。</p><h3 id="词缀分析-14"><a href="#词缀分析-14" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li><strong>无明显的词缀</strong>，但”access” 的变形 “accessible” 包含了后缀 “-ible” 或 “-able”，这通常在英语中意味着“能够…的”。</li></ul><h3 id="发展历史和文化背景-14"><a href="#发展历史和文化背景-14" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Access” 来自于拉丁语 “accessus”，在14世纪晚期进入英语。在现代，这个单词经常用于技术领域，特别是在谈论获取信息或系统时。</p><h3 id="单词变形-14"><a href="#单词变形-14" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li><strong>Noun</strong>: Accessibility (可及性)</li><li><strong>Adjective</strong>: Accessible (可接近的，可使用的)</li><li><strong>Verb</strong>: Accessed (过去式和过去分词)</li></ul><h3 id="记忆辅助-14"><a href="#记忆辅助-14" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “access”，你可以联想到“access”是“AccessException”（异常访问）的一部分，这在编程中是一个常见术语，可以帮助你记住这个单词。</p><h3 id="小故事-14"><a href="#小故事-14" class="headerlink" title="小故事"></a>小故事</h3><p>Tom needed to access the files on his office computer from home. He tried using a remote access app but couldn’t connect. Finally, he called the IT department for help.</p><p>汤姆需要从家里访问办公室电脑上的文件。他尝试使用一个远程访问应用程序，但连接不上。最后，他打电话给IT部门寻求帮助。</p><p>中文翻译：<br>汤姆想要从家里访问他办公室电脑里的文件。他试图使用一个远程访问软件，但是没能成功连接。最终，他给IT部门打了电话求援。</p><hr><h2 id="accessory"><a href="#accessory" class="headerlink" title="accessory"></a>accessory</h2><h3 id="分析词义-15"><a href="#分析词义-15" class="headerlink" title="分析词义"></a>分析词义</h3><p>“accessory” 是一个英文单词，它在中文中的意思是“附件”或“配件”。它通常指与主要物品相配的、用来增加功能或美观的小物件。在时尚领域，它指的是搭配服装的饰品，如手表、项链等。在法律用语中，”accessory” 还可以指帮助他人犯罪的人。</p><h3 id="列举例句-15"><a href="#列举例句-15" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>I bought a new handbag and an accessory to match it.<br>我买了一个新手提包，还有一个与之搭配的饰品。</p></li><li><p>In the crime, he was not the main perpetrator but an accessory.<br>在这起犯罪中，他并非主犯，而是从犯。</p></li><li><p>You can find various accessories for your phone in the electronics store.<br>你可以在电子商店找到各种手机配件。</p></li></ol><h3 id="词根分析-15"><a href="#词根分析-15" class="headerlink" title="词根分析"></a>词根分析</h3><p>“accessory” 的词根是 “access”，意思是“接近”或“进入”。加上后缀 “-ory”，通常表示“与……有关的”或“用于……的”。</p><h3 id="词缀分析-15"><a href="#词缀分析-15" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀：无</li><li>词根：access（接近）</li><li>后缀：-ory（表示与某事物相关的）</li></ul><p>其他含有词根 “access” 的单词：</p><ul><li>access（进入）</li><li>accessible（可接近的）</li><li>accessibility（可接近性）</li></ul><h3 id="发展历史和文化背景-15"><a href="#发展历史和文化背景-15" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“accessory” 这个词源于拉丁语 “accessus”，意为“接近”或“到达”。在英语中，它最早用于描述那些使某物更容易接近或使用的物品。在时尚界，它逐渐演变为指那些增加服装美观性的配饰。</p><h3 id="单词变形-15"><a href="#单词变形-15" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：accessory（配件）</li><li>复数：accessories（配件）</li><li>形容词：accessory-related（与配件相关的）</li></ul><h3 id="记忆辅助-15"><a href="#记忆辅助-15" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “accessory” 这个词，可以联想记忆：ac（看作“啊”，类似于惊叹）+ cess（看作“走”）+ ory（看作“哦”）——“啊，走路也需要配件（比如鞋），哦！”</p><h3 id="小故事-15"><a href="#小故事-15" class="headerlink" title="小故事"></a>小故事</h3><p>Tom wanted to give his girlfriend a surprise. He bought a beautiful dress and an accessory to match it. When she saw the gift, she couldn’t help saying, “Wow, this is so perfect!” </p><p>汤姆想给他的女朋友一个惊喜。他买了一件漂亮的连衣裙和一件搭配的饰品。当她看到这个礼物时，忍不住说：“哇，这真是太完美了！”</p><p>中文翻译：汤姆想给他的女朋友一个惊喜。他买了一件美丽的连衣裙和一件相配的首饰。当她看到这份礼物时，不禁感叹：“哇，这真是完美极了！”</p><hr><h2 id="accident"><a href="#accident" class="headerlink" title="accident"></a>accident</h2><h3 id="分析词义-16"><a href="#分析词义-16" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Accident” 是一个名词，指的是一个不期望发生的事件或情况，通常会造成伤害、损害或损失。在日常生活中，它通常指交通事故，但在广义上也可以指任何意外的、非计划的事件。</p><h3 id="列举例句-16"><a href="#列举例句-16" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>He had an accident at work and broke his leg.</p><ul><li>他工作时出了意外，腿骨折了。（工作场所事故）</li></ul></li><li><p>The car accident blocked the traffic for hours.</p><ul><li>车祸导致交通堵塞了好几个小时。（交通事故）</li></ul></li><li><p>It was just an accident; she didn’t mean to break the vase.</p><ul><li>这只是一个意外，她不是故意打破花瓶的。（无意中的事件）</li></ul></li></ol><h3 id="词根分析-16"><a href="#词根分析-16" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Accident” 来自拉丁语 “accidere”，意为“发生”或“偶然发生”。词根 “cid” 表示“落下”或“发生”。</p><h3 id="词缀分析-16"><a href="#词缀分析-16" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “ac-“ 表示“加强”或“朝着”。</li><li>词根 “-cid-“ 表示“落下”或“发生”。</li><li>后缀 “-ent” 用于形成名词，表示“行动”或“状态”。</li></ul><p>没有发现特定的词缀，但与 “accident” 相关的词缀可以出现在其他单词中，例如：</p><ul><li>“Incident”（事件）含有前缀 “in-“（在内）和词根 “-cid-“.</li><li>“Decide”（决定）含有词根 “-cid-“ 和前缀 “de-“（完全）。</li></ul><h3 id="发展历史和文化背景-16"><a href="#发展历史和文化背景-16" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Accident” 一词在英语中的使用可以追溯到中世纪晚期，当时它从拉丁语借用到法律和宗教文本中。随着时间的发展，它逐渐扩展到日常语言中，用来描述任何不期望的或偶然发生的事件。</p><h3 id="单词变形-16"><a href="#单词变形-16" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词: accident</li><li>复数: accidents</li><li>形容词: accidental（意外的）</li></ul><h3 id="记忆辅助-16"><a href="#记忆辅助-16" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记忆 “accident” 这个单词，可以将它拆分为 “ac-“（加强）和 “-cid-“（发生），想象成一件被强调的、突然发生的事情，这样有助于记忆。</p><h3 id="小故事-16"><a href="#小故事-16" class="headerlink" title="小故事"></a>小故事</h3><p>One sunny morning, Jack was walking to school when suddenly, an accident happened. A bike slipped on the wet road and collided with a parked car. Jack quickly called for help.</p><p>一个阳光明媚的早晨，杰克在走路去学校的路上，突然发生了一起意外。一辆自行车在湿滑的路面上滑倒，撞上了一辆停着的车。杰克立刻打电话求救。</p><hr><h2 id="accommodate"><a href="#accommodate" class="headerlink" title="accommodate"></a>accommodate</h2><h3 id="分析词义-17"><a href="#分析词义-17" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Accommodate” 这个单词的意思是提供住宿或空间，也可以指适应或迎合某人。在中文里，我们可以把它理解为“提供住处”，“适应”或“迁就”。</p><h3 id="列举例句-17"><a href="#列举例句-17" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>Can you accommodate three more people at your house?<br>你家能再容纳三个人吗？（提供住处）</p></li><li><p>We need to accommodate the disabled by making the building accessible.<br>我们需要通过让建筑物可进入来适应残疾人。（适应）</p></li><li><p>The hotel is willing to accommodate special requests from guests.<br>这家酒店愿意迎合客人的特殊要求。（迎合）</p><p>中文翻译：</p><ol><li>你家能再提供住处给三个人吗？</li><li>我们需要让建筑物便于进入，以适应残疾人的需要。</li><li>这家酒店乐意满足客人的特殊要求。</li></ol></li></ol><h3 id="词根分析-17"><a href="#词根分析-17" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Accommodate” 的词根是 “mod”，来源于拉丁语 “modus” 意为 “measure” 或 “fit”。词根 “com-“ 表示 “with” 或 “together”。</p><h3 id="词缀分析-17"><a href="#词缀分析-17" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Ac-“ 是前缀，表示 “to” 或 “toward”。</li><li>“-mod-“ 是词根，表示适应或适合。</li><li>“-ate” 是后缀，通常用于动词，表示行为或过程。</li></ul><p>其他带有 “-mod-“ 词根的单词：</p><ul><li>Modify - 修改</li><li>Module - 模块</li></ul><p>带有 “-ate” 后缀的单词：</p><ul><li>Create - 创造</li><li>Celebrate - 庆祝</li></ul><h3 id="发展历史和文化背景-17"><a href="#发展历史和文化背景-17" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Accommodate” 这个词源自拉丁语 “accommodare”，原本意思是“使适合”或“调整”。在英语中，它的使用逐渐扩展到包括提供住宿在内的多种含义。在欧美文化中，这个词也暗示了一种愿意去适应或满足他人需求的礼貌和友好。</p><h3 id="单词变形-17"><a href="#单词变形-17" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：Accommodation（住宿，适应）</li><li>动词：Accommodates（现在时单数第三人称），Accommodated（过去时），Accommodating（现在分词），to Accommodate（不定式）</li><li>形容词：Accommodative（乐于助人的）</li></ul><p>固定搭配：</p><ul><li>Accommodate with - 用…来适应</li><li>Accommodate to - 适应…</li></ul><h3 id="记忆辅助-17"><a href="#记忆辅助-17" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “accommodate” 这个单词，我们可以通过它的词根 “mod” 联想到 “model”（模型），想象我们在调整或适应一个模型（情况&#x2F;空间），使之适合我们的需求。</p><h3 id="小故事-17"><a href="#小故事-17" class="headerlink" title="小故事"></a>小故事</h3><p>Tom needed to accommodate his friend who had nowhere to stay. He offered a room, making sure it was comfortable and clean. </p><p>汤姆需要为他那位无家可归的朋友提供住宿。他提供了一个房间，并确保它既舒适又干净。</p><p>中文翻译：<br>汤姆需要为他无处可去的朋友提供住处。他提供了一个房间，并确保房间既舒适又整洁。</p><hr><h2 id="accommodation"><a href="#accommodation" class="headerlink" title="accommodation"></a>accommodation</h2><h3 id="分析词义-18"><a href="#分析词义-18" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Accommodation” 这个词在英语中通常指的是住宿或者居住的地方，也可以指为某个人或团体提供的空间或者设施，使其能够适应或满足特定的需要。</p><h3 id="列举例句-18"><a href="#列举例句-18" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>When traveling, finding affordable accommodation is a top priority for many backpackers.<br>当旅行时，对许多背包客来说，找到负担得起的住宿是首要任务。（中文翻译：旅行时，许多背包客最关心的是找到便宜的住处。）</p></li><li><p>The hotel offers a range of accommodation options to suit different budgets.<br>这家酒店提供多种住宿选择，以适应不同的预算。（中文翻译：这家酒店根据不同的预算提供了各种住宿选项。）</p></li><li><p>The university provides special accommodations for students with disabilities.<br>大学为残疾学生提供特别的住宿设施。（中文翻译：大学为残障学生提供了特殊的住宿安排。）</p></li></ol><h3 id="词根分析-18"><a href="#词根分析-18" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“ac-“ 是一个前缀，意味着“朝向”或“加强”。</li><li>“-commod-“ 是词根，来自拉丁语 “commodus” 意为“方便的”或“适用的”。</li><li>“-ation” 是一个后缀，通常用来形成名词，表示过程或结果。</li></ul><h3 id="词缀分析-18"><a href="#词缀分析-18" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “ac-“ 在其他单词中，如 “accompany”（陪伴）或 “acquire”（获得）。</li><li>词根 “-commod-“ 在其他单词中，如 “commodity”（商品）或 “commode”（坐便器）。</li><li>后缀 “-ation” 在其他单词中，如 “information”（信息）或 “gradation”（渐变）。</li></ul><h3 id="发展历史和文化背景-18"><a href="#发展历史和文化背景-18" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Accommodation” 一词源自中古英语，从拉丁语 “accommodare” 发展而来，意为“使适应”或“提供方便”。在欧美文化中，这个词经常用于指临时居住的地方，如酒店、旅馆，也可以指长期居住的房屋或公寓。</p><h3 id="单词变形-18"><a href="#单词变形-18" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：Accommodation（单数）、Accommodations（复数）</li><li>动词：Accommodate（及物动词）、Accommodated（过去式）、Accommodating（现在分词）、Accommodation（名词形式）</li><li>形容词：Accommodative（有帮助的，适应性的）</li></ul><h3 id="记忆辅助-18"><a href="#记忆辅助-18" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “accommodation” 可以通过以下方式：</p><ul><li>分拆法：ac-（看作 “去”），-commod-（看作 “方便”），-ation（看作 “地方”）→ “去到一个方便的地方” → 住宿。</li><li>联想法：与 “commendation”（表扬）对比记忆，两个词都有 “commend”（表扬）的部分，而 “accommodation” 多了 “ac-” 前缀，可以想象住宿服务做得好也会得到表扬。</li></ul><h3 id="小故事-18"><a href="#小故事-18" class="headerlink" title="小故事"></a>小故事</h3><p>Tom found a charming accommodation in the countryside for his vacation. It was a cozy cabin with a stunning view. Waking up to the sound of birds and fresh air made his holiday perfect.<br>汤姆在乡村找到了一处迷人的住宿，度过他的假期。那是一个景色迷人的舒适小屋。在鸟鸣和新鲜空气中醒来，让他的假日变得完美。</p><p>中文翻译：<br>汤姆在乡下找到了一个迷人的住处来度假。那是一个可以看到美丽景色的舒适小屋。每天在鸟儿的歌唱和清新的空气中醒来，使他的假期非常完美。</p><hr><h2 id="accomplish"><a href="#accomplish" class="headerlink" title="accomplish"></a>accomplish</h2><h3 id="分析词义-19"><a href="#分析词义-19" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Accomplish” 这个单词在英语中意味着成功地完成或实现某事。它可以指完成一项任务、达到一个目标或者完成一个过程。</p><h3 id="列举例句-19"><a href="#列举例句-19" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>He accomplished his mission within the given time.<ul><li>他按时完成了他的任务。</li></ul></li><li>She accomplish her goal of losing 10 pounds in two months.<ul><li>她在两个月内成功减重10磅，达到了目标。</li></ul></li><li>The team accomplished the project with great teamwork.<ul><li>这个团队通过出色的团队合作完成了项目。</li></ul></li></ol><h3 id="词根分析-19"><a href="#词根分析-19" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Accomplish” 的词根是 “plish”，但这个部分并不是一个独立的词根。实际上，这个词是从古法语 “accomplir” 来的，它的词根更接近于 “completer”，意为完成。</p><h3 id="词缀分析-19"><a href="#词缀分析-19" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ac-“ 是前缀，表示“全部”或“加强”。</li><li>“-complish” 来自词根 “completer”，表示完成。</li></ul><p>其他含有类似词缀的单词：</p><ul><li>“accompany”（陪伴），同样有 “ac-“ 这个前缀。</li><li>“complete”（完成），和 “accomplish” 有相同的词根。</li></ul><h3 id="发展历史和文化背景-19"><a href="#发展历史和文化背景-19" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Accomplish” 一词源自中古英语，最初与法语有着密切的关系。”Accomplish” 在历史上被用来描述完成一项困难的任务或达成一个崇高的目标，它含有技能和努力达成的含义。</p><h3 id="单词变形-19"><a href="#单词变形-19" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：”accomplishment”（成就，完成）</li><li>过去式和过去分词：”accomplished”，”accomplished”</li><li>现在分词：”accomplishing”</li></ul><p>固定搭配：</p><ul><li>“accomplish a task”（完成任务）</li><li>“accomplish a goal”（达成目标）</li></ul><h3 id="记忆辅助-19"><a href="#记忆辅助-19" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “accomplish”，可以联想 “ac-“（看作是 ‘all’ 的简写）和 “complish”（看作是 ‘completely finish’ 的简写），即“全部完成”。</p><h3 id="小故事-19"><a href="#小故事-19" class="headerlink" title="小故事"></a>小故事</h3><p>Tom felt a great sense of accomplishment when he finished his first marathon. He trained hard for months and accomplished his goal with a strong will. </p><ul><li>汤姆完成他的第一次马拉松时，感到一种巨大的成就感。他努力训练了几个月，凭借坚强的意志达成了目标。</li></ul><p>中文翻译：汤姆完成了他的第一次马拉松，他为此训练了几个月，凭借坚强的意志，他实现了自己的目标，这让他感到非常自豪和满足。</p><hr><h2 id="accord"><a href="#accord" class="headerlink" title="accord"></a>accord</h2><h3 id="分析词义-20"><a href="#分析词义-20" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Accord” 这个单词在英语中既可以作名词，也可以作动词。作为名词时，它指的是“一致”，“符合”或者“协议”。作为动词，它的意思是“给予”，“一致”或者“相符合”。</p><h3 id="列举例句-20"><a href="#列举例句-20" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>As a noun:</p><ul><li><p>The two countries signed an accord to promote peace.<br>两国签署了一项促进和平的协议。</p></li><li><p>Their actions were in accord with the rules.<br>他们的行为与规则相符合。</p></li><li><p>There was an accord between their opinions on the issue.<br>他们对这个问题的观点是一致的。</p></li></ul></li><li><p>As a verb:</p><ul><li><p>The company accorded him the respect he deserved.<br>公司给予了他应有的尊重。</p></li><li><p>They accorded priority to education in their budget.<br>他们在预算中优先考虑了教育。</p></li></ul></li></ol><h3 id="词根分析-20"><a href="#词根分析-20" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Accord” 的词根是 “cord”，来源于拉丁语 “cor” 意为“心”。”Accord” 本身来自于拉丁动词 “accordare”，意为“使心一致”。</p><h3 id="词缀分析-20"><a href="#词缀分析-20" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ac-“ 是前缀，表示“向”，“加强”。</li><li>“-cord” 是词根，表示“心”。</li><li>“-ance” 是后缀，表示名词化。</li></ul><p>其他含有 “-cord-“ 词根的单词：</p><ul><li>Concorde（协和飞机，表示“一致”）</li><li>Discord（不一致，纠纷）</li></ul><h3 id="发展历史和文化背景-20"><a href="#发展历史和文化背景-20" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Accord” 这个单词在中世纪晚期开始使用，最初的意思是“使和谐”或“使一致”。在欧美文化中，”accord” 常用于指国际间的协议，或者个人之间的相容性和一致。</p><h3 id="单词变形-20"><a href="#单词变形-20" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词: accord, accordance, discord</li><li>动词: accord, accords, according, accorded</li><li>形容词: accordant, concordant（一致的）</li></ul><p>固定搭配：</p><ul><li>in accord with: 与…一致</li><li>of one’s own accord: 自愿地，主动地</li></ul><h3 id="记忆辅助-20"><a href="#记忆辅助-20" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “accord”，可以联想 “ac-“（向）和 “cord”（心）。想象两个人或两个国家把他们的“心”向对方靠拢，表示他们达到了一致或协议。</p><h3 id="小故事-20"><a href="#小故事-20" class="headerlink" title="小故事"></a>小故事</h3><p>Tom and Jane lived in harmony, always in accord on important decisions. One day, they decided to travel the world, of their own accord. They agreed on a destination and set off, hand in hand.</p><p>汤姆和简生活和谐，在重要决定上总是保持一致。有一天，他们自愿决定去环游世界。他们选定了目的地，手牵手出发了。</p><p>中文翻译：<br>汤姆和简过着和谐的生活，在重大决策上总是意见一致。有一天，他们主动决定环游世界。他们选定了目的地，手牵手踏上了旅程。</p><hr><h2 id="accordance"><a href="#accordance" class="headerlink" title="accordance"></a>accordance</h2><h3 id="分析词义-21"><a href="#分析词义-21" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Accordance” 是一个名词，它指的是“一致”，“符合”或“依照”。在句子中，它通常用来表达某事物与规则、原则、协议或另一事物的相符合。</p><h3 id="列举例句-21"><a href="#列举例句-21" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>We must act in accordance with the rules.（我们必须依照规则行事。）</li><li>The company’s policies are in accordance with government regulations.（公司的政策与政府规定相符合。）</li><li>He was fired in accordance with the labor laws.（他根据劳动法被解雇了。）</li></ol><h3 id="词根分析-21"><a href="#词根分析-21" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Accordance” 来自 “accord”，意为“一致”或“协议”。</p><ul><li>“Accord”：来源于拉丁语 “accordare”，意为“使一致”。</li></ul><h3 id="词缀分析-21"><a href="#词缀分析-21" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ac-“：前缀，表示“加强”或“向着”。</li><li>“-cord-“：词根，来自拉丁语 “cor”，意为“心”。</li><li>“-ance”：后缀，表示“状态”或“行为”。</li></ul><p>其他包含 “-ance” 后缀的单词：appearance（出现）、importance（重要性）。</p><h3 id="发展历史和文化背景-21"><a href="#发展历史和文化背景-21" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Accordance” 一词反映了西方文化中重视规则和协议的特点。在历史发展中，它强调了个体行为与社会规范之间的一致性。</p><h3 id="单词变形-21"><a href="#单词变形-21" class="headerlink" title="单词变形"></a>单词变形</h3><p>“Accordance” 本身没有直接的变形，但其动词形式为 “accord”，名词形式 “accordance” 通常与介词 “in” 搭配。</p><ul><li>动词：to accord（使一致，相符合）</li><li>名词短语：in accordance with（依照，与…一致）</li></ul><h3 id="记忆辅助-21"><a href="#记忆辅助-21" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “accordance” 可以通过以下方法：</p><ul><li>联想记忆法：与 “accord”（协议）联想，加上 “-ance” 后缀，表示“处于协议状态”。</li><li>词汇家族法：记住与它相关的其他 “-ance” 结尾的单词，如 “appearance”。</li></ul><h3 id="小故事-21"><a href="#小故事-21" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was fired in accordance with the company’s policy. He was informed of the rules, but chose to ignore them.（汤姆根据公司政策被解雇了。他被告知过这些规定，但他选择忽视它们。）</p><p>汤姆被告知过公司规定，但他不以为然。最终，他因为没有遵守规定而被公司依照政策解雇了。</p><hr><h2 id="account"><a href="#account" class="headerlink" title="account"></a>account</h2><h3 id="分析词义-22"><a href="#分析词义-22" class="headerlink" title="分析词义"></a>分析词义</h3><p>“account” 这个英文单词有多种含义，最常见的是指“账户”，在金融领域经常使用。它还可以指“解释”，比如对某件事情的发生提供一个合理的“解释”或“账目”。</p><h3 id="列举例句-22"><a href="#列举例句-22" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>I have an account at the local bank.（我在当地银行有一个账户。）</p><ul><li>在这个句子中，“account”指的是在银行开立的个人账户。</li></ul></li><li><p>Please account for your actions.（请对你的行为作出解释。）</p><ul><li>这里“account”意味着提供一个合理的解释或理由。</li></ul></li><li><p>The company’s accounts are published every year.（公司的账目每年都会公布。）</p><ul><li>在这个例子中，“account”指的是记录公司财务交易的详细记录。</li></ul></li></ol><h3 id="词根分析-22"><a href="#词根分析-22" class="headerlink" title="词根分析"></a>词根分析</h3><p>“account” 的词根是 “count”，意思是“计算”。这个词根在其他单词中也有体现，比如 “discount”（折扣）或者 “encounter”（遭遇）。</p><h3 id="词缀分析-22"><a href="#词缀分析-22" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“account” 本身并没有明显的词缀，它是由词根 “count” 直接衍生而来。</li></ul><h3 id="发展历史和文化背景-22"><a href="#发展历史和文化背景-22" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“account” 这个词源于拉丁语 “computare”，意为“计算”。在中世纪早期，它开始被用来指代财务记录。随着时间的发展，它的意义扩展到包括对事物的解释或描述。</p><h3 id="单词变形-22"><a href="#单词变形-22" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：accountant（会计）</li><li>动词：account for（解释），accountability（有责任）</li><li>形容词：accountable（负有责任的）</li></ul><h3 id="记忆辅助-22"><a href="#记忆辅助-22" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “account”，可以联想 “count” 这个词根，想象你正在银行里“计算”你的钱，那就是你的“账户”（account）。</p><h3 id="小故事-22"><a href="#小故事-22" class="headerlink" title="小故事"></a>小故事</h3><p>Tom opened a savings account at the bank. Every month, he carefully accounted for his expenses and saved a portion of his salary. He was proud of his financial discipline.</p><p>汤姆在银行开了一个储蓄账户。每个月，他都会仔细计算自己的开销，并存一部分薪水。他为自己的财务自律感到骄傲。</p><p>中文翻译：汤姆在银行开了一个储蓄账户。每个月，他都小心翼翼地记账，并存一部分工资。他为自己的财务自律感到自豪。</p><hr><h2 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a>accumulate</h2><h3 id="分析词义-23"><a href="#分析词义-23" class="headerlink" title="分析词义"></a>分析词义</h3><p>“accumulate” 是一个动词，意思是逐渐地、一点一滴地收集或聚集，通常指随时间不断增加，使某物变得更多。</p><h3 id="列举例句-23"><a href="#列举例句-23" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>He has accumulated a large collection of stamps over the years.<br>他多年来已经积累了一大堆邮票。</li><li>Knowledge is something that accumulate over time.<br>知识是随时间积累的东西。</li><li>The snow accumulated on the ground during the storm.<br>暴风雪期间，雪在地上积了厚厚一层。</li></ol><h3 id="词根分析-23"><a href="#词根分析-23" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“accumul-“ 是词根，来源于拉丁语 “accumulare”，意为堆积、聚集。</li><li>“-ate” 是动词后缀，常见于由拉丁词根构成的动词中。</li></ul><h3 id="词缀分析-23"><a href="#词缀分析-23" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“accumul-“（词根）表示堆积。</li><li>“-ate”（动词后缀）表示动作或过程。</li></ul><h3 id="发展历史和文化背景-23"><a href="#发展历史和文化背景-23" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“accumulate” 来自拉丁语 “accumulare”，其最初的意义是堆积或聚集成堆。在欧美文化中，这个词语常用于描述财富、知识、经验等的逐渐增长。</p><h3 id="单词变形-23"><a href="#单词变形-23" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：accumulation（积累，堆积）</li><li>形容词：accumulative（积累的，积聚的）</li><li>副词：accumulatively（积累地）</li></ul><h3 id="记忆辅助-23"><a href="#记忆辅助-23" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>可以将 “accumulate” 和其名词形式 “accumulation” 一起记忆，”accumulate” 有一个 “c” 和两个 “m”，可以想象成逐渐堆积成小山（mountain）的过程。</p><h3 id="小故事-23"><a href="#小故事-23" class="headerlink" title="小故事"></a>小故事</h3><p>Tom loved to accumulate coins from different countries. Over the years, his collection has grown to be impressive. One day, he showed his accumulation to a friend who shared the same hobby. They admired the coins together, each piece telling a unique story.</p><p>汤姆喜欢收集来自不同国家的硬币。多年来，他的收藏已经变得令人印象深刻。有一天，他向一个有着相同爱好的朋友展示了他的积累。他们一起欣赏这些硬币，每一枚都讲述着独特的故事。</p><p>汤姆喜欢积累不同国家的硬币。随着时间的推移，他的收藏变得越来越壮观。有一天，他给一个有同样爱好的朋友看了他的收藏。他们一起欣赏这些硬币，每一枚都独一无二。</p><hr><h2 id="accurate"><a href="#accurate" class="headerlink" title="accurate"></a>accurate</h2><h3 id="分析词义-24"><a href="#分析词义-24" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Accurate” 这个单词是一个形容词，意思是“准确的，精确的”。它用来描述信息、数据、测量或判断等非常接近事实或标准的情况。</p><h3 id="列举例句-24"><a href="#列举例句-24" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The scientist made an accurate prediction about the weather.（科学家对天气作出了准确的预测。）</li><li>She provided the accurate dimensions for the project.（她为项目提供了精确的尺寸。）</li><li>To be accurate, the event started at 8:30, not 9:00.（准确地说，活动是在8:30开始的，不是9:00。）</li></ol><h3 id="词根分析-24"><a href="#词根分析-24" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Accurate” 的词根是 “curacy”，意味着 “精确；准确度”。</p><h3 id="词缀分析-24"><a href="#词缀分析-24" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ac-” 是一个前缀，表示 “to, toward, or at”。</li><li>“-cur-” 是词根，来自拉丁语 “cura”，意味着 “care”。</li><li>“-ate” 是后缀，常用于形成动词或形容词，这里用来形成形容词。</li><li>“-ive” 是形容词后缀，表示 “具有……性质的”。</li></ul><h3 id="发展历史和文化背景-24"><a href="#发展历史和文化背景-24" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Accurate” 一词来自拉丁语 “accuratus”，是 “acuere” 的过去分词，意为 “to sharpen, to make keen”。在欧美文化中，准确性被高度重视，尤其是在科学研究和数据分析中。</p><h3 id="单词变形-24"><a href="#单词变形-24" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：accuracy（准确性）</li><li>动词：to accuratize（使精确）</li><li>副词：accurately（精确地）</li></ul><h3 id="记忆辅助-24"><a href="#记忆辅助-24" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记忆 “accurate”，可以联想 “ac-” 为 “to the”，与 “-cur-” 结合理解为 “to the care”，意味着对细节给予“关照”，所以做事情很“准确”。</p><h3 id="小故事-24"><a href="#小故事-24" class="headerlink" title="小故事"></a>小故事</h3><p>Tommy had a task to find an accurate clock for the classroom. He searched carefully and found an old, but accurate, clock in his grandfather’s attic. “This is it!” he exclaimed.（汤米有一个任务，为教室找一个精确的时钟。他仔细搜寻，在爷爷的阁楼里找到了一个旧的，但精确的时钟。“就是这个！”他喊道。）</p><p>汤米需要在教室里找一个精确的时钟。他认真寻找，最后在他爷爷的阁楼里发现了一个虽然旧但是走时非常精准的时钟。“就是它了！”他兴奋地说。</p><hr><h2 id="accuse"><a href="#accuse" class="headerlink" title="accuse"></a>accuse</h2><h3 id="分析词义-25"><a href="#分析词义-25" class="headerlink" title="分析词义"></a>分析词义</h3><p>“accuse” 是一个动词，意思是公开指责或指控某人做了错事或违法的事情。</p><h3 id="列举例句-25"><a href="#列举例句-25" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The police accused him of theft.（警方指控他盗窃。）</li><li>She accused her neighbor of destroying her plants.（她指控邻居毁坏了她的植物。）</li><li>The politician was accused of corruption in office.（这位政治家被指控在职期间腐败。）</li></ol><h3 id="词根分析-25"><a href="#词根分析-25" class="headerlink" title="词根分析"></a>词根分析</h3><p>“accuse” 来自拉丁语 “accusare”，意为“指责”。</p><ul><li>词根 “cus” 表示“责备”。</li></ul><h3 id="词缀分析-25"><a href="#词缀分析-25" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ac-“ 是前缀，表示“向”，“加强”。</li><li>“-use” 是词根。</li><li>无明显后缀。</li></ul><h3 id="发展历史和文化背景-25"><a href="#发展历史和文化背景-25" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>在古罗马法律体系中，”accusare” 是指向法庭提出正式控告的行为。在现代法律体系中，”accuse” 保留了这一含义，并且在社会语境中，也用于非正式的指责或归咎。</p><h3 id="单词变形-25"><a href="#单词变形-25" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：accusation（指控）</li><li>形容词：accusatory（指责的）</li><li>动词过去式&#x2F;过去分词：accused</li></ul><h3 id="记忆辅助-25"><a href="#记忆辅助-25" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>“accuse” 可以通过记忆词根 “cus”（看作是 “accus” 的简化，与 “accuse” 的发音接近），想象一个人因为过错被“反复责备”。</p><h3 id="小故事-25"><a href="#小故事-25" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was accused of breaking the vase, but it was actually his cat.（汤姆被指控打碎了花瓶，但实际上是他家的猫干的。）</p><p>中文翻译：汤姆被指责打碎了花瓶，但其实是他家的猫闯的祸。</p><hr><h2 id="accustomed"><a href="#accustomed" class="headerlink" title="accustomed"></a>accustomed</h2><h3 id="分析词义-26"><a href="#分析词义-26" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Accustomed” 是一个形容词，意思是“习惯的”或“通常的”。当我们说某人或某物“accustomed”时，是指他们已经习惯了某种行为、环境或条件，通常需要一段时间的适应。</p><h3 id="列举例句-26"><a href="#列举例句-26" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>He is accustomed to waking up early for work.</p><ul><li>他习惯于为了工作早起。</li></ul></li><li><p>It took her a while to become accustomed to the cold weather in her new hometown.</p><ul><li>她花了一段时间才习惯了她新家乡的寒冷天气。</li></ul></li><li><p>The cat is accustomed to being fed at the same time every day.</p><ul><li>这只猫习惯了每天同一时间吃饭。</li></ul></li></ol><h3 id="词根分析-26"><a href="#词根分析-26" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“Accustom” 是动词，词根是 “custom”，意为“习惯”或“惯例”。</li><li>“Ed” 是常见的过去分词后缀，表示“已经”。</li></ul><h3 id="词缀分析-26"><a href="#词缀分析-26" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Ac-“ 是前缀，表示“朝向”或“加强”。</li><li>“-custom-“ 是词根。</li><li>“-ed” 是后缀，表示形容词，通常加在动词后面，表示“具有某种特征的”。</li></ul><h3 id="发展历史和文化背景-26"><a href="#发展历史和文化背景-26" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Accustomed” 来自于拉丁语 “accustomare”，意为“使习惯”。这个单词在英语中已经使用了好几个世纪，它体现了人们在日常生活中对习惯的重视。在欧美文化中，习惯往往与个人的行为模式、社会习俗和传统有关。</p><h3 id="单词变形-26"><a href="#单词变形-26" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>动词形式：accustom</li><li>名词形式：custom, habituation</li><li>形容词比较级：more accustomed</li><li>形容词最高级：most accustomed</li></ul><h3 id="记忆辅助-26"><a href="#记忆辅助-26" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “accustomed”，可以将它分解成 “ac-“（看作“加强”）和 “custom”（习惯）。想象一个人在加强他们的习惯，逐渐变得“习惯”。</p><h3 id="小故事-26"><a href="#小故事-26" class="headerlink" title="小故事"></a>小故事</h3><p>Every morning, John would jog in the park. Being accustomed to this routine, his body naturally woke up early, even on weekends. One Sunday, the park was empty, but John still ran. He realized how accustomed his body had become to this daily exercise.</p><p>每个早晨，约翰都会在公园慢跑。习惯了这一日常，他的身体即使周末也会自然醒得早。一个周日，公园空无一人，但约翰还是去跑了。他意识到他的身体已经多么习惯于每天的运动。</p><p>中文翻译：每个早晨，约翰都会在公园里慢跑。由于习惯了这样的日常，他的身体甚至在周末也会自然地早早醒来。有一个星期天，公园里一个人也没有，但约翰仍然去跑步。他意识到他的身体已经多么习惯于每天做运动了。</p><hr><h2 id="achievement"><a href="#achievement" class="headerlink" title="achievement"></a>achievement</h2><h3 id="分析词义-27"><a href="#分析词义-27" class="headerlink" title="分析词义"></a>分析词义</h3><p>“achievement” 是一个名词，它指的是通过努力完成某件事情或者达到某个目标时所获得的成就或者成绩。它可以是个人的也可以是团队的，常用来表示成功或者进步。</p><h3 id="列举例句-27"><a href="#列举例句-27" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>He received an award for his outstanding achievement in the field of science.</p><ul><li>他因为在科学领域的杰出成就而获得了一个奖项。</li></ul></li><li><p>The team celebrated their achievement of winning the championship.</p><ul><li>团队庆祝他们赢得冠军的成就。</li></ul></li><li><p>Her personal achievement of losing 20 pounds is inspiring to many.</p><ul><li>她个人减去20磅的成就激励了很多人。</li></ul></li></ol><h3 id="词根分析-27"><a href="#词根分析-27" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“achieve” 是词根，意为“完成，实现”。</li><li>“ment” 是后缀，通常用来形成名词，表示“行为，过程或结果”。</li></ul><h3 id="词缀分析-27"><a href="#词缀分析-27" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“achieve” 来自于古英语 “ac” (表示加强) + “fēdan” (意为喂养，这里引申为成长，完成)。</li><li>“ment” 是名词后缀，表示过程或结果。</li></ul><p>其他带有 “ment” 后缀的单词：</p><ul><li>agreement (同意的行为)</li><li>development (发展的过程)</li></ul><h3 id="发展历史和文化背景-27"><a href="#发展历史和文化背景-27" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“achievement” 一词可以追溯到中古英语，最初与完成或实现某事有关。在欧美文化中，个人成就被高度重视，常常与成功，努力和个人发展联系在一起。</p><h3 id="单词变形-27"><a href="#单词变形-27" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：achievement (成就)</li><li>动词：achieve (实现，达到)</li><li>形容词：achievable (可达到的)</li><li>副词：usually no specific derivative, but “with great achievement” can express the idea.</li></ul><p>固定搭配：</p><ul><li>a sense of achievement (成就感)</li><li>achieve success (取得成功)</li></ul><h3 id="记忆辅助-27"><a href="#记忆辅助-27" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “achievement”，可以将这个单词拆分为 “achieve” 和 “ment”。记住 “achieve” 表示“完成”，然后加上表示“结果”的后缀 “ment”，就可以联想到通过努力完成某事后的“成果”或“成就”。</p><h3 id="小故事-27"><a href="#小故事-27" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was thrilled to see his name on the honor roll, a symbol of his hard work and achievement. For years, he had strived to excel in academics. Finally, his dedication paid off.</p><p>汤姆激动地看着荣誉榜上自己的名字，这是他辛勤工作和成就的象征。多年来，他一直努力在学术上表现出色。终于，他的付出得到了回报。</p><p>[中文翻译] 汤姆兴奋地发现自己的名字出现在了荣誉榜上，这是他辛勤努力和所取得成就的标志。多年来，他一直致力于在学业上追求卓越。最终，他的坚持和奉献得到了应有的回报。</p><hr><h2 id="acid"><a href="#acid" class="headerlink" title="acid"></a>acid</h2><h3 id="分析词义-28"><a href="#分析词义-28" class="headerlink" title="分析词义"></a>分析词义</h3><p>“acid” 这个单词在化学上指的是一种物质，能够释放氢离子（H+），通常具有酸味，能够腐蚀某些物质。在日常语言中，它也可以形容人的性格刻薄、尖酸。</p><h3 id="列举例句-28"><a href="#列举例句-28" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>Chemical acid can corrode metal easily.<br>化学酸能轻易地腐蚀金属。</p></li><li><p>She has an acid tongue; she often says hurtful things to others.<br>她说话尖酸刻薄，经常对别人说些伤人的话。</p></li><li><p>Vinegar is a weak acid commonly used in cooking.<br>醋是一种在烹饪中常用的弱酸。</p></li></ol><h3 id="词根分析-28"><a href="#词根分析-28" class="headerlink" title="词根分析"></a>词根分析</h3><p>“acid” 的词根是 “acid”，这个词根来自于拉丁语 “acere”，意为 “尖酸、锋利”。</p><h3 id="词缀分析-28"><a href="#词缀分析-28" class="headerlink" title="词缀分析"></a>词缀分析</h3><p>“acid” 本身没有明显的词缀，它是一个自由词根。</p><h3 id="发展历史和文化背景-28"><a href="#发展历史和文化背景-28" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“acid” 这个词在化学上有着悠久的历史，最初来源于拉丁语，后来进入英语。在文化中，除了化学含义，人们也会用 “acid” 来形容人的性格，特别是那些言辞尖锐、刻薄的人。</p><h3 id="单词变形-28"><a href="#单词变形-28" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：acidity（酸性）</li><li>形容词比较级：acider</li><li>形容词最高级：acidest</li><li>动词：acidify（使酸化）</li></ul><h3 id="记忆辅助-28"><a href="#记忆辅助-28" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “acid” 这个词，可以联想到酸橙（lemon），它含有柠檬酸，是一种天然的酸性物质。</p><h3 id="小故事-28"><a href="#小故事-28" class="headerlink" title="小故事"></a>小故事</h3><p>One day, a scientist dropped an acid accidentally. It burned a hole in his lab coat. Alarmed, he quickly neutralized the acid with a base to prevent further damage.<br>有一天，一个科学家不小心洒了些酸。它在他的实验服上烧了一个洞。他吓了一跳，赶紧用碱中和了酸，以防造成更大的损害。</p><p>中文翻译：<br>有一天，科学家不小心掉落了酸，它在实验服上烧了一个洞。他惊慌失措，迅速用碱来中和酸，以防继续损坏。</p><hr><h2 id="acknowledge"><a href="#acknowledge" class="headerlink" title="acknowledge"></a>acknowledge</h2><h3 id="分析词义-29"><a href="#分析词义-29" class="headerlink" title="分析词义"></a>分析词义</h3><p>“acknowledge” 是一个动词，意思是承认、确认或者表示感谢。在交流中，当我们”acknowledge”某人或某事时，意味着我们意识到它的存在或重要性，并给予肯定。</p><h3 id="列举例句-29"><a href="#列举例句-29" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The student acknowledged his mistake and apologized to the teacher.<br>学生承认了自己的错误并向老师道歉。</li><li>The company acknowledged the customers’ complaints and promised to improve its service.<br>公司承认了客户的投诉，并承诺改善服务。</li><li>She acknowledged his help with a smile and a thank-you note.<br>她用一个微笑和一张感谢便条来感谢他的帮助。</li></ol><h3 id="词根分析-29"><a href="#词根分析-29" class="headerlink" title="词根分析"></a>词根分析</h3><p>“acknowledge” 的词根是 “knowledge”，意味着“知道”或“了解”。前缀 “ack-“ 来自 “ac-“，表示“完全”或“加强”。</p><h3 id="词缀分析-29"><a href="#词缀分析-29" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “ack-“：表示强调。</li><li>词根 “-knowledge”：表示知道、了解。</li><li>后缀 “-ledge”：与知道相关的动作。</li></ul><p>其他包含 “-knowledge” 词根的单词：</p><ul><li>knowledge（知识）</li><li>knowledgeable（知识渊博的）</li></ul><h3 id="发展历史和文化背景-29"><a href="#发展历史和文化背景-29" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“acknowledge” 这个单词起源于中古英语，最初的含义与“承认知道”或“公开承认”有关。在欧洲文化中，当人们收到礼物或帮助时，通常会”acknowledge”它，即表示感谢，这是礼貌和尊重的体现。</p><h3 id="单词变形-29"><a href="#单词变形-29" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：acknowledgment（承认，确认）</li><li>形容词：acknowledged（被承认的，公认的）</li><li>动词时态：acknowledges（现在时），acknowledged（过去时），acknowledging（现在分词），acknowledged（过去分词）</li></ul><h3 id="记忆辅助-29"><a href="#记忆辅助-29" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住”acknowledge”这个单词的一个方法是，将其拆分为 “ac-“（加强）和 “knowledge”（知道），结合起来就是“完全知道并承认”。</p><h3 id="小故事-29"><a href="#小故事-29" class="headerlink" title="小故事"></a>小故事</h3><p>Tom felt happy when his boss acknowledged his hard work in the team meeting. It was a moment of pride for him.<br>汤姆在团队会议上，当老板承认他的辛勤工作时，他感到非常高兴。对他来说，这是一个自豪的时刻。</p><p>中文翻译：<br>汤姆在团队会议上，当老板在会上公开认可他的努力时，他感到非常快乐。对他来说，那是一个骄傲的时刻。</p><hr><h2 id="acquaint"><a href="#acquaint" class="headerlink" title="acquaint"></a>acquaint</h2><h3 id="分析词义-30"><a href="#分析词义-30" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Acquaint” 是一个动词，意思是使熟悉或了解某人或某事。当我们说“acquaint someone with something”，就是指让某人知道或熟悉某事物。</p><h3 id="列举例句-30"><a href="#列举例句-30" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>We need to acquaint ourselves with the new rules before starting the job.<br>我们在开始工作前需要了解新的规则。</p></li><li><p>The tour guide acquainted the visitors with the history of the castle.<br>导游向游客介绍了这座城堡的历史。</p></li><li><p>It’s important to acquaint your children with different cultures from a young age.<br>让孩子们从小熟悉不同的文化是很重要的。</p></li></ol><h3 id="词根分析-30"><a href="#词根分析-30" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Acquaint” 的词根是 “cognis”，这个词根来自拉丁语，意味着“知道”或“认识”。</p><h3 id="词缀分析-30"><a href="#词缀分析-30" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ac-“ 是前缀，表示“加强”或“完全”。</li><li>“-quaint-“ 是词根的变体，来源于拉丁语 “cognis”。</li><li>“-t-“ 是动词后缀，表示动词的过去分词形式。</li></ul><p>其他带有 “-cognis-“ 词根的单词：</p><ul><li>Recognize（认出）</li><li>Cognition（认知）</li></ul><h3 id="发展历史和文化背景-30"><a href="#发展历史和文化背景-30" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Acquaint” 这个词可以追溯到中古英语，是从法语 “acquaintir” 来的，而法语又是从拉丁语 “acquīrere” 发展而来，原意是“获得”或“得到”，后来演变成现在的意思。</p><h3 id="单词变形-30"><a href="#单词变形-30" class="headerlink" title="单词变形"></a>单词变形</h3><p>“Acquaint” 的变形包括：</p><ul><li>名词：Acquaintance（熟人；了解）</li><li>过去式：Acquainted</li><li>过去分词：Acquainted</li><li>现在分词：Acquainting</li></ul><h3 id="记忆辅助-30"><a href="#记忆辅助-30" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “acquaint” 这个词的一个方法是使用联想记忆法。你可以将其和 “acquire”（获得）联系起来，因为它们有相似的含义和词根，并且都带有 “ac-“ 前缀。</p><h3 id="小故事-30"><a href="#小故事-30" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was new to the city, so his neighbor decided to acquaint him with the local culture. They visited markets, tried street food, and shared stories. Tom soon felt more at home.</p><p>汤姆刚搬到这座城市，所以他的邻居决定带他去熟悉当地文化。他们参观了市场，品尝了街头小吃，分享了故事。汤姆很快就感到更加自在。</p><p>故事中的 “acquaint” 用到了 “acquaint someone with something” 这个短语，帮助汤姆了解了当地的文化。</p><hr><h2 id="acquaintance"><a href="#acquaintance" class="headerlink" title="acquaintance"></a>acquaintance</h2><h3 id="分析词义-31"><a href="#分析词义-31" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Acquaintance” 这个词指的是认识的人，但不是特别亲密的朋友。它可以用来描述对某人的了解，这种了解可能不是很深入。</p><h3 id="列举例句-31"><a href="#列举例句-31" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>I met an old acquaintance at the grocery store yesterday.<br>昨天我在超市遇到了一个旧相识。</p></li><li><p>Our acquaintance was brief; we only worked together for a week.<br>我们的相识很短暂；我们只在一起工作了一个星期。</p></li><li><p>He’s more than an acquaintance; he’s been a close friend for years.<br>他不仅仅是个熟人，而是多年的密友。</p></li></ol><h3 id="词根分析-31"><a href="#词根分析-31" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Acquaintance” 的词根是 “acquaint”，意为“使熟悉”或“介绍”。</p><h3 id="词缀分析-31"><a href="#词缀分析-31" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ac-“ 是前缀，表示“到”、“向着”。</li><li>“-quaint-“ 是词根，源自中古英语 “quayn”, 意为“知道”。</li><li>“-ance” 是后缀，通常表示状态或行为。</li></ul><h3 id="发展历史和文化背景-31"><a href="#发展历史和文化背景-31" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Acquaintance” 这个词源自于中古英语，最初意味着“认知”或“了解”。在欧美文化中，这个词通常用来描述社交场合中认识但不特别亲近的人。</p><h3 id="单词变形-31"><a href="#单词变形-31" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词: acquaintance</li><li>动词原形: acquaint</li><li>过去式: acquainted</li><li>过去分词: acquainted</li><li>现在分词: acquainting</li></ul><h3 id="记忆辅助-31"><a href="#记忆辅助-31" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过联想记忆来记住 “acquaintance” 这个词。比如，你可以想象 “ac-“ 如同 “a cup”，而 “-quaint-“ 听起来像 “queue”，那么你可以在脑海中描绘这样一个场景：在一场聚会中，你排队（queue）等着用杯子（cup）与人交流，这些交流的人就是你的 “acquaintances”。</p><h3 id="小故事-31"><a href="#小故事-31" class="headerlink" title="小故事"></a>小故事</h3><p>One evening, at a quiet café, I made an acquaintance with a fascinating artist. We chatted over coffee, exchanging stories about our passions. Although our paths diverged after that night, the memory of our acquaintance remains vivid.</p><p>有一天晚上，在一个安静的咖啡馆，我认识了一个有趣的艺术家。我们边喝咖啡边聊天，交流着彼此的激情。尽管那晚后我们的道路分开，但我们的相识记忆仍然鲜明。</p><p>在那晚的咖啡馆里，我偶遇了一位令人着迷的艺术家。我们一边品着咖啡，一边分享着各自的故事和爱好。尽管那次相识之后我们再未见面，但那晚的记忆依然历历在目。</p><hr><h2 id="acquire"><a href="#acquire" class="headerlink" title="acquire"></a>acquire</h2><h3 id="分析词义-32"><a href="#分析词义-32" class="headerlink" title="分析词义"></a>分析词义</h3><p>“acquire” 是一个动词，意思是获得、得到，通常指通过购买、努力、学习或其他方式取得某物或某种能力。</p><h3 id="列举例句-32"><a href="#列举例句-32" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>He plans to acquire a new skill this year.<br>他计划今年学习一项新技能。</li><li>The company acquired a smaller business to expand its market share.<br>为了扩大市场份额，这家公司收购了一家较小的企业。</li><li>She acquired her knowledge through years of study and practice.<br>她通过多年的学习和实践获得了知识。</li></ol><h3 id="词根分析-32"><a href="#词根分析-32" class="headerlink" title="词根分析"></a>词根分析</h3><p>“acquire” 来自拉丁词 “acquirere”，意为 “获得” 或 “取得”。</p><h3 id="词缀分析-32"><a href="#词缀分析-32" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ac-“：这是一个前缀，表示 “加强” 或 “动作的开始”。</li><li>“-quire-“：这是词根，来自拉丁词 “quirere”，意为 “寻找” 或 “获得”。</li><li>“-e”：动词后缀，用于构成动词的原形。</li></ul><h3 id="发展历史和文化背景-32"><a href="#发展历史和文化背景-32" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“acquire” 这个词在英语中已经使用了好几个世纪，它源自拉丁语，而在商业和学术环境中特别常用。它也体现了个人成长和进步的概念。</p><h3 id="单词变形-32"><a href="#单词变形-32" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：acquisition（获得物，收购）</li><li>过去式&#x2F;过去分词：acquired</li><li>现在分词：acquiring</li><li>形容词：acquisitive（渴望获得的）</li></ul><h3 id="记忆辅助-32"><a href="#记忆辅助-32" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>可以将 “acquire” 和中文的 “确”（表示确定）联系起来，想象成 “确实地获得”，帮助记忆。</p><h3 id="小故事-32"><a href="#小故事-32" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was excited to acquire a new camera for his photography class. He saved for months and finally bought it. Now, he’s acquiring the skills to take amazing photos.</p><p>汤姆非常兴奋地为他的摄影课购置了一台新相机。他攒了几个月的钱，终于买下了它。现在，他正在学习如何拍出令人惊叹的照片。</p><p>汤姆为他的摄影课买了一台新相机，他为此存了数月的钱。如今，他正在掌握如何拍出好照片的技巧。</p><hr><h2 id="activate"><a href="#activate" class="headerlink" title="activate"></a>activate</h2><h3 id="分析词义-33"><a href="#分析词义-33" class="headerlink" title="分析词义"></a>分析词义</h3><p>“activate” 是一个动词，意思是“使开始工作或运转”，“启动”，“激活”或“使活跃”。在日常生活中，这个词语可以用于指代各种类型的启动或激活过程。</p><h3 id="列举例句-33"><a href="#列举例句-33" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>Please activate your SIM card before making a phone call.<br>请在打电话之前激活你的SIM卡。</li><li>The software requires a license key to activate.<br>该软件需要一个许可证密钥来激活。</li><li>Regular exercise can activate your immune system.<br>定期锻炼可以激活你的免疫系统。</li></ol><h3 id="词根分析-33"><a href="#词根分析-33" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“act” 是词根，意为“行动”或“做”。</li><li>“ivate” 是后缀，通常在动词后添加，表示“使成为”或“导致”。</li></ul><h3 id="词缀分析-33"><a href="#词缀分析-33" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“act”：如上述解释。</li><li>“ivate”：来自拉丁语”iv”（进入）和”ate”（做），合并在一起意味着“使进入一种状态”。</li></ul><h3 id="发展历史和文化背景-33"><a href="#发展历史和文化背景-33" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“activate” 来自拉丁语 “activus”，意为“活跃的”或“起作用的”。在现代英语中，这个单词广泛应用于技术、健康、商业等多个领域，强调开始或引发某种过程或状态。</p><h3 id="单词变形-33"><a href="#单词变形-33" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>Noun: activation（名词，激活）</li><li>Adjective: activated（形容词，被激活的）</li><li>Past tense: activated（过去式，激活）</li><li>Present participle: activating（现在分词，正在激活）</li><li>Third person singular: activates（第三人称单数，激活）</li></ul><h3 id="记忆辅助-33"><a href="#记忆辅助-33" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>可以联想记忆，“act”是“行动”的意思，加上“ivate”后，就像是给行动按下了启动键，所以“activate”就是“激活”或“启动”的意思。</p><h3 id="小故事-33"><a href="#小故事-33" class="headerlink" title="小故事"></a>小故事</h3><p>Tom bought a new game console. Excited, he opened the box and plugged it in. But wait! He needed to activate his console with a special code. Quickly, he found the activation card and entered the code. Finally, his console sprang to life.</p><p>汤姆买了一个新的游戏机。兴奋地打开盒子并插上电源。但是等等！他需要用一个特殊的代码激活他的游戏机。他迅速找到激活卡并输入了代码。最后，他的游戏机活了过来。</p><p>中文翻译：<br>汤姆买了一个新的游戏机，他兴奋地打开盒子并连接电源。但是，他需要用一张特殊的激活卡和代码来启动游戏机。他快速找到激活卡并输入了代码，最终，他的游戏机生动地启动了。</p><hr><h2 id="acute"><a href="#acute" class="headerlink" title="acute"></a>acute</h2><h3 id="分析词义-34"><a href="#分析词义-34" class="headerlink" title="分析词义"></a>分析词义</h3><p>“acute” 这个单词在英语中主要有两个意思。第一个是形容词，指的是病情急剧的，严重的，比如急性病。第二个意思是形容事物敏锐的，尖锐的，或者指人的观察力非常灵敏。</p><h3 id="列举例句-34"><a href="#列举例句-34" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>He was diagnosed with an acute case of pneumonia.<br>他被诊断出患有急性肺炎。</p></li><li><p>She has an acute sense of humor.<br>她有着敏锐的幽默感。</p></li><li><p>The report highlights the acute water shortage in the region.<br>这份报告突显了该地区严重的水资源短缺。</p></li></ol><h3 id="词根分析-34"><a href="#词根分析-34" class="headerlink" title="词根分析"></a>词根分析</h3><p>“acute” 的词根来自拉丁语 “acutus”，意为“尖锐的，敏锐的”。</p><h3 id="词缀分析-34"><a href="#词缀分析-34" class="headerlink" title="词缀分析"></a>词缀分析</h3><p>“acute” 本身没有明显的词缀，它是一个完整的词根形成的单词。</p><h3 id="发展历史和文化背景-34"><a href="#发展历史和文化背景-34" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“acute” 这个词源于拉丁语的 “acutus”，在医学领域，它用来描述病情的严重性和快速进展。在日常使用中，它也用来形容人的感知能力极其敏锐。</p><h3 id="单词变形-34"><a href="#单词变形-34" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式：acuteness（尖锐度，敏锐）</li><li>形容词比较级：acuter</li><li>形容词最高级：acutest</li></ul><h3 id="记忆辅助-34"><a href="#记忆辅助-34" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过联想记忆来记住 “acute” 这个单词。比如想象一个锐利的箭头（sharp arrow），箭头是尖的，这就代表了敏锐和尖锐的意思。</p><h3 id="小故事-34"><a href="#小故事-34" class="headerlink" title="小故事"></a>小故事</h3><p>One night, a cat’s acute hearing detected a mouse moving in the kitchen. It silently approached, ready to pounce.<br>一夜，一只猫凭借其敏锐的听力，在厨房里听到了一只老鼠的活动。它悄无声息地靠近，准备跳跃捕捉。</p><h3 id="中文翻译-1"><a href="#中文翻译-1" class="headerlink" title="中文翻译"></a>中文翻译</h3><p>一天晚上，一只猫用它敏锐的听力听到了厨房里有只老鼠在动。它悄悄地走近，准备猛地一跳。</p><hr><h2 id="adapt"><a href="#adapt" class="headerlink" title="adapt"></a>adapt</h2><h3 id="分析词义-35"><a href="#分析词义-35" class="headerlink" title="分析词义"></a>分析词义</h3><p>“adapt” 是一个动词，意思是“改变以适应新的情况或环境”，或者“修改某事物以便更好地使用或更合适”。</p><h3 id="列举例句-35"><a href="#列举例句-35" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><strong>适应新环境</strong>：He quickly adapted to the new school.（他很快适应了新学校。）</li><li><strong>修改计划</strong>：We must adapt our plans to fit the new budget.（我们必须修改我们的计划以适应新的预算。）</li><li><strong>改编作品</strong>：The movie is an adaptation of the classic novel.（这部电影是经典小说的改编作品。）</li></ol><h3 id="词根分析-35"><a href="#词根分析-35" class="headerlink" title="词根分析"></a>词根分析</h3><p>“adapt” 来自拉丁词 “adaptare”，意为“使适合”。词根 “apt” 意味着“适合的，有能力的”。</p><h3 id="词缀分析-35"><a href="#词缀分析-35" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li><strong>前缀</strong>：无</li><li><strong>词根</strong>：apt（适合的）</li><li><strong>后缀</strong>：-t，用于构成动词</li></ul><h3 id="发展历史和文化背景-35"><a href="#发展历史和文化背景-35" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“adapt” 这个词在英语中已经使用了好几百年，它的使用与生物学中的“适应”概念密切相关，指的是生物体对环境的改变。在文化上，它也用于描述文学作品、电影等如何被修改以适应新的形式或观众。</p><h3 id="单词变形-35"><a href="#单词变形-35" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li><strong>名词</strong>：adaptation（n. 适应；改编）</li><li><strong>形容词</strong>：adaptable（能够适应的）</li><li><strong>副词</strong>：adaptingly（适应性地）</li><li><strong>过去式&#x2F;过去分词</strong>：adapted</li></ul><h3 id="记忆辅助-35"><a href="#记忆辅助-35" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “adapt” 可以通过其同音词 “a dad”，想象一个爸爸“适应”各种家庭情况，或者通过联想到“适应”就是“使适合（apt）”。</p><h3 id="小故事-35"><a href="#小故事-35" class="headerlink" title="小故事"></a>小故事</h3><p>Tom moved to a new city for work. Everything was different – the food, the language, the weather. But Tom was determined. He learned the local language, tried new dishes, and bought warm clothes. Slowly, he adapted to his new life. </p><p>汤姆因为工作搬到了一个新的城市。所有事情都不一样——食物、语言、天气。但汤姆决心满满。他学习了当地语言，尝试了新菜肴，还买了保暖的衣服。渐渐地，他适应了新的生活。</p><p>中文翻译：汤姆因为工作搬到了一个新城市。周围的一切都不同——食物、语言、天气。但是汤姆决心坚强。他学习了当地方言，品尝了新食物，还买了保暖的衣物。慢慢地，他适应了他的新生活。</p><hr><h2 id="addict"><a href="#addict" class="headerlink" title="addict"></a>addict</h2><h3 id="分析词义-36"><a href="#分析词义-36" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Addict” 这个词在英语中通常指的是一个人对某种物质（如药物）、行为或活动有强烈的依赖性，无法自控。中文可以翻译为“瘾君子”或“上瘾者”。</p><h3 id="列举例句-36"><a href="#列举例句-36" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>He is an addict to online gaming and spends all day in front of the computer.<ul><li>他是个网瘾少年，整天都坐在电脑前。</li></ul></li><li>Many addicts find it hard to quit smoking despite knowing the health risks.<ul><li>尽管知道吸烟对健康的危害，许多上瘾者发现戒烟很难。</li></ul></li><li>She was a shopaholic, constantly seeking the thrill of a new purchase.<ul><li>她是个购物狂，总是追求购买新东西的刺激感。</li></ul></li></ol><h3 id="词根分析-36"><a href="#词根分析-36" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Addict” 来自于拉丁语 “addictus”，意为“完全给予，委托”，在英语中，该词根已经演变为表示“上瘾”的意思。</p><h3 id="词缀分析-36"><a href="#词缀分析-36" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Addict” 本身可以看作是由 “add”（添加）和 “ict”（词尾，表示动作或状态）组成。</li></ul><h3 id="发展历史和文化背景-36"><a href="#发展历史和文化背景-36" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Addict” 这个词在历史上有从原本的“委托”含义转变为描述个人对某物依赖的含义。在欧美文化中，它通常带有负面色彩，指某人失去了对某行为的控制力。</p><h3 id="单词变形-36"><a href="#单词变形-36" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>Noun: Addiction（名词：上瘾）</li><li>Verb: To addict（动词：使上瘾）</li><li>Adjective: Addictive（形容词：上瘾的）</li></ul><h3 id="记忆辅助-36"><a href="#记忆辅助-36" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “addict” 这个词，可以联想记忆：“A（一个）+ dd（看作’double double’, 表示加倍）+ i（我）+ cct（看作’coca’, 可乐的简写），即一个人加倍沉迷于可乐等，就像是上瘾了一样。”</p><h3 id="小故事-36"><a href="#小故事-36" class="headerlink" title="小故事"></a>小故事</h3><p>John realized he was an addict when he couldn’t go a day without his phone. He felt restless and anxious without it. One day, he left his phone at home by mistake. At work, he kept checking his pockets, feeling something was missing. The day was tough, but it made John decide to break his addiction.</p><ul><li>约翰意识到自己是个上瘾者，因为有一天他离开手机就度日如年。没有手机他感到焦躁不安。有一天，他不小心把手机忘在家里了。在工作时，他一直检查自己的口袋，感觉少了什么。那一天很艰难，但也让约翰决定戒掉自己的手机瘾。</li></ul><p>中文翻译：约翰在一天没有手机时就意识到自己是个上瘾者。没有手机他感到心神不宁。有一天，他意外地把手机留在了家里。在工作时，他一直觉得少了什么，不停地检查口袋。虽然那天很难熬，但也让约翰决定要摆脱对手机的依赖。</p><hr><h2 id="addition"><a href="#addition" class="headerlink" title="addition"></a>addition</h2><h3 id="分析词义-37"><a href="#分析词义-37" class="headerlink" title="分析词义"></a>分析词义</h3><p>“addition” 是一个名词，它的基本意思是“添加”、“加法”或“增加物”。在数学中，它指的是两个或多个数值相加的过程或结果。在日常用语中，它可以指任何类型的增加或添加到某事物中的东西。</p><h3 id="列举例句-37"><a href="#列举例句-37" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>In mathematics, we use addition to find the sum of two or more numbers.</p><ul><li>在数学中，我们使用加法来找出两个或更多数字的和。</li></ul></li><li><p>In addition to the main course, there was a variety of delicious desserts.</p><ul><li>除了主菜之外，还有各种美味的甜点。</li></ul></li><li><p>The new wing is an addition to the school building.</p><ul><li>新的侧翼建筑是学校建筑的增建部分。</li></ul></li></ol><h3 id="词根分析-37"><a href="#词根分析-37" class="headerlink" title="词根分析"></a>词根分析</h3><p>“addition” 来自于动词 “add”，意为“添加”。</p><ul><li>“add”：添加</li></ul><p>由这个词根衍生出来的其他单词：</p><ul><li>addend：加数（参与加法运算的数）</li><li>adder：加法器（在计算器中用于加法的部分）</li></ul><h3 id="词缀分析-37"><a href="#词缀分析-37" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“add-“：这是词根，意为“添加”。</li><li>“-ition”：这是后缀，通常表示动作或过程，常见于形成名词。</li></ul><p>相同词缀的其他单词：</p><ul><li>permission（许可）</li><li>position（位置）</li></ul><h3 id="发展历史和文化背景-37"><a href="#发展历史和文化背景-37" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“addition” 这个词来源于拉丁语的 “additionem”，”additionem” 是由动词 “addere” 派生出来的。”addere” 意为“加到一起”，在历史上，这个概念在数学运算中尤为重要，因为加法是最基础的数学运算之一。</p><h3 id="单词变形-37"><a href="#单词变形-37" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：addition（加法，增加）</li><li>动词：add（添加）</li><li>形容词：additive（添加的，附加的）</li><li>副词：additionally（另外，此外）</li></ul><p>固定搭配：</p><ul><li>in addition to（除了…之外）</li><li>addition of（…的增加）</li></ul><h3 id="记忆辅助-37"><a href="#记忆辅助-37" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记忆 “addition”，你可以联想 “add”（添加）加上 “-ition”（动作或过程的后缀），意味着一个东西被添加进来的过程。</p><h3 id="小故事-37"><a href="#小故事-37" class="headerlink" title="小故事"></a>小故事</h3><p>One day, Tom was calculating his expenses and found that, in addition to his rent, he spent a lot on books. He decided to buy fewer books and save more.<br>有一天，汤姆在计算他的开销时发现，除了房租，他在书上花了很多钱。他决定少买书，多存钱。</p><p>中文翻译：<br>有一天，汤姆在算他的开销，他发现除了房租之外，他在书上花费了很多。因此他决定减少购买书籍，以便能够存下更多的钱。</p><hr><h2 id="additional"><a href="#additional" class="headerlink" title="additional"></a>additional</h2><h3 id="分析词义-38"><a href="#分析词义-38" class="headerlink" title="分析词义"></a>分析词义</h3><p>“additional” 是一个形容词，意思是“附加的，额外的”。它用来描述除了已经有的或已提到的事物之外，还需要或提供的更多事物。</p><h3 id="列举例句-38"><a href="#列举例句-38" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>I need to pay an additional fee for the extra baggage.（我需要为额外行李支付附加费用。）</li><li>The teacher gave us additional homework to improve our skills.（老师为了提高我们的技能，给了我们额外的家庭作业。）</li><li>The company is offering additional benefits to attract more employees.（公司提供额外福利以吸引更多员工。）</li></ol><h3 id="词根分析-38"><a href="#词根分析-38" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“add” 是词根，意为“加，增加”。</li><li>“-ition” 是名词后缀，常用来构成抽象名词，这里转化成了形容词。</li></ul><h3 id="词缀分析-38"><a href="#词缀分析-38" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“add-“：表示“加，增加”的意思。</li><li>“-itional”：是形容词后缀，表示“关于，属于”的意思。</li></ul><h3 id="发展历史和文化背景-38"><a href="#发展历史和文化背景-38" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“additional” 来自古拉丁语的 “additionem”，”addition” 的变形。”addition” 本身就是由 “add” 发展来的，意为“加法”或“增加之物”。</p><h3 id="单词变形-38"><a href="#单词变形-38" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式：addition（附加，增加）</li><li>动词形式：add（添加）</li><li>副词形式：additionally（此外，另外）</li></ul><h3 id="记忆辅助-38"><a href="#记忆辅助-38" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “additional”，可以联想记忆：”add”（加）+ “-ition”（名词后缀变形为形容词后缀）&#x3D; “additional”（额外的），就像是给事物做“加法”，使之变得“更多”。</p><h3 id="小故事-38"><a href="#小故事-38" class="headerlink" title="小故事"></a>小故事</h3><p>Tom found an additional treasure chest on the beach, which made his discovery even more exciting.（汤姆在海滩上发现了一个额外的宝箱，这让他的发现变得更加令人激动。）</p><p>汤姆在海滩上挖寻宝物时，意外地发现了一个他之前没注意到的宝箱。这个额外的发现让他心跳加速，充满了更多的好奇和惊喜。</p><hr><h2 id="adequate"><a href="#adequate" class="headerlink" title="adequate"></a>adequate</h2><h3 id="分析词义-39"><a href="#分析词义-39" class="headerlink" title="分析词义"></a>分析词义</h3><p>“adequate” 是一个形容词，意思是足够的，符合要求的，能够满足某种需要或标准。在中文中，我们可以将它理解为“充足的”、“合适的”、“可以接受的”。</p><h3 id="列举例句-39"><a href="#列举例句-39" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>We need to ensure that there is an adequate supply of water for the village.<br>我们需要确保为这个村子提供足够的水资源。<br>（在这里，“adequate”强调供应量达到了必要的要求。）</p></li><li><p>Are you confident that your skills are adequate for the job?<br>你确定你的技能足以胜任这份工作吗？<br>（这里的“adequate”表明技能需要满足工作的基本要求。）</p></li><li><p>The teacher thought the student’s explanation was adequate.<br>老师认为学生的解释是合理的。<br>（这里的“adequate”表示解释达到了令人满意的水平。）</p></li></ol><h3 id="词根分析-39"><a href="#词根分析-39" class="headerlink" title="词根分析"></a>词根分析</h3><p>“adequate” 来自拉丁语 “ad”（表示“向”或“直到”）和 “equus”（意为“平等”或“相等”）。所以，字面上的意思是指“达到相等或足够的程度”。</p><h3 id="词缀分析-39"><a href="#词缀分析-39" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “ad-“ 在这里相当于 “to” 或 “towards”，表示方向或程度。</li><li>词根 “-equ-“ 来自拉丁语 “equus”，意为“平等”。</li><li>后缀 “-ate” 通常表示形容词，有时会加强词义。</li></ul><p>其他带有相同前缀的单词如 “adjust”（调整），”administer”（管理）。</p><h3 id="发展历史和文化背景-39"><a href="#发展历史和文化背景-39" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“adequate” 这个词在历史上起源于拉丁语，后来进入英语。在欧美文化中，它经常被用来评价事物是否达到了一定的标准或期望。</p><h3 id="单词变形-39"><a href="#单词变形-39" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式：adequacy（充足性）</li><li>形容词比较级：more adequate</li><li>形容词最高级：most adequate</li></ul><h3 id="记忆辅助-39"><a href="#记忆辅助-39" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记忆”adequate”，你可以联想“ad-”像“add”（加）的发音，而“quate”听起来像是“quate”数量。所以，“add”了足够的“quantity”就是“adequate”（足够的）。</p><h3 id="小故事-39"><a href="#小故事-39" class="headerlink" title="小故事"></a>小故事</h3><p>Tom felt his efforts were never adequate for his demanding boss. One day, he presented a project that was not only on time but also beyond expectations. Finally, his boss nodded with an “adequate” smile.</p><p>汤姆总觉得他的努力永远无法满足苛刻老板的要求。有一天，他提交了一个不仅按时完成而且超出了预期的项目。最终，他的老板满意地点头，露出了一个“足够”的微笑。</p><p>中文翻译：<br>汤姆总觉得他的努力对于他那苛刻的老板来说永远不够。然而有一天，他提交了一个项目，它不仅准时完成，还超出了预期。最终，他的老板满意地点了点头，露出了一次“足够”的微笑。</p><hr><h2 id="adhere"><a href="#adhere" class="headerlink" title="adhere"></a>adhere</h2><h3 id="分析词义-40"><a href="#分析词义-40" class="headerlink" title="分析词义"></a>分析词义</h3><p>“adhere” 是一个动词，意思是“粘附；坚持；遵守”。它可以用在物理意义上，表示物体之间的粘合，也可以用在抽象意义上，表示坚持某种观点、原则或承诺。</p><h3 id="列举例句-40"><a href="#列举例句-40" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The label adhered firmly to the jar.（标签紧紧地贴在了罐子上。）</li><li>We should adhere to our principles even in difficult times.（即使在困难时期，我们也应该坚持自己的原则。）</li><li>He adheres to a strict diet and exercise regimen.（他严格遵守一套严格的饮食和锻炼制度。）</li></ol><h3 id="词根分析-40"><a href="#词根分析-40" class="headerlink" title="词根分析"></a>词根分析</h3><p>“adhere” 来自拉丁语 “adhaerere”，意为“粘附；坚持”。</p><ul><li>“ad-“ 是前缀，意为“向，朝”。</li><li>“-haerere” 是词根，意为“粘附”。</li></ul><h3 id="词缀分析-40"><a href="#词缀分析-40" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ad-“：表示方向或强调。</li><li>“-here-“：来自拉丁语词根，表示“粘附”。</li><li>“-e-“：通常不改变词义，但有助于发音。</li><li>“-r-“：也是不改变意义的后缀，帮助构成动词形式。</li></ul><p>其他包含 “ad-“ 的单词：administrate（管理）, adjudicate（裁决）。</p><h3 id="发展历史和文化背景-40"><a href="#发展历史和文化背景-40" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“adhere” 的词源可以追溯到古罗马时期，当时它描述的是物体物理上的粘附。随着时间的推移，它扩展到了心理或道德上的坚持。</p><h3 id="单词变形-40"><a href="#单词变形-40" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：adherence（遵守；忠诚）</li><li>形容词：adherent（粘附的；坚持的）</li><li>副词：adhesively（粘附地）</li></ul><h3 id="记忆辅助-40"><a href="#记忆辅助-40" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>可以将 “adhere” 和 “here” 联想在一起，”ad-“ 可以想象成一个人正在朝着 “here”（这里）粘东西，以此来记忆 “粘附” 的意思。</p><h3 id="小故事-40"><a href="#小故事-40" class="headerlink" title="小故事"></a>小故事</h3><p>One winter morning, Jane adhered to her resolution and went for a run. Despite the cold, she stuck to her exercise plan.（一个冬天的早晨，简坚持了她的决心去跑步。尽管天气寒冷，她还是坚持她的锻炼计划。）</p><p>在冬天的早晨，简坚持了自己的决定，去外面跑步。尽管天气很冷，她依然按照计划坚持锻炼。</p><hr><h2 id="adjacent"><a href="#adjacent" class="headerlink" title="adjacent"></a>adjacent</h2><h3 id="分析词义-41"><a href="#分析词义-41" class="headerlink" title="分析词义"></a>分析词义</h3><p>“adjacent” 是一个形容词，意思是两个事物靠近或者相邻。在空间上，它指的是紧挨着的，在时间上则可以指连续的或紧接着的。</p><h3 id="列举例句-41"><a href="#列举例句-41" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The kitchen is adjacent to the dining room.<ul><li>厨房紧邻餐厅。</li></ul></li><li>Their homes are adjacent to each other.<ul><li>他们的家彼此相邻。</li></ul></li><li>The conference will be held in the adjacent room.<ul><li>会议将在隔壁房间举行。</li></ul></li></ol><h3 id="词根分析-41"><a href="#词根分析-41" class="headerlink" title="词根分析"></a>词根分析</h3><p>“adjacent” 来自拉丁语 “adjacens”，”ad-“ 是前缀，意为“向，朝着”，”jacens” 是词根，意为“躺，放置”。组合起来就是“放置在一起”或“靠近”的意思。</p><h3 id="词缀分析-41"><a href="#词缀分析-41" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “ad-“：表示方向或位置，如 “adhere”（粘附）。</li><li>词根 “-jacens”：表示放置或位置。</li></ul><h3 id="发展历史和文化背景-41"><a href="#发展历史和文化背景-41" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“adjacent” 一词在英语中使用已久，它源自拉丁语，拉丁语又是欧洲多种语言的祖先，因此这个词在欧洲文化中有着广泛的运用。在建筑、城市规划等领域，这个词经常用来描述地理位置。</p><h3 id="单词变形-41"><a href="#单词变形-41" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：adjacency（相邻）</li><li>副词：adjacently（相邻地）</li></ul><h3 id="记忆辅助-41"><a href="#记忆辅助-41" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “adjacent” 这个词，可以联想记忆 “ad-“（向）和 “jacens”（放），就像是把两个东西向彼此放置，使之相邻。</p><h3 id="小故事-41"><a href="#小故事-41" class="headerlink" title="小故事"></a>小故事</h3><p>Tom moved to a new house. He loved that the park was adjacent to his backyard. Every morning, he walked his dog in the park, enjoying the adjacent greenery.</p><ul><li>汤姆搬进了一座新房子。他非常喜欢公园和他的后院相邻。每天早上，他都在公园里遛狗，享受相邻的绿地。</li></ul><p>中文翻译：<br>汤姆搬到了一栋新房子。他很高兴公园和他的后院紧挨着。每天早上，他都会在公园遛狗，享受着这片相邻的绿色空间。</p><hr><h2 id="adjoin"><a href="#adjoin" class="headerlink" title="adjoin"></a>adjoin</h2><h3 id="分析词义-42"><a href="#分析词义-42" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Adjoin” 是一个动词，意思是两个事物紧挨着或者相连。在空间上，它指的是两个地方或物体共享一个共同的边界；在抽象意义上，它可以指两个概念或想法密切关联。</p><h3 id="列举例句-42"><a href="#列举例句-42" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The kitchen adjoins the dining room.</p><ul><li>厨房和餐厅相连。</li></ul></li><li><p>The hotel adjoins the shopping mall, which is very convenient for guests.</p><ul><li>那家酒店与购物中心相邻，这对客人来说非常方便。</li></ul></li><li><p>Two adjoined lots provide enough space for the new building.</p><ul><li>两个相邻的地块为这座新大楼提供了足够的空间。</li></ul></li></ol><h3 id="词根分析-42"><a href="#词根分析-42" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Adjoin” 来自于拉丁词根 “ad-“，意为 “to, toward, near”，和 “join”，意为 “连接”。</p><h3 id="词缀分析-42"><a href="#词缀分析-42" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ad-“：前缀，表示方向或接近。</li><li>“-join”：词根，表示连接或结合。</li><li>“-ing”：动词现在分词后缀。</li></ul><p>其他带有 “ad-“ 前缀的单词：</p><ul><li>adapt（适应）</li><li>adhere（粘附）</li></ul><p>其他带有 “-join” 词根的单词：</p><ul><li>joint（关节）</li><li>junction（交汇处）</li></ul><h3 id="发展历史和文化背景-42"><a href="#发展历史和文化背景-42" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Adjoin” 一词在英语中有着悠久的历史，其使用可以追溯到15世纪，当时主要用来描述地理位置上的邻近。随着时间的推移，它的使用扩展到了抽象的概念上。</p><h3 id="单词变形-42"><a href="#单词变形-42" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：adjoining（相邻的）</li><li>形容词：adjoinable（可相邻的）</li><li>动词时态：adjoins, adjoined, adjoining</li></ul><h3 id="记忆辅助-42"><a href="#记忆辅助-42" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “adjoin” 这个词，可以联想记忆 “ad-“（表示向着）和 “join”（连接），想象两个东西是如何向着彼此移动并最终连接在一起的。</p><h3 id="小故事-42"><a href="#小故事-42" class="headerlink" title="小故事"></a>小故事</h3><p>In the small village, Tom’s house adjoins the forest. One morning, he found a rabbit calmly sitting in his garden, as if it knew the garden adjoined the safety of the woods.</p><p>在村庄里，汤姆的房子与森林相邻。有一天早上，他发现了一只兔子在他花园里安静地坐着，好像它知道这个花园与安全的树林是相连的。</p><hr><h2 id="adjust"><a href="#adjust" class="headerlink" title="adjust"></a>adjust</h2><h3 id="分析词义-43"><a href="#分析词义-43" class="headerlink" title="分析词义"></a>分析词义</h3><p>“adjust” 这个词是动词，意思是“调整；适应；校准”。它表示使某事物达到正确的状态或适合某个情况的过程。</p><h3 id="列举例句-43"><a href="#列举例句-43" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>He adjusted the volume on the radio.（他调整了收音机的音量。）<ul><li>用于描述对设备设置的改变。</li></ul></li><li>She had to adjust to the new environment quickly.（她不得不快速适应新环境。）<ul><li>用于描述人对新情况的适应。</li></ul></li><li>The mechanic adjusted the brakes on the car.（机械师调整了汽车的刹车。）<ul><li>用于描述修理过程中对部件的校准。</li></ul></li></ol><h3 id="词根分析-43"><a href="#词根分析-43" class="headerlink" title="词根分析"></a>词根分析</h3><p>“adjust” 的词根是 “ajust”，来自于拉丁语 “ajustare”，意为“使正确，使合适”。</p><h3 id="词缀分析-43"><a href="#词缀分析-43" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ad-“：这是一个拉丁前缀，表示“向；朝；增加”。</li><li>“-just-“：这部分来自拉丁语 “justus”，意为“正直，正确”。</li><li>“-t”：表示动词的后缀。</li></ul><h3 id="发展历史和文化背景-43"><a href="#发展历史和文化背景-43" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“adjust” 这个词最早可以追溯到中世纪英语，来自拉丁语的 “ajustare”。在欧美文化中，它广泛用于描述改变以适应新情况或标准的行为。</p><h3 id="单词变形-43"><a href="#单词变形-43" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：adjustment（调整；适应）</li><li>动词时态：adjusts, adjusting, adjusted</li><li>形容词：adjustable（可调整的）</li><li>副词：adjustably（可调整地）</li></ul><h3 id="记忆辅助-43"><a href="#记忆辅助-43" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “adjust”，可以联想记忆：“ad-”（增加）加上 “-just”（正确），就像是调整以达到正确或更适合的状态。</p><h3 id="小故事-43"><a href="#小故事-43" class="headerlink" title="小故事"></a>小故事</h3><p>John moved to a new town and had to adjust to the slower pace of life. At first, he felt restless, but soon he learned to enjoy the tranquility.（约翰搬到了一个新城镇，不得不适应更慢的生活节奏。起初，他感到焦躁不安，但很快他就学会了享受宁静。）</p><p>中文翻译：约翰搬到了一个新镇子，他必须适应这里更慢的生活节奏。一开始他觉得很不习惯，但不久后，他开始享受这份宁静。</p><hr><h2 id="administration"><a href="#administration" class="headerlink" title="administration"></a>administration</h2><h3 id="分析词义-44"><a href="#分析词义-44" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Administration” 这个单词在英语中通常指的是管理、行政或治理的过程和机构。它可以用来描述组织、公司、政府或其他实体中的管理和行政工作。</p><h3 id="列举例句-44"><a href="#列举例句-44" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The new administration has promised to reform the healthcare system.</p><ul><li>新政府承诺要改革医疗保健体系。</li></ul></li><li><p>He is responsible for the administration of the company’s finances.</p><ul><li>他负责公司的财务管理。</li></ul></li><li><p>The university has a strong administration that ensures everything runs smoothly.</p><ul><li>大学有一个强大的行政机构，确保一切运作顺利。</li></ul></li></ol><h3 id="词根分析-44"><a href="#词根分析-44" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“Administer” 是这个词的动词形式，来源于拉丁语 “administerre”，意为“管理”或“提供服务”。</li><li>“Minister” 是词根，意为“服务”或“管理”。</li></ul><h3 id="词缀分析-44"><a href="#词缀分析-44" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Ad-“ 是前缀，表示“向”或“加强”。</li><li>“-minister” 是词根。</li><li>“-ation” 是后缀，通常加在动词后面，形成名词，表示过程或结果。</li></ul><h3 id="发展历史和文化背景-44"><a href="#发展历史和文化背景-44" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Administration” 一词源自拉丁语，进入中古英语后，逐渐演变为描述管理或治理行为的术语。在现代英语中，它广泛应用于政治、商业和教育等多个领域。</p><h3 id="单词变形-44"><a href="#单词变形-44" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：Administrator（管理员）</li><li>形容词：Administrative（行政的）</li><li>动词：Administer（管理）</li><li>副词：Administratively（在行政上）</li></ul><h3 id="记忆辅助-44"><a href="#记忆辅助-44" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “administration” 这个单词，可以将其拆分为 “admin”（看起来像administrator的缩写）和 “-istration”（看起来像 “stration”，联想到 “stration” 是压力 “stress” 的变形，管理往往是有压力的工作）。</p><h3 id="小故事-44"><a href="#小故事-44" class="headerlink" title="小故事"></a>小故事</h3><p>In the new school administration, Mr. Smith was in charge. He was known for his strict yet fair administration. One day, a student complained about the lunch menu. Mr. Smith listened carefully and promised an immediate administration review. The next day, a better menu was in place, showing the effectiveness of his administration.</p><p>在新的学校管理层中，史密斯先生负责。他以其严格而公正的管理而闻名。有一天，一名学生对午餐菜单提出了投诉。史密斯先生认真听取了意见，并承诺立即进行行政审查。第二天，一个更好的菜单出现了，显示了管理层的高效。</p><p>新学校的管理层由史密斯先生负责。他严格执行但公正的管理风格为人所知。有个学生对午餐菜单不满，史密斯先生耐心倾听并立刻承诺进行行政复核。隔天，一个改良后的菜单投入使用，体现了管理层的高效率。</p><hr><h2 id="admit"><a href="#admit" class="headerlink" title="admit"></a>admit</h2><h3 id="分析词义-45"><a href="#分析词义-45" class="headerlink" title="分析词义"></a>分析词义</h3><p>“admit” 这个单词是一个动词，意思是“接受”，“承认”或“准许进入”。在具体情境中，它可以指允许某人进入某个地方，或者在更抽象的层面上，指接受某种观点或事实。</p><h3 id="列举例句-45"><a href="#列举例句-45" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The hospital admitted him for emergency treatment.<ul><li>医院接收他进行紧急治疗。</li></ul></li><li>She admitted her mistake and apologized.<ul><li>她承认了错误并道歉。</li></ul></li><li>The company admits employees to its annual conference.<ul><li>公司允许员工参加年度会议。</li></ul></li></ol><h3 id="词根分析-45"><a href="#词根分析-45" class="headerlink" title="词根分析"></a>词根分析</h3><p>“admit” 来自拉丁语 “admittere”，这个词由两部分组成：</p><ul><li>“ad-“ 是一个前缀，意思是“向”，“朝着”或“加强”。</li><li>“-mittere” 是词根，意味着“送”，“放出”。</li></ul><h3 id="词缀分析-45"><a href="#词缀分析-45" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ad-“：如上所述，是一个前缀，表示方向或加强。</li><li>“-mit”：来自拉丁语词根，表示“送出”。</li><li>“-t”：在这里起到连接作用，帮助发音。</li></ul><p>其他包含词缀 “-mit” 的单词：</p><ul><li>commit：承诺</li><li>permit：允许</li><li>submit：提交</li></ul><h3 id="发展历史和文化背景-45"><a href="#发展历史和文化背景-45" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“admit” 这个词在中古英语中首次出现，源于拉丁语的 “admittere”。在欧洲文化中，”admit” 的使用与法律、教育和医疗等多个领域有关，通常涉及到进入或接受的权利。</p><h3 id="单词变形-45"><a href="#单词变形-45" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：admission（n.）- 入场&#x2F;承认</li><li>形容词：admittable（adj.）- 可准入的</li><li>副词：admittingly（adv.）- 公认地</li><li>动词时态：<ul><li>过去式：admitted</li><li>现在分词：admitting</li><li>过去分词：admitted</li></ul></li></ul><h3 id="记忆辅助-45"><a href="#记忆辅助-45" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “admit” 可以通过联想记忆法：想象一个人拿着 “ad-“（广告牌）”mit”（送出）给门卫，请求进入一个地方。</p><h3 id="小故事-45"><a href="#小故事-45" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was nervous as he was admitted to the university. It was a big step in his life.<br>汤姆被大学录取时非常紧张。这是他人生中的一大步。</p><p>Tom felt both excited and scared as he walked through the gates, admitted to a new chapter of his life.<br>当汤姆走过大门，被接纳进入人生新篇章时，他感到既兴奋又害怕。</p><p>中文翻译：<br>汤姆被大学录取时非常紧张。这是他人生的一大步。当他走过大门，被接纳进入生活的新章节时，他既兴奋又害怕。</p><hr><h2 id="adolescent"><a href="#adolescent" class="headerlink" title="adolescent"></a>adolescent</h2><h3 id="分析词义-46"><a href="#分析词义-46" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Adolescent” 是一个形容词，指的是与青少年相关的或者是青少年时期的。它通常用来描述大约13到19岁的人，这个年龄段的人正处于童年和成年之间的过渡期。</p><h3 id="列举例句-46"><a href="#列举例句-46" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>During the adolescent years, many young people start to develop a sense of identity.<br>在青少年时期，许多年轻人开始形成自我认同感。</p></li><li><p>Adolescent rebellion is a common phase that many parents find challenging to deal with.<br>青少年的反叛是许多父母觉得难以应对的常见阶段。</p></li><li><p>The book offers valuable advice for adolescents on how to handle peer pressure.<br>这本书为青少年提供了关于如何应对同伴压力的宝贵建议。</p></li></ol><h3 id="词根分析-46"><a href="#词根分析-46" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“Adolescent” 来自拉丁词 “adolescere”，意为 “成长，成熟”。</li><li>“Ad-“ 是前缀，意为 “向，朝”，”olescere” 是词根，意为 “成长”。</li></ul><h3 id="词缀分析-46"><a href="#词缀分析-46" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Ad-“：表示方向或趋势。</li><li>“-olescent”：是动词词根 “olescere” 的形容词后缀形式，表示 “正在成长的”。</li></ul><h3 id="发展历史和文化背景-46"><a href="#发展历史和文化背景-46" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Adolescent” 这个词在英语中有着悠久的历史，它源自于拉丁语，反映了西方社会对青少年成长阶段的关注。在欧美文化中，青少年时期被视为一个人形成自我意识、探索身份和独立性的关键时期。</p><h3 id="单词变形-46"><a href="#单词变形-46" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：Adolescence（青春期）</li><li>复数形式：无特殊复数形式</li></ul><h3 id="记忆辅助-46"><a href="#记忆辅助-46" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “adolescent” 这个词，可以联想它是由 “adol”（类似 “adult”，成人）和 “escent”（类似 “ascend”，上升）组合而成，意味着一个人正在成长，迈向成年。</p><h3 id="小故事-46"><a href="#小故事-46" class="headerlink" title="小故事"></a>小故事</h3><p>John was an adolescent who loved playing video games. One day, his mother told him, “Enough gaming, it’s time for your homework.” John pouted but eventually agreed. He knew adolescence was also about responsibilities.</p><p>约翰是一个喜欢玩视频游戏的青少年。有一天，他妈妈告诉他：“别玩了，去做作业吧。”约翰撅起了嘴，但最后还是同意了。他知道青春期也意味着要承担责任。</p><p>约翰是一个正处于青春期的男孩，他非常喜欢玩视频游戏。有一天，他的妈妈提醒他游戏时间够了，该去做作业了。虽然他不太高兴，但还是接受了。他明白，青春期不仅仅是玩乐，还意味着要承担起责任。</p><hr><h2 id="adopt"><a href="#adopt" class="headerlink" title="adopt"></a>adopt</h2><h3 id="分析词义-47"><a href="#分析词义-47" class="headerlink" title="分析词义"></a>分析词义</h3><p>“adopt”这个单词在英语中通常指“采纳、接受、收养”。它可以用于不同的情境，比如在正式的决策过程中采纳某个建议，或者是指个人或家庭收养一个孩子。</p><h3 id="列举例句-47"><a href="#列举例句-47" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The company has decided to adopt the new policy.<br>公司决定采用新政策。</p></li><li><p>They adopted a stray dog from the animal shelter.<br>他们从动物收容所收养了一只流浪狗。</p></li><li><p>Many couples choose to adopt children who need a loving home.<br>许多夫妇选择收养需要爱心的家庭的孩子。</p></li></ol><h3 id="词根分析-47"><a href="#词根分析-47" class="headerlink" title="词根分析"></a>词根分析</h3><p>词根是“adopt”中的“-opt-”，它来自拉丁语“optare”，意为“选择”或“希望”。</p><h3 id="词缀分析-47"><a href="#词缀分析-47" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ad-”是一个前缀，通常表示“向”、“朝”、“增加”的意思。</li><li>“-opt-”是词根，如上所述，意为“选择”。</li><li>“-t”是动词后缀，用于形成动词。</li></ul><p>没有明显的其他单词直接由“adopt”的词根和词缀衍生，但“option”（选项）和“optimal”（最佳的）与“opt”有关。</p><h3 id="发展历史和文化背景-47"><a href="#发展历史和文化背景-47" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“adopt”一词源于拉丁语“adoptare”，最早用于描述法律上正式接纳某人成为家庭成员的过程。在欧美文化中，除了家庭收养的含义外，它也广泛用于形容组织或社会接受某种观点、技术或法律。</p><h3 id="单词变形-47"><a href="#单词变形-47" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：adoption（收养；采纳）</li><li>过去式&#x2F;过去分词：adopted（被收养的；被采纳的）</li><li>现在分词：adopting（正在收养；正在采纳）</li><li>形容词：adoptive（收养的；采纳的）</li></ul><h3 id="记忆辅助-47"><a href="#记忆辅助-47" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住“adopt”这个单词，你可以联想“ad-”（增加）和“-opt”（选择），就像是“增加一个选择”或“作出一个选择”，这可以帮助你记住它的意思。</p><h3 id="小故事-47"><a href="#小故事-47" class="headerlink" title="小故事"></a>小故事</h3><p>One cold winter night, a couple found an abandoned kitten outside their door. They decided to adopt it, giving it a warm home and naming it “Lucky”. </p><p>在一个寒冷的冬夜，一对夫妇在门外发现了一只被遗弃的小猫。他们决定收养它，给了它一个温暖的家，并给它起名叫“Lucky”。</p><p>在门外的冰冷夜晚，一对夫妇发现了一只被遗弃的小猫。他们选择收养它，为它提供了一个温馨的家，并给它取名为“幸运”。</p><hr><h2 id="adore"><a href="#adore" class="headerlink" title="adore"></a>adore</h2><h3 id="分析词义-48"><a href="#分析词义-48" class="headerlink" title="分析词义"></a>分析词义</h3><p>“adore” 是一个动词，意思是深深地爱慕、喜欢或崇拜某人或某物。这种感情比一般的喜欢要强烈得多，常常表达了近乎痴迷或崇敬的情感。</p><h3 id="列举例句-48"><a href="#列举例句-48" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>She adores her newborn baby.（她深深地爱着她刚出生的宝宝。）<ul><li>场景：一个母亲对她的孩子表达强烈的爱。</li></ul></li><li>The fans adore their idol’s music and style.（粉丝们崇拜他们偶像的音乐和风格。）<ul><li>场景：一群粉丝讨论他们对偶像的喜爱。</li></ul></li><li>He adores the peacefulness of the countryside.（他非常喜欢乡村的宁静。）<ul><li>场景：一个人表达对自然环境的强烈喜爱。</li></ul></li></ol><h3 id="词根分析-48"><a href="#词根分析-48" class="headerlink" title="词根分析"></a>词根分析</h3><p>“adore” 的词根是 “ad-“（表示朝向）和 “ore”（源自拉丁语 “diligere”，意为喜爱）。但 “adore” 本身就是一个完整的词根，并没有明显的衍生词。</p><h3 id="词缀分析-48"><a href="#词缀分析-48" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ad-“：前缀，表示朝向或增加某种意义。</li><li>无明显后缀。</li></ul><h3 id="发展历史和文化背景-48"><a href="#发展历史和文化背景-48" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“adore” 来自拉丁语 “adored”，最初的意思是“高度尊敬；热爱”。在欧美文化中，这个单词常用于描述对人的爱戴，也可以用于表达对事物、地方或活动的强烈喜爱。</p><h3 id="单词变形-48"><a href="#单词变形-48" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：adoration（崇拜，爱慕）</li><li>过去式&#x2F;过去分词：adored</li><li>现在分词：adoring</li><li>形容词：adorable（可爱的，值得崇拜的）</li></ul><h3 id="记忆辅助-48"><a href="#记忆辅助-48" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>可以将 “adore” 和 “door”（门）联系起来记忆。想象你打开门（door）时，对门外的东西感到非常喜爱（adore），这样就能记住这个单词了。</p><h3 id="小故事-48"><a href="#小故事-48" class="headerlink" title="小故事"></a>小故事</h3><p>One winter evening, John sat by the fireplace, adoring the gentle crackling of the logs.（一个冬天的晚上，约翰坐在壁炉旁，深深地喜欢着木柴轻轻的噼啪声。）</p><ul><li>中文翻译：一个冬天的夜晚，约翰坐在壁炉旁边，出神地喜爱着木柴燃烧时那柔和的噼啪声。</li></ul><hr><h2 id="advantage"><a href="#advantage" class="headerlink" title="advantage"></a>advantage</h2><h3 id="分析词义-49"><a href="#分析词义-49" class="headerlink" title="分析词义"></a>分析词义</h3><p>“advantage” 是一个名词，意味着在某些方面比其他人或事物更有利或更优秀的条件或特点。它可以指一个人在某方面的长处，也可以指在特定情境下的有利条件。</p><h3 id="列举例句-49"><a href="#列举例句-49" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>He has an advantage in height when playing basketball.（他在打篮球时拥有身高的优势。）</li><li>Early birds get the advantage of picking the best fruits at the market.（早起的人有优势可以买到市场上最好的水果。）</li><li>Knowledge is an advantage in the information age.（在信息时代，知识是一种优势。）</li></ol><h3 id="词根分析-49"><a href="#词根分析-49" class="headerlink" title="词根分析"></a>词根分析</h3><p>“advantage” 的词根是 “vantage”，来自法语 “avantage”，意为“有利条件”。前缀 “ad-“ 源自拉丁语，意为“朝向”或“增加”。</p><h3 id="词缀分析-49"><a href="#词缀分析-49" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “ad-“：表示增加或朝向。</li><li>词根 “vantage”：表示有利条件。</li><li>无明显后缀。</li></ul><h3 id="发展历史和文化背景-49"><a href="#发展历史和文化背景-49" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“advantage” 这个词在中古英语中就已经存在，源自法语，而法语则借自拉丁语 “advantagem”，这是由 “ad”（向）和 “vantagem”（优势）组成的。在欧美文化中，这个单词经常用于体育比赛、商业竞争以及日常生活中各种比较优势的场合。</p><h3 id="单词变形-49"><a href="#单词变形-49" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：advantage（优势）</li><li>形容词：advantageous（有利的）</li><li>副词：advantageously（有利地）</li><li>动词短语：have an advantage over（在某方面优于）</li></ul><h3 id="记忆辅助-49"><a href="#记忆辅助-49" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>可以将 “advantage” 与 “vantage point”（有利位置）联系起来记忆，想象一个人站在高处，能够看到更多的景象，因此拥有优势。</p><h3 id="小故事-49"><a href="#小故事-49" class="headerlink" title="小故事"></a>小故事</h3><p>Tom always had an advantage in running races because of his long legs. In the school sports day, when the whistle blew, he dashed ahead and won the race.（汤姆因为腿长，在跑步比赛中总是有优势。在学校运动会上，当哨声响起，他冲在最前面，赢得了比赛。）</p><p>中文翻译：汤姆的腿很长，在跑步比赛中总是占有优势。在学校运动会那天，哨声一响，他就冲到了最前面，最终赢得了比赛。</p><hr><h2 id="adverse"><a href="#adverse" class="headerlink" title="adverse"></a>adverse</h2><h3 id="分析词义-50"><a href="#分析词义-50" class="headerlink" title="分析词义"></a>分析词义</h3><p>“adverse” 是一个形容词，意思是反对的、不利的或有害的。它通常用来描述一个情况、影响或效果，当这些是负面的或阻碍进步的时候。</p><h3 id="列举例句-50"><a href="#列举例句-50" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The adverse weather conditions made the journey dangerous.</p><ul><li>糟糕的天气状况使得这次旅行变得危险。（中文翻译）</li></ul></li><li><p>He faced many adverse circumstances before he became successful.</p><ul><li>在他成功之前，他面临了许多不利的境遇。（中文翻译）</li></ul></li><li><p>The new policy had an adverse effect on the local businesses.</p><ul><li>新政策对当地商业产生了不利影响。（中文翻译）</li></ul></li></ol><h3 id="词根分析-50"><a href="#词根分析-50" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“ad-“ 是一个前缀，表示“向”、“朝”或“增加”的意思。</li><li>“-verse” 来自拉丁语 “versus”，意味着“转向”或“反对”。</li></ul><h3 id="词缀分析-50"><a href="#词缀分析-50" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “ad-“ 在其他单词中，如 “adventure”（冒险）或 “add”（添加）。</li><li>后缀 “-verse” 在这里并不单独作为一个后缀，但它与单词 “averse”（反对的）有关。</li></ul><h3 id="发展历史和文化背景-50"><a href="#发展历史和文化背景-50" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Adverse” 这个词源自拉丁语 “adversus”，意味着“转向对立面”。在欧美文化中，它经常被用来描述负面的情况或结果，特别是在法律、医学和商业环境中。</p><h3 id="单词变形-50"><a href="#单词变形-50" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式：adversity（逆境）</li><li>动词形式：adversify（使不利）</li><li>形容词比较级：more adverse</li><li>形容词最高级：most adverse</li><li>固定搭配：adverse conditions（不利条件）</li></ul><h3 id="记忆辅助-50"><a href="#记忆辅助-50" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “adverse”，可以联想 “ad-“ 表示“增加”，而 “-verse” 可以联想到 “reverse”（相反的）。”Adverse” 可以理解为“增加了相反的情况或效果”。</p><h3 id="小故事-50"><a href="#小故事-50" class="headerlink" title="小故事"></a>小故事</h3><p>John wanted to plant a garden, but adverse weather made it difficult. It was too cold and rainy. He didn’t give up, though. He bought seeds that could withstand the adverse conditions and waited. Finally, the weather improved, and his garden flourished.</p><ul><li>约翰想种一个花园，但是不利的天气让这变得困难。天气太冷和雨水太多。然而，他没有放弃。他买了能抵抗不利条件的种子，然后等待。最终，天气好转，他的花园茂盛起来。（中文翻译）</li></ul><hr><h2 id="advocate"><a href="#advocate" class="headerlink" title="advocate"></a>advocate</h2><h3 id="分析词义-51"><a href="#分析词义-51" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Advocate” 是一个动词和名词，作为动词时，意思是积极地为某个观点、事业或个人辩护，支持或提倡。作为名词，指的是积极提倡某种观点或为某种事业辩护的人。</p><h3 id="列举例句-51"><a href="#列举例句-51" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>Verb: He advocates for more public spending on education.<br>他提倡增加公共教育支出。</li><li>Noun: She is a strong advocate of equal rights for all.<br>她是所有人平等权利的强烈支持者。</li><li>Verb: The organization advocates against animal cruelty.<br>该组织提倡反对虐待动物。</li></ol><h3 id="词根分析-51"><a href="#词根分析-51" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Advocate” 来自古拉丁词 “advocare”，意为“召唤”或“召唤为…辩护”。</p><h3 id="词缀分析-51"><a href="#词缀分析-51" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ad-“：前缀，表示“向”、“朝”或“加强”。</li><li>“-voc-“：词根，来自拉丁语 “vocare”，意为“召唤”。</li><li>“-ate”：动词后缀，在这里是动词形式的标志。</li></ul><h3 id="发展历史和文化背景-51"><a href="#发展历史和文化背景-51" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Advocate” 一词在中世纪法律术语中使用，指代为他人辩护的律师。现在，它已经扩展到包括任何形式的提倡和支持，不仅限于法律领域。</p><h3 id="单词变形-51"><a href="#单词变形-51" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>Noun: Advocacy（n.）提倡，支持</li><li>Adjective: Advocative（adj.）提倡的，支持的</li><li>Verb forms: Advocates, advocating, advocated</li></ul><h3 id="记忆辅助-51"><a href="#记忆辅助-51" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>联想记忆法：ad（像“爱”的拼音）+voc（看作“呼唤”）+ate（吃）→因为爱，所以呼唤大家一起来支持。</p><h3 id="小故事-51"><a href="#小故事-51" class="headerlink" title="小故事"></a>小故事</h3><p>Alice is a passionate advocate for environmental protection. She often speaks at schools to educate children about the importance of recycling. Yesterday, she showed them how to make a small garden from used plastic bottles, advocating for a greener future.</p><p>爱丽丝是环境保护的热心提倡者。她经常在学校发表演讲，教育孩子们回收的重要性。昨天，她教他们如何用旧的塑料瓶制作小花园，提倡一个更加绿色的未来。</p><p>中文翻译：<br>爱丽丝非常热衷于环境保护。她经常去学校向孩子们讲解回收的重要性。昨天，她教孩子们如何用废弃的塑料瓶制作小花园，以此倡导一个更加环保的未来。</p><hr><h2 id="aerial"><a href="#aerial" class="headerlink" title="aerial"></a>aerial</h2><h3 id="分析词义-52"><a href="#分析词义-52" class="headerlink" title="分析词义"></a>分析词义</h3><p>“aerial” 这个单词在英语中通常用作形容词，意思是与空中或飞行有关的，尤其指与飞机或航空有关的。在中文中，我们可以将其理解为“空中的”、“航空的”或“飞行器的”。</p><h3 id="列举例句-52"><a href="#列举例句-52" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The birds were performing aerial acrobatics in the sky.<br>鸟儿在天空中进行着空中杂技表演。</p></li><li><p>The new aerial photography technology captures stunning images.<br>这种新的航空摄影技术捕捉到了令人惊叹的图像。</p></li><li><p>The aircraft performed an aerial survey of the area.<br>飞机对该区域进行了航空勘测。</p></li></ol><h3 id="词根分析-52"><a href="#词根分析-52" class="headerlink" title="词根分析"></a>词根分析</h3><p>词根 “aer-“ 源自拉丁语，意为 “air”（空气）。”ial” 是一个形容词后缀，用来表示与某事物有关的。</p><h3 id="词缀分析-52"><a href="#词缀分析-52" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀：无特定前缀。</li><li>词根：aer-（空气）。</li><li>后缀：-ial（形容词后缀，表示“与…有关的”）。</li></ul><p>其他带有 “-ial” 后缀的单词例如：<br>-acial (与…有关的)<br>-arial (与出版或印刷有关的)<br>-visual (与视觉有关的)</p><h3 id="发展历史和文化背景-52"><a href="#发展历史和文化背景-52" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“aerial” 这个单词源自拉丁语 “aeris”，与飞行和空气有关的事物在现代社会尤为重要，尤其是在航空和遥感技术方面。在欧美文化中，”aerial” 这个词也与自由和探险精神有关，常常与飞行员的英勇形象相联系。</p><h3 id="单词变形-52"><a href="#单词变形-52" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式：aerial（空中）、aerials（复数形式，通常指天线）</li><li>无特定动词形式，但可以构造相关动词如 “aeriate”（使…接触空气）</li><li>形容词比较级：more aerial</li><li>形容词最高级：most aerial</li></ul><h3 id="记忆辅助-52"><a href="#记忆辅助-52" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “aerial”，可以将其与 “aeroplane”（飞机）联系在一起。因为 “aeroplane” 是一种进行 “aerial”（空中）飞行的交通工具。</p><h3 id="小故事-52"><a href="#小故事-52" class="headerlink" title="小故事"></a>小故事</h3><p>One sunny day, Tom went to the airshow where he saw amazing aerial stunts. A red biplane performed loops and rolls, making the audience cheer. Tom was fascinated by the beauty and grace of the aerial display.</p><p>晴朗的一天，汤姆去了航空展，在那里他看到了令人惊叹的空中特技表演。一架红色的双翼飞机做了一系列翻滚和旋转，引得观众欢呼。汤姆被这空中表演的美丽和优雅深深吸引。</p><p>中文翻译：<br>在一个晴朗的日子里，汤姆去观看了航空展，他看到了令人惊叹的空中特技表演。一架红色的双翼飞机在空中做着翻滚和旋转，观众们都为之欢呼。汤姆被这空中表演的美丽和优雅深深迷住了。</p><hr><h2 id="aesthetic"><a href="#aesthetic" class="headerlink" title="aesthetic"></a>aesthetic</h2><h3 id="分析词义-53"><a href="#分析词义-53" class="headerlink" title="分析词义"></a>分析词义</h3><p>单词 “aesthetic” 是一个形容词，意思与美的、审美相关的、艺术感有关的或者外观上令人愉悦的事物相关。在中文中，我们可以将其理解为“审美的”或“美学的”。</p><h3 id="列举例句-53"><a href="#列举例句-53" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The interior design is known for its aesthetic appeal.<ul><li>室内设计以其审美吸引力而闻名。</li></ul></li><li>She has a keen aesthetic sense when it comes to fashion.<ul><li>当涉及时尚时，她有敏锐的审美感。</li></ul></li><li>The painting is valued not only for its aesthetic beauty but also for its historical significance.<ul><li>这幅画不仅因其审美之美，也因其历史意义而被重视。</li></ul></li></ol><h3 id="词根分析-53"><a href="#词根分析-53" class="headerlink" title="词根分析"></a>词根分析</h3><p>词根 “aesthet-“ 源自希腊语 “aisthesis”，意为感觉或感知。它可以与美学、审美相关。</p><h3 id="词缀分析-53"><a href="#词缀分析-53" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “a-“ 在这里没有特定的意义，是构成词根的一部分。</li><li>词根 “aesthet-“ 来自希腊语，意为感觉或感知。</li><li>后缀 “-ic” 通常用来形成形容词，表示“与…有关的”。</li></ul><h3 id="发展历史和文化背景-53"><a href="#发展历史和文化背景-53" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“aesthetic” 这个词源自18世纪，当时指的是与感官体验相关的美的哲学研究，即美学。在欧美文化中，它不仅与视觉艺术的美有关，还经常用于讨论文学、音乐等领域的审美标准。</p><h3 id="单词变形-53"><a href="#单词变形-53" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式：aesthetics（美学）</li><li>不存在单复数变化，作为形容词使用。</li><li>无特定动词形式，但可以使用 “aestheticize”，意为使…具有审美性质。</li></ul><h3 id="记忆辅助-53"><a href="#记忆辅助-53" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “aesthetic”，可以联想它和“aesthetically pleasing”（美观的）一起使用，帮助你联想到一切看起来让人心情愉快的事物。</p><h3 id="小故事-53"><a href="#小故事-53" class="headerlink" title="小故事"></a>小故事</h3><p>In the art gallery, Maria admired an aesthetic painting of a serene landscape. Its soft colors and harmonious composition pleased her eyes immensely.</p><ul><li>在美术馆里，玛丽亚欣赏了一幅宁静风景的审美画作。它柔和的色彩和和谐的构图极大地愉悦了她的眼睛。</li></ul><p>在美术馆里，玛丽亚被一幅描绘宁静景色的画作深深吸引。画作的色彩柔和、构图和谐，极大地吸引了她的目光。</p><hr><h2 id="affection"><a href="#affection" class="headerlink" title="affection"></a>affection</h2><h3 id="分析词义-54"><a href="#分析词义-54" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Affection” 这个单词在英语中主要指的是一种温柔、深切的感情，通常用于描述家人、朋友或爱人之间的感情。它也可以指对某个事物的喜爱或钟爱。</p><h3 id="列举例句-54"><a href="#列举例句-54" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The mother’s affection for her child is unconditional.<br>-母亲对孩子的爱是毫无条件的。</p></li><li><p>They have a deep affection for each other that has grown over the years.<br>-他们彼此之间有着随着岁月增长而加深的深厚感情。</p></li><li><p>He has a strong affection for vintage cars.<br>-他对古董车有着浓厚的喜爱。</p></li></ol><h3 id="词根分析-54"><a href="#词根分析-54" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Affection” 的词根是 “affect”，意为“影响”或“感动”。</p><h3 id="词缀分析-54"><a href="#词缀分析-54" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“af-“ 是前缀，表示“to, toward”。</li><li>“-fect-“ 是词根，来自拉丁语 “fectus”，意为“to do” 或 “to make”。</li><li>“-ion” 是后缀，表示名词。</li></ul><p>其他包含 “-ffect-“ 词根的单词：</p><ul><li>affect（动词）：影响</li><li>effect（名词&#x2F;动词）：效果；实现</li><li>defect（名词&#x2F;动词）：缺陷；偏离</li></ul><h3 id="发展历史和文化背景-54"><a href="#发展历史和文化背景-54" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Affection” 这个词源自拉丁语 “affectus”，最初意味着“感情的状态”或“被感情所动”。在欧美文化中，它常用来表达家人和亲密伙伴之间的温馨和深情。</p><h3 id="单词变形-54"><a href="#单词变形-54" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：affections（复数形式）</li><li>形容词：affectionate（表达有感情的、亲爱的）</li></ul><h3 id="记忆辅助-54"><a href="#记忆辅助-54" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过联想记忆来记住 “affection”：想象一下，当你看到 “af-“（看作 “affect” 的简写）时，想到了“影响”，再加上 “-ction”（看作 “action” 的简写），就像是某种行动带来的感情效果。</p><h3 id="小故事-54"><a href="#小故事-54" class="headerlink" title="小故事"></a>小故事</h3><p>One cold winter night, John lit a fireplace to warm his home. As the flames danced, he felt a strong affection for this simple joy, reminding him of his childhood. He shared this warmth with his family, their smiles reflecting the deep affection they had for each other.</p><p>一个寒冷的冬夜，约翰点燃壁炉来温暖他的家。火焰舞动时，他深感对这种简单快乐的喜爱，这让他想起了自己的童年。他与家人分享这份温暖，他们的微笑反映了彼此之间深厚的感情。</p><p>中文翻译：在一个寒冷的冬夜，约翰点起了壁炉来为他的家取暖。当火焰跳动时，他强烈地感受到了对这种简单快乐的喜爱，这让他回想起了自己的童年。他与家人共享这份温暖，他们脸上的微笑映射出彼此间深厚的感情。</p><hr><h2 id="affiliate"><a href="#affiliate" class="headerlink" title="affiliate"></a>affiliate</h2><h3 id="分析词义-55"><a href="#分析词义-55" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Affiliate” 这个词在英语中通常有两个意思：</p><ol><li>作为动词时，表示使某组织或个人与另一大组织建立从属或合作关系。</li><li>作为名词时，指的是与另一组织或个人建立从属或合作关系的组织或个人。</li></ol><p>用中文解释就是：</p><ol><li>动词：使成为分支机构或合作伙伴。</li><li>名词：分支机构或合作伙伴。</li></ol><h3 id="列举例句-55"><a href="#列举例句-55" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>Verb: Many online merchants affiliate with major retailers to increase their sales.<br>动词：许多在线商人成为主要零售商的合作伙伴，以增加他们的销售额。</p></li><li><p>Noun: Amazon’s affiliate program allows website owners to earn money by referring customers to its products.<br>名词：亚马逊的合作伙伴计划允许网站所有者通过推荐客户购买其产品来赚钱。</p></li><li><p>Noun: He is an affiliate of the international sports federation.<br>名词：他是国际体育联合会的分支机构。</p></li></ol><h3 id="词根分析-55"><a href="#词根分析-55" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Affiliate” 来自于拉丁语 “affiliare”，意为 “to adopt as a son” 或 “to bring into relationship”。</p><h3 id="词缀分析-55"><a href="#词缀分析-55" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“af-“ 是前缀，表示 “to, toward”。</li><li>“-fili-“ 是词根，与 “son” 或 “family” 相关。</li><li>“-ate” 是后缀，通常表示动词或形容词。</li></ul><p>其他带有 “-fili-“ 词根的单词：</p><ul><li>filial (孝顺的)</li><li>filiate (使成为分支机构)</li></ul><h3 id="发展历史和文化背景-55"><a href="#发展历史和文化背景-55" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Affiliate” 一词最初用于描述法律上的收养关系，后来逐渐演变为商业领域，指代商业实体之间的合作关系。在互联网时代，它尤其用于描述网络营销中的联盟营销，即网站主通过链接推广商家产品并从中获得佣金。</p><h3 id="单词变形-55"><a href="#单词变形-55" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词: affiliate, affiliates, affiliation (合作关系)</li><li>动词: affiliate, affiliating, affiliated</li></ul><h3 id="记忆辅助-55"><a href="#记忆辅助-55" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “affiliate” 这个词，可以将其拆分为 “af-“（表示靠近）和 “-filiate”（联想到 family，即家庭或团体）。想象自己靠近一个大家庭或团体，成为其中的一部分，这样可以帮助记忆它的意思。</p><h3 id="小故事-55"><a href="#小故事-55" class="headerlink" title="小故事"></a>小故事</h3><p>John wanted to start his own online business but had no idea where to begin. He decided to affiliate with a well-known brand, promoting their products on his website. Within a year, he earned enough to quit his day job and focus on his affiliate marketing full-time.</p><p>约翰想开一家在线商店，但不知道从哪里开始。他决定与一个知名品牌合作，在他的网站上推广他们的产品。一年之内，他赚了足够的钱，辞掉了白天的工作，全职投入到合作伙伴营销中。</p><p>中文翻译：约翰想开展自己的在线业务，但不知道如何着手。他选择成为一家知名品牌的合作伙伴，在自己的网站上推销这些产品。一年之内，他赚够了钱，辞去了日常工作，开始全职做联盟营销。</p><hr><h2 id="affirm"><a href="#affirm" class="headerlink" title="affirm"></a>affirm</h2><h3 id="分析词义-56"><a href="#分析词义-56" class="headerlink" title="分析词义"></a>分析词义</h3><p>“affirm” 是一个动词，意思是明确地表示同意或确认某事是真实的、正确的。在日常生活中，也可以理解为“肯定”或“证实”。</p><h3 id="列举例句-56"><a href="#列举例句-56" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The judge affirmed the decision of the lower court.</p><ul><li>法官确认了下级法院的判决。</li><li>在这个句子中，”affirm” 表示正式地支持和维持一个先前的决定。</li></ul></li><li><p>She affirmed her love for him in front of everyone.</p><ul><li>她在众人面前肯定了她对他的爱。</li><li>这里，”affirm” 表明了一种公开和坚定的情感表达。</li></ul></li><li><p>The company affirms its commitment to environmental protection.</p><ul><li>公司重申其对环境保护的承诺。</li><li>这里，”affirm” 用来强调公司对某项政策的持续支持和承诺。</li></ul></li></ol><h3 id="词根分析-56"><a href="#词根分析-56" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“af-“ 是前缀，表示“朝向”或“加强”的意思。</li><li>“-firm-“ 是词根，来源于拉丁语 “firmus”，意为“坚固的，稳定的”。</li></ul><h3 id="词缀分析-56"><a href="#词缀分析-56" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“af-“：在其他单词中，比如 “affiliate”（隶属），”affect”（影响），也有表达“加强”或“涉及”的意思。</li><li>“-firm-“：在英语中，”firm”（坚固的，公司）和 “confirm”（确认）等词都来自这个词根。</li><li>“-ate”：在动词后缀中，如 “terminate”（结束），”ascend”（上升），通常表示动作的完成。</li></ul><h3 id="发展历史和文化背景-56"><a href="#发展历史和文化背景-56" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“affirm” 来自中古英语 “affirmen”，源自拉丁语 “affirmare”，原意是“使坚固，确认”。在法律和正式的语境中，这个词语常用来表示对某事的正式确认或肯定。</p><h3 id="单词变形-56"><a href="#单词变形-56" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：”affirmation”（肯定，确认）</li><li>形容词：”affirmative”（肯定的）</li><li>副词：”affirmatively”（肯定地）</li></ul><h3 id="记忆辅助-56"><a href="#记忆辅助-56" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “affirm”，可以联想 “af-“（看作是“加强”）和 “-firm-“（看作是“坚固”），整体理解就是“加强地坚固地说出”或“坚定地确认”。</p><h3 id="小故事-56"><a href="#小故事-56" class="headerlink" title="小故事"></a>小故事</h3><p>Today, the CEO stood before her team and affirmed the company’s dedication to innovation.<br>今天，首席执行官站在团队面前，坚定地重申了公司对创新的承诺。</p><p>Zuojie, the CEO, stood firmly and declared, “We will continue to affirm our support for creative ideas and risky endeavors.”<br>左洁，作为首席执行官，坚定地站着并宣布：“我们将继续坚定地支持创意和冒险的努力。”</p><p>[中文翻译]<br>左洁，首席执行官，坚定地站在她的团队前，她重申了公司对创新的承诺。她说：“我们将继续肯定对创意和冒险的支持。”</p><hr><h2 id="afflict"><a href="#afflict" class="headerlink" title="afflict"></a>afflict</h2><h3 id="分析词义-57"><a href="#分析词义-57" class="headerlink" title="分析词义"></a>分析词义</h3><p>“afflict”是一个动词，意思是使某人受到痛苦或困扰。这可以指身体上的痛苦，也可以指心理或情感上的困扰。</p><h3 id="列举例句-57"><a href="#列举例句-57" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The disease afflicted him for years.（这种疾病困扰了他多年。）</li><li>She was afflicted with grief after her husband’s death.（她丈夫去世后，她沉浸在悲伤之中。）</li><li>The region is afflicted by severe poverty and hunger.（该地区深受严重的贫困和饥饿之苦。）</li></ol><h3 id="词根分析-57"><a href="#词根分析-57" class="headerlink" title="词根分析"></a>词根分析</h3><p>“afflict”来自拉丁语”affligere”，意为”打击，使痛苦”。</p><ul><li>“af-“ 是一个前缀，表示”向，对着”。</li><li>“-flict-“ 是词根，来自拉丁语”fligere”，意为”打击”。</li></ul><h3 id="词缀分析-57"><a href="#词缀分析-57" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“afflict”自身可以看作由前缀”af-“和词根”-flict-“组成。</li><li>前缀”af-“在其他单词中比如”affiliate”（加入）或”affirm”（确认）也有出现。</li><li>词根”-flict-“也出现在其他单词如”inflict”（强加，使遭受）。</li></ul><h3 id="发展历史和文化背景-57"><a href="#发展历史和文化背景-57" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“afflict”这个词在历史上常常用于描述疾病、苦难或精神上的痛苦。在宗教文本中，它也常用来描述灵魂受到的折磨。在现代社会，它依然被用来描述各种形式的痛苦和困扰。</p><h3 id="单词变形-57"><a href="#单词变形-57" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：affliction（苦难，折磨）</li><li>形容词：afflicted（受苦的，受困扰的）</li></ul><h3 id="记忆辅助-57"><a href="#记忆辅助-57" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住”afflict”，可以联想”af-“像”affair”（事务）那样，表示某种事物”向”你造成影响，而”-flict-“听起来像”effect”（影响），暗示着某种打击或影响带来的痛苦。</p><h3 id="小故事-57"><a href="#小故事-57" class="headerlink" title="小故事"></a>小故事</h3><p>In the small village, a mysterious illness afflicted the people, causing great pain. Every day, they hoped for a cure to release them from the affliction.（在那个小村庄里，一种神秘的疾病困扰着人们，带来了巨大的痛苦。他们每天都在期盼着一种能解除他们痛苦的疗法。）</p><p>在那个小村庄里，一种神秘的疾病让人们饱受折磨。他们每天都在期待着能够摆脱这种病痛的困扰。</p><hr><h2 id="aggregate"><a href="#aggregate" class="headerlink" title="aggregate"></a>aggregate</h2><h3 id="分析词义-58"><a href="#分析词义-58" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Aggregate” 这个单词在英语中通常用作形容词或名词。作为形容词，它的意思是指由多个部分或成员组合而成的整体。作为名词，它指的是这些部分或成员的组合或者总量。</p><h3 id="列举例句-58"><a href="#列举例句-58" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>Adjective usage:</p><ul><li>The aggregate score of the team decided the winner of the tournament.</li><li>球队的总分决定了锦标赛的胜者。</li></ul></li><li><p>Noun usage:</p><ul><li>He calculated the aggregate cost of the project.</li><li>他计算了整个项目的总成本。</li></ul></li><li><p>Noun usage (in a more technical sense):</p><ul><li>Aggregate demand is an important concept in macroeconomics.</li><li>总需求是宏观经济学中的一个重要概念。</li></ul></li></ol><h3 id="词根分析-58"><a href="#词根分析-58" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“Ag-“ 是一个前缀，表示“to, toward, or increase”，在词中通常表示增加或聚集。</li><li>“-GREG-“ 是词根，来自拉丁语 “gregare”，意思是“to gather together”。</li><li>“-ATE” 通常是一个后缀，在这里它使动词变成形容词。</li></ul><h3 id="词缀分析-58"><a href="#词缀分析-58" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “ag-“ 也出现在其他单词中，如 “aggregate”, “aggravate”。</li><li>后缀 “-ate” 出现在很多动词变形容词的情况下，比如 “calculate”, “validate”。</li></ul><h3 id="发展历史和文化背景-58"><a href="#发展历史和文化背景-58" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Aggregate” 来源于拉丁语 “aggregare”，它最初用于描述将事物聚集或集合在一起的行为。在现代英语中，这个词广泛应用于各个领域，如经济学、统计学和建筑学，用以表达总量或集合的概念。</p><h3 id="单词变形-58"><a href="#单词变形-58" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词: aggregation</li><li>动词: aggregate, aggregated, aggregating</li></ul><h3 id="记忆辅助-58"><a href="#记忆辅助-58" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>“Aggregate” 可以通过联想记忆来记住：“Ag”听起来像“啊”，可以想象成很多人或物“啊”的一声聚在一起，形成了一个总数或集合。</p><h3 id="小故事-58"><a href="#小故事-58" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was excited to see the aggregate result of the school’s science fair. He had worked hard on his project about solar energy. When the winner was announced, it turned out that the aggregate score of his project was the highest!</p><p>汤姆很兴奋地等着看学校科学展览的汇总结果。他为自己的太阳能项目付出了很多努力。当宣布获胜者时，他的项目的总分是最高的！</p><p>学校科学展览的汇总结果出来了，汤姆很激动。他投入了大量心血在他的太阳能项目上。最终宣布获奖者时，他的项目总分排名第一！</p><hr><h2 id="aggressive"><a href="#aggressive" class="headerlink" title="aggressive"></a>aggressive</h2><h3 id="分析词义-59"><a href="#分析词义-59" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Aggressive” 这个单词通常指的是有攻击性、积极进取或者有决心的。在中文中，我们可以将它理解为“侵略性的”、“积极的”或者“有冲劲的”。这个词语在感情色彩上可能带有一定的负面含义，因为它可能暗示过于强烈的行动或者态度。</p><h3 id="列举例句-59"><a href="#列举例句-59" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The player was penalized for his aggressive behavior on the field.<ul><li>该球员因为场上的侵略性行为被罚。</li></ul></li><li>She has an aggressive attitude towards her work, always striving for the best.<ul><li>她对工作持有积极的态度，总是力求做到最好。</li></ul></li><li>The company has an aggressive expansion plan for the next five years.<ul><li>该公司有一个积极的五年扩张计划。</li></ul></li></ol><h3 id="词根分析-59"><a href="#词根分析-59" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Aggressive” 的词根是 “gress”，意味着“走”。前缀 “ag-“ 源自拉丁语，意味着 “to”，在这里可以理解为加强语气。</p><h3 id="词缀分析-59"><a href="#词缀分析-59" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “ag-“: 表示加强，如 “aggregate”（聚集）,”agitate”（煽动）。</li><li>词根 “-gress-“: 表示走，如 “progress”（进步）,”regress”（退步）。</li><li>后缀 “-ive”: 通常用来形成形容词，表示有某种性质或倾向，如 “attractive”（吸引人的）,”productive”（多产的）。</li></ul><h3 id="发展历史和文化背景-59"><a href="#发展历史和文化背景-59" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Aggressive” 一词源自拉丁语 “aggredi”，意味着“前进”或“攻击”。在欧美文化中，这个词语可以关联到竞争激烈的体育比赛、商业行为或者个人对抗性的行为。</p><h3 id="单词变形-59"><a href="#单词变形-59" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式：aggressiveness</li><li>动词形式：aggress（进攻，侵略）</li><li>形容词比较级：more aggressive</li><li>形容词最高级：most aggressive</li><li>常见搭配：be aggressive in (在…方面积极进取)</li></ul><h3 id="记忆辅助-59"><a href="#记忆辅助-59" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好记住 “aggressive”，可以联想 “aggressive” 的 “ag-“ 和 “gress” 两个部分，”ag-“ 可以想象成 “很”，”gress” 联想到“走”，合起来就是“很往前走”，也就是积极进取或者有攻击性。</p><h3 id="小故事-59"><a href="#小故事-59" class="headerlink" title="小故事"></a>小故事</h3><p>Tom showed aggressive behavior when he fought for the last toy. In the store, he pushed others aside, determined to get it. His mother reminded him to be patient and kind.</p><p>汤姆在争抢最后一个玩具时表现出了侵略性行为。在商店里，他推开其他人，决心要得到它。他的妈妈提醒他要耐心和友善。</p><p>中文翻译：<br>汤姆为了最后一个玩具表现得很有攻击性。在商店里，他挤开其他人，决心要得到它。他的妈妈提醒他要耐心并且友善。</p><hr><h2 id="agony"><a href="#agony" class="headerlink" title="agony"></a>agony</h2><h3 id="分析词义-60"><a href="#分析词义-60" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Agony” 这个单词通常用来描述极大的痛苦，无论是身体上的还是精神上的。它比一般的“pain”或“suffering”程度要深，常常指的是一种难以忍受的、剧烈的痛苦。</p><h3 id="列举例句-60"><a href="#列举例句-60" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The injured player was in absolute agony after the collision.<ul><li>受伤的球员在碰撞之后处于极度的痛苦之中。</li></ul></li><li>She felt the agony of defeat after working so hard on the project.<ul><li>在这个项目上付出了极大的努力后，她感受到了失败的痛苦。</li></ul></li><li>The movie depicted the agony of war and its effect on the soldiers.<ul><li>这部电影描绘了战争给士兵们带来的痛苦。</li></ul></li></ol><h3 id="词根分析-60"><a href="#词根分析-60" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Agony” 的词根来自于希腊语 “agon”，意味着竞赛或者斗争，后来演变为指痛苦。</p><h3 id="词缀分析-60"><a href="#词缀分析-60" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ag-“ 是一个表示”动作”或”强调”的前缀。</li><li>“-ony” 是一个表示状态或情况的名词后缀。</li></ul><h3 id="发展历史和文化背景-60"><a href="#发展历史和文化背景-60" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Agony” 这个词源于希腊语，而在古希腊，它不仅仅指痛苦，还包含了竞赛的意思。随着时间的推移，它在英语中的意义逐渐演变为专指痛苦。在现代英语中，它经常用来形容精神上的极度苦闷或身体上的剧烈疼痛。</p><h3 id="单词变形-60"><a href="#单词变形-60" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：agony</li><li>形容词：agonic（很少使用）</li><li>动词：不存在直接的动词形式，但可以使用相关动词如 “experience agony” 或 “suffer agony”。</li></ul><h3 id="记忆辅助-60"><a href="#记忆辅助-60" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “agony” 这个词，可以想象在一个跑道上（来自词根”agon”），一个人正在经历一场极其艰难的比赛（ag- 强调了这个过程的艰难），而 “-ony” 像是在说这个状态持续不断，因此是“极大的痛苦”。</p><h3 id="小故事-60"><a href="#小故事-60" class="headerlink" title="小故事"></a>小故事</h3><p>In the dark room, Sarah sat in silence, her face twisted in agony. The broken heart made every breath feel like a battle. She knew the only cure was time.</p><p>在黑暗的房间里，莎拉静静地坐着，脸上因痛苦而扭曲。她破碎的心让每一次呼吸都像是在战斗。她知道唯一的解药就是时间。</p><p>中文翻译：在黑暗的房间里，莎拉默默地坐着，脸上因为痛苦而变形。她那颗破碎的心让每一次呼吸都像是在战斗。她知道，唯一的治疗方法就是时间。</p><hr><h2 id="agreeable"><a href="#agreeable" class="headerlink" title="agreeable"></a>agreeable</h2><h3 id="分析词义-61"><a href="#分析词义-61" class="headerlink" title="分析词义"></a>分析词义</h3><p>“agreeable” 是一个形容词，意思是使人愉快的、令人满意的或者容易相处的。它用来描述某人、某事或某种情况，让人感觉舒适、愉悦，或容易接受。</p><h3 id="列举例句-61"><a href="#列举例句-61" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The weather today is quite agreeable for a picnic.<br>今天天气很适合野餐。</li><li>She has an agreeable personality that makes her popular among friends.<br>她的性格很讨人喜欢，让他在朋友中很受欢迎。</li><li>We had an agreeable conversation over dinner.<br>我们在晚餐时进行了愉快地交谈。</li></ol><h3 id="词根分析-61"><a href="#词根分析-61" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“agree”：表示同意、一致。</li><li>“-able”：是一个常见的形容词后缀，表示“能够……的”或“值得……的”。</li></ul><h3 id="词缀分析-61"><a href="#词缀分析-61" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“agree-“：词根，来源于拉丁语“gere”，意为做、处理。</li><li>“-able”：表示形容词的后缀，表明某物具有某种性质或能力。</li></ul><h3 id="发展历史和文化背景-61"><a href="#发展历史和文化背景-61" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“agreeable” 这个词源自于拉丁语的“gere”，后来演变为法语的“agréable”，进入英语后，用以描述令人愉悦的事物或性格。在欧美文化中，这个词常用来形容良好的社交场合和令人满意的人际交往。</p><h3 id="单词变形-61"><a href="#单词变形-61" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：agreeableness</li><li>反义词：disagreeable</li><li>动词：agree</li><li>时态：agreed（过去式）、agreeing（现在分词）、agreed（过去分词）</li></ul><h3 id="记忆辅助-61"><a href="#记忆辅助-61" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>可以将 “agreeable” 和 “agree” 联系起来记，想象一下，当你同意某件事情时，是不是感觉心情很愉快？这样就能记住 “agreeable” 是形容愉快、满意的了。</p><h3 id="小故事-61"><a href="#小故事-61" class="headerlink" title="小故事"></a>小故事</h3><p>One Sunday afternoon, the park was especially agreeable. The sun was shining, children were playing, and the scent of flowers filled the air. It was a perfect day for a family outing.</p><p>一个周日下午，公园里特别宜人。阳光明媚，孩子们在玩耍，空气中弥漫着花香。那是一个家庭出游的完美日子。</p><p>中文翻译：一个周日的下午，公园非常宜人。阳光照耀，孩子们在嬉戏，空气中到处是花香。那是一个家庭出游的绝好时光。</p><hr><h2 id="aid"><a href="#aid" class="headerlink" title="aid"></a>aid</h2><h3 id="分析词义-62"><a href="#分析词义-62" class="headerlink" title="分析词义"></a>分析词义</h3><p>“aid” 这个单词在英语中通常指的是帮助、援助或支持。它可以用于描述在困难、任务或任何需要帮助的情境中提供的支持或救助。</p><h3 id="列举例句-62"><a href="#列举例句-62" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The government has sent aid to the disaster-stricken area.</p><ul><li>政府已经向受灾地区提供了援助。</li></ul></li><li><p>If you need any aid with your homework, feel free to ask me.</p><ul><li>如果你在作业上需要任何帮助，随时可以问我。</li></ul></li><li><p>The new technology is designed to aid doctors in diagnosis.</p><ul><li>这项新技术旨在帮助医生进行诊断。</li></ul></li></ol><h3 id="词根分析-62"><a href="#词根分析-62" class="headerlink" title="词根分析"></a>词根分析</h3><p>“aid” 这个单词没有明显的词根，它来自古英语 “eode”，意为 “go, way”，但现代意义主要是帮助。</p><h3 id="词缀分析-62"><a href="#词缀分析-62" class="headerlink" title="词缀分析"></a>词缀分析</h3><p>“aid” 本身是一个基本词汇，不含有常见的词缀。</p><h3 id="发展历史和文化背景-62"><a href="#发展历史和文化背景-62" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“aid” 这个词在历史上起源于古英语，其原始意义与“行走、方式”有关。但随着时间的推移，它的意义演变为今天的“帮助、援助”。在欧美文化中，”aid” 常用于描述国际救援、慈善捐助等场景。</p><h3 id="单词变形-62"><a href="#单词变形-62" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：aid, assistance, helper</li><li>动词：aid, assist, help</li><li>形容词：aided, assisting, helpful</li></ul><h3 id="记忆辅助-62"><a href="#记忆辅助-62" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “aid” 这个单词，可以联想记忆：</p><ul><li>“A” 像一个人伸出的手臂，”id” 发音像“爱得”，可以想象为伸出援助之手，给予爱心的帮助。</li></ul><h3 id="小故事-62"><a href="#小故事-62" class="headerlink" title="小故事"></a>小故事</h3><p>One day, a village was flooded, and people were trapped. Tom, a young volunteer, brought aid in the form of food and supplies. His timely help received warm applause from the villagers.</p><ul><li>一天，一个村子被洪水淹没，人们被困住了。汤姆，一个年轻的志愿者，带来了食物和物资进行援助。他及时的帮助得到了村民们热烈的掌声。</li></ul><p>希望这样的解释和例句能帮助您更好地理解和记忆 “aid” 这个单词。</p><hr><h2 id="air-conditioning"><a href="#air-conditioning" class="headerlink" title="air-conditioning"></a>air-conditioning</h2><h3 id="分析词义-63"><a href="#分析词义-63" class="headerlink" title="分析词义"></a>分析词义</h3><p>“air-conditioning” 是一个名词，指的是通过一台设备调节室内空气的温度和湿度，以达到舒适的状态的技术或系统。在中文中，我们通常称之为“空调”。</p><h3 id="列举例句-63"><a href="#列举例句-63" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The hotel rooms all come with air-conditioning for guest comfort.（这家酒店的每个房间都配备了空调，以确保客人的舒适。）</li><li>During the hot summer, air-conditioning is essential to beat the heat.（在炎热的夏天，空调是必不可少的降温设备。）</li><li>Many modern cars have climate control, an advanced form of air-conditioning.（许多现代汽车配备了气候控制系统，这是一种高级的空调形式。）</li></ol><h3 id="词根分析-63"><a href="#词根分析-63" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“air”：空气</li><li>“condition”：调节，条件</li><li>“-ing”：通常在动词后表示进行或状态</li></ul><h3 id="词缀分析-63"><a href="#词缀分析-63" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“air-“：前缀，与空气相关</li><li>“-condition”：词根，表示调节或条件</li><li>“-ing”：后缀，表示行为或状态</li></ul><h3 id="发展历史和文化背景-63"><a href="#发展历史和文化背景-63" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“air-conditioning” 这个词最早出现在20世纪初。随着技术的发展，空调已经成为现代生活中不可或缺的一部分。在欧美文化中，空调的普及也反映了人们对生活质量的追求。</p><h3 id="单词变形-63"><a href="#单词变形-63" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：air conditioner（空调设备）</li><li>动词：to air-condition（给……装空调）</li><li>形容词：air-conditioned（装有空调的）</li></ul><h3 id="记忆辅助-63"><a href="#记忆辅助-63" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>可以将 “air-conditioning” 想象成一种给“空气”赋予“条件”的魔法，让我们的居住环境变得更加舒适。</p><h3 id="小故事-63"><a href="#小故事-63" class="headerlink" title="小故事"></a>小故事</h3><p>In the heat of summer, Tom’s room felt like an oven. He turned on the air-conditioning and soon, the cool breeze made the room comfortable.（在炎炎夏日，汤姆的房间像烤箱一样热。他打开了空调，很快，凉爽的微风吹拂让房间变得舒适。）</p><p>在炎热的夏天，汤姆的房间热得像个大烤箱。他打开了空调，不久，房间的温度变得宜人，凉爽的风让人心旷神怡。</p><hr><h2 id="aisle"><a href="#aisle" class="headerlink" title="aisle"></a>aisle</h2><h3 id="分析词义-64"><a href="#分析词义-64" class="headerlink" title="分析词义"></a>分析词义</h3><p>“aisle” 这个词通常指教堂、剧院、飞机或者超市中两条排之间的走廊或通道，人们可以通过这个通道走到自己的座位或者获取商品。</p><h3 id="列举例句-64"><a href="#列举例句-64" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>In the supermarket, the aisles are filled with different kinds of products.</p><ul><li>在超市里，通道里摆满了各种各样的商品。</li></ul></li><li><p>Passengers are boarding the plane through the aisles.</p><ul><li>乘客们正在通过通道登机。</li></ul></li><li><p>The bride walked down the aisle on her wedding day.</p><ul><li>新娘在她的婚礼那天走上了红毯通道。</li></ul></li></ol><h3 id="词根分析-64"><a href="#词根分析-64" class="headerlink" title="词根分析"></a>词根分析</h3><p>“aisle” 这个词的词根并不明显，它来自古法语 “elle”，意为 “hall” 或者 “church”，但这个词根在现代英语中并不单独使用。</p><h3 id="词缀分析-64"><a href="#词缀分析-64" class="headerlink" title="词缀分析"></a>词缀分析</h3><p>“aisle” 本身并没有明显的词缀。</p><h3 id="发展历史和文化背景-64"><a href="#发展历史和文化背景-64" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“aisle” 一词的历史可以追溯到中世纪，最初指的是教堂中走道或通道。随着时间的发展，它的含义扩展到剧院、飞机等场所的通道。</p><h3 id="单词变形-64"><a href="#单词变形-64" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词: aisle（无复数形式）</li><li>形容词: aisled（有通道的）</li></ul><h3 id="记忆辅助-64"><a href="#记忆辅助-64" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了帮助记忆 “aisle” 这个词，可以想象自己在超市的走廊（aisle）里寻找商品，或者想象飞机上的走道（aisle）。</p><h3 id="小故事-64"><a href="#小故事-64" class="headerlink" title="小故事"></a>小故事</h3><p>Tom found himself in an airplane aisle, searching for his seat. He noticed a lady struggling with her bag in the overhead bin. Tom helped her, and they shared a friendly smile as he continued down the aisle to his seat.</p><p>汤姆发现自己正在飞机的通道上寻找自己的座位。他注意到一位女士正在行李架上挣扎着放包。汤姆帮了她一把，随后他在走向自己座位的时候，他们友好地相视一笑。</p><p>在飞机的通道（aisle）上，汤姆帮助了一位女士，然后沿着通道走到了自己的座位。</p><hr><h2 id="alarm"><a href="#alarm" class="headerlink" title="alarm"></a>alarm</h2><h3 id="分析词义-65"><a href="#分析词义-65" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Alarm” 这个词通常指一种警告装置或信号，用来提醒人们注意可能存在的危险或紧急情况。它还可以用作动词，表示使某人感到担忧或害怕。</p><h3 id="列举例句-65"><a href="#列举例句-65" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The smoke alarm went off in the middle of the night, waking everyone up.<ul><li>烟雾警报在半夜响起，把大家都惊醒了。</li></ul></li><li>Her sudden disappearance alarmed her friends.<ul><li>她突然消失让她的朋友们都很担心。</li></ul></li><li>The teacher’s stern voice alarmed the students, who immediately quieted down.<ul><li>老师严厉的声音使学生们安静下来。</li></ul></li></ol><h3 id="词根分析-65"><a href="#词根分析-65" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Alarm” 的词根来自拉丁语 “alarmare”，意为 “to alarm” 或 “to excite”。</p><h3 id="词缀分析-65"><a href="#词缀分析-65" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“al-“：这个词缀没有特定的意义，有时用于构成单词。</li><li>“-arm”：这部分来自拉丁语词根 “armare”，意味着 “to arm” 或 “to prepare”。</li><li>“-ing”：当 “alarm” 用作动词时，加上 “-ing” 形成现在分词，如 “alarming”。</li></ul><h3 id="发展历史和文化背景-65"><a href="#发展历史和文化背景-65" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Alarm” 这个词在历史上与军事准备有关，最初指的是准备战斗的信号。随着时间的推移，它的意义扩展到了任何形式的警告或提醒。在现代，”alarm” 通常与各种安全设备相关联，例如火灾、烟雾和入侵警报。</p><h3 id="单词变形-65"><a href="#单词变形-65" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：alarm（警报），alarms（警报，复数）</li><li>动词：alarm（使…警觉），alarmed（感到警觉的，过去分词），alarming（令人警觉的，现在分词）</li><li>形容词：alarmist（危言耸听的）</li></ul><h3 id="记忆辅助-65"><a href="#记忆辅助-65" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “alarm” 这个词，你可以想象一个警报器（alarm）在你的房间里响起来，让你从睡梦中惊醒（alarm）。警报器上的灯光闪烁，就像英文字母 “a” 和 “l” 闪烁。</p><h3 id="小故事-65"><a href="#小故事-65" class="headerlink" title="小故事"></a>小故事</h3><p>One night, the house’s alarm system suddenly activated, its loud beeping filling the silent house. John, half-asleep, stumbled out of bed, heart pounding in his chest. He quickly realized it was a false alarm and breathed a sigh of relief.</p><p>一天晚上，房子的警报系统突然启动，刺耳的哔哔声充满了寂静的房子。半梦半醒的约翰从床上跌跌撞撞地爬起来，心跳在胸膛里剧烈地跳动。他很快意识到这是一场虚惊，于是松了一口气。</p><hr><h2 id="album"><a href="#album" class="headerlink" title="album"></a>album</h2><h3 id="分析词义-66"><a href="#分析词义-66" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Album” 这个单词通常指的是一本装照片、图片或者邮票的册子。在音乐领域，它还可以指一个音乐作品集，比如一个歌手或乐队的专辑。</p><h3 id="列举例句-66"><a href="#列举例句-66" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>I bought a new album to keep my travel photos.（我买了一本新的相册来保存我的旅行照片。）</li><li>This band’s latest album is a must-have for all music lovers.（这个乐队最新的专辑是所有音乐爱好者必备的。）</li><li>My grandmother has an album full of old family photos.（我祖母有一本装满旧家庭照片的相册。）</li></ol><h3 id="词根分析-66"><a href="#词根分析-66" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Album” 来自古拉丁语的 “album”，原意是指“空白书”，特别是用来记录或者粘贴东西的书籍。</p><h3 id="词缀分析-66"><a href="#词缀分析-66" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“al-“ 是一个拉丁前缀，表示“关于”或“具有”的意思。</li><li>“-bum” 部分在拉丁语中并不单独作为词缀，但在英语中，它与“book”有关联，表示书籍。</li></ul><h3 id="发展历史和文化背景-66"><a href="#发展历史和文化背景-66" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>起初，”album” 指的是任何可以写或者贴东西的空白书。随着摄影技术的发展，它逐渐特指用来保存照片的册子。在音乐领域，这个词从20世纪开始被用来指代一系列录制的音乐作品，因为它们通常被收集在一本书状的包装里。</p><h3 id="单词变形-66"><a href="#单词变形-66" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：albums（复数形式）</li><li>在音乐领域的变形：an album release（专辑发布），a greatest hits album（精选集）</li></ul><h3 id="记忆辅助-66"><a href="#记忆辅助-66" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “album” 这个词，你可以想象一个相册里装满了你喜欢的照片，或者想象你最喜欢的歌手的新专辑。</p><h3 id="小故事-66"><a href="#小故事-66" class="headerlink" title="小故事"></a>小故事</h3><p>One day, Tom found an old album in the attic. It was full of his parents’ wedding photos. He sat down and carefully turned each page, feeling the love and history in every picture.（有一天，汤姆在阁楼上发现了一本旧的相册。里面全是父母的婚礼照片。他坐下来，仔细翻看每一页，感受每张照片中的爱与历史。）</p><p>中文翻译：一天，汤姆在阁楼上找到了一本旧的相册。那里面全是父母的结婚照片。他坐下来，一页一页地慢慢翻看，体会着每张照片中的爱与历史。</p><hr><h2 id="alcohol"><a href="#alcohol" class="headerlink" title="alcohol"></a>alcohol</h2><h3 id="分析词义-67"><a href="#分析词义-67" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Alcohol” 是一种有机化合物，通常指乙醇，这是一种无色、易挥发的液体，广泛用于饮料、消毒和化工产品中。在日常生活中，通常指各种酒类。</p><h3 id="列举例句-67"><a href="#列举例句-67" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>He enjoys drinking alcohol in moderation.<ul><li>他喜欢适量饮酒。</li></ul></li><li>Many medicines contain alcohol as a solvent.<ul><li>许多药物中都含有酒精作为溶剂。</li></ul></li><li>In some cultures, alcohol is forbidden for religious reasons.<ul><li>在一些文化中，由于宗教原因禁止饮酒。</li></ul></li></ol><h3 id="词根分析-67"><a href="#词根分析-67" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Alcohol” 的词根来自于阿拉伯语 “al-kuhul”，后来演变成拉丁语 “alcohol”。</p><h3 id="词缀分析-67"><a href="#词缀分析-67" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“al-“ 是前缀，来源于阿拉伯语，相当于英语的 “the”。</li><li>“-cohol” 是词根，没有明显的词缀。</li></ul><h3 id="发展历史和文化背景-67"><a href="#发展历史和文化背景-67" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Alcohol” 这个词的历史可以追溯到中世纪阿拉伯的炼金术和医药。在化学史上，这个词最初指的是一种用于制药和提取香精的化合物。在欧美文化中，酒精饮料有着深厚的社会和文化意义，从节日的庆祝到日常生活的休闲，都有其身影。</p><h3 id="单词变形-67"><a href="#单词变形-67" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：Alcohol（单数），Alcohols（复数）</li><li>形容词：Alcoholic（与酒精有关的）</li></ul><h3 id="记忆辅助-67"><a href="#记忆辅助-67" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记忆 “alcohol” 这个单词，可以联想酒精饮料在社会生活中的角色，如节日庆祝、朋友聚会等场合经常出现。</p><h3 id="小故事-67"><a href="#小故事-67" class="headerlink" title="小故事"></a>小故事</h3><p>One evening, Tom was invited to a party where alcohol was flowing freely. However, he decided to drink in moderation. After enjoying some pleasant conversations, he went home safely.</p><p>一个晚上，汤姆被邀请参加一个自由畅饮的派对。然而，他决定适量饮酒。享受了一些愉快的交谈后，他安全地回家了。</p><p>在这个故事中，”alcohol” 出现在派对场景中，强调了它作为社交活动的一部分。同时，也提醒了适量饮酒的重要性。</p><hr><h2 id="alert"><a href="#alert" class="headerlink" title="alert"></a>alert</h2><h3 id="分析词义-68"><a href="#分析词义-68" class="headerlink" title="分析词义"></a>分析词义</h3><p>“alert” 这个单词既可以作为形容词也可以作为动词使用。作为形容词，它的意思是“警觉的，机警的”，指的是一个人或者动物对周围发生的事情反应灵敏，能够迅速注意到变化或危险。作为动词，”alert” 意为“警告，使警觉”，即通知别人有潜在的危险或重要信息。</p><h3 id="列举例句-68"><a href="#列举例句-68" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>Adjective: He is always alert to the needs of his patients.（他总是对病人的需求保持警觉。）</li><li>Verb: The security guard alerted the police about the intruder.（保安人员警告警方有入侵者。）</li><li>Verb: Please alert me if there are any changes to the schedule.（如果日程有任何变动，请通知我。）</li></ol><h3 id="词根分析-68"><a href="#词根分析-68" class="headerlink" title="词根分析"></a>词根分析</h3><p>“alert” 这个词没有明显的词根，它可能源自于拉丁语的 “alertare”，意为“使清醒，使警觉”。</p><h3 id="词缀分析-68"><a href="#词缀分析-68" class="headerlink" title="词缀分析"></a>词缀分析</h3><p>“alert” 本身并没有常见的英语词缀，它是一个完整的单词。</p><h3 id="发展历史和文化背景-68"><a href="#发展历史和文化背景-68" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“alert” 这个词在英语中已经使用了好几个世纪，最初用于描述士兵或警卫在执行任务时的警觉状态。在现代社会，这个词也被广泛用于描述对各种情况的高度警觉，包括对环境变化的敏感、对紧急情况的快速反应等。</p><h3 id="单词变形-68"><a href="#单词变形-68" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>形容词：alert, unalert（不警觉的）</li><li>动词：alert, alerts, alerted, alerting</li><li>名词：alertness（警觉性）</li></ul><h3 id="记忆辅助-68"><a href="#记忆辅助-68" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住”alert”这个单词，可以联想到”ALERT”这个词看起来像是在紧急情况下按下的按钮（A-LERT），帮助你记住它意味着“警告”或“警觉”。</p><h3 id="小故事-68"><a href="#小故事-68" class="headerlink" title="小故事"></a>小故事</h3><p>In a busy office, everyone was focused on their work until Jane, who was always alert, noticed a small fire in the corner. She quickly pressed the alarm button and shouted, “Alert! Evacuate now!” Thanks to her quick thinking, everyone got out safely.</p><p>在繁忙的办公室里，大家都专注于自己的工作，直到警觉的简注意到角落里的小火。她迅速按下警报按钮并大喊：“警告！立刻疏散！”多亏了她敏捷的思维，所有人都安全撤离了。</p><p>中文翻译：在繁忙的办公室中，所有人都专注于手头的工作，直到一直保持警觉的简注意到角落里起了小火。她立刻按下了报警按钮并高喊：“大家注意！立刻疏散！”由于她的快速反应，所有人都安全地离开了。</p><hr><h2 id="alien"><a href="#alien" class="headerlink" title="alien"></a>alien</h2><h3 id="分析词义-69"><a href="#分析词义-69" class="headerlink" title="分析词义"></a>分析词义</h3><p>“alien” 这个词在英语中有两个基本含义：</p><ol><li>作为名词，它指的是外星人，来自其他星球的生命体。</li><li>作为形容词，它描述某物是外来的、不熟悉的或者是与所讨论的环境不兼容的。</li></ol><h3 id="列举例句-69"><a href="#列举例句-69" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>As an noun:</p><ul><li><p>The movie was about an alien who visited Earth.</p></li><li><p>这部电影是关于一个访问地球的外星人的。</p></li><li><p>They claimed to have seen an alien spacecraft in the sky.</p></li><li><p>他们声称在天空中看到了一个不明飞行物。</p></li></ul></li><li><p>As an adjective:</p><ul><li><p>This plant is alien to this region; it doesn’t grow naturally here.</p></li><li><p>这种植物对这个地区来说是外来的，这里不自然生长。</p></li><li><p>He felt alien in the new school because he was the only one from a different country.</p></li><li><p>在新学校他感到很陌生，因为他是唯一一个来自不同国家的人。</p></li></ul></li></ol><h3 id="词根分析-69"><a href="#词根分析-69" class="headerlink" title="词根分析"></a>词根分析</h3><p>“alien” 这个词没有明显的词根，但是可以从拉丁语 “alienus” 来，意思是 “belonging to another”。</p><h3 id="词缀分析-69"><a href="#词缀分析-69" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“alien” 本身可以作为词根，出现在其他单词中，比如 “alienate”（使疏远）。</li></ul><h3 id="发展历史和文化背景-69"><a href="#发展历史和文化背景-69" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“alien” 这个词最早用于描述与罗马帝国法律和习俗不同的外邦人。在现代英语中，它扩展了含义，包括了外星人的概念，这反映了人类对宇宙和未知生命的好奇心。</p><h3 id="单词变形-69"><a href="#单词变形-69" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词: aliens (复数)</li><li>形容词: alienated (感到被疏远的), alienating (使人疏远的)</li><li>动词: alienate (使疏远), alientation (疏远的行为或过程)</li></ul><h3 id="记忆辅助-69"><a href="#记忆辅助-69" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “alien” 这个词可以借助以下方法：</p><ul><li>联想记忆法：alien 外星人 → “a lian”（啊，恋）外星人也想恋爱，和人一样有感情。</li><li>画图记忆法：画一个典型的大头外星人形象，旁边写上 “alien”。</li></ul><h3 id="小故事-69"><a href="#小故事-69" class="headerlink" title="小故事"></a>小故事</h3><p>One night, a farmer saw an alien in his field. The alien was small and had big eyes. It was observing the crops. The farmer, surprised but curious, offered the alien a banana. The alien smiled and took it, then vanished into the night sky.<br>一夜，一个农夫在自己的田地里看到了一个外星人。这个外星人很小，有大大的眼睛，正在观察庄稼。农夫虽然很惊讶，但也很好奇，他给外星人一个香蕉。外星人微笑着接过它，然后消失在了夜空中。</p><p>中文翻译：<br>一天晚上，一个农夫在他的田地里遇到了一个外星人。这个外星人很小，眼睛很大，正在观察庄稼。农夫虽然很吃惊，但也很感兴趣，他给外星人一根香蕉。外星人微笑着接受了它，然后消失在了夜空之中。</p><hr><h2 id="alienate"><a href="#alienate" class="headerlink" title="alienate"></a>alienate</h2><h3 id="分析词义-70"><a href="#分析词义-70" class="headerlink" title="分析词义"></a>分析词义</h3><p>“alienate” 是一个动词，意思是使疏远、使不亲近，或者转移某人的感情、忠诚或权利。在法律语境中，它还可以指将财产权利转让给他人。</p><h3 id="列举例句-70"><a href="#列举例句-70" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The constant arguments have alienated the couple from each other.<ul><li>不断的争吵使得这对夫妻相互疏远了。</li></ul></li><li>His behavior alienates him from his friends.<ul><li>他的行为使他和朋友们疏远了。</li></ul></li><li>The company decided to alienate a portion of its assets.<ul><li>公司决定将一部分资产转让。</li></ul></li></ol><h3 id="词根分析-70"><a href="#词根分析-70" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“alien” 是词根，意味着外来的、不熟悉的或异国的。</li><li>“ate” 是动词后缀，表示动作或状态。</li></ul><h3 id="词缀分析-70"><a href="#词缀分析-70" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“alien”：来自拉丁语 “alienus”，意为”外来的”。</li><li>“-ate”：常见的动词后缀，如 “inate”、”validate”。</li></ul><h3 id="发展历史和文化背景-70"><a href="#发展历史和文化背景-70" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“alienate” 这个词源于拉丁语 “alienare”，最初意为“使成为外国的”，在法律上指“转让”。在文化上，这个单词可以指人际关系中的疏远，也可以指权利或财产的转移。</p><h3 id="单词变形-70"><a href="#单词变形-70" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：”alienation”（疏远，转让）</li><li>形容词：”alienated”（感到疏远的）</li></ul><h3 id="记忆辅助-70"><a href="#记忆辅助-70" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>可以联想记忆，”alien”（外星人）加上 “-ate”（吃）后缀，就像外星人吃了你的朋友，使他变得疏远。</p><h3 id="小故事-70"><a href="#小故事-70" class="headerlink" title="小故事"></a>小故事</h3><p>Tom felt alienated after moving to a new city. He missed his friends and family. One day, he joined a local club and started making new friends. Slowly, he felt less alienated and more at home.</p><p>汤姆搬到新城市后感到很疏远。他想念他的朋友和家人。有一天，他加入了一个当地的俱乐部，开始结交新朋友。慢慢地，他感到不再那么疏远，更像是在家里。</p><p>搬家后，汤姆感到十分孤单。他想念以前的朋友和家人。但有一天，他参加了一个本地社团，逐渐交到了新朋友。随着时间的推移，他觉得自己不那么格格不入，开始有了一种归属感。</p><hr><h2 id="allege"><a href="#allege" class="headerlink" title="allege"></a>allege</h2><h3 id="分析词义-71"><a href="#分析词义-71" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Allege” 是一个动词，意思是提出或声明某事是真实的，尽管通常没有确凿的证据来证明这一点。在法律语境中，它通常指原告或被告在没有充分证据的情况下提出的主张。</p><h3 id="列举例句-71"><a href="#列举例句-71" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The news report alleged that the politician was involved in a corruption scandal.<ul><li>新闻报道声称这位政治家卷入了一个腐败丑闻。</li></ul></li><li>The defendant alleged that he was innocent, but the evidence suggested otherwise.<ul><li>被告声称自己是无辜的，但证据却显示并非如此。</li></ul></li><li>Some people allege that the company’s products are unsafe, but there’s no scientific research to back up these claims.<ul><li>有些人声称该公司的产品不安全，但没有科学研究支持这些说法。</li></ul></li></ol><h3 id="词根分析-71"><a href="#词根分析-71" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“Allege” 来自拉丁语 “allegare”，意为 “to declare publicly” 或 “to assert without proof”。</li><li>词根 “leg” 源自拉丁语 “legere”，意为 “to gather” 或 “to choose”，在英语中与“说”或“声明”有关。</li></ul><h3 id="词缀分析-71"><a href="#词缀分析-71" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “al-“ 通常表示 “to, toward, or regarding”。</li><li>词根 “-leg-“ 源自拉丁语，如上所述。</li><li>后缀 “-e” 在这里没有特定的意义，但在英语中常见于动词后，有时有助于发音。</li></ul><h3 id="发展历史和文化背景-71"><a href="#发展历史和文化背景-71" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Allege” 一词在法律语境中尤为重要，因为在法庭上，双方经常提出没有直接证据支持的指控或辩护。这个词也常见于新闻报道和辩论中，当人们需要表达对某件事情的看法或怀疑时。</p><h3 id="单词变形-71"><a href="#单词变形-71" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式：allegation（指控，主张）</li><li>动词时态：alleges, alleging, alleged</li><li>形容词：alleged（声称的，所谓的）</li></ul><h3 id="记忆辅助-71"><a href="#记忆辅助-71" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “allege” 这个词，可以联想 “al”（看作 “all”）和 “ledge”（看作 “ledge of evidence”，证据的一小部分）。即使只有一小部分证据，人们仍然 “all” 声称某事是真的。</p><h3 id="小故事-71"><a href="#小故事-71" class="headerlink" title="小故事"></a>小故事</h3><p>A man alleged to have stolen the painting was released due to lack of evidence.</p><ul><li>一个被指控偷画的男人由于证据不足被释放了。</li></ul><p>一个被指控偷窃油画的男人最终因为证据不足而被释放了。在警察调查期间，虽然有人声称亲眼看到他拿走了画，但这并不足以定罪。</p><hr><h2 id="alleviate"><a href="#alleviate" class="headerlink" title="alleviate"></a>alleviate</h2><h3 id="分析词义-72"><a href="#分析词义-72" class="headerlink" title="分析词义"></a>分析词义</h3><p>“alleviate” 是一个动词，意思是减少或缓解痛苦、困难或不适。在中文里，我们可以把它理解为“减轻”或“缓解”。</p><h3 id="列举例句-72"><a href="#列举例句-72" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The new medicine is expected to alleviate the patient’s pain.（新药预计能减轻病人的疼痛。）</li><li>The government has taken measures to alleviate traffic congestion during peak hours.（政府已经采取措施缓解高峰期的交通拥堵。）</li><li>Listening to soft music can alleviate stress and help you relax.（听轻音乐可以减轻压力，帮助你放松。）</li></ol><h3 id="词根分析-72"><a href="#词根分析-72" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“al-“ 是一个前缀，表示“全部”或“加强”的意思。</li><li>“-levi-“ 是词根，来自拉丁语 “levis”，意为“轻的”。</li><li>“-ate” 是一个动词后缀，通常表示“使……”。</li></ul><h3 id="词缀分析-72"><a href="#词缀分析-72" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “al-“</li><li>词根 “-levi-“</li><li>后缀 “-ate”</li></ul><p>其他带有相同后缀 “-ate” 的单词：</p><ul><li>escalate（升级）</li><li>decorate（装饰）</li><li>eliminate（消除）</li></ul><h3 id="发展历史和文化背景-72"><a href="#发展历史和文化背景-72" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“alleviate” 这个词来自拉丁语 “alleviare”，由 “al-“ 和 “leviare” 组成。”leviare” 意为“使变轻”，所以 “alleviare” 就是“完全或进一步使变轻”，在英文中逐渐演变为减轻痛苦或不适的含义。</p><h3 id="单词变形-72"><a href="#单词变形-72" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：alleviation（减轻，缓解）</li><li>形容词：alleviative（减轻的，缓解的）</li></ul><h3 id="记忆辅助-72"><a href="#记忆辅助-72" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记忆 “alleviate”，可以联想“全部（al-）使变轻（levi-），就能缓解（-ate）痛苦”。</p><h3 id="小故事-72"><a href="#小故事-72" class="headerlink" title="小故事"></a>小故事</h3><p>Tom felt a sharp pain in his stomach. The doctor prescribed a medicine to alleviate the discomfort. Tom took the medicine and soon felt much better.</p><p>汤姆感到胃部剧痛。医生开了一种药来缓解不适。汤姆服了药，很快就感觉好多了。</p><p>中文翻译：汤姆觉得胃很痛。医生开了一种药来减轻不适感。汤姆吃了药之后，很快就觉得舒服多了。</p><hr><h2 id="alliance"><a href="#alliance" class="headerlink" title="alliance"></a>alliance</h2><h3 id="分析词义-73"><a href="#分析词义-73" class="headerlink" title="分析词义"></a>分析词义</h3><p>“alliance” 是一个名词，指的是两个或多个个体、组织、国家为了共同的利益或目标而形成的联合或伙伴关系。在中文中，我们可以把它理解为“联盟”或“同盟”。</p><h3 id="列举例句-73"><a href="#列举例句-73" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The countries formed an alliance to combat terrorism.<br>这些国家组成了一个联盟以对抗恐怖主义。</li><li>The alliance between the two companies has led to great technological advancements.<br>这两家公司之间的联盟促成了重大的技术进步。</li><li>They strengthened their alliance through regular meetings and shared goals.<br>他们通过定期的会议和共享目标来加强他们的联盟。</li></ol><h3 id="词根分析-73"><a href="#词根分析-73" class="headerlink" title="词根分析"></a>词根分析</h3><p>“alliance” 的词根来自于 “alliant-“，这是拉丁语 “aliantere” 的变形，意味着“联合”或“混合”。</p><h3 id="词缀分析-73"><a href="#词缀分析-73" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“alli-“：表示联合或结合。</li><li>“-ance”：是名词后缀，表示状态或行为。</li></ul><h3 id="发展历史和文化背景-73"><a href="#发展历史和文化背景-73" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“alliance” 这个词源自于中世纪拉丁语 “aliancia”，进入法语后演变为 “alliance”，最终进入英语。在历史上，这个词经常用于描述国家间的政治或军事联盟。在当代，它也用于描述商业、技术或其他形式的合作。</p><h3 id="单词变形-73"><a href="#单词变形-73" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：alliance（联盟）</li><li>动词：alliance（结盟）</li><li>形容词：allied（同盟的）</li></ul><h3 id="记忆辅助-73"><a href="#记忆辅助-73" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过联想记忆法记住 “alliance”：想象所有的（alli-）人都在一起（-ance）跳舞，形成了一个欢乐的联盟。</p><h3 id="小故事-73"><a href="#小故事-73" class="headerlink" title="小故事"></a>小故事</h3><p>Tom and Jerry, once rivals, realized the benefits of an alliance. They decided to team up and started a business together. Now, their alliance has become a successful company.</p><p>汤姆和杰瑞，曾是竞争对手，意识到联盟的好处。他们决定联手，一起创业。现在，他们的联盟已经成为一家成功的公司。</p><p>中文翻译：<br>汤姆和杰瑞，一度是对手，认识到了结盟的好处。他们决定组队，共同创业。现在，他们的联盟已经发展成为一家成功的公司。</p><hr><h2 id="allocate"><a href="#allocate" class="headerlink" title="allocate"></a>allocate</h2><h3 id="分析词义-74"><a href="#分析词义-74" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Allocate” 是一个动词，意思是“分配，指定（资源、空间、时间等）给特定的人或用途”。在中文中，我们可以将它理解为“划拨”或“分配”。</p><h3 id="列举例句-74"><a href="#列举例句-74" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The company allocated a budget of $50,000 for the new project.<br>公司为新项目划拨了5万美元的预算。</li><li>The teacher allocated an hour for each student to present their projects.<br>老师为每位学生分配了一个小时的时间来展示他们的项目。</li><li>The government allocated land for the construction of a new park.<br>政府分配了土地用于建设新的公园。</li></ol><h3 id="词根分析-74"><a href="#词根分析-74" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“Allocat-“ 是词根，来源于拉丁语 “allocare”，意为“分配”或“指定”。</li><li>衍生单词：allocation（分配，拨款）</li></ul><h3 id="词缀分析-74"><a href="#词缀分析-74" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“-ate” 是动词后缀，常见于由拉丁语派生出的动词中，表示“做……”、“使……”。</li></ul><h3 id="发展历史和文化背景-74"><a href="#发展历史和文化背景-74" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Allocate” 来自于拉丁语 “allocare”，这个词在商业、政府管理以及资源分配中非常重要，体现了公平和效率的原则。在现代英语中，这个单词经常用于描述如何合理分配有限的资源。</p><h3 id="单词变形-74"><a href="#单词变形-74" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：allocation</li><li>形容词：allocative</li></ul><h3 id="记忆辅助-74"><a href="#记忆辅助-74" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “allocate”，我们可以用以下记忆法：</p><ul><li>“allo-“ 可以联想到 “all”，表示“所有的”，而 “-cate” 听起来像 “cut”，即“切分”。合在一起就是“切分所有的东西”，即“分配”。</li></ul><h3 id="小故事-74"><a href="#小故事-74" class="headerlink" title="小故事"></a>小故事</h3><p>Tom worked for a charity that helped poor children. One day, he had to <strong>allocate</strong> the donations they received. He carefully <strong>allocated</strong> food, clothing, and school supplies to ensure each child got what they needed.</p><p>汤姆在一家帮助贫困儿童的慈善机构工作。有一天，他需要<strong>分配</strong>他们收到的捐赠物品。他仔细地<strong>分配</strong>食物、衣物和学校用品，以确保每个孩子都能得到他们所需的东西。</p><p>汤姆在一家帮助贫困儿童的慈善机构工作。有一天，他得把收到的捐赠物品<strong>分配</strong>出去。他认真地把食物、衣服和学习用品<strong>分配</strong>给每个孩子，确保他们都能得到需要的东西。</p><hr><h2 id="alloy"><a href="#alloy" class="headerlink" title="alloy"></a>alloy</h2><h3 id="分析词义-75"><a href="#分析词义-75" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Alloy”这个词通常指的是由两种或两种以上金属元素混合而成的材料，这种混合物通常具有比单一金属更优良的特质，如更强的硬度或抗腐蚀性。</p><h3 id="列举例句-75"><a href="#列举例句-75" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The sword is made of a special alloy that makes it incredibly strong.</p><ul><li>这把剑是由一种特殊的合金制成的，因此非常坚固。</li></ul></li><li><p>The jewelry is an alloy of gold and silver, giving it a unique shine.</p><ul><li>这件珠宝是由金和银合金制成的，给它一种独特的光泽。</li></ul></li><li><p>The engineer is researching new alloys for use in space exploration.</p><ul><li>这位工程师正在研究用于太空探索的新合金。</li></ul></li></ol><h3 id="词根分析-75"><a href="#词根分析-75" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Alloy”这个词的词根来自于拉丁语“allodium”，原意是指不属于封建领主的所有权，后来逐渐演变成金属混合物的意思。</p><h3 id="词缀分析-75"><a href="#词缀分析-75" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Al-”前缀在一些词中表明“all”或“another”，在这里它可能是来自法语“alliage”的缩写，意为混合。</li><li>“-loy”来自法语“loi”，意为法则或方式，这里指混合的方式。</li></ul><h3 id="发展历史和文化背景-75"><a href="#发展历史和文化背景-75" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>合金的使用可以追溯到古代，当时的人们发现将不同的金属混合可以提高材料的性能。在文化和工业发展中，合金的使用不断扩大，特别是在武器制造、珠宝工艺和现代工业中。</p><h3 id="单词变形-75"><a href="#单词变形-75" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词: alloys (复数)</li><li>动词: alloy (及物动词，意为“使成合金”)</li><li>形容词: alloyed</li></ul><h3 id="记忆辅助-75"><a href="#记忆辅助-75" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过联想记忆来记住“alloy”这个词。比如，你可以想象“all”（所有）的金属都“loy”（忠诚地）混合在一起，形成了一个强大的材料。</p><h3 id="小故事-75"><a href="#小故事-75" class="headerlink" title="小故事"></a>小故事</h3><p>In a small workshop, a metalsmith combined gold and copper to create an alloy. He heated the mixture, watching the metals blend into a beautiful rose gold. This alloy would make exquisite jewelry, he thought, as he finished the process with a smile.</p><p>在一个小作坊里，一位金属工匠将金和铜混合在一起制成合金。他加热这个混合物，看着金属融合成美丽的玫瑰金。想到这种合金将制成精美的珠宝，他完成了整个过程，脸上洋溢着微笑。</p><p>在小型工作室里，金属工匠将金和铜混合，创造出了合金。加热过程中，金属完美融合成了美丽的玫瑰金。他认为这样的合金定能制成绝美的珠宝，在完成这一工序时，他不禁面带微笑。</p><hr><h2 id="alter"><a href="#alter" class="headerlink" title="alter"></a>alter</h2><h3 id="分析词义-76"><a href="#分析词义-76" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Alter” 是一个动词，意思是“改变”、“修改”或“变动”。它通常用来描述使某物变得与原来不同的行为。</p><h3 id="列举例句-76"><a href="#列举例句-76" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>We need to alter this dress to fit you better.<br>我们需要修改这件连衣裙，以使它更适合你。</p></li><li><p>The builder suggested altering the kitchen layout to make it more spacious.<br>建筑师建议改变厨房布局，使其更加宽敞。</p></li><li><p>His plans were altered due to the unexpected circumstances.<br>由于意外情况，他的计划被改变了。</p></li></ol><h3 id="词根分析-76"><a href="#词根分析-76" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Alter” 来自古拉丁语 “alterare”，意为“改变”。</p><h3 id="词缀分析-76"><a href="#词缀分析-76" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Alter” 本身就是一个词根，没有明显的词缀。</li></ul><h3 id="发展历史和文化背景-76"><a href="#发展历史和文化背景-76" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Alter” 这个词源于拉丁语，在英语中已有几百年的历史。它在文学、科学和日常对话中广泛使用，表达了事物变化的概念。</p><h3 id="单词变形-76"><a href="#单词变形-76" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：alteration（改变；修改）</li><li>形容词：alterable（可改变的）</li></ul><h3 id="记忆辅助-76"><a href="#记忆辅助-76" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>“Alter” 可以通过联想记忆法来记忆——想象你有一条裙子（dress），但是它太小了，需要“改变”（alter）来适合你。</p><h3 id="小故事-76"><a href="#小故事-76" class="headerlink" title="小故事"></a>小故事</h3><p>Tom wanted to alter his room’s design. He thought it was too plain. He painted the walls, changed the furniture layout, and added some posters. Now, his room looks more vibrant and personalized.</p><p>汤姆想要改变他的房间设计。他觉得太单调了。他刷了墙，改变了家具的布局，并添加了一些海报。现在，他的房间看起来更加生动和个性化。</p><p>中文翻译：汤姆想要修改他的房间设计，他觉得之前的太朴素了。他给墙壁刷了漆，调整了家具的位置，还贴上了一些海报。现在，他的房间显得更有活力，更具有个人特色。</p><hr><h2 id="alternate"><a href="#alternate" class="headerlink" title="alternate"></a>alternate</h2><h3 id="分析词义-77"><a href="#分析词义-77" class="headerlink" title="分析词义"></a>分析词义</h3><p>“alternate” 是一个多义词的英文单词。作为形容词，它通常指的是“交替的，轮流的”，比如轮流做某事或事物交替出现。作为动词，”alternate” 可以表示“交替，轮流”，也可以指“替换，代替”。</p><h3 id="列举例句-77"><a href="#列举例句-77" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>As a teacher, she alternates between teaching English and Math.<br>作为一名教师，她轮换教英语和数学。</li><li>The traffic lights alternate between red and green.<br>交通信号灯红绿交替。</li><li>He had to alternate his study time with part-time work.<br>他不得不把学习时间与兼职工作交替安排。</li></ol><h3 id="词根分析-77"><a href="#词根分析-77" class="headerlink" title="词根分析"></a>词根分析</h3><p>词根是 “altern”，来自拉丁语 “alternus”，意味着“每隔一个的，交替的”。</p><h3 id="词缀分析-77"><a href="#词缀分析-77" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀：无特定前缀</li><li>词根：altern-</li><li>后缀：-ate 是动词后缀，使词根成为动词；-ate 作为形容词后缀时通常表示“有…性质的”</li></ul><p>其他单词：</p><ul><li>alternative - 形容词，“替代的，另外的”</li><li>alternation - 名词，“交替，轮流”</li></ul><h3 id="发展历史和文化背景-77"><a href="#发展历史和文化背景-77" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“alternate” 一词源自拉丁语 “alternus”，在英语中从15世纪开始使用。在欧美文化中，它不仅用于描述物理现象的交替，也广泛用于描述工作、责任的轮换，以及选择或方案之间的替代。</p><h3 id="单词变形-77"><a href="#单词变形-77" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>动词：alternates, alternating, alternated</li><li>名词：alternation</li><li>形容词：alternating, alternate</li></ul><h3 id="记忆辅助-77"><a href="#记忆辅助-77" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好记忆 “alternate”，可以联想记忆，交替（alternate）就像是在两个选项之间“摇曳”（就像一个摆动的钟摆），或者记为“替代品”（alternative）去掉“e”，就像是在两个事物之间进行选择。</p><h3 id="小故事-77"><a href="#小故事-77" class="headerlink" title="小故事"></a>小故事</h3><p>Tom felt exhausted as he alternated between working on his computer and helping his friend move furniture.<br>汤姆在用电脑工作和帮朋友搬家之间交替，他感到非常疲惫。</p><p>中文翻译：<br>汤姆在电脑前工作与帮朋友搬家具之间轮流忙碌，他感到非常累。</p><hr><h2 id="alternative"><a href="#alternative" class="headerlink" title="alternative"></a>alternative</h2><h3 id="分析词义-78"><a href="#分析词义-78" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Alternative” 这个单词在英语中通常用作形容词或名词。作为形容词，它指的是“可供选择的”或“替代的”，意味着除了已经提供或已知的选择之外，还有其他的可能性。作为名词，它指的是一个选择或可能性。</p><h3 id="列举例句-78"><a href="#列举例句-78" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p><strong>Adjective</strong> - “This medicine has an alternative treatment that doesn’t have any side effects.”</p><ul><li><strong>中文翻译</strong>：这种药有一种没有副作用的替代治疗方法。</li></ul></li><li><p><strong>Noun</strong> - “If the first plan fails, we have an alternative.”</p><ul><li><strong>中文翻译</strong>：如果第一个计划失败，我们还有另一个选择。</li></ul></li><li><p><strong>Adjective</strong> - “She likes to wear alternative clothing from small independent brands.”</p><ul><li><strong>中文翻译</strong>：她喜欢穿来自小众独立品牌的替代风格服装。</li></ul></li></ol><h3 id="词根分析-78"><a href="#词根分析-78" class="headerlink" title="词根分析"></a>词根分析</h3><p>单词 “alternative” 来自拉丁语 “alternus”，意味着“轮流”或“其他的”。词根主要来自 “altern-“</p><h3 id="词缀分析-78"><a href="#词缀分析-78" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li><strong>前缀</strong>：无特定前缀。</li><li><strong>词根</strong>：altern- 来自拉丁语 “alternus”，意味着“其他的”。</li><li><strong>后缀</strong>：-ative 是形容词后缀，表示“有…性质的”。</li></ul><p>其他使用相同后缀的单词如：</p><ul><li>Creative（创造性的）</li><li>Communicative（善于沟通的）</li></ul><h3 id="发展历史和文化背景-78"><a href="#发展历史和文化背景-78" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Alternative” 这个词在历史上起源于拉丁语，但随着时间的推移，它在英语中获得了“选择”或“非传统”的含义。在欧美文化中，”alternative” 常用于描述与传统或主流不同的文化、生活方式或选择，比如“替代音乐”（alternative music）通常指的是除了主流流行音乐以外的音乐类型。</p><h3 id="单词变形-78"><a href="#单词变形-78" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li><strong>名词</strong>：Alternative（替代物）</li><li><strong>形容词</strong>：Alternative（替代的，非传统的）</li><li><strong>副词</strong>：Alternatively（作为替代，另外）</li></ul><h3 id="记忆辅助-78"><a href="#记忆辅助-78" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “alternative” 这个词，可以联想一下“轮换选择”的场景：就像在餐厅，如果你不喜欢菜单上的第一项，你可以选择“另外的”、“替代的”选项。</p><h3 id="小故事-78"><a href="#小故事-78" class="headerlink" title="小故事"></a>小故事</h3><p>John was invited to a traditional party, but he decided to host an alternative gathering instead. He chose a quiet park, served vegan food, and played folk music. It was a refreshing change for everyone.</p><ul><li><strong>中文翻译</strong>：约翰被邀请参加一个传统派对，但他决定举办一个替代聚会。他选择了一个安静的公园，提供素食，并播放民谣音乐。这对每个人来说都是一个令人耳目一新的变化。</li></ul><hr><h2 id="ambiguous"><a href="#ambiguous" class="headerlink" title="ambiguous"></a>ambiguous</h2><h3 id="分析词义-79"><a href="#分析词义-79" class="headerlink" title="分析词义"></a>分析词义</h3><p>“ambiguous” 是一个形容词，意思是含糊不清的、不明确的，或是有多种解释的。当我们说某件事或某个词句是 ambiguous 时，是指它不够明确，让人感到困惑，无法确定真正的意思或意图。</p><h3 id="列举例句-79"><a href="#列举例句-79" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The contract was written with ambiguous language, leaving much room for interpretation.</p><ul><li>合同使用了含糊其辞的语言，留下了很多解释的空间。（中文翻译）</li></ul></li><li><p>His ambiguous answer made us wonder if he was telling the truth.</p><ul><li>他模棱两可的回答让我们怀疑他是否说了真话。（中文翻译）</li></ul></li><li><p>The painting is quite ambiguous; people see different things in it.</p><ul><li>这幅画相当含糊，人们从中看到了不同的东西。（中文翻译）</li></ul></li></ol><h3 id="词根分析-79"><a href="#词根分析-79" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“ambi-“ 来自拉丁语，意味着“两个”或“周围”。</li><li>“-guous” 是形容词后缀，通常与”ambi-“结合，形成与“周围”或“双向”相关的概念。</li></ul><h3 id="词缀分析-79"><a href="#词缀分析-79" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ambi-“ 是前缀，表示“两个”或“周围”。</li><li>“-guous” 是形容词后缀，类似于“-uous”，表示某种状态或性质。</li></ul><p>其他包含”ambi-“词根的单词：</p><ul><li>Ambidextrous（双手灵巧的）</li><li>Ambivalence（矛盾心理）</li></ul><h3 id="发展历史和文化背景-79"><a href="#发展历史和文化背景-79" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“ambiguous” 一词源自拉丁语 “ambiguus”，意为“含糊的、有歧义的”。在西方文化中，清晰和明确的表达通常被认为是有效沟通的关键，因此 “ambiguous” 的表达往往被避免。</p><h3 id="单词变形-79"><a href="#单词变形-79" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：ambiguity（歧义）</li><li>动词：ambiguate（使含糊）</li><li>副词：ambiguously（含糊地）</li></ul><h3 id="记忆辅助-79"><a href="#记忆辅助-79" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “ambiguous”，可以联想记忆：“ambi-”（像“两个人”）和“-gous”（听起来像“多”），即两个人或多方面造成了含糊不清。</p><h3 id="小故事-79"><a href="#小故事-79" class="headerlink" title="小故事"></a>小故事</h3><p>John received a ambiguous letter from his friend. It said, “We need to talk.” He couldn’t decide if it was good or bad news. With a mix of excitement and fear, he called his friend immediately.</p><p>约翰收到了一封模棱两可的朋友来信，信上写着：“我们需要谈谈。”他无法判断这是好消息还是坏消息。带着既兴奋又恐惧的心情，他立即给朋友打了电话。</p><p>（中文翻译）</p><hr><h2 id="ambition"><a href="#ambition" class="headerlink" title="ambition"></a>ambition</h2><h3 id="分析词义-80"><a href="#分析词义-80" class="headerlink" title="分析词义"></a>分析词义</h3><p>“ambition” 是一个名词，它指的是一个人对于成功或者达成某项伟大目标的强烈愿望和决心。这个单词通常包含有积极的意义，表示一个人有志向和抱负。</p><h3 id="列举例句-80"><a href="#列举例句-80" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>His ambition is to become a renowned scientist.<br>他的抱负是成为一名著名的科学家。</p></li><li><p>She has a lot of ambition for the new project.<br>她对新项目充满雄心壮志。</p></li><li><p>Don’t let ambition cloud your judgment.<br>不要让野心蒙蔽了你的判断。</p></li></ol><h3 id="词根分析-80"><a href="#词根分析-80" class="headerlink" title="词根分析"></a>词根分析</h3><p>“ambition” 来自于拉丁词 “ambitionem”，而 “ambire” 是它的动词形式，意味着“渴望得到”。词根 “ambi-“ 意为“围绕”或“两者之间”，暗示了一种全方位的追求。</p><h3 id="词缀分析-80"><a href="#词缀分析-80" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ambi-“：表示“围绕”或“两者之间”。</li><li>“-tion”：是名词后缀，表示动作或状态。</li></ul><p>其他含有 “-tion” 后缀的单词如 “action”（行动），”attraction”（吸引）。</p><h3 id="发展历史和文化背景-80"><a href="#发展历史和文化背景-80" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“ambition” 一词在中世纪早期有相当负面的含义，常常与傲慢、过度欲望联系在一起。然而，随着时间的推移，这个词开始被赋予了更多积极的色彩，尤其在文艺复兴时期，它象征着个人对于成就的追求。</p><h3 id="单词变形-80"><a href="#单词变形-80" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：ambition</li><li>形容词：ambitious（有野心的）</li><li>副词：ambitiously（有野心地）</li></ul><h3 id="记忆辅助-80"><a href="#记忆辅助-80" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过联想记忆来记住 “ambition”：ambi-（像是在四周环绕，追求各个方面）+ -tion（表示状态）→ 一种在各个方面追求成功和卓越的状态。</p><h3 id="小故事-80"><a href="#小故事-80" class="headerlink" title="小故事"></a>小故事</h3><p>Tom had a burning ambition to travel the world. One day, he won a lottery and decided to fulfill his dream. He embarked on an adventure, visiting places he had only read about. His ambition led him to new cultures and exciting experiences.</p><p>汤姆有一个炙热的野心，那就是环游世界。有一天，他中了彩票，决定实现他的梦想。他开始了一段冒险，去那些他只在书中读过的地方。他的野心带他领略了新的文化和激动人心的经历。</p><p>中文翻译：<br>汤姆有一个炽热的愿望，那就是周游世界。有一天，他意外中了彩票，于是决定去实现他的梦想。他开始了一场旅行，去那些他只在书上见过的地方。他的野心让他接触到了新奇的文化和令人兴奋的体验。</p><hr><h2 id="ambitious"><a href="#ambitious" class="headerlink" title="ambitious"></a>ambitious</h2><h3 id="分析词义-81"><a href="#分析词义-81" class="headerlink" title="分析词义"></a>分析词义</h3><p>“ambitious” 是一个形容词，意思是有人有着强烈的成功欲望，愿意付出很多努力去实现目标。在中文里，我们可以将其理解为“有雄心的”、“有抱负的”或“志向远大的”。</p><h3 id="列举例句-81"><a href="#列举例句-81" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>He is an ambitious young man who dreams of starting his own company.<ul><li>他是一个有抱负的年轻人，梦想着自己开公司。</li></ul></li><li>The ambitious project aims to bring clean water to every village in the region.<ul><li>这个有雄心的项目旨在为该地区的每个村庄带来清洁的水。</li></ul></li><li>She has an ambitious plan to travel around the world in a year.<ul><li>她有一个宏伟的计划，那就是在一年内环游世界。</li></ul></li></ol><h3 id="词根分析-81"><a href="#词根分析-81" class="headerlink" title="词根分析"></a>词根分析</h3><p>“ambitious” 来自于 “ambition”（野心，抱负），词根是 “ambit”（走遍），原意是走遍所有地方去追求某物。</p><h3 id="词缀分析-81"><a href="#词缀分析-81" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ambi-“ 是前缀，表示“周围”或“所有方向”。</li><li>“-tious” 是后缀，常用来构成形容词，表示“有…的”。</li></ul><h3 id="发展历史和文化背景-81"><a href="#发展历史和文化背景-81" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“ambitious” 这个词源于拉丁语 “ambitionem”，在古罗马文化中，野心和抱负是积极向上的品质，尤其是在政治和军事领域。在今天，这个词在欧美文化中依然保持着积极的含义，鼓励人们追求卓越。</p><h3 id="单词变形-81"><a href="#单词变形-81" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：ambition（抱负）</li><li>复数：ambitions</li><li>动词：ambit（企图获得），ambition（立志）</li><li>形容词比较级：more ambitious</li><li>形容词最高级：most ambitious</li></ul><h3 id="记忆辅助-81"><a href="#记忆辅助-81" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>联想记忆法：ambi- 可以想象成“两个方向”，-tious 可以联想到“追求”。想象一个人同时在两个方向上追求成功，就是非常有抱负的。</p><h3 id="小故事-81"><a href="#小故事-81" class="headerlink" title="小故事"></a>小故事</h3><p>Tom is an ambitious runner. Every morning, he runs through the park, dreaming of winning a marathon. One day, he saw a poster for a local race. It was his chance. With determination, he signed up and started training harder. Finally, Tom crossed the finish line first, his ambition fulfilled.</p><ul><li>汤姆是一个有抱负的跑步者。每天早晨，他穿过公园，梦想着赢得一场马拉松。有一天，他看到了一张本地比赛的宣传海报。那是他的机会。带着决心，他报名了并开始更加刻苦地训练。最后，汤姆第一个冲过终点线，他的抱负实现了。</li></ul><hr><h2 id="amend"><a href="#amend" class="headerlink" title="amend"></a>amend</h2><h3 id="分析词义-82"><a href="#分析词义-82" class="headerlink" title="分析词义"></a>分析词义</h3><p>“amend” 这个单词的意思是修改或改进某事物，使其变得更好或更合适。在法律语境中，它还指修正或改正法律、文件等。</p><h3 id="列举例句-82"><a href="#列举例句-82" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>We need to amend the contract to include the new terms.<br>我们需要修改合同以包括新的条款。（商务场景）<br>中文翻译：我们需要把新条款加入合同中进行修订。</p></li><li><p>He amended his ways and became a better person.<br>他改进了自己的行为，成为了一个更好的人。（个人成长场景）<br>中文翻译：他改正了自己的行为，变成了一个更好的人。</p></li><li><p>The government is planning to amend the tax laws.<br>政府正计划修改税法。（政治场景）<br>中文翻译：政府打算对税法进行修订。</p></li></ol><h3 id="词根分析-82"><a href="#词根分析-82" class="headerlink" title="词根分析"></a>词根分析</h3><p>“amend” 的词根是 “emend”，来源于拉丁语 “emendare”，意味着 “to improve” 或 “to correct”。</p><h3 id="词缀分析-82"><a href="#词缀分析-82" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“amend” 本身可以看作由前缀 “a-“（表示加强）和词根 “mend”（改正）组成。</li></ul><h3 id="发展历史和文化背景-82"><a href="#发展历史和文化背景-82" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“amend” 这个词在英语中有着悠久的历史，源自拉丁语 “emendare”。它在法律和政治语境中非常重要，因为法律经常需要修正来反映社会变化。</p><h3 id="单词变形-82"><a href="#单词变形-82" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词: amendment（修正案，改动）</li><li>动词时态: <ul><li>Past tense: amended（修正了）</li><li>Present participle: amending（正在修正）</li><li>Past participle: amended（已修正）</li></ul></li></ul><h3 id="记忆辅助-82"><a href="#记忆辅助-82" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记忆 “amend”，可以将其与 “mend”（修理）联系起来。”amend” 就像是加强版的 “mend”，不仅仅是修理，更是改进。</p><h3 id="小故事-82"><a href="#小故事-82" class="headerlink" title="小故事"></a>小故事</h3><p>John was a writer. He always took great care to amend his articles before submitting them. One day, his editor praised him, saying his carefulness made the articles almost perfect.<br>   约翰是一位作家。在提交文章前，他总是仔细修改。有一天，他的编辑表扬了他，说他的细心使得文章几乎完美。</p><p>中文翻译：约翰是一名作家。在递交文章之前，他总是非常小心地对其进行修订。有一天，他的编辑表扬了他，说他的细心让文章几乎无懈可击。</p><hr><h2 id="ammunition"><a href="#ammunition" class="headerlink" title="ammunition"></a>ammunition</h2><h3 id="分析词义-83"><a href="#分析词义-83" class="headerlink" title="分析词义"></a>分析词义</h3><p>“ammunition”这个单词在英语中通常指代用于枪械的子弹、炮弹等。它还可以比喻性地指代论点或信息，用来支持某人的观点或在对峙中攻击对方。</p><h3 id="列举例句-83"><a href="#列举例句-83" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The soldiers loaded their guns with ammunition before heading into battle.</p><ul><li>士兵们在进入战场前，给他们的枪装上了弹药。</li></ul></li><li><p>He has a vast store of ammunition to use against his opponents in the debate.</p><ul><li>他在辩论中拥有大量论据来对付他的对手。</li></ul></li><li><p>The news report provided fresh ammunition for those arguing against the new policy.</p><ul><li>这篇新闻报道为那些反对新政策的争论提供了新的依据。</li></ul></li></ol><h3 id="词根分析-83"><a href="#词根分析-83" class="headerlink" title="词根分析"></a>词根分析</h3><p>词根是“munition”，意为“武器”或“军事用品”。”am-“在此单词中作为前缀，可能源自法语中的“à la”，意味着“用于”或“为了”。</p><h3 id="词缀分析-83"><a href="#词缀分析-83" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀：am-（表示为了或用于）</li><li>词根：munition（武器，军事用品）</li><li>后缀：-ition（通常形成名词，表示过程或结果）</li></ul><p>其他含有相似词根的单词：</p><ul><li>munition（n. 军火，弹药）</li><li>demilitarize（v. 非军事化）</li></ul><h3 id="发展历史和文化背景-83"><a href="#发展历史和文化背景-83" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“ammunition”这个词源于拉丁语“munitionem”，最初指的是战争中使用的所有武器和装备。随着时间的发展，它的意义缩小到特指弹药。在文化背景上，这个词与战争、冲突以及辩论和争论的策略有关。</p><h3 id="单词变形-83"><a href="#单词变形-83" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：ammunition</li><li>复数：ammunitions（较少使用，通常保持单数形式）</li><li>相关动词：reload（重新装填弹药）</li></ul><p>固定搭配：</p><ul><li>run out of ammunition（用尽弹药）</li><li>fire ammunition（发射弹药）</li></ul><h3 id="记忆辅助-83"><a href="#记忆辅助-83" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住“ammunition”这个单词，可以联想记忆“ammo”是军队中常用的口语简写形式，而“-ition”作为名词后缀，可以联想到“motion”（动作），弹药是战争动作的一部分。</p><h3 id="小故事-83"><a href="#小故事-83" class="headerlink" title="小故事"></a>小故事</h3><p>In a debate competition, Tom was running out of arguments. Then, he found a piece of crucial evidence, his last ammunition. With this, he won the debate.<br>在辩论赛中，汤姆的论点快要用尽了。然后，他找到了一个关键证据，他最后的弹药。凭借这个，他赢得了辩论。</p><p>中文翻译：<br>在辩论赛中，汤姆的论据快要用光了。接着，他找到了一块非常重要的证据，他最后的“弹药”。凭借这个，他赢得了辩论赛。</p><hr><h2 id="amplify"><a href="#amplify" class="headerlink" title="amplify"></a>amplify</h2><h3 id="分析词义-84"><a href="#分析词义-84" class="headerlink" title="分析词义"></a>分析词义</h3><p>“amplify” 是一个动词，意思是“扩大”，在比喻意义上，它还可以指“详述”或“增强”。在科技领域，它也有“放大信号”的意思。</p><h3 id="列举例句-84"><a href="#列举例句-84" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The teacher amplify her voice with a microphone so everyone could hear her clearly. <ul><li>老师用麦克风放大了她的声音，以便每个人都能清楚地听到她。</li></ul></li><li>The author amplify on the character’s background in the sequel.<ul><li>作者在续集中详细阐述了这个角色的背景。</li></ul></li><li>The company aims to amplify its market share by launching new products.<ul><li>这家公司计划通过推出新产品来扩大其市场份额。</li></ul></li></ol><h3 id="词根分析-84"><a href="#词根分析-84" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“ampli-“ 是词根，源自拉丁语 “ampliare”，意为“扩大，增加”。</li><li>由词根 “ampli-“ 衍生出来的其他单词：<ul><li>amplify（动词）</li><li>amplification（名词）</li><li>amplify（形容词）</li></ul></li></ul><h3 id="词缀分析-84"><a href="#词缀分析-84" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ampli-“：如上所述，表示“扩大”。</li><li>“-fy”：这是一个动词后缀，表示“使成为，使达到某种状态”，如 “beautify”（美化）或 “purify”（净化）。</li></ul><h3 id="发展历史和文化背景-84"><a href="#发展历史和文化背景-84" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“amplify” 这个词源自拉丁语 “ampliare”，在古罗马时期就已经存在。”ampliare” 进入英语后，其意义从原本的物理意义上的“扩大”扩展到了今天我们使用的比喻意义，如“详述”或“增强”。</p><h3 id="单词变形-84"><a href="#单词变形-84" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>形容词：amplified（扩大的，增强的）</li><li>名词：amplification（放大，增强）</li><li>动词时态：<ul><li>present: amplify</li><li>past: amplified</li><li>future: will amplify</li><li>present continuous: is amplifying</li><li>past continuous: was amplifying</li></ul></li></ul><h3 id="记忆辅助-84"><a href="#记忆辅助-84" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “amplify”，可以联想记忆：“ampli-”像“apple”（苹果），想象一个苹果被“-fy”后变得很大，即“放大”。</p><h3 id="小故事-84"><a href="#小故事-84" class="headerlink" title="小故事"></a>小故事</h3><p>John, a musician, was performing on the street. He amplify his guitar sound with a small amplifier to captivate passersby. As the music echoed, people stopped to enjoy the amplified rhythm.</p><ul><li>约翰，一名音乐家，在街头表演。他用一个小放大器放大了他的吉他声音，吸引路人。随着音乐的回响，人们停下来欣赏这增强的节奏。</li></ul><p>中文翻译：约翰，一位音乐家，在街上表演。他用小型扩音器放大吉他的声音，吸引过路行人。当音乐声响起，人们停下脚步，享受这被放大的旋律。</p><hr><h2 id="analogy"><a href="#analogy" class="headerlink" title="analogy"></a>analogy</h2><h3 id="分析词义-85"><a href="#分析词义-85" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Analogy” 是一个名词，指的是两个事物之间的相似性或类比关系。在逻辑和修辞中，它是一种通过比较来解释或强调某一概念的技巧。</p><h3 id="列举例句-85"><a href="#列举例句-85" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>“He used an analogy to explain the complex scientific concept.”（他使用了一个类比来解释这个复杂的科学概念。）</p><ul><li>用于说明如何借助类似的事物来阐明一个观点。</li></ul></li><li><p>“The teacher drew an analogy between the human heart and a pump.”（老师将人类的心脏和泵进行了类比。）</p><ul><li>比喻心脏的工作原理和泵相似。</li></ul></li><li><p>“The company’s success is often described as a ship sailing against the tide, a powerful analogy for their determination.”（这个公司的成功常被比喻为逆流而上的船，这是一个强调他们决心的有力类比。）</p><ul><li>用来说明成功之路不易，需要坚持不懈。</li></ul></li></ol><h3 id="词根分析-85"><a href="#词根分析-85" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Analogy” 来自于希腊词根 “analoogia”，其中 “ana-“ 意为 “according to” 或 “in proportion”，”logos” 意为 “word” 或 “reason”。</p><h3 id="词缀分析-85"><a href="#词缀分析-85" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ana-“：表示“根据”或“相似”。</li><li>“-logy”：表示“学科”或“理论”。</li></ul><p>其他带有 “-logy” 后缀的单词如：biology（生物学）、technology（技术）。</p><h3 id="发展历史和文化背景-85"><a href="#发展历史和文化背景-85" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Analogy” 这个词在西方哲学和修辞学中有着悠久的历史。它被用来帮助人们理解抽象或复杂的概念，通过比较它们与更熟悉或更直观的事物。在文学和日常语言中，类比也常用于强调观点和创造意象。</p><h3 id="单词变形-85"><a href="#单词变形-85" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：analogy</li><li>动词：analogue（adj. 类比的，相似的）</li><li>形容词：analogous（相似的，类比的）</li></ul><h3 id="记忆辅助-85"><a href="#记忆辅助-85" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>可以通过联想记忆法来记忆 “analogy”：想象有两个 “天使”（ana-）在 “逻辑”（-logy）地比较事物，找到它们之间的相似点。</p><h3 id="小故事-85"><a href="#小故事-85" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was stumped by the physics problem, so his friend drew an analogy. “Imagine the electrons are like cars on a highway,” he said. Tom’s eyes lit up as the analogy clicked.</p><p>汤姆被一道物理问题难住了，他的朋友用了一个类比。”想象一下，电子就像高速公路上的汽车，”他说。随着类比的启发，汤姆的眼睛一亮，顿时明白了。</p><p>（故事中，通过将复杂的物理概念简化为更熟悉的汽车和高速公路的类比，帮助汤姆理解了问题。）</p><hr><h2 id="analyse"><a href="#analyse" class="headerlink" title="analyse"></a>analyse</h2><h3 id="分析词义-86"><a href="#分析词义-86" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Analyse” 是一个动词，意思是仔细检查或研究某物，以了解其组成部分、功能或意义。在中文中，我们可以将它翻译为“分析”或“剖析”。</p><h3 id="列举例句-86"><a href="#列举例句-86" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The chemist was asked to <strong>analyse</strong> the unknown substance.（化学家被要求<strong>分析</strong>这个未知物质。）</li><li>Before making a decision, we need to <strong>analyse</strong> all the options carefully.（在做决定之前，我们需要仔细<strong>分析</strong>所有的选项。）</li><li>The teacher <strong>analysed</strong> the poem line by line to help us understand its deeper meaning.（老师逐行<strong>分析</strong>了这首诗，以帮助我们理解其深层含义。）</li></ol><h3 id="词根分析-86"><a href="#词根分析-86" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Analyse” 来自希腊语词根 “analysein”，意为“分解”或“解散”。在英语中，”analyse” 的词根是 “-lyse”，表示“分解，分析”。</p><h3 id="词缀分析-86"><a href="#词缀分析-86" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Ana-“: 前缀，意为“向上”或“再次”，在”analyse”中可以理解为“分开”或“分解”。</li><li>“-lyse”: 词根，表示“分解，分析”。</li><li>在这个词中，没有明显的后缀。</li></ul><h3 id="发展历史和文化背景-86"><a href="#发展历史和文化背景-86" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Analyse” 这个词最早在17世纪从希腊语借用到英语中。在科学、文学、哲学等多个领域中，分析都是一种重要的方法，用于探究事物的本质和细节。</p><h3 id="单词变形-86"><a href="#单词变形-86" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：analysis（分析，剖析）</li><li>形容词：analytic, analytical（分析的，解析的）</li><li>副词：analytically（分析地，解析地）</li></ul><h3 id="记忆辅助-86"><a href="#记忆辅助-86" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了帮助记忆 “analyse”，可以联想记忆：“ana-(向上)+lyse（分解）&#x3D; 把事物向上分解开来，仔细查看每一个部分，即进行分析。”</p><h3 id="小故事-86"><a href="#小故事-86" class="headerlink" title="小故事"></a>小故事</h3><p>John, a detective, was given a complex case to <strong>analyse</strong>. He carefully examined every clue, knowing that the smallest detail could crack the case. His thorough <strong>analysis</strong> led him to the culprit.</p><p>（约翰，一名侦探，被给了一个复杂的案件去<strong>分析</strong>。他仔细检查了每一个线索，知道最小的细节都可能破解这个案件。他彻底的<strong>分析</strong>让他找到了罪犯。）</p><p>中文翻译：约翰，一名侦探，接到一个复杂的案件需要<strong>分析</strong>。他仔细审查了每一个线索，因为他知道最微小的细节可能就是案件的关键。他彻底的<strong>分析</strong>最终引导他找到了真凶。</p><hr><h2 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h2><h3 id="分析词义-87"><a href="#分析词义-87" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Analysis” 这个单词在英语中通常指的是对事物进行详细的检查和研究，以了解其组成、原理或功能。中文可以翻译为“分析”或“解析”。</p><h3 id="列举例句-87"><a href="#列举例句-87" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The detective conducted a thorough analysis of the crime scene.</p><ul><li>侦探对犯罪现场进行了彻底的分析。</li></ul></li><li><p>Before making a decision, we should do a cost-benefit analysis.</p><ul><li>在做决定之前，我们应该进行成本效益分析。</li></ul></li><li><p>The analysis of the soil sample revealed high levels of pollution.</p><ul><li>对土壤样本的分析揭示了高污染水平。</li></ul></li></ol><h3 id="词根分析-87"><a href="#词根分析-87" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Analysis” 来自于希腊语 “analysein”，意为“解开”或“分解”。词根 “analytic” 与此相关，表示分析的或解析的。</p><h3 id="词缀分析-87"><a href="#词缀分析-87" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ana-“ 是前缀，表示“向上”或“再次”。</li><li>“-lysis” 是后缀，来自希腊语 “lysis”，意为“分解”或“释放”。</li></ul><h3 id="发展历史和文化背景-87"><a href="#发展历史和文化背景-87" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Analysis” 这个词在科学、数学、哲学等多个领域都有广泛应用。在西方文化中，分析是一种重要的研究方法，尤其在逻辑推理和科学探究中占据核心地位。</p><h3 id="单词变形-87"><a href="#单词变形-87" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：analyst（分析员）</li><li>动词：analyze（分析）</li><li>形容词：analytic, analytical（分析的）</li><li>副词：analytically（分析地）</li></ul><h3 id="记忆辅助-87"><a href="#记忆辅助-87" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>“Analysis” 可以通过联想记忆法来记忆：想象你在对一个复杂的“谜团”进行“分解”，一次解开一层，就像“分析”这个词所表达的意思。</p><h3 id="小故事-87"><a href="#小故事-87" class="headerlink" title="小故事"></a>小故事</h3><p>Tom, a chemist, was given a mysterious substance for analysis. He carefully examined it under the microscope. His analysis revealed a unique compound that could revolutionize the industry.</p><p>汤姆，一位化学家，收到了一种神秘的物质要求进行分析。他仔细地在显微镜下检查。他的分析揭示了一种可能改变行业的独特化合物。</p><p>中文翻译：汤姆是一位化学家，有人给了他一种神秘的物质，要求他进行分析。他小心翼翼地在显微镜下观察。他的分析发现了一种可能改变行业的独特化合物。</p><hr><h2 id="ancestor"><a href="#ancestor" class="headerlink" title="ancestor"></a>ancestor</h2><h3 id="分析词义-88"><a href="#分析词义-88" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Ancestor” 这个单词指的是一个人的前辈或祖先，也就是一个人的父母、祖父母、曾祖父母等直系血亲的早期成员。</p><h3 id="列举例句-88"><a href="#列举例句-88" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>We pay respect to our ancestors during the Spring Festival.</p><ul><li>在春节期间，我们会祭拜祖先。</li></ul></li><li><p>Many people are interested in tracing their ancestors to learn about their family history.</p><ul><li>许多人对追溯自己的祖先以了解家族历史很感兴趣。</li></ul></li><li><p>The traditional ceremony honors our ancestors who sacrificed for the nation.</p><ul><li>这个传统仪式是为了纪念我们为国家牺牲的祖先。</li></ul></li></ol><h3 id="词根分析-88"><a href="#词根分析-88" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Ancestor” 这个词的词根是 “ancest”，源自拉丁语 “antecessor”，意为 “先行者” 或 “前任”。</p><h3 id="词缀分析-88"><a href="#词缀分析-88" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“An-“ 是一个前缀，源自拉丁语 “ante”，意味着 “之前” 或 “在前”。</li><li>“-cestor” 是词根，表达 “先行者” 的概念。</li><li>“-or” 是一个常见的拉丁语后缀，用于形成名词。</li></ul><h3 id="发展历史和文化背景-88"><a href="#发展历史和文化背景-88" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Ancestor” 这个词来自中古英语，继承了拉丁语的用法。在欧美文化中，对祖先的纪念和尊重是一个重要的传统，尤其是在家族历史和族谱研究方面。</p><h3 id="单词变形-88"><a href="#单词变形-88" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：Ancestor（祖先）</li><li>复数：Ancestors（祖先们）</li></ul><h3 id="记忆辅助-88"><a href="#记忆辅助-88" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “ancestor” 这个单词，可以想象一条时间线，”ancest-“ 就像 “antes”（拉丁语中的 “之前”），而 “-or” 表示人。所以 “ancestor” 就是时间线之前的人，也就是我们的祖先。</p><h3 id="小故事-88"><a href="#小故事-88" class="headerlink" title="小故事"></a>小故事</h3><p>Tom found an old photo of his ancestors in a dusty attic. He studied their faces, imagining their lives long ago. It made him feel connected to the past.</p><p>汤姆在一个满是灰尘的阁楼里找到了他祖先的老照片。他仔细观察他们的脸庞，想象他们很久以前的生活。这让他感觉与过去有了联系。</p><p>中文翻译：汤姆在一个堆满灰尘的阁楼里找到了他祖先的一张老照片。他端详着他们的面孔，想象着他们很久以前的生活。这让汤姆感觉自己与过去有了某种连接。</p><hr><h2 id="ancient"><a href="#ancient" class="headerlink" title="ancient"></a>ancient</h2><h3 id="分析词义-89"><a href="#分析词义-89" class="headerlink" title="分析词义"></a>分析词义</h3><p>“ancient” 这个单词是形容词，意思是“古老的，陈旧的”。它用来描述那些存在了很久、具有悠久历史的事物或人。</p><h3 id="列举例句-89"><a href="#列举例句-89" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>We visited the ancient ruins of the Colosseum in Rome.（我们参观了罗马古建筑斗兽场的遗址。）</li><li>He has an ancient coin collection that he cherishes very much.（他有一个珍爱的古币收藏。）</li><li>The ancient tree in the courtyard has seen the rise and fall of many generations.（院子里那棵古树见证了无数代的兴衰。）</li></ol><h3 id="词根分析-89"><a href="#词根分析-89" class="headerlink" title="词根分析"></a>词根分析</h3><p>词根是 “anci-“，来源于拉丁语 “anciens”，意味着“旧的，古代的”。</p><h3 id="词缀分析-89"><a href="#词缀分析-89" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀：无特定前缀。</li><li>词根： “anci-“</li><li>后缀： “-ent” 是形容词后缀，常用来形成形容词。</li></ul><h3 id="发展历史和文化背景-89"><a href="#发展历史和文化背景-89" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“ancient” 一词源自拉丁语 “anciens”，在英语中它保留了描述历史悠久的意味。在欧美文化中，这个词常用来提及古希腊、罗马时期的事物，或者更广泛地指代任何与古代相关的历史遗迹、文化传统等。</p><h3 id="单词变形-89"><a href="#单词变形-89" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：ancientness（古老）</li><li>无特定单复数变化</li><li>无动词形式</li><li>无形容词、副词的级别变化</li></ul><h3 id="记忆辅助-89"><a href="#记忆辅助-89" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过联想记忆来记住 “ancient” 这个词。比如，你可以想象一个 “ancestry”（祖先）是来自于 “ancient” 时代的，这两个词有相似的结构，都含有 “anci-“ 这个部分。</p><h3 id="小故事-89"><a href="#小故事-89" class="headerlink" title="小故事"></a>小故事</h3><p>One day, Tom found an ancient map in his attic. It led him to a mysterious treasure hidden in an old, abandoned temple. The map was so ancient that the paper was turning yellow and fragile. </p><p>有一天，汤姆在阁楼里发现了一张古老的地图。它指引他找到了一个藏在古老废弃寺庙中的神秘宝藏。这张地图非常古老，纸张都变成了黄色而且脆弱。</p><p>（故事字数：72词）</p><hr><h2 id="annoy"><a href="#annoy" class="headerlink" title="annoy"></a>annoy</h2><h3 id="分析词义-90"><a href="#分析词义-90" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Annoy” 是一个动词，意思是使某人感到不愉快、心烦或者不舒服。通常指因为一些小事或者持续的干扰而感到烦躁。</p><h3 id="列举例句-90"><a href="#列举例句-90" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The constant buzzing of mosquitoes really annoys me.</p><ul><li>蚊子的持续嗡嗡声真的让我很心烦。</li></ul></li><li><p>Please don’t annoy your brother; he’s trying to study.</p><ul><li>请不要打扰你哥哥，他正在学习。</li></ul></li><li><p>It annoys me when people cut in line at the movies.</p><ul><li>人们在电影院插队让我很生气。</li></ul></li></ol><h3 id="词根分析-90"><a href="#词根分析-90" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Annoy” 的词根是 “ann-“，这个词根来源于拉丁语 “an-“, 意味着”增加”或”重复”，而 “-oy” 部分来自于古法语，表示”困扰”。</p><h3 id="词缀分析-90"><a href="#词缀分析-90" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ann-“：如前所述，表示”增加”或”重复”。</li><li>“-oy”：表示动词的困扰或不安。</li></ul><p>没有明显的词缀，但与”annoy”相似的词可能是 “disappoint”（使失望），其中的 “dis-“ 是一个前缀，表示否定或相反。</p><h3 id="发展历史和文化背景-90"><a href="#发展历史和文化背景-90" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Annoy” 这个词来自中古英语的 “annuien”，最终源于拉丁语的 “anuere”，意味着”困扰”或”使不舒服”。在欧美文化中，这个词通常用来描述一些轻微的不愉快，但并不一定导致严重的后果。</p><h3 id="单词变形-90"><a href="#单词变形-90" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：annoyance（烦恼）</li><li>形容词：annoying（令人烦恼的）</li><li>副词：annoyingly（令人烦恼地）</li></ul><h3 id="记忆辅助-90"><a href="#记忆辅助-90" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>可以将 “Annoy” 和 “No” 结合起来记，想象当你感到不愉快时，你想要说”No”，因为某事或某人让你感到烦恼。</p><h3 id="小故事-90"><a href="#小故事-90" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was annoyed by the loud music next door. He couldn’t focus on his book. He decided to knock on the door and nicely ask for some quiet.</p><p>汤姆被隔壁大声的音乐打扰了。他无法集中注意力在书上。他决定去敲门并礼貌地请求安静一些。</p><p>隔壁大声的音乐让汤姆感到很烦恼。他无法专心看书。他决定去敲门，客气地请他们降低音量。</p><hr><h2 id="annual"><a href="#annual" class="headerlink" title="annual"></a>annual</h2><h3 id="分析词义-91"><a href="#分析词义-91" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Annual” 这个单词是一个形容词，意思是“每年的”、“一年一次的”或“长期的”。它通常用来描述那些发生或者循环一次需要一整年的事件或现象。</p><h3 id="列举例句-91"><a href="#列举例句-91" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>We hold an <strong>annual</strong> meeting every January.</p><ul><li>我们每年一月份都会举行一次年会。</li></ul></li><li><p>The <strong>annual</strong> festival attracts tourists from all over the world.</p><ul><li>这个一年一度的节日吸引了来自世界各地的游客。</li></ul></li><li><p>The company has reported its <strong>annual</strong> sales figures.</p><ul><li>公司已经报告了它的年度销售数字。</li></ul></li></ol><h3 id="词根分析-91"><a href="#词根分析-91" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li><strong>ann-</strong> 是词根，来源于拉丁语“annus”，意为“年”。</li><li><strong>-ual</strong> 是后缀，常用来构成形容词，表示“有……的”或“属于……的”。</li></ul><h3 id="其他单词"><a href="#其他单词" class="headerlink" title="其他单词"></a>其他单词</h3><p>由词根“ann-”衍生出来的其他单词：</p><ul><li>anniversary（周年纪念）</li><li>annuity（年金）</li><li>annualize（使年度化）</li></ul><h3 id="词缀分析-91"><a href="#词缀分析-91" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>**ann-**：年</li><li><strong>-ual</strong>：后缀，表示形容词</li></ul><p>具有相同后缀“-ual”的其他单词：</p><ul><li>visual（视觉的）</li><li>actual（实际的）</li><li>potential（潜在的）</li></ul><h3 id="发展历史和文化背景-91"><a href="#发展历史和文化背景-91" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Annual” 来自于拉丁语“annus”，这个词在罗马文化中代表了一年的时间。在中世纪，这个词进入英语，并且保留了其原始意义，描述与一年相关的周期性事件。</p><h3 id="单词变形-91"><a href="#单词变形-91" class="headerlink" title="单词变形"></a>单词变形</h3><p>“Annual” 的相关变形包括：</p><ul><li>名词形式：annuality（年度性）<br>-副词：annually（每年）</li></ul><h3 id="记忆辅助-91"><a href="#记忆辅助-91" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住“annual”，可以联想一下每年都会发生的事情，比如“annual”考试、生日派对或者是年度报告。</p><h3 id="小故事-91"><a href="#小故事-91" class="headerlink" title="小故事"></a>小故事</h3><p>Every year, the town hosted an <strong>annual</strong> fair. This year, I was excited to enter the pie contest. I carefully prepared my secret recipe. On the day of the fair, the whole town gathered. When the results were announced, my heart was pounding. To my delight, I won the <strong>annual</strong> pie contest!</p><p>每年，这个镇子都会举办一次年度市集。今年，我很激动能参加馅饼大赛。我仔细准备了我的秘密配方。在市集那天，全镇的人都聚集在一起。当结果公布时，我的心在砰砰跳。让我高兴的是，我赢得了年度馅饼大赛！</p><p>镇子每年都会举行一次市集。今年，我非常期待能参加那里的馅饼大赛。我用心准备了我的独家秘方。在市集当天，所有人都来到了现场。当获奖名单公布时，我紧张极了。最终，我欣喜若狂地赢得了这场年度馅饼大赛！</p><hr><h2 id="anonymous"><a href="#anonymous" class="headerlink" title="anonymous"></a>anonymous</h2><h3 id="分析词义-92"><a href="#分析词义-92" class="headerlink" title="分析词义"></a>分析词义</h3><p>“anonymous” 是一个形容词，意思是“匿名的”或“无名的”。它用来描述一个人或事物的身份未被公开，或者是未知的。</p><h3 id="列举例句-92"><a href="#列举例句-92" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The anonymous donor gave a large sum of money to the charity.（那位匿名捐赠者给慈善机构捐了一大笔钱。）</li><li>She posted her story on an anonymous forum to get advice from strangers.（她在一个匿名论坛上发布了她的故事，以获得陌生人的建议。）</li><li>The artist prefers to remain anonymous, focusing on the art rather than personal fame.（这位艺术家更喜欢保持匿名，关注艺术本身而不是个人名声。）</li></ol><h3 id="词根分析-92"><a href="#词根分析-92" class="headerlink" title="词根分析"></a>词根分析</h3><p>词根是 “onym”（名字）和 “anus”（无）。”Onym” 来自希腊语 “ónymos”，意为“名字”，而 “anus” 来自否定前缀 “a-“ 和 “nós”，意为“无”。</p><h3 id="词缀分析-92"><a href="#词缀分析-92" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“a-“：前缀，表示否定。</li><li>“-onym”：词根，表示名字。</li><li>“-ous”：后缀，表示形容词。</li></ul><p>其他带有 “-onym” 词根的单词：</p><ul><li>Homonym（同音异义词）</li><li>Synonym（同义词）</li></ul><p>带有 “-ous” 后缀的形容词：</p><ul><li>Famous（著名的）</li><li>Spacious（宽敞的）</li></ul><h3 id="发展历史和文化背景-92"><a href="#发展历史和文化背景-92" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Anonymous” 这个词来源于希腊语，最初用于描述文学作品或信件中未署名的作者。在西方文化中，它也常用于指代那些选择隐藏身份的人，可能出于保护隐私、避免责任或其他原因。</p><h3 id="单词变形-92"><a href="#单词变形-92" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：anonymity（匿名）</li><li>动词： anonymize（匿名化）</li><li>副词：anonymously（匿名地）</li></ul><h3 id="记忆辅助-92"><a href="#记忆辅助-92" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记忆这个单词的一个方法是联想它和 “name”（名字）。”An-“ 相当于 “not” 或 “without”（没有），所以 “anonymous” 就是 “without a name”（没有名字）。</p><h3 id="小故事-92"><a href="#小故事-92" class="headerlink" title="小故事"></a>小故事</h3><p>In a small town, an anonymous letter sparked a mystery. The letter revealed a hidden treasure, but no one knew who wrote it. The whole town searched, but the identity of the writer remained anonymous.</p><p>在一个小镇上，一封匿名信引发了一个谜团。信中揭示了一个隐藏的宝藏，但没有人知道写信的人是谁。全镇的人都在寻找，但写信者的身份依然是个谜。</p><p>小镇上，一封匿名信引发了一场寻宝热潮。信中透露了宝藏的秘密，然而写信人的身份却无人知晓。全镇居民纷纷加入寻宝队伍，但那位写信人始终保持着匿名。</p><hr><h2 id="anticipate"><a href="#anticipate" class="headerlink" title="anticipate"></a>anticipate</h2><h3 id="分析词义-93"><a href="#分析词义-93" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Anticipate” 是一个动词，意思是预测或预期某事将会发生，并为此做好准备。它可以指提前思考或计划如何应对未来可能发生的事情。</p><h3 id="列举例句-93"><a href="#列举例句-93" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>We need to anticipate the customer’s needs before they even realize it themselves.<br>我们需要预测顾客的需求，甚至在他们自己意识到之前。</p></li><li><p>The teacher anticipated that the students might find the math problem difficult.<br>老师预料到学生们可能会觉得这个数学题很难。</p></li><li><p>He anticipated the risks involved in the new project and took necessary precautions.<br>他预期到新项目涉及的风险，并采取了必要的预防措施。</p></li></ol><h3 id="词根分析-93"><a href="#词根分析-93" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Anticipate” 的词根是 “cip”，意思是拿取或抓住。这个词根来自拉丁语 “capere”。</p><h3 id="词缀分析-93"><a href="#词缀分析-93" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Anti-“ 是前缀，意味着“先于”或“反对”。</li><li>“-cip-“ 是词根。</li><li>“-ate” 是动词后缀，通常加在拉丁词根后来形成动词。</li></ul><p>其他含有 “cip” 词根的单词：</p><ul><li>Participate（参与）: “parti-“（部分）+”cip”（拿取）+”ate”</li><li>Circumcise（割礼）: “circum-“（周围）+”cip”（拿取）+”e”</li></ul><p>含有 “-ate” 后缀的其他单词：</p><ul><li>Congregate（聚集）: “con-“（一起）+”greg”（群体）+”ate”<br>–animate（使有生气）: “an-“（使…）+”imat”（呼吸）+”e”</li></ul><h3 id="发展历史和文化背景-93"><a href="#发展历史和文化背景-93" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Anticipate” 这个词源于拉丁语 “anticipare”，意为“先取”或“先行动”。在欧美文化中，这个词常常用于描述对未来的积极准备和预期。</p><h3 id="单词变形-93"><a href="#单词变形-93" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式：anticipation（预期，期待）</li><li>形容词形式：anticipatory（预期的，前瞻的）</li></ul><h3 id="记忆辅助-93"><a href="#记忆辅助-93" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “anticipate”，可以联想 “anti-“（先于）和 “cip”（抓取），就像是我们在时间之前”抓住”未来的情况或事件。</p><h3 id="小故事-93"><a href="#小故事-93" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was told to anticipate his opponent’s moves in the chess game. He thought carefully and made strategic decisions. When the game began, Tom was ready for every move his opponent made, and he won the game easily.<br>汤姆被告知要在国际象棋比赛中预判对手的走法。他深思熟虑，做出了战略性的决策。比赛开始时，汤姆对对手的每一步都做好了准备，他轻松地赢得了比赛。</p><p>中文翻译：<br>汤姆在国际象棋比赛中被告知要预判对手的走棋。他认真思考，制定了策略。比赛开始后，对于对手的每一个举动，汤姆都早已预料到，因此他轻松地赢得了比赛。</p><hr><h2 id="anxiety"><a href="#anxiety" class="headerlink" title="anxiety"></a>anxiety</h2><h3 id="分析词义-94"><a href="#分析词义-94" class="headerlink" title="分析词义"></a>分析词义</h3><p>“anxiety” 是一个名词，它描述了一种心理状态，通常指人们对于未来的不确定性或潜在的威胁感到的忧虑和紧张。这种感觉可能是轻微的担忧，也可能是极度的不安。</p><h3 id="列举例句-94"><a href="#列举例句-94" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>She suffers from anxiety disorder and finds it hard to relax.<ul><li>她患有焦虑症，很难放松下来。</li></ul></li><li>Before the exam, many students experience a certain level of anxiety.<ul><li>考试前，许多学生会感到一定程度的焦虑。</li></ul></li><li>The news of the upcoming economic downturn caused widespread anxiety among investors.<ul><li>即将到来的经济衰退的消息在投资者中引起了广泛的焦虑。</li></ul></li></ol><h3 id="词根分析-94"><a href="#词根分析-94" class="headerlink" title="词根分析"></a>词根分析</h3><p>“anxiety” 来自拉丁语 “anxious”，词根 “anx-“ 源自拉丁语 “angere”，意为“压迫”或“困扰”。</p><h3 id="词缀分析-94"><a href="#词缀分析-94" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“anx-“：表示压迫或困扰的感觉，是词根。</li><li>“-i-“：连接元音，帮助发音。</li><li>“-ty”：名词后缀，表示状态或品质。</li></ul><h3 id="发展历史和文化背景-94"><a href="#发展历史和文化背景-94" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“anxiety” 这个词在历史上长期用于描述对未知的恐惧或对结果的担忧。在欧美文化中，随着心理学的发展，它也被用于专业领域，描述一种心理症状，即焦虑症。</p><h3 id="单词变形-94"><a href="#单词变形-94" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：anxiety（单数），anxieties（复数）</li><li>形容词：anxious</li><li>副词：anxiously</li></ul><h3 id="记忆辅助-94"><a href="#记忆辅助-94" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>“anxiety” 可以通过联想记忆法来记忆：想象一个人（”an”）在笼子（”x”，类似鸟笼的形状）里感到”i”（我）很紧张，因为”ty”（代表状态）被限制了。</p><h3 id="小故事-94"><a href="#小故事-94" class="headerlink" title="小故事"></a>小故事</h3><p>One day, Kim felt a growing anxiety about her upcoming presentation. She visualized herself stumbling over words and forgetting key points. That night, Kim practiced repeatedly and anxiety slowly faded away. The next day, she delivered her presentation with confidence.</p><ul><li>有天，Kim 对即将到来的演讲感到越来越焦虑。她想象自己说话结巴，忘记了关键点。那天晚上，Kim 反复练习，焦虑逐渐消退。第二天，她自信地完成了演讲。</li></ul><p>中文翻译：一天，Kim 对即将到来的演讲感到越来越焦虑。她想象自己说话结巴，忘记了关键点。那天晚上，她一遍又一遍地练习，焦虑逐渐减少了。第二天，她充满信心地做了演讲。</p><hr><h2 id="apartment"><a href="#apartment" class="headerlink" title="apartment"></a>apartment</h2><h3 id="分析词义-95"><a href="#分析词义-95" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Apartment” 这个词在英语中指的是一栋大楼中的一套住房单位，通常包含一个或多个房间，厨房，浴室等。在中文中，我们通常称之为“公寓”。</p><h3 id="列举例句-95"><a href="#列举例句-95" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>I live in a small apartment near the subway station.<br>我住在一个靠近地铁站的小公寓里。</p></li><li><p>They have a beautiful apartment with a view of the park.<br>他们有一个能看到公园美景的漂亮公寓。</p></li><li><p>We’re thinking of renting a larger apartment because our family is growing.<br>我们在考虑租一个更大的公寓，因为我们的家庭正在扩大。</p></li></ol><h3 id="词根分析-95"><a href="#词根分析-95" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Apartment” 这个词没有明显的词根，但它来源于拉丁语的 “appartimento”，意思是“分隔的部分”。</p><h3 id="词缀分析-95"><a href="#词缀分析-95" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Ap-“ 可以看作是前缀，虽然在这里它的意义不是很明显，但可能与“分开”的概念有关。</li><li>“-ment” 是后缀，通常表示名词，来源于法语，意味着“结果”或“行为”。</li></ul><h3 id="发展历史和文化背景-95"><a href="#发展历史和文化背景-95" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Apartment” 这个词在19世纪开始流行，随着城市化的发展，人们开始在多层建筑中租住独立的住房单元。在美国和欧洲，公寓文化也反映了不同城市的生活方式和社会结构。</p><h3 id="单词变形-95"><a href="#单词变形-95" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：Apartments（复数）</li><li>固定搭配：apartment building（公寓楼）</li></ul><h3 id="记忆辅助-95"><a href="#记忆辅助-95" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “apartment” 这个词，可以想象一个“a”字形的小屋（”apa-“），里面有很多“分”（-ment）隔开的房间。</p><h3 id="小故事-95"><a href="#小故事-95" class="headerlink" title="小故事"></a>小故事</h3><p>Tom found a perfect apartment. It was small but cozy, with a nice view of the city. He loved how quiet it was at night, and the short walk to his favorite coffee shop. Tom felt his new apartment was a peaceful sanctuary in the bustling city.</p><p>汤姆找到了一个完美的公寓。它虽小但很舒适，还能看到城市的美丽景色。他喜欢夜晚的宁静，还有走到他最喜欢的咖啡店的短路程。汤姆觉得他的新公寓在这个喧闹的城市中是一个和平的避风港。</p><p>中文翻译：汤姆找到了一个理想的公寓。它小巧而温馨，还能看到城市的美丽景色。他非常喜欢夜晚的宁静，以及走到他最爱的咖啡店的那段短暂步行。对于汤姆来说，他的新公寓在这个熙熙攘攘的城市中就像是一个宁静的避难所。</p><hr><h2 id="apology"><a href="#apology" class="headerlink" title="apology"></a>apology</h2><h3 id="分析词义-96"><a href="#分析词义-96" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Apology” 是一个名词，意思是对于错误、不当行为或造成不便的情况表示的歉意或道歉。它可以是对某人直接说“对不起”，也可以是通过行动或其他方式表达歉意。</p><h3 id="列举例句-96"><a href="#列举例句-96" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>He offered a sincere apology for his mistake.<br>他对自己犯下的错误表示了真诚的道歉。</p></li><li><p>The company issued an apology to customers for the inconvenience caused by the product recall.<br>该公司就产品召回给客户带来的不便发表了道歉声明。</p></li><li><p>I accept your apology and hope we can move past this issue.<br>我接受你的道歉，希望我们能翻过这一页。</p></li></ol><h3 id="词根分析-96"><a href="#词根分析-96" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Apology” 的词根来自于希腊语的 “apologia”，最初指的是为自己辩护的言辞或行为。</p><h3 id="词缀分析-96"><a href="#词缀分析-96" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“apo-“ 是一个前缀，来自希腊语，意味着“离开”或“远离”。</li><li>“-logy” 是一个后缀，来自希腊语 “logos”，意味着“言辞”或“学科”。</li></ul><h3 id="发展历史和文化背景-96"><a href="#发展历史和文化背景-96" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Apology” 这个词源自于古希腊的法律用语，当时指的是在法庭上为自己辩护的行为。随着时间的推移，它的含义演变为对错误行为的道歉。在西方文化中，道歉通常被视为一种重要的社交和道德行为，可以帮助修复受损的关系。</p><h3 id="单词变形-96"><a href="#单词变形-96" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：apologies（复数）</li><li>动词：apologize（道歉）</li></ul><h3 id="记忆辅助-96"><a href="#记忆辅助-96" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “apology” 这个词的一个方法是联想到 “apo-“ 意味着“远离”，而道歉通常是为了远离错误或不当行为的后果。</p><h3 id="小故事-96"><a href="#小故事-96" class="headerlink" title="小故事"></a>小故事</h3><p>Tom accidentally broke his friend’s phone. He felt bad and decided to make an apology. He wrote a heartfelt message, expressing his sorrow. His friend accepted the apology, and their friendship remained strong.<br>汤姆不小心弄坏了朋友的手机。他感到很糟糕，决定道歉。他写了一条发自内心的信息，表达了他的歉意。他的朋友接受了道歉，他们的友情依然牢固。</p><p>中文翻译：<br>汤姆不小心摔坏了朋友的手机。他感到非常内疚，于是决定去道歉。他写了一封充满真挚感情的信，表达了自己的悔意。朋友接受了他的道歉，他们的友情因此变得更加坚固。</p><hr><h2 id="apparatus"><a href="#apparatus" class="headerlink" title="apparatus"></a>apparatus</h2><h3 id="分析词义-97"><a href="#分析词义-97" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Apparatus” 这个词通常指的是一套用于特定目的的仪器或设备，尤其指科学实验或医疗用的复杂设备。在广义上，它也可以指任何组织或结构的框架。</p><h3 id="列举例句-97"><a href="#列举例句-97" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The scientific apparatus in the lab helped researchers conduct accurate experiments.<br>实验室里的科学设备帮助研究人员进行了准确的实验。（科学实验设备）</p></li><li><p>The fire department arrived with a variety of apparatus to battle the blaze.<br>消防部门带着各种各样的设备到达现场以扑灭大火。（紧急救援设备）</p></li><li><p>He has an apparatus in place for managing his business finances.<br>他建立了一套管理企业财务的机制。（组织结构）</p></li></ol><h3 id="词根分析-97"><a href="#词根分析-97" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“Apparatus” 来自拉丁语，词根 “apparere” 意为“出现”或“显现”。</li></ul><h3 id="词缀分析-97"><a href="#词缀分析-97" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Apparatus” 本身可以拆分为：<ul><li>“ap-“ 是前缀，表示“朝着”或“向着”。</li><li>“-par-“ 是词根的变体，来自 “apparere”。</li><li>“-atus” 是后缀，常用于构成名词，表示“有…的”或“被…的”。</li></ul></li></ul><h3 id="发展历史和文化背景-97"><a href="#发展历史和文化背景-97" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Apparatus” 一词在科学革命时期开始广泛使用，特别是在描述复杂的科学仪器时。它体现了拉丁语在学术和科学领域的持久影响。</p><h3 id="单词变形-97"><a href="#单词变形-97" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：apparatus（单数）、apparatuses（复数，较少使用）、apparatus（复数也可以用单数形式）</li><li>无特定动词或形容词变形。</li></ul><h3 id="记忆辅助-97"><a href="#记忆辅助-97" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过以下方式记忆 “apparatus”：</p><ul><li>联想记忆法：想一个看起来复杂，有很多部分的设备，比如“Appearance”（外观）的“-pearance”部分看起来就像是很多部分组成的，然后把“-ance”换成“-atus”，就成了“apparatus”。</li></ul><h3 id="小故事-97"><a href="#小故事-97" class="headerlink" title="小故事"></a>小故事</h3><p>One day, a young inventor was excited to show his new apparatus. It was a machine with many gears and dials, designed to help farmers automate their work. He turned it on, and to everyone’s amazement, the apparatus worked perfectly.</p><p>有一天，一位年轻的发明家兴奋地展示他的新设备。这是一台有许多齿轮和表盘的机器，设计用于帮助农民自动化他们的工作。他打开机器，令所有人惊讶的是，这个设备完美地运作起来。</p><p>[中文翻译]<br>有一天，一个年轻的发明家激动地要给大家看他的新发明——一台复杂的设备。这是一台装满了齿轮和表盘的机器，他设计这台机器是为了帮助农民们自动化农业生产。当他启动这台设备时，所有人都惊叹了，因为这台设备完美无瑕地开始了工作。</p><hr><h2 id="appeal"><a href="#appeal" class="headerlink" title="appeal"></a>appeal</h2><h3 id="分析词义-98"><a href="#分析词义-98" class="headerlink" title="分析词义"></a>分析词义</h3><p>“appeal” 这个词有多种含义。作为名词，它通常指某种吸引力或者是对某个决定提出正式抗议的要求。作为动词，它意味着请求帮助、支持或者对某个决定提出上诉。</p><h3 id="列举例句-98"><a href="#列举例句-98" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The charity’s appeal for donations was very successful.（该慈善机构对捐款的呼吁非常成功。）</p><ul><li>慈善机构发起了筹款活动，并得到了积极的响应。</li></ul></li><li><p>The actor’s good looks have a strong appeal to his fans.（那位演员的外貌对他粉丝有很大的吸引力。）</p><ul><li>演员的外表使他对粉丝非常有魅力。</li></ul></li><li><p>The company is planning to appeal the court’s decision.（公司计划对法院的判决提起上诉。）</p><ul><li>公司不满意法院的裁决，打算通过法律程序进行上诉。</li></ul></li></ol><h3 id="词根分析-98"><a href="#词根分析-98" class="headerlink" title="词根分析"></a>词根分析</h3><p>“appeal” 这个词没有明显的词根。它来自拉丁语 “appellare”，意为“召唤”或“称呼”。</p><h3 id="词缀分析-98"><a href="#词缀分析-98" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ap-“ 是一个前缀，在拉丁语中意味着“向”，“-peal” 可以看作是动词 “pellere”（推，拉）的变化形式。</li></ul><h3 id="发展历史和文化背景-98"><a href="#发展历史和文化背景-98" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“appeal” 这个词在早期英语中主要用作法律术语，指对法庭判决不服并提出重审的请求。随着时间的推移，它的含义扩展到了具有吸引力或呼吁行动的意思。</p><h3 id="单词变形-98"><a href="#单词变形-98" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词: appeal</li><li>动词: appeal, appealed, appealing</li><li>形容词: appealing（有吸引力的）</li><li>副词: appealingly（有吸引力地）</li></ul><h3 id="记忆辅助-98"><a href="#记忆辅助-98" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过联想记忆来记住 “appeal” 这个词。比如，”A peal of laughter”（一阵笑声）中的 “peal” 和 “appeal” 发音相似，你可以想象一场有趣的表演，笑声连连，非常有吸引力（appealing），这样就容易记住 “appeal” 这个词。</p><h3 id="小故事-98"><a href="#小故事-98" class="headerlink" title="小故事"></a>小故事</h3><p>John’s charity appeal won the hearts of many. He shared a story of a struggling family, which tugged at people’s heartstrings. The response was overwhelming, and they raised more funds than expected.</p><p>约翰的慈善呼吁感动了很多人。他分享了一个处于困境中的家庭的故事，这个故事触动了人们的心弦。反应非常热烈，他们筹集到了比预期更多的资金。</p><p>约翰的慈善呼吁（charity appeal）打动了许多人的心。他讲述了一个艰难家庭的经历，这个故事深深触动了人们的情感。人们的响应非常强烈，他们筹集到的资金超出了预期。</p><hr><h2 id="appearance"><a href="#appearance" class="headerlink" title="appearance"></a>appearance</h2><h3 id="分析词义-99"><a href="#分析词义-99" class="headerlink" title="分析词义"></a>分析词义</h3><p>“appearance” 是一个名词，指的是某人或某物看起来如何，它的外观或外貌。在更深层次上，它也可以指某物的出现或露面，给人一种整体的印象。</p><h3 id="列举例句-99"><a href="#列举例句-99" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>She pays a lot of attention to her appearance.<br>她非常注重自己的外表。</p></li><li><p>The company is concerned about the appearance of their new product.<br>公司很关心他们新产品的外观。</p></li><li><p>His sudden appearance at the party surprised everyone.<br>他突然出现在派对上，让所有人都很惊讶。</p></li></ol><h3 id="词根分析-99"><a href="#词根分析-99" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“appear”：表示“出现”或“显得”。</li><li>“ance”：这是一个常见的名词后缀，表示“状态”或“行为”。</li></ul><h3 id="词缀分析-99"><a href="#词缀分析-99" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“appear-“：词根，来源于拉丁语“apparere”，意为“出现”。</li><li>“-ance”：后缀，表示与动词相关的状态或行为。</li></ul><h3 id="发展历史和文化背景-99"><a href="#发展历史和文化背景-99" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“appearance” 来自古法语“apparence”，最终源自拉丁语“apparere”。在欧美文化中，”appearance” 不仅指物理外貌，还常用来讨论公众形象和第一印象的重要性。</p><h3 id="单词变形-99"><a href="#单词变形-99" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：appearances（复数）</li><li>动词：appear, appeared, appearing</li><li>形容词：appearable（很少用）</li></ul><h3 id="记忆辅助-99"><a href="#记忆辅助-99" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>可以联想记忆，“appear”（出现）加上“-ance”（状态）就是“appearance”（外观或出现的状态）。</p><h3 id="小故事-99"><a href="#小故事-99" class="headerlink" title="小故事"></a>小故事</h3><p>One day, a mysterious man appeared at the village. His appearance was unusual, wearing a long black cloak. The villagers were curious but also a bit wary. He didn’t say much, but his presence was felt by all.<br>有一天，一个神秘的男子出现在村庄。他的外表很不寻常，穿着一件长长的黑色斗篷。村民们很好奇，但也有些警惕。他没说什么，但他的出现让所有人都感受到了。</p><p>[中文翻译]<br>有一天，一个神秘的男子突然出现在这个村庄。他的外貌很特别，穿着一件长长的黑色披风。村民们既好奇又有些警惕。他没怎么说话，但他的存在让所有人都注意到了。</p><hr><h2 id="appease"><a href="#appease" class="headerlink" title="appease"></a>appease</h2><h3 id="分析词义-100"><a href="#分析词义-100" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Appease”这个单词的意思是为了减少紧张或不满，采取行动使某人或某事平静下来或感到满意。在中文中，我们可以将其翻译为“安抚”、“平息”或“使满足”。</p><h3 id="列举例句-100"><a href="#列举例句-100" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The teacher tried to appease the angry students by promising to consider their demands.<ul><li>老师承诺会考虑学生的要求，试图安抚愤怒的学生。</li></ul></li><li>The government announced new policies to appease the public’s concerns over the economy.<ul><li>政府宣布了新政策以平息公众对经济的担忧。</li></ul></li><li>He brought a gift to appease his girlfriend after their argument.<ul><li>争吵之后，他带了一份礼物来使他的女朋友感到满意。</li></ul></li></ol><h3 id="词根分析-100"><a href="#词根分析-100" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Appease”来自古法语单词”apaiser”，词根是”pax”，意味着“和平”。</p><h3 id="词缀分析-100"><a href="#词缀分析-100" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ap-“ 是一个前缀，表示加强或变化。</li><li>“-peas-“ 是词根，和和平、平静有关。</li><li>“-e” 是后缀，这里没有明显的意义，但有助于单词的发音。</li></ul><h3 id="发展历史和文化背景-100"><a href="#发展历史和文化背景-100" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Appease”在历史上经常和政治、外交有关，指的是通过让步或妥协来避免冲突。在西方文化中，这个词语有时会带有负面含义，暗示只是暂时解决问题，而不是真正解决根本问题。</p><h3 id="单词变形-100"><a href="#单词变形-100" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词: appeasement（安抚行为；满足）</li><li>动词时态: appeased（过去式）、appeasing（现在分词）、appeases（第三人称单数）</li></ul><h3 id="记忆辅助-100"><a href="#记忆辅助-100" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住”appease”，可以将它与“P-E-A-C-E”（和平）这个词联系起来，想象你正在做某事来制造和平，即“appease”。</p><h3 id="小故事-100"><a href="#小故事-100" class="headerlink" title="小故事"></a>小故事</h3><p>Tom’s younger sister was crying because her toy broke. To appease her, Tom offered her a piece of chocolate. She stopped crying and smiled.</p><ul><li>汤姆的妹妹因为玩具坏了在哭。为了安抚她，汤姆给了她一块巧克力。她停止了哭泣，露出了笑容。</li></ul><p>通过这个故事，我们可以记住”appease”意味着通过做某事来使人平静或满意。</p><hr><h2 id="appendix"><a href="#appendix" class="headerlink" title="appendix"></a>appendix</h2><h3 id="分析词义-101"><a href="#分析词义-101" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Appendix” 在医学上指的是人体中的一个附属器官，位于大肠的开始部分，也就是盲肠附近的一个小囊袋。在日常用语中，它还可以指书籍、报告等文末的附录部分，提供了额外的信息或参考资料。</p><h3 id="列举例句-101"><a href="#列举例句-101" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>In the medical book, there is a detailed appendix about the human digestive system.</p><ul><li>在医学书中，有一个关于人体消化系统的详细附录。</li></ul></li><li><p>During the surgery, the doctor discovered that my uncle’s appendix had become inflamed and needed to be removed.</p><ul><li>在手术过程中，医生发现我叔叔的阑尾发炎了，需要切除。</li></ul></li><li><p>The researcher referred to the appendix in the report for more in-depth data analysis.</p><ul><li>研究员查阅了报告附录以进行更深入的数据分析。</li></ul></li></ol><h3 id="词根分析-101"><a href="#词根分析-101" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Appendix” 的词根来自于拉丁语 “appendere”，意味着 “挂”，”附加”。词根 “append” 暗示了添加或连接某物的意思。</p><h3 id="词缀分析-101"><a href="#词缀分析-101" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“appen-“：表示“附加”的词根。</li><li>“-dix”：来自拉丁语 “-dictus”，是 “say” 或 “speak” 的过去分词，在这里作为名词后缀。</li></ul><p>其他包含词根 “append” 的单词：</p><ul><li>appendage（附属物）</li><li>appendant（附加的）</li></ul><h3 id="发展历史和文化背景-101"><a href="#发展历史和文化背景-101" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Appendix” 这个词在英语中的使用始于17世纪，最初用于描述书籍的附录部分。后来扩展到医学领域，指代人体内的阑尾器官。在文化上，阑尾在西方医学界曾一度被认为是退化无用的器官，但现在研究表明它可能有助于免疫系统的功能。</p><h3 id="单词变形-101"><a href="#单词变形-101" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：appendix（单数），appendices（复数）</li><li>无其他常见变形。</li></ul><h3 id="记忆辅助-101"><a href="#记忆辅助-101" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “appendix” 这个单词，可以联想记忆：</p><ul><li>“Ap” 可以联想到 “Append”，表示添加或附加。</li><li>“Pend” 和 “Pendant”（悬挂物）有关联，附录就像是悬挂在书末的信息。</li></ul><h3 id="小故事-101"><a href="#小故事-101" class="headerlink" title="小故事"></a>小故事</h3><p>John was reading a history book when he found an interesting appendix about ancient inventions.</p><ul><li>约翰在读一本历史书时，发现了一个关于古代发明的有趣附录。</li></ul><p>While browsing through the appendix, he learned that many of those inventions are still used today.</p><ul><li>在浏览附录的过程中，他了解到许多这些发明至今仍在使用。</li></ul><p>中文翻译：<br>约翰在读一本历史书时，意外发现了一个关于古代发明的附录。在翻阅这个附录的过程中，他惊奇地发现许多古代的发明至今仍然在使用。</p><hr><h2 id="applaud"><a href="#applaud" class="headerlink" title="applaud"></a>applaud</h2><h3 id="分析词义-102"><a href="#分析词义-102" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Applaud” 这个词的意思是鼓掌或者称赞。当我们认为某人做得很好，或者喜欢某个表演、演讲时，我们可能会用掌声来表达我们的欣赏和认可。</p><h3 id="列举例句-102"><a href="#列举例句-102" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The audience applauded after the concert.（音乐会结束后，观众鼓掌了。）</li><li>She was applauded for her bravery in saving the child from the burning house.（她因从燃烧的房子中救出孩子的勇敢行为而受到赞扬。）</li><li>The teacher applauded the students’ efforts in the science project.（老师为学生们在科学项目中的努力鼓掌。）</li></ol><h3 id="词根分析-102"><a href="#词根分析-102" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Applaud” 来自拉丁语 “applaudere”，意为鼓掌或称赞。</p><ul><li>“ap-“ 是一个前缀，表示加强或方向。</li><li>“-plaud-“ 是词根，和“plod”（沉重的脚步声）有关，在这里引申为鼓掌的声音。</li><li>“-ed” 是后缀，表示动词的过去式和过去分词。</li></ul><h3 id="词缀分析-102"><a href="#词缀分析-102" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “ap-“<ul><li>其他单词如：apply, appoint</li></ul></li><li>词根 “-plaud-“<ul><li>其他单词如：plaudit（喝彩）</li></ul></li><li>后缀 “-ed”<ul><li>其他单词如：walked, talked</li></ul></li></ul><h3 id="发展历史和文化背景-102"><a href="#发展历史和文化背景-102" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Applaud” 这个词在历史上是表达赞同和尊敬的重要方式。在古希腊和古罗马，鼓掌是戏剧和演讲结束后常见的表达方式。在现代，除了鼓掌，它也用于形容对某人或某事表示高度赞赏。</p><h3 id="单词变形-102"><a href="#单词变形-102" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：applause（鼓掌，喝彩）</li><li>动词：applaud（鼓掌，称赞）<ul><li>现在分词：applauding</li><li>过去式：applauded</li><li>过去分词：applauded</li></ul></li><li>形容词：applaudable（值得赞美的）</li></ul><h3 id="记忆辅助-102"><a href="#记忆辅助-102" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “applaud”，可以将它拆分为 “ap”（看作是“一个”的拼音首字母）和 “plaud”（类似“place”的发音），想象“在每一个地方都给予掌声”，这样就能联想到它的意思了。</p><h3 id="小故事-102"><a href="#小故事-102" class="headerlink" title="小故事"></a>小故事</h3><p>Tom finished his piano recital to thunderous applause from the crowd. He bowed, grinning from ear to ear.（汤姆完成了他的钢琴独奏会，观众报以雷鸣般的掌声。他鞠躬，笑得合不拢嘴。）</p><h3 id="中文翻译-2"><a href="#中文翻译-2" class="headerlink" title="中文翻译"></a>中文翻译</h3><p>汤姆完成了他的钢琴独奏，听众以热烈的掌声回应。他鞠躬致谢，笑得非常开心。</p><hr><h2 id="appliance"><a href="#appliance" class="headerlink" title="appliance"></a>appliance</h2><h3 id="分析词义-103"><a href="#分析词义-103" class="headerlink" title="分析词义"></a>分析词义</h3><p>“appliance”这个词通常指的是一种可以用来执行家务或个人护理的电器的装置。在日常生活中，这个词可以代表从冰箱、洗衣机到吹风机、电动牙刷等各种家用电器和个人护理电器。</p><h3 id="列举例句-103"><a href="#列举例句-103" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>I need to buy a new appliance for the kitchen since my old microwave oven stopped working.<br>我需要为厨房买一个新的电器，因为我的旧微波炉坏了。</p></li><li><p>Modern appliances have made our lives much easier by saving us time and effort.<br>现代电器使我们的生活变得容易多了，因为它们节省了我们的时间和精力。</p></li><li><p>He opened an appliance store, offering a wide range of products from washing machines to coffee makers.<br>他开了一家电器商店，提供从洗衣机到咖啡机等各种产品。</p></li></ol><h3 id="词根分析-103"><a href="#词根分析-103" class="headerlink" title="词根分析"></a>词根分析</h3><p>词根是“appli-”（应用）和“-ance”（表示状态或行为）的组合。</p><ul><li>“appli-”来自“apply”，意味着“应用”或“使用”。</li><li>“-ance”是一个名词后缀，通常加在动词后面，表示该动词所表示的状态或行为。</li></ul><h3 id="词缀分析-103"><a href="#词缀分析-103" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“appli-”是词根，表示“应用”。</li><li>“-ance”是后缀，表示名词性质。</li></ul><p>其他使用相同后缀的单词：</p><ul><li>Appearance（外观）</li><li>Importance（重要性）</li><li>Distance（距离）</li></ul><h3 id="发展历史和文化背景-103"><a href="#发展历史和文化背景-103" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Appliance”一词起源于拉丁语“applicare”，意味着“应用”或“使用”。随着工业革命和电气化时代的到来，这个词逐渐被用来描述那些可以应用于家庭或个人护理的电动机械装置。在欧美文化中，家用电器的普及被认为是现代化和便利生活的重要标志。</p><h3 id="单词变形-103"><a href="#单词变形-103" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：appliance（电器）</li><li>复数：appliances（电器们）</li></ul><h3 id="记忆辅助-103"><a href="#记忆辅助-103" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住“appliance”这个词，可以将其拆分为“apply”（应用）和一个暗示它们是“用来做事的东西”的后缀“-ance”。想象一下，这些电器是我们日常生活中“应用”来帮助我们做事的工具。</p><h3 id="小故事-103"><a href="#小故事-103" class="headerlink" title="小故事"></a>小故事</h3><p>John wanted to surprise his wife with a new coffee appliance for her birthday. He went to the store and chose a fancy one. On the big day, his wife was thrilled to see the coffee maker. She loved its modern design and the delicious coffee it made.</p><p>约翰想给妻子一个新咖啡机作为生日惊喜。他去了商店，挑选了一个花哨的款式。在那天，他的妻子看到咖啡机非常激动。她喜欢它现代的设计和煮出的美味咖啡。</p><p>约翰想在妻子的生日给她一个惊喜，于是他去商店挑选了一款新咖啡电器。在大日子那天，妻子看到这台咖啡机非常高兴。她很喜欢它现代的外观和冲泡出的咖啡味道。</p><hr><h2 id="application"><a href="#application" class="headerlink" title="application"></a>application</h2><h3 id="分析词义-104"><a href="#分析词义-104" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Application” 这个单词在英语中通常指的是一个程序或应用程序，它可以在电脑、手机或其他电子设备上运行，完成特定的任务。在更广泛的层面上，它还可以指应用某个理论、方法或知识到实际的情况中去。</p><h3 id="列举例句-104"><a href="#列举例句-104" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>I downloaded a new application on my phone to help me manage my finances.<br>我在手机上下载了一个新的应用程序来帮助我管理财务。（中文翻译：我在手机上安装了一款新的理财软件。）</p></li><li><p>He submitted his job application last week and is waiting for a response.<br>他上周提交了工作申请，正在等待回复。（中文翻译：他上周递交了求职申请，现在正在等待面试通知。）</p></li><li><p>The application of this theory to real-life situations has been very successful.<br>将这个理论应用到实际生活中的尝试非常成功。（中文翻译：这个理论在实际应用中取得了很大的成功。）</p></li></ol><h3 id="词根分析-104"><a href="#词根分析-104" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“Apply” 是词根，意为“应用”或“涂抹”。</li><li>“lication” 是后缀，来自拉丁语 “licere”，意为“允许”，并与动词 “apply” 结合，形成名词。</li></ul><h3 id="词缀分析-104"><a href="#词缀分析-104" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Ap-“ 是前缀，表示“加强”或“方向”。</li><li>“-ply” 来自 “plicare”，意为“折叠”或“应用”。</li><li>“-tion” 是名词后缀，表示行为或过程。</li></ul><h3 id="发展历史和文化背景-104"><a href="#发展历史和文化背景-104" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Application” 一词源自拉丁语 “applicare”，意为“涂抹”或“应用”。随着计算机技术的发展，这个词被广泛用来指代在电子设备上运行的软件程序。在现代欧美文化中，”application” 或 “app” 通常与智能手机和平板电脑紧密相关，是日常生活中不可或缺的一部分。</p><h3 id="单词变形-104"><a href="#单词变形-104" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：Application（单数），Applications（复数）</li><li>动词：Apply（原形），Applies（第三人称单数），Applying（现在分词），Applied（过去式和过去分词）</li><li>形容词：Applicable（可应用的）</li><li>副词：Applicably（适当地）</li></ul><h3 id="记忆辅助-104"><a href="#记忆辅助-104" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “application” 这个词，可以联想记忆它的动词形式 “apply”，意为“涂抹”或“应用”。想象你正在把某种理论、方法或软件“涂抹”在具体的问题上，使其得以解决。</p><h3 id="小故事-104"><a href="#小故事-104" class="headerlink" title="小故事"></a>小故事</h3><p>John wanted to improve his fitness, so he downloaded a health application. Every day, the app reminded him to exercise and eat healthy. Gradually, John’s lifestyle changed, and he felt more energetic.<br>约翰想提高自己的体质，于是他下载了一个健康应用程序。每天，这个程序提醒他锻炼和健康饮食。渐渐地，约翰的生活方式改变了，他感到更有活力了。（中文翻译：约翰想要增强体质，就下载了一款健康应用。每天应用都会提醒他做运动和健康饮食。慢慢地，约翰的生活习惯得到了改善，他感觉更有精神了。）</p><hr><h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><h3 id="分析词义-105"><a href="#分析词义-105" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Apply” 这个英文单词作为动词，它的基本意思是“涂抹”、“敷用”，在抽象层面上有“应用”、“适用”、“请求”等含义。比如，你可以用apply来描述往脸上涂抹面霜的动作，或者在职业场合上申请工作的行为。</p><h3 id="列举例句-105"><a href="#列举例句-105" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>She applied some sunscreen before going to the beach.<br>她在去海滩之前涂抹了防晒霜。</p></li><li><p>To apply for a job, you need to submit your resume and cover letter.<br>要申请工作，你需要提交你的简历和求职信。</p></li><li><p>He couldn’t apply the theory to the practical problem.<br>他无法将这个理论应用到实际问题中。</p></li></ol><h3 id="词根分析-105"><a href="#词根分析-105" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Apply” 的词根是 “ply”，这个词根来源于古英语 “plican”，意为“折叠”或“编织”。在现代英语中，”ply” 也常用作动词，表示“使用”或“反复做”。</p><h3 id="词缀分析-105"><a href="#词缀分析-105" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ap-“ 是前缀，表示“加强”或“朝向”。</li><li>“-ply” 是词根。</li><li>无明显后缀。</li></ul><p>其他含有词根 “ply” 的单词：</p><ul><li>comply (遵守)</li><li>imply (暗示)</li><li>reply (回复)</li></ul><h3 id="发展历史和文化背景-105"><a href="#发展历史和文化背景-105" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Apply” 这个单词可以追溯到古英语，最初的含义与“折叠”或“编织”有关。随着时间的推移，它的意义扩展到了现在的“涂抹”、“应用”等抽象概念。在欧美文化中，”apply” 常用于描述使用方法、申请程序等，体现了个人对某种方法、技巧或规则的采纳和应用。</p><h3 id="单词变形-105"><a href="#单词变形-105" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：application（申请；应用）</li><li>动词时态：applies, applied, applying</li><li>形容词：applicable（可适用的）</li><li>副词：apparently（显然地，不过这个副词与”apply”的词形变化不直接相关，但含义上有联系）</li></ul><h3 id="记忆辅助-105"><a href="#记忆辅助-105" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “apply” 这个单词，可以联想 “ap-“（类似 “to”，表示方向）和 “-ply”（联想到 “plywood”，多层叠加，象征“应用”或“涂抹”）。</p><h3 id="小故事-105"><a href="#小故事-105" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was excited to apply the new paint on the wall. He carefully covered the surface, watching the color transform the room.<br>汤姆兴奋地要在墙上涂抹新漆。他仔细地覆盖每一寸表面，看着颜色改变了房间的面貌。</p><p>中文翻译：汤姆很高兴要在墙上应用新漆。他仔细地将漆涂抹在墙上，看着房间的颜色因此焕然一新。</p><hr><h2 id="appraisal"><a href="#appraisal" class="headerlink" title="appraisal"></a>appraisal</h2><h3 id="分析词义-106"><a href="#分析词义-106" class="headerlink" title="分析词义"></a>分析词义</h3><p>“appraisal” 这个单词通常指的是对某物的评价或估价。它可以用于对物品、工作表现、财产等的评估。</p><h3 id="列举例句-106"><a href="#列举例句-106" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The manager will conduct an annual appraisal of each employee’s performance. （经理将对每位员工的年度绩效进行评估。）</li><li>Before selling the house, we should get a professional appraisal to determine its value. （在出售房屋之前，我们应该请专业的评估师来确定其价值。）</li><li>The art collector requested an appraisal of the painting he had just acquired. （那位艺术品收藏家要求对他刚收购的画作进行评估。）</li></ol><h3 id="词根分析-106"><a href="#词根分析-106" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“appraisal” 的词根是 “appraise”，意味着评估或评价。<ul><li>“ap-“ 是前缀，表示加强或方向。</li><li>“-praise” 来自于拉丁语 “pretium” 意为价值。</li></ul></li></ul><h3 id="词缀分析-106"><a href="#词缀分析-106" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“appraisal” 本身是由 “appraise” 加上后缀 “-al” 组成，表明与评估有关的行为或状态。<ul><li>“-al” 是形容词后缀，表示“有关”或“属于”。</li></ul></li></ul><h3 id="发展历史和文化背景-106"><a href="#发展历史和文化背景-106" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Appraisal” 这个词起源于中古英语，来自于法语的 “appris” 和拉丁语的 “appretiare”，意味着对物品价值的估计。在欧美文化中，对工作表现和财产的评估是很常见的，这个单词经常用于职业发展和财务管理领域。</p><h3 id="单词变形-106"><a href="#单词变形-106" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：appraisal（评估）</li><li>动词：appraise（评价，估价）</li><li>形容词：appraisal-related（与评估相关的）</li></ul><h3 id="记忆辅助-106"><a href="#记忆辅助-106" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记忆 “appraisal” 这个词，可以联想一下：“Appraisal”就像是“apprise”（通知）加上“-al”，即通知你某物的价值或情况。</p><h3 id="小故事-106"><a href="#小故事-106" class="headerlink" title="小故事"></a>小故事</h3><p>Tom received an appraisal letter from his company. He was curious about his performance rating. The letter highlighted his achievements and areas needing improvement. Tom felt motivated to do better next year.</p><p>汤姆收到了公司发给他的一封评估信。他很好奇自己的绩效评分如何。信中强调了他的成就和需要改进的地方。汤姆觉得受到了鼓舞，决心下一年做得更好。</p><p>翻译：汤姆收到了公司的一封评估信。他好奇自己的绩效评价。信里提到了他的成绩和需要改进之处。汤姆感到受到了激励，决定在接下来的一年里表现得更好。</p><hr><h2 id="approach"><a href="#approach" class="headerlink" title="approach"></a>approach</h2><h3 id="分析词义-107"><a href="#分析词义-107" class="headerlink" title="分析词义"></a>分析词义</h3><p>“approach” 这个词作为名词时，意思是接近、靠近的方法或方式；作为动词时，指的是靠近、接近某人或某物，也可以指时间、状态等的临近。</p><h3 id="列举例句-107"><a href="#列举例句-107" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>As the exam approaches, I need to study harder.<ul><li>考试临近，我需要更加努力学习。（名词）</li></ul></li><li>The captain approached the shore carefully.<ul><li>船长小心翼翼地驶向岸边。（动词）</li></ul></li><li>I prefer a more direct approach to solving problems.<ul><li>我更喜欢直接的方法来解决问题。（名词）</li></ul></li></ol><h3 id="词根分析-107"><a href="#词根分析-107" class="headerlink" title="词根分析"></a>词根分析</h3><p>“approach” 的词根是 “approach”，这个单词没有明显的词根组合。</p><h3 id="词缀分析-107"><a href="#词缀分析-107" class="headerlink" title="词缀分析"></a>词缀分析</h3><p>“approach” 本身不含常见的前缀或后缀。</p><h3 id="发展历史和文化背景-107"><a href="#发展历史和文化背景-107" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“approach” 这个词源于中古英语 “apropachen”，最初的含义是“靠近、走近”。在现代英语中，它的意义扩展到了方法、方式等抽象概念。</p><h3 id="单词变形-107"><a href="#单词变形-107" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：approach</li><li>动词：approach, approaches, approached, approaching</li><li>形容词：approachable（容易接近的）</li></ul><h3 id="记忆辅助-107"><a href="#记忆辅助-107" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>“approach” 可以通过“一步一步走向成功”（step by step towards success）来记忆，因为每一步都是向目标靠近。</p><h3 id="小故事-107"><a href="#小故事-107" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was excited as the vacation approached. He packed his bags and made a list of activities. Finally, the day came, and he approached the airport with a smile.<br>汤姆越来越兴奋，因为假期即将来临。他打包了行李，列出了活动清单。终于，那一天到来了，他带着微笑走向了机场。</p><p>中文翻译：<br>汤姆因为假期的逐渐接近而感到兴奋。他打包好了行李，列出了一份活动计划。终于，那一天到来了，他面带微笑地向机场走去。</p><hr><h2 id="appropriate"><a href="#appropriate" class="headerlink" title="appropriate"></a>appropriate</h2><h3 id="分析词义-108"><a href="#分析词义-108" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Appropriate” 这个单词是形容词，意思是合适的、恰当的。它用来描述某事物或行为符合特定情境、规则或标准。</p><h3 id="列举例句-108"><a href="#列举例句-108" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>You should wear appropriate clothes for the party.（你应该穿适合派对的衣服。）</p><ul><li>描述穿着与场合相符。</li></ul></li><li><p>She used appropriate language in front of the children.（她在孩子们面前用了恰当的语言。）</p><ul><li>描述言语得体。</li></ul></li><li><p>The government has allocated an appropriate budget for education.（政府为教育分配了适当的预算。）</p><ul><li>描述预算的合理性。</li></ul></li></ol><h3 id="词根分析-108"><a href="#词根分析-108" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“Appropriate” 来自于 “appropriate” 的动词形式，词根是 “propius”，拉丁语意为 “属于自己的” 或 “适当的”。</li></ul><h3 id="词缀分析-108"><a href="#词缀分析-108" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Appropriate” 的构成为：前缀 “ap-“（表示加强）+ 词根 “-propri-“（适当的）+ 后缀 “-ate”（使成为）。</li><li>相同词缀的单词如：”allocate”（分配），”animate”（使生动）。</li></ul><h3 id="发展历史和文化背景-108"><a href="#发展历史和文化背景-108" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Appropriate” 一词源于拉丁语 “appropriare”，在中古英语中演变为 “appropriate”。在欧美文化中，这个词常用于强调某事物是否符合社会规范或个人期望。</p><h3 id="单词变形-108"><a href="#单词变形-108" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：”appropriateness”</li><li>动词：”appropriate”（及物动词），”appropriating”（现在分词），”appropriated”（过去式&#x2F;过去分词）</li><li>形容词比较级：”more appropriate”</li><li>形容词最高级：”most appropriate”</li></ul><h3 id="记忆辅助-108"><a href="#记忆辅助-108" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过联想记忆来记住 “appropriate” 这个词：想象一个人（”ap-“）拿着自己的（”-propri-“，源自 “proprius”，意为属于自己的）东西去参加一个场合，这样他就有了 “appropriate”（合适的）东西。</p><h3 id="小故事-108"><a href="#小故事-108" class="headerlink" title="小故事"></a>小故事</h3><p>John was invited to a formal dinner. He wanted to make a good impression, so he chose appropriate attire—a suit and tie. At the event, everyone commented on how well he fit in with the occasion.</p><p>约翰被邀请参加一个正式晚宴。他想要留下好印象，所以挑选了合适的着装——西装和领带。在活动中，大家都称赞他多么符合场合。</p><p>（中文翻译：约翰受邀参加一个正式晚宴。他希望留下好印象，因此选择了得体的着装——西装和领带。在晚宴上，大家都评价他多么适合这个场合。）</p><hr><h2 id="approve"><a href="#approve" class="headerlink" title="approve"></a>approve</h2><h3 id="分析词义-109"><a href="#分析词义-109" class="headerlink" title="分析词义"></a>分析词义</h3><p>“approve” 是一个动词，意思是正式地同意或赞同某事或某人的行为、决定等。在日常生活中，它也可以用来表示对某物的满意或者认为它是可接受的。</p><h3 id="列举例句-109"><a href="#列举例句-109" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The boss will approve the new project if it meets the company’s standards.</p><ul><li>老板会批准这个新项目，如果它符合公司的标准。（工作场景）</li><li>中文：如果这个新项目达到公司的标准，老板将会同意。</li></ul></li><li><p>My parents won’t approve of me dropping out of school.</p><ul><li>我父母不会赞同我辍学。（家庭场景）</li><li>中文：我父母不会同意我退学。</li></ul></li><li><p>The quality of this product is approved by international standards.</p><ul><li>这产品的质量得到了国际标准的认可。（产品场景）</li><li>中文：这产品的质量被国际标准所认可。</li></ul></li></ol><h3 id="词根分析-109"><a href="#词根分析-109" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“ap-“ 是一个前缀，表示加强或动作的进行。</li><li>“-prove” 是词根，来自拉丁语 “probare”，意为“证明”或“检验”。</li></ul><h3 id="词缀分析-109"><a href="#词缀分析-109" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ap-“：在其他单词如 “appear”（出现）或 “apply”（申请）中也有使用。</li><li>“-prove”：在单词如 “improve”（改进）或 “disprove”（反驳）中也能找到。</li></ul><h3 id="发展历史和文化背景-109"><a href="#发展历史和文化背景-109" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“approve” 来自中古英语 “approve”，直接源自古法语 “aprover”，其根源可以追溯到拉丁语 “probare”。在西方文化中，”approve” 常用于正式的场合，比如法律、商业决策等。</p><h3 id="单词变形-109"><a href="#单词变形-109" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：”approval”（赞同，批准）</li><li>形容词：”approved”（经批准的）</li><li>动词时态：<ul><li>“approves”（现在时，第三人称单数）</li><li>“approved”（过去时）</li><li>“approving”（现在分词）</li><li>“approved”（过去分词）</li></ul></li><li>固定搭配：”approve of”（赞同）</li></ul><h3 id="记忆辅助-109"><a href="#记忆辅助-109" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>可以联想记忆，”ap-“ 可以想象成“加强”，而 “-prove” 可以联系到“证明”，即“加强证明”你的观点或行为，表示赞同。</p><h3 id="小故事-109"><a href="#小故事-109" class="headerlink" title="小故事"></a>小故事</h3><p>Today, the city council will vote to approve the new park’s design. The citizens are excited because they approve of the plan to turn the old factory site into a beautiful green space. The approval of the project means a better life for the community.</p><p>今天，市议会将要投票批准新公园的设计。市民们很兴奋，因为他们赞同把旧工厂的场地变成美丽绿地空间的计划。这个项目的批准意味着社区生活会变得更好。</p><p>中文翻译：今天，市议会将要投票决定是否批准新公园的设计。市民们都很激动，因为他们支持把旧的工厂地点改造成美丽的绿地。这个项目的通过意味着社区的生活质量将得到提升。</p><hr><h2 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h2><h3 id="分析词义-110"><a href="#分析词义-110" class="headerlink" title="分析词义"></a>分析词义</h3><p>“apt” 是一个英文形容词，意思是“恰当的”，“合适的”，或者形容人“有能力的”，“聪明的”。它还可以表示某事物或某行为容易发生或很可能发生。</p><h3 id="列举例句-110"><a href="#列举例句-110" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The apartment is aptly named “Sunset View” because it overlooks the beautiful sunset.</p><ul><li>这套公寓很恰当地被命名为“日落景观”，因为它能看到美丽的日落。（aptly：适当地）</li></ul></li><li><p>She is apt to forget her keys; she should keep a spare set at work.</p><ul><li>她常常会忘记钥匙；她应该在办公室放一套备用的。（apt to：易于）</li></ul></li><li><p>He is an apt student, quick to learn and always eager to ask questions.</p><ul><li>他是个聪明的学生，学习速度快，总是渴望提问。（apt：聪明的）</li></ul></li></ol><h3 id="词根分析-110"><a href="#词根分析-110" class="headerlink" title="词根分析"></a>词根分析</h3><p>“apt” 这个词没有明显的词根，它来源于拉丁语 “aptus”，意思是 “fitting” 或 “suited”。</p><h3 id="词缀分析-110"><a href="#词缀分析-110" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“apt” 本身并没有常见的英文前缀或后缀，它是一个完整的单词。</li></ul><h3 id="发展历史和文化背景-110"><a href="#发展历史和文化背景-110" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“apt” 这个词在英语中已经存在了很久，它的使用可以追溯到中世纪英语。它反映了拉丁语对英语的影响，特别是在法律和学术用语中。</p><h3 id="单词变形-110"><a href="#单词变形-110" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：aptitude（能力，天资）</li><li>动词：不直接变形为动词，但可以用 “be apt to” 结构表达某行为倾向。</li><li>形容词比较级：more apt</li><li>形容词最高级：most apt</li></ul><h3 id="记忆辅助-110"><a href="#记忆辅助-110" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “apt” 这个词，你可以想象一个人很 “apt”（聪明）地在正确的时间出现在正确的地点（恰当的），这使他或她总是看起来很合适。</p><h3 id="小故事-110"><a href="#小故事-110" class="headerlink" title="小故事"></a>小故事</h3><p>One sunny morning, an apt crow found a piece of bread on the ground. It quickly flew to a quiet corner, away from cats and dogs, to enjoy its meal. The crow was not only smart but also knew the right place to eat in peace.</p><p>一个阳光明媚的早晨，一只聪明的乌鸦在地上找到了一块面包。它迅速飞到一个安静的地方，远离猫和狗，安静地享受它的美餐。这只乌鸦不仅聪明，还知道在哪里可以安静地吃饭。</p><p>中文翻译：<br>一个晴朗的早晨，一只聪明的乌鸦在地上找到了一片面包。它迅速飞到一个僻静的角落，远离猫和狗，独自享受它的食物。这只乌鸦不仅机智，还知道在何处可以不受打扰地进食。</p><hr><h2 id="arbitrary"><a href="#arbitrary" class="headerlink" title="arbitrary"></a>arbitrary</h2><h3 id="分析词义-111"><a href="#分析词义-111" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Arbitrary” 是一个形容词，意思是没有固定的规则或标准，由个人随意决定的，任意的，武断的。在用法上，它通常指某人或某事缺乏明确或合理的依据。</p><h3 id="列举例句-111"><a href="#列举例句-111" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The teacher gave arbitrary grades to the students without even looking at their papers.</p><ul><li>老师随意地给学生们打了分数，甚至没有看他们的试卷。（中文翻译）</li></ul></li><li><p>You can’t make arbitrary decisions when you’re dealing with important issues.</p><ul><li>当你处理重要问题时，你不能做出武断的决定。（中文翻译）</li></ul></li><li><p>The dictionary order is arbitrary; it doesn’t follow any logical sequence.</p><ul><li>词典的排序是任意的，它不遵循任何逻辑顺序。（中文翻译）</li></ul></li></ol><h3 id="词根分析-111"><a href="#词根分析-111" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Arbitrary” 来自于词根 “arbitr” 意为“判断”，加上后缀 “-ary” 通常表示形容词，与某事物相关。</p><h3 id="词缀分析-111"><a href="#词缀分析-111" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀：无</li><li>词根： arbitr-（判断）</li><li>后缀： -ary（形容词后缀）</li></ul><p>其他包含词根 “arbitr” 的单词：</p><ul><li>Arbitrate（仲裁）</li><li>Arbitration（仲裁程序）</li></ul><h3 id="发展历史和文化背景-111"><a href="#发展历史和文化背景-111" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Arbitrary” 这个单词来源于拉丁语 “arbitrarius”，指的是由仲裁者或法官做出的决定。在欧美文化中，它暗示了对权力滥用的批评，因为一个武断的决定往往缺乏公正和透明度。</p><h3 id="单词变形-111"><a href="#单词变形-111" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词： Arbitrariness（任意性）</li><li>无特定单复数变化</li><li>无特定时态变化</li></ul><h3 id="记忆辅助-111"><a href="#记忆辅助-111" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “arbitrary” 这个词，可以将其拆分为 “arbit”（想象成“仲裁”）和 “-rary”（类似于“library”，联想为“图书馆里的裁决”，暗示着书籍按任意顺序排列）。</p><h3 id="小故事-111"><a href="#小故事-111" class="headerlink" title="小故事"></a>小故事</h3><p>One day, the king made an arbitrary decision to move the market to a new location. People were confused and unhappy.</p><ul><li>一天，国王武断地决定将市场搬迁到一个新地点。人们感到困惑和不快。</li></ul><p>The king decided arbitrarily that the market should be moved to a new location. Everyone was surprised and unsure why.</p><ul><li>国王随意地决定市场应该搬迁到新地点。每个人都感到惊讶，不知道为什么。（中文翻译）</li></ul><hr><h2 id="arc"><a href="#arc" class="headerlink" title="arc"></a>arc</h2><h3 id="分析词义-112"><a href="#分析词义-112" class="headerlink" title="分析词义"></a>分析词义</h3><p>“arc” 这个词在英语中有多个意思。它通常指一个圆的一部分，即圆弧或弓形。在电学中，它还可以指电弧，即电流在空气中产生的亮光。</p><h3 id="列举例句-112"><a href="#列举例句-112" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The rainbow is formed by an arc of colors.<ul><li>彩虹是由一弧色彩组成的。</li></ul></li><li>The carpenter used a large arc to measure the curve of the wood.<ul><li>木匠用一个大弧来测量木头的曲线。</li></ul></li><li>An arc of electricity jumped between the electrodes.<ul><li>电极之间跳起了一道电弧。</li></ul></li></ol><h3 id="词根分析-112"><a href="#词根分析-112" class="headerlink" title="词根分析"></a>词根分析</h3><p>“arc” 直接来自拉丁语 “arcus”，意思是 “bow”（弓）。</p><h3 id="词缀分析-112"><a href="#词缀分析-112" class="headerlink" title="词缀分析"></a>词缀分析</h3><p>“arc” 本身就是一个词根，并没有明显的词缀。</p><h3 id="发展历史和文化背景-112"><a href="#发展历史和文化背景-112" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“arc” 这个词的历史可以追溯到古罗马时期，当时它指的是弓的形状。”arc” 在物理学和数学中也有着广泛的应用，如弧度制就是以圆的弧长与半径的比例来度量角度的。</p><h3 id="单词变形-112"><a href="#单词变形-112" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词: arc</li><li>复数: arcs</li><li>动词: 无直接相关动词</li><li>形容词: arc-shaped（弓形的）</li></ul><h3 id="记忆辅助-112"><a href="#记忆辅助-112" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>“arc” 可以联想记忆为 “一个像弓一样弯曲的形状”。</p><h3 id="小故事-112"><a href="#小故事-112" class="headerlink" title="小故事"></a>小故事</h3><p>One night, under a starry sky, a beautiful arc appeared in the sky. It was a rainbow, formed by the light of the moon reflecting off the raindrops.</p><ul><li>一个晚上，在繁星点点的天空中，出现了一道美丽的弧线。那是一道彩虹，由月光反射在雨滴上形成。</li></ul><p>（故事中的关键词 “arc” 指的就是彩虹的弓形。）</p><hr><h2 id="arena"><a href="#arena" class="headerlink" title="arena"></a>arena</h2><h3 id="分析词义-113"><a href="#分析词义-113" class="headerlink" title="分析词义"></a>分析词义</h3><p>“arena” 这个词在英语中通常指一个用于体育比赛、演出或其他公共活动的大场地，尤其指的是一个圆形或椭圆形的场所，中间是活动区域，周围是观众席。</p><h3 id="列举例句-113"><a href="#列举例句-113" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The boxer entered the arena to the sound of cheering.<br>拳击手在欢呼声中走进了竞技场。</p></li><li><p>The concert was held in an open-air arena, allowing for a large audience.<br>音乐会在一个露天竞技场举行，能容纳很多观众。</p></li><li><p>The gladiators fought in the Roman arena for the entertainment of the crowds.<br>角斗士在罗马竞技场中为众人娱乐而战斗。</p></li></ol><h3 id="词根分析-113"><a href="#词根分析-113" class="headerlink" title="词根分析"></a>词根分析</h3><p>词根 “arena” 来自拉丁语，原意是指“沙”，因为在古罗马的竞技场中，地面通常覆盖着沙子以吸收血液。</p><h3 id="词缀分析-113"><a href="#词缀分析-113" class="headerlink" title="词缀分析"></a>词缀分析</h3><p>“arena” 本身就是一个词根，没有明显的词缀。</p><h3 id="发展历史和文化背景-113"><a href="#发展历史和文化背景-113" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“arena” 这个词的历史可以追溯到古罗马时期，当时的竞技场是进行各种公共娱乐活动的地方，如角斗比赛。在现代，”arena” 已经扩展到包括各种体育和娱乐活动的场所。</p><h3 id="单词变形-113"><a href="#单词变形-113" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：arenas（复数）</li><li>在此单词没有常见的动词、形容词或副词变形。</li></ul><h3 id="记忆辅助-113"><a href="#记忆辅助-113" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过想象自己在古罗马的沙地竞技场中观看一场激动人心的比赛来记忆 “arena” 这个词。</p><h3 id="小故事-113"><a href="#小故事-113" class="headerlink" title="小故事"></a>小故事</h3><p>In the center of the ancient Roman city, there was a vast arena. Today, a gladiator named Max was to fight there. As he entered the sandy ground, the crowd roared. Max knew it was time to showcase his bravery.</p><p>在古罗马城市的中心，有一个广阔的竞技场。今天，一个名叫Max的角斗士将要在这里战斗。当他踏入沙地时，人群发出阵阵欢呼。Max知道是时候展现他的勇气了。</p><p>中文翻译：<br>在古罗马城市的中心，有一个巨大的竞技场。今天，一位名叫Max的角斗士将要在这里进行比试。当他走进铺满沙子的场地时，观众们大声喝彩。Max意识到自己需要展现无畏的精神了。</p><hr><h2 id="argue"><a href="#argue" class="headerlink" title="argue"></a>argue</h2><h3 id="分析词义-114"><a href="#分析词义-114" class="headerlink" title="分析词义"></a>分析词义</h3><p>“argue” 是一个动词，意思是争论或讨论某件事情，通常涉及不同的观点或意见。它可以是两个人之间的口头争执，也可以是一种更深入的讨论，旨在证明某个观点或理论。</p><h3 id="列举例句-114"><a href="#列举例句-114" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>They argue about politics every evening.<br>他们每晚都会争论政治问题。<br>（中文翻译：他们每晚都会就政治问题进行讨论。）</p></li><li><p>I don’t want to argue with you; let’s just agree to disagree.<br>我不想和你争论，我们还是各自保留意见吧。<br>（中文翻译：我不想和你争辩，我们还是同意各自有不同的看法吧。）</p></li><li><p>Scientists are still arguing over the causes of global warming.<br>科学家们仍在争论全球变暖的原因。<br>（中文翻译：科学家们仍在探讨全球变暖的成因。）</p></li></ol><h3 id="词根分析-114"><a href="#词根分析-114" class="headerlink" title="词根分析"></a>词根分析</h3><p>“argue” 的词根是 “arg”，这个词根来源于拉丁语 “arguere”，意味着争论或证明。</p><h3 id="词缀分析-114"><a href="#词缀分析-114" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“arg-“ 是词根，表示争论。</li><li>“-ue” 是中缀，用于连接词根和后缀，辅助发音。</li><li>“-g” 和 “-ue” 结合起来，使这个词根变成动词形式。</li></ul><p>没有明显的词缀可以分析，但可以注意到 “argue” 这个词与 “argument”（争论，辩论）有关。</p><h3 id="发展历史和文化背景-114"><a href="#发展历史和文化背景-114" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“argue” 这个词源于拉丁语的 “arguere”，在古代，这个词不仅指争论，还包含向他人证明某事的意思。在欧美文化中，争论是一种常见的交流方式，尤其在法律、哲学和学术讨论中，通过争论来寻求真理和解决问题。</p><h3 id="单词变形-114"><a href="#单词变形-114" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：argument（争论）</li><li>动词时态：argued（过去式）、arguing（现在进行时）、has argued（现在完成时）</li><li>固定搭配：argue with sb.（和某人争论）、argue for&#x2F;against sth.（为某事争论&#x2F;反对某事）</li></ul><h3 id="记忆辅助-114"><a href="#记忆辅助-114" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了帮助记住 “argue” 这个词，可以想象两个人站在一个巨大的字母 “A”（像是一座山峰）上，他们正在为谁站在更高的地方而争论。</p><h3 id="小故事-114"><a href="#小故事-114" class="headerlink" title="小故事"></a>小故事</h3><p>Two friends walked into a debate. They argued over a painting’s true meaning. “It’s a forest!” said one. “No, it’s waves on the sea,” argued the other. They continued to argue, forgetting the beauty of art lies in different views.<br>   两个朋友走进了一场辩论。他们争论一幅画的真正含义。“这是一片森林！”一个说。“不，这是海浪，”另一个争辩道。他们继续争论，忘记了艺术的美丽在于不同的观点。</p><p>（中文翻译：两个朋友走进了一场辩论中。他们为一幅画的真正含义争论不休。“这是一片森林！”一个说。“不，这是海浪，”另一个争辩道。他们继续争论，却忘记了艺术的魅力在于各有见解。）</p><hr><h2 id="armor"><a href="#armor" class="headerlink" title="armor"></a>armor</h2><h3 id="分析词义-115"><a href="#分析词义-115" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Armor” 这个单词指的是用来保护身体免受伤害的装备，尤其指的是古代士兵在战斗中穿戴的金属甲胄。在现代，它也可以指任何形式的防护服或防护设备。</p><h3 id="列举例句-115"><a href="#列举例句-115" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>In the medieval ages, knights wore heavy armor to protect themselves in battle.<br>在中世纪，骑士们会穿戴着沉重的铠甲在战斗中保护自己。</p></li><li><p>The modern soldier’s armor is lightweight but still offers excellent protection.<br>现代士兵的装甲轻便但仍然提供极好的保护。</p></li><li><p>The turtle’s shell is like natural armor, keeping it safe from predators.<br>海龟的壳就像是天然装甲，使它能够抵御捕食者。</p></li></ol><h3 id="词根分析-115"><a href="#词根分析-115" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Armor” 的词根来自于古法语 “armure”，源自于拉丁语 “armatura”，意为“武器，防具”。</p><h3 id="词缀分析-115"><a href="#词缀分析-115" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“arm-“ 是词根，表示与“手臂”或“武器”有关。</li><li>“-or” 是后缀，常用于形成名词。</li></ul><h3 id="发展历史和文化背景-115"><a href="#发展历史和文化背景-115" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Armor” 一词的历史可以追溯到古代战争时期，当时战士们为了在战斗中获得优势，会穿戴由金属制成的防护服。在中世纪，铠甲达到了高度的发展，成为骑士文化的重要组成部分。随着时间的推移，随着武器和战争技术的发展，装甲也经历了从重到轻，从金属到合成材料的演变。</p><h3 id="单词变形-115"><a href="#单词变形-115" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：armor（单数），armors（复数，不常用），armour（英式英语）</li><li>动词：armor（给…穿装甲），armored（形容词，有装甲的）</li></ul><h3 id="记忆辅助-115"><a href="#记忆辅助-115" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>可以将 “armor” 与中文“装甲”联系起来记忆，因为它们在发音和意义上都有相似之处。</p><h3 id="小故事-115"><a href="#小故事-115" class="headerlink" title="小故事"></a>小故事</h3><p>In a dense forest, a brave knight clad in shining armor was on a quest to save a princess. He had to cross rivers and fight mythical creatures. His trusty armor protected him from harm.<br>在茂密的森林里，一位勇敢的骑士身披闪闪发光的铠甲，在寻找拯救公主的任务中。他必须跨越河流，与神话中的生物战斗。他信赖的铠甲保护他免受伤害。</p><p>中文翻译：<br>在茂密的森林中，一位勇敢的骑士身着闪耀的铠甲，他正在进行一项营救公主的任务。他需要渡过河流，与传说中的怪兽战斗。他那可靠的铠甲保护他不受伤害。</p><hr><h2 id="arouse"><a href="#arouse" class="headerlink" title="arouse"></a>arouse</h2><h3 id="分析词义-116"><a href="#分析词义-116" class="headerlink" title="分析词义"></a>分析词义</h3><p>“arouse” 是一个动词，意思是引起或激起某人的情感、兴趣或注意。它通常用于指唤醒某种感觉或反应，比如兴趣、好奇、惊讶或愤怒。</p><h3 id="列举例句-116"><a href="#列举例句-116" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The teacher’s interesting stories always arouse the students’ curiosity.<ul><li>老师有趣的故事总是激起学生们的兴趣。</li></ul></li><li>The news of the unexpected victory aroused great excitement in the city.<ul><li>意外胜利的消息在全市引起了极大的兴奋。</li></ul></li><li>His strange behavior aroused my suspicion.<ul><li>他奇怪的行为引起了我的怀疑。</li></ul></li></ol><h3 id="词根分析-116"><a href="#词根分析-116" class="headerlink" title="词根分析"></a>词根分析</h3><p>“arouse” 的词根是 “rouse”，意为唤醒或激起。”ar-“ 是一个前缀，通常表示加强或开始。</p><h3 id="词缀分析-116"><a href="#词缀分析-116" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “a-“：表示加强或引起某种状态。</li><li>词根 “-rouse”：唤醒或激起。</li><li>后缀无。</li></ul><h3 id="发展历史和文化背景-116"><a href="#发展历史和文化背景-116" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Rouse” 来自古英语 “ræsan”，与德语的 “reissen”（拉）有关，最初的意思是“唤醒某人”。随着时间的推移，它的意义扩展到包括情感和注意力的唤醒。”Arouse” 作为加强形式，在17世纪开始使用，尤其在表达引起情感或反应时。</p><h3 id="单词变形-116"><a href="#单词变形-116" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式：arousal（n.）引起，激起</li><li>动词时态：arouses（现在时第三人称单数），aroused（过去式和过去分词）</li></ul><h3 id="记忆辅助-116"><a href="#记忆辅助-116" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “arouse”，你可以想象一个场景：一个警报（alarm）响起（arouse），唤醒（rouse）了所有人的注意。</p><h3 id="小故事-116"><a href="#小故事-116" class="headerlink" title="小故事"></a>小故事</h3><p>One morning, the sound of a siren aroused the neighbors from their deep sleep. They all rushed outside to see what was happening.</p><ul><li>一天早上，警报声把邻居们从沉睡中唤醒。他们都冲出去看发生了什么事。</li></ul><p>[中文翻译]<br>一天早晨，警笛声将邻居们从沉睡中惊醒。他们全都冲出门外，想要了解发生了什么情况。</p><hr><h2 id="arrange"><a href="#arrange" class="headerlink" title="arrange"></a>arrange</h2><h3 id="分析词义-117"><a href="#分析词义-117" class="headerlink" title="分析词义"></a>分析词义</h3><p>“arrange” 这个词意味着“安排”或“组织”。它通常用于描述使事物或活动有序、有计划地进行。在日常生活中，我们可能会用这个词来描述安排会议、布置房间或组织数据等。</p><h3 id="列举例句-117"><a href="#列举例句-117" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>I need to arrange my schedule for next week.（我需要安排下周的计划。）<ul><li>用于描述时间安排。</li></ul></li><li>Can you arrange the books on the shelf?（你能把书架上的书整理一下吗？）<ul><li>用于描述整理物品。</li></ul></li><li>They arranged a surprise party for her birthday.（他们为她安排了一个生日惊喜派对。）<ul><li>用于描述活动的组织。</li></ul></li></ol><h3 id="词根分析-117"><a href="#词根分析-117" class="headerlink" title="词根分析"></a>词根分析</h3><p>“arrange” 的词根是 “range”，意味着“一系列”或“排列”。前缀 “arr-“ 可能来源于拉丁语 “ar-“，意味着“提前”或“首先”。</p><h3 id="词缀分析-117"><a href="#词缀分析-117" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“arr-“：前缀，表示“预先”或“首先”。</li><li>“-ange”：词根 “range” 的变体。</li></ul><h3 id="发展历史和文化背景-117"><a href="#发展历史和文化背景-117" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“arrange” 来自于中古英语 “arrangen”，最初的意思是“排列”或“整理”。它的词根 “range” 可以追溯到古法语 “range”，意为“行，排”。在欧美文化中，”arrange” 常用于强调将事物或活动安排得井井有条的重要性。</p><h3 id="单词变形-117"><a href="#单词变形-117" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：arrangement</li><li>动词：arranges, arranging, arranged</li><li>形容词：arranged</li><li>副词：arrangely（这个词不常用，通常我们会使用其他方式表达）</li></ul><h3 id="记忆辅助-117"><a href="#记忆辅助-117" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “arrange” 可以通过联想 “arrange” 中的 “arr” 像是 “array”（排列），加上 “range”（一系列），想象成首先将一系列事物排列整齐。</p><h3 id="小故事-117"><a href="#小故事-117" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was excited to arrange a picnic for his friends. He carefully planned the menu, chose a beautiful park, and even prepared games. On the day of the picnic, everyone had a great time enjoying the food and fun arranged by Tom.</p><p>汤姆很兴奋地为朋友们安排了一次野餐。他精心规划了菜单，选择了一个美丽的公园，还准备了一些游戏。在野餐那天，大家都很享受汤姆安排的食物和乐趣。</p><p>中文翻译：汤姆为朋友们精心安排了一次野餐。他仔细计划了菜单，挑选了一个漂亮的公园，还准备了一些游戏。野餐那天，大家都非常喜欢汤姆准备的食物和娱乐。</p><hr><h2 id="arrangement"><a href="#arrangement" class="headerlink" title="arrangement"></a>arrangement</h2><h3 id="分析词义-118"><a href="#分析词义-118" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Arrangement” 这个单词指的是一种安排或者计划，通常是指事情、活动或者物品按照一定的顺序或方式被组织起来。在中文里，我们可以把它翻译成“安排”、“布置”或“协定”。</p><h3 id="列举例句-118"><a href="#列举例句-118" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>Can we make an arrangement to meet next week?</p><ul><li>我们可以安排下周见个面吗？</li><li>在这个句子中，“arrangement”指的是双方约定好的会面计划。</li></ul></li><li><p>She made a beautiful arrangement of flowers for the table.</p><ul><li>她为桌子做了一瓶美丽的插花。</li><li>这里“arrangement”指的是花被有美感地组织在一起。</li></ul></li><li><p>The musical arrangement of the song was done by a famous composer.</p><ul><li>这首歌的音乐编排是由一位著名作曲家完成的。</li><li>这里“arrangement”指的是音乐作品的编排方式。</li></ul></li></ol><h3 id="词根分析-118"><a href="#词根分析-118" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“Arrange”（安排）是动词形式，”arrangement” 是它的名词形式。<ul><li>“Arrange” 来自古法语的 “arranger”，最初的含义是“放置在正确的顺序中”。</li></ul></li></ul><h3 id="词缀分析-118"><a href="#词缀分析-118" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Arrange”（安排）<ul><li>前缀 “arr-“ 可能和“顺序”有关。</li><li>词根 “-ange” 来自古法语，意味着“做”或“安排”。</li><li>后缀 “-ment” 用于动词变成名词，表示行为或结果。</li></ul></li></ul><h3 id="发展历史和文化背景-118"><a href="#发展历史和文化背景-118" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Arrangement” 这个词在历史上经常用于音乐和艺术领域，指作品的结构或编排。在日常生活和商业活动中，它指的是事先的计划或安排。在欧美文化中，强调事先做好安排是表现出专业性和尊重的一种方式。</p><h3 id="单词变形-118"><a href="#单词变形-118" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：arrangement(s)</li><li>动词：arrange, arranged, arranging</li><li>形容词：arranged（有安排的）</li></ul><h3 id="记忆辅助-118"><a href="#记忆辅助-118" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “arrangement” 可以通过拆分这个单词：ar（看作是“顺序”的简写）+ range（范围）→ 在一定范围内做好顺序的计划。</p><h3 id="小故事-118"><a href="#小故事-118" class="headerlink" title="小故事"></a>小故事</h3><p>One morning, the teacher announced a surprise field trip. The students were excited, but they needed to make quick arrangements for the permission slips and packed lunches.</p><p>一天早上，老师宣布了一次惊喜的户外旅行。学生们很兴奋，但他们需要快速做好安排，比如准备家长同意书和便当。</p><p>中文翻译：<br>一天早上，老师突然宣布要进行一次惊喜的实地考察。学生们都很兴奋，但他们需要迅速做好相关安排，比如准备家长的同意书和午餐盒。</p><hr><h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><h3 id="分析词义-119"><a href="#分析词义-119" class="headerlink" title="分析词义"></a>分析词义</h3><p>“array”这个英文单词有几种含义。它通常指的是一系列的对象或事物，尤其是排列有序的。在计算机科学中，它还可以指一个用于存储一系列数据的结构。</p><h3 id="例句"><a href="#例句" class="headerlink" title="例句"></a>例句</h3><ol><li>The soldiers stood in an orderly array.（士兵们整齐地站成一排。）</li><li>She has an array of skills that make her perfect for the job.（她拥有一系列技能，使她非常适合这份工作。）</li><li>The computer program uses an array to store the data.（这个计算机程序使用数组来存储数据。）</li></ol><h3 id="词根分析-119"><a href="#词根分析-119" class="headerlink" title="词根分析"></a>词根分析</h3><p>“array”的词根是“ray”，这个词根来自于拉丁语“rays, radii”（射线，半径），意味着“排列”或“延伸”。</p><h3 id="词缀分析-119"><a href="#词缀分析-119" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“arr-”可能是“ray”的变化形式，作为前缀暗示了排列的意思。</li><li>“-ay”是一个常见的后缀，用于形成名词，有时候表示动作的结果或状态。</li></ul><h3 id="发展历史和文化背景-119"><a href="#发展历史和文化背景-119" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“array”这个词最早可以追溯到中古英语，来自古法语“array”，意为“排列，布置”，最初源自拉丁语“arricare”，意为“整理，排列”。在现代英语中，除了指物理上的排列，它还常用于形容事物的多样化展示。</p><h3 id="单词变形-119"><a href="#单词变形-119" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：arrays（复数形式）</li><li>动词：没有直接的动词形式，但可以使用“arrange”（安排）作为相关动词。</li></ul><h3 id="记忆辅助-119"><a href="#记忆辅助-119" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住“array”这个单词，可以联想到“射线”（rays）整齐地“排列”（array）在一起的样子。</p><h3 id="小故事-119"><a href="#小故事-119" class="headerlink" title="小故事"></a>小故事</h3><p>In the art gallery, a stunning array of paintings adorned the walls. Each piece was a unique gem, carefully arranged to catch the viewer’s eye. As visitors strolled through, they were delighted by the diverse array of styles and colors.</p><p>在艺术画廊里，一排令人惊叹的画作装饰着墙面。每件作品都是一颗独特的宝石，精心排列以吸引观众的目光。游客们漫步其中，对这多样化的风格和色彩感到愉悦。</p><p>（在画廊里，各种各样的画作整齐地挂在墙上，每一幅都精心布置以吸引人们的注意。参观者们欣赏着这些画作的不同风格和色彩，享受其中。）</p><hr><h2 id="arrest"><a href="#arrest" class="headerlink" title="arrest"></a>arrest</h2><h3 id="分析词义-120"><a href="#分析词义-120" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Arrest” 这个单词在英语中主要指“逮捕”，即警方或其他有关当局依法拘留涉嫌犯罪的人。它还可以指“阻止”或“吸引注意力”。</p><h3 id="列举例句-119"><a href="#列举例句-119" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The police arrested the suspect after a brief chase.<br>警方在短暂的追捕后逮捕了嫌疑人。<br>（在犯罪场景下的使用）</p></li><li><p>Her sudden illness arrested her career plans.<br>她的突然生病阻止了她的职业规划。<br>（在“阻止”意义上的使用）</p></li><li><p>The beauty of the painting arrested my attention.<br>这幅画的美丽吸引了我的注意。<br>（在“吸引注意力”意义上的使用）</p></li></ol><h3 id="词根分析-120"><a href="#词根分析-120" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Arrest” 来自拉丁语 “arrestare”，意为“阻止”或“抓住”。词根 “arrest” 本身就是这个单词。</p><h3 id="词缀分析-120"><a href="#词缀分析-120" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Ar-“ 可能源自拉丁语 “ad-“，意为“向”，在这里是加强语气。</li><li>“-rest” 来自 “restare”，意为“停止”。</li></ul><p>没有明显的词缀，但可以注意到与其它含有 “rest” 的词（如：rest, restaurant）有相似的词根。</p><h3 id="发展历史和文化背景-120"><a href="#发展历史和文化背景-120" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Arrest” 这个词在中世纪英语中首次出现，最初意味着“阻止”或“冻结”，后来逐渐演变为特指法律上的“逮捕”。在欧美文化中，这个词通常和法律、犯罪有关，是司法系统中的关键动词。</p><h3 id="单词变形-120"><a href="#单词变形-120" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：Arrest（逮捕行为）</li><li>动词：Arrest（逮捕），Arrested（被逮捕），Arresting（进行逮捕）</li><li>形容词：Arresting（吸引注意力的）</li></ul><h3 id="记忆辅助-120"><a href="#记忆辅助-120" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了帮助记忆 “arrest”，可以联想记忆：“警察说‘stop’（停下），就是要进行 ‘arrest’（逮捕）”。</p><h3 id="小故事-120"><a href="#小故事-120" class="headerlink" title="小故事"></a>小故事</h3><p>One evening, a sudden scream arrested the quiet of the park.<br>一天晚上，公园的宁静被一声尖叫突然打破。</p><p>公园里的人们都惊慌失措，警察迅速赶到现场，发现一个男子被逮捕了，他正被怀疑是这起突发事件的罪魁祸首。</p><p>Yī tiān wǎnshang, gōngyuán de qīngyíng bèi yī shēng jiāojiào tūrán dǎpò. Gōngyuán lǐ de rénmen dōu jīnghuāng shīcuò, jǐngchá kuài sù dàodǎng xiànchǎng, fāxiàn yī gè nánzǐ bèi dàibǔ le, tā zhèng zài bèi huòyùn chéng qǐzhì jiā de zuìsuǒ.</p><p>（故事中包含了单词 “arrest”，描述了一个在公园中发生逮捕的场景。）</p><hr><h2 id="arrogant"><a href="#arrogant" class="headerlink" title="arrogant"></a>arrogant</h2><h3 id="分析词义-121"><a href="#分析词义-121" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Arrogant”是一个形容词，用来形容一个人过分自信，甚至到了傲慢无礼的程度，目中无人。</p><h3 id="列举例句-120"><a href="#列举例句-120" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>He is often considered arrogant because he never listens to others’ opinions.</p><ul><li>他常常被认为很傲慢，因为他从不听别人的意见。（中文翻译）</li></ul></li><li><p>The arrogant actor refused to pose for a picture with his fans.</p><ul><li>那位傲慢的演员拒绝与粉丝合影。（中文翻译）</li></ul></li><li><p>Don’t be so arrogant; you can’t know everything.</p><ul><li>别这么傲慢，你不可能什么都知道。（中文翻译）</li></ul></li></ol><h3 id="词根分析-121"><a href="#词根分析-121" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Arrogant”的词根来自于“arrogate”，意为“自认为有权”，词根是“rog-”，表示“要求”或“请求”。</p><h3 id="词缀分析-121"><a href="#词缀分析-121" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ar-”是前缀，来自拉丁语“ad-”，表示“向”或“加强”。</li><li>“-rog-”是词根，表示“要求”。</li><li>“-ant”是后缀，用来形成形容词，表示“具有……的”。</li></ul><p>其他带有“-rog-”词根的单词：<br>-rogate（授权）<br>-demand（要求）</p><p>其他带有“-ant”后缀的单词：<br>-ignorant（无知的）<br>-courageous（勇敢的）</p><h3 id="发展历史和文化背景-121"><a href="#发展历史和文化背景-121" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Arrogant”这个单词起源于拉丁语“arrogare”，意味着“自己要求”或“自己赋予”。在西方文化中，过分自信被视为不礼貌，因为这种行为忽视了别人的感受和权利。</p><h3 id="单词变形-121"><a href="#单词变形-121" class="headerlink" title="单词变形"></a>单词变形</h3><p>“Arrogant”没有直接相关的名词形式，其形容词变形如下：</p><ul><li>comparative: more arrogant</li><li>superlative: most arrogant</li></ul><p>没有直接的动词形式，但可以使用相关的动词“arrogate”。</p><h3 id="记忆辅助-121"><a href="#记忆辅助-121" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住“arrogant”，你可以想象一个带着皇冠的人（代表自负），手中拿着一个写着“我是对的”（代表要求）的牌子。</p><h3 id="小故事-121"><a href="#小故事-121" class="headerlink" title="小故事"></a>小故事</h3><p>Tom’s boss was notoriously arrogant. At the office party, he bragged about his achievements, ignoring others’ contributions. He stood alone, his arrogance like a wall between him and his colleagues.</p><p>汤姆的老板出了名的傲慢。在办公室聚会上，他吹嘘自己的成就，忽视了别人的贡献。他独自站着，他的傲慢像一堵墙，将他和其他同事隔开。</p><p>（中文翻译）</p><hr><h2 id="artery"><a href="#artery" class="headerlink" title="artery"></a>artery</h2><h3 id="分析词义-122"><a href="#分析词义-122" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Artery” 在医学上指的是输送血液离开心脏的血管，即动脉。动脉负责将富含氧和营养的血液输送到全身各个部位。在比喻意义上，”artery” 也可以指事物中输送或传递主要部分的重要通道或线路。</p><h3 id="列举例句-121"><a href="#列举例句-121" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The doctor listened to the patient’s arteries to check for any abnormalities.<br>医生听了患者的动脉，以检查是否有任何异常。</p></li><li><p>The highway is the economic artery of the region, connecting all the major cities.<br>这条高速公路是该地区经济的大动脉，连接了所有的主要城市。</p></li><li><p>The internet has become the information artery of the modern world.<br>互联网已经成为现代世界的信息大动脉。</p></li></ol><h3 id="词根分析-122"><a href="#词根分析-122" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Artery” 的词根是 “arter”，源自拉丁语 “arteria”，意为“动脉”。</p><h3 id="词缀分析-122"><a href="#词缀分析-122" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“arter”：词根，表示动脉。</li><li>“-y”：后缀，常用来形成名词，表示状态、性质或领域。</li></ul><h3 id="发展历史和文化背景-122"><a href="#发展历史和文化背景-122" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Artery” 一词源于拉丁语的 “arteria”，其最初含义就是指人体的动脉。在英语中，这个单词除了用于医学领域外，也被广泛用于比喻，描述那些像动脉一样起主要输送作用的事物。</p><h3 id="单词变形-122"><a href="#单词变形-122" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：arteries（复数）</li><li>没有特别的动词、形容词或副词变形。</li></ul><h3 id="记忆辅助-122"><a href="#记忆辅助-122" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记忆 “artery” 这个单词时，可以联想它和“艺术”（art）的相似性，动脉就像人体的一门艺术，是生命力的象征。</p><h3 id="小故事-122"><a href="#小故事-122" class="headerlink" title="小故事"></a>小故事</h3><p>One morning, a doctor examined Mr. Smith’s arteries with a stethoscope. He was shocked to hear a strong, irregular sound. It was like a branch in a storm, fragile but fighting. The doctor prescribed a healthier lifestyle to unclog the blocked artery, the vital path to his heart.<br>一天早上，医生用听诊器检查了史密斯先生的动脉。他震惊地听到了强烈的、不规律的声音。那就像风暴中的一根树枝，虽然脆弱但仍在抗争。医生开出了更健康的生活方式来清理堵塞的动脉，这是通往他心脏的重要路径。</p><p>中文翻译：<br>一天早晨，医生用听诊器检查了史密斯先生的动脉。听到强烈的、不规律的声音让他感到震惊，那声音就像暴风雨中的一根树枝，虽然脆弱但还在努力抗争。医生建议他采取更健康的生活方式来清除堵塞的动脉，那是对他的心脏至关重要的一条路径。</p><hr><h2 id="articulate"><a href="#articulate" class="headerlink" title="articulate"></a>articulate</h2><h3 id="分析词义-123"><a href="#分析词义-123" class="headerlink" title="分析词义"></a>分析词义</h3><p>“articulate” 这个单词在英语中主要作为形容词和动词使用。作为形容词，它的意思是“清晰的，明确表达的”；作为动词，它的意思是“清晰地发音”，“明确地表达思想或感情”。</p><h3 id="列举例句-122"><a href="#列举例句-122" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>As a public speaker, he is very articulate.<br>作为一名公共演讲者，他的表达非常清晰。（形容词）</p></li><li><p>She couldn’t articulate her feelings at the time.<br>当时她无法明确表达自己的感受。（动词）</p></li><li><p>The professor articulate complex ideas in simple terms.<br>教授用简单的话清晰地表达了复杂的观点。（动词）</p></li></ol><h3 id="词根分析-123"><a href="#词根分析-123" class="headerlink" title="词根分析"></a>词根分析</h3><p>词根是 “articul-“，来源于拉丁语 “articulus”，意味着“小关节，部件”。</p><h3 id="词缀分析-123"><a href="#词缀分析-123" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“articul-“：词根，如上所述。</li><li>“-ate”：后缀，常用于动词，表示“使成为，使具有”，或者用于形容词，表示“具有…的”。</li></ul><p>其他带有 “-ate” 后缀的单词如：validate（使生效），activate（激活）。</p><h3 id="发展历史和文化背景-123"><a href="#发展历史和文化背景-123" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“articulate” 这个词源于拉丁语，在英语中从17世纪开始使用。在欧美文化中，能够清晰地表达自己的想法和感受被认为是一项重要的沟通技能。</p><h3 id="单词变形-123"><a href="#单词变形-123" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>形容词：articulate</li><li>动词：articulate, articulating, articulated</li><li>名词：articulation（表达清晰度）</li></ul><h3 id="记忆辅助-123"><a href="#记忆辅助-123" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “articulate”，可以将其与 “art”（艺术）联系起来。想象一下，表达就像一门艺术，而清晰的表达（articulate）就像一幅画得非常清晰的画作。</p><h3 id="小故事-123"><a href="#小故事-123" class="headerlink" title="小故事"></a>小故事</h3><p>In the debate competition, Tom was the most articulate speaker. His words were like paintings, each sentence clearly expressing his viewpoint. The audience was captivated by his articulate speech.</p><p>在辩论比赛中，汤姆是最清晰表达的演讲者。他的话语就像画作，每句话都清楚地表达了他的观点。观众被他的清晰表达所吸引。</p><p>在辩论比赛中，汤姆的发言最为条理清晰。他的话语就像一幅幅画，每句话都清晰地传达了他的观点。听众完全被他清晰的表达所吸引。</p><hr><h2 id="artificial"><a href="#artificial" class="headerlink" title="artificial"></a>artificial</h2><h3 id="分析词义-124"><a href="#分析词义-124" class="headerlink" title="分析词义"></a>分析词义</h3><p>“artificial” 是一个形容词，意思是“人造的，人工的”，通常用来描述那些由人类制造而不是自然形成的物品或事物。它有时还带有“不自然的”或“虚假的”含义。</p><h3 id="列举例句-123"><a href="#列举例句-123" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The plant in the office is artificial; it doesn’t need water or light.<br>办公室里的植物是人造的，它不需要水和阳光。</p></li><li><p>Many sports surfaces now use artificial turf instead of real grass.<br>现在许多运动场地都使用人造草坪，而不是真正的草。</p></li><li><p>She thought the flavor of the artificial sweetener was unpleasant.<br>她觉得人造甜味剂的味道很不好。</p></li></ol><h3 id="词根分析-124"><a href="#词根分析-124" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“art-“ 是词根，来自拉丁语 “artificium”，意思是“技能”或“人工制造”。</li><li>“-ificial” 是后缀，用来形成形容词，表示“与……有关”或“具有……性质”。</li></ul><h3 id="词缀分析-124"><a href="#词缀分析-124" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“art-“（技能）</li><li>“-ificial”（与人工有关的）</li></ul><p>其他带有 “-ificial” 后缀的单词：</p><ul><li>Commercial: 与商业有关的。</li><li>Magical: 有魔力的，看似非自然的。</li></ul><h3 id="发展历史和文化背景-124"><a href="#发展历史和文化背景-124" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Artificial” 这个词源自于拉丁语 “artificium”，在古罗马时期，它指的是任何需要技巧和技能来创造的东西。随着时间的发展，这个词的含义扩展到了包括所有人为制造的产品，尤其是那些模仿自然事物的产品。在现代社会，”artificial” 常用于讨论科技、替代品和仿生学等领域。</p><h3 id="单词变形-124"><a href="#单词变形-124" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：artificiality（人工性）</li><li>形容词比较级：more artificial</li><li>形容词最高级：most artificial</li><li>动词：artificialize（使人工化）</li></ul><h3 id="记忆辅助-124"><a href="#记忆辅助-124" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “artificial” 这个词，可以联想它是由 “art”（艺术）和 “-ificial”（人工的）组合而成，就像是艺术家用技巧创造出的东西，但在这里是泛指人工制造。</p><h3 id="小故事-124"><a href="#小故事-124" class="headerlink" title="小故事"></a>小故事</h3><p>Tom found an artificial leaf in the science museum. It looked so real that he had to touch it to make sure. He was amazed by how humans could imitate nature.</p><p>汤姆在科学博物馆发现了一片人造叶子。它看起来如此真实，以至于他不得不触摸它来确定。他惊讶于人类如何能够模仿大自然。</p><p>中文翻译：</p><p>汤姆在科学博物馆里找到了一片人造叶子。它看起来非常逼真，以至于他必须亲手摸一摸才能确认。他对人类能够如此巧妙地模仿自然感到惊奇。</p><hr><h2 id="artillery"><a href="#artillery" class="headerlink" title="artillery"></a>artillery</h2><h3 id="分析词义-125"><a href="#分析词义-125" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Artillery” 这个词通常指的是大炮、火炮，是战争中用来发射炮弹的重型武器。它也可以指操作这些武器的部队或士兵。</p><h3 id="列举例句-124"><a href="#列举例句-124" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The artillery bombardment preceded the infantry’s advance.<ul><li>炮兵的轰炸为步兵的进攻打头阵。</li></ul></li><li>Artillery shells hit the enemy positions with precision.<ul><li>炮弹精确地击中了敌方阵地。</li></ul></li><li>The army has a strong artillery division.<ul><li>军队有一个强大的炮兵师。</li></ul></li></ol><h3 id="词根分析-125"><a href="#词根分析-125" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Artillery” 的词根来自古老的法语 “artillerie”，最初源自中世纪拉丁语 “artillaria”，意为”制造或使用机械的艺术”。</p><h3 id="词缀分析-125"><a href="#词缀分析-125" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Arti-“：这部分并没有明确的词缀意义，可能是对早期火炮制造技术的反映。</li><li>“-lly”：这个后缀在古法语中用于形成名词，表明与某事物相关的动作或状态。</li></ul><h3 id="发展历史和文化背景-125"><a href="#发展历史和文化背景-125" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Artillery” 这个词反映了火药武器在战争中的重要作用。它起源于14世纪，当时火药武器开始在欧洲广泛使用。随着时间的推移，这个词的含义从最初的包括所有火器，逐渐专指大炮和相关的武器系统。</p><h3 id="单词变形-125"><a href="#单词变形-125" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：Artillery（炮兵），Artillerist（炮兵士兵）</li><li>动词：Artillerate（用炮兵轰击）</li><li>形容词：Artilleryman（炮兵的）</li></ul><h3 id="记忆辅助-125"><a href="#记忆辅助-125" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过联想记忆来记住 “artillery”：想象一下“艺术(Art)”和“打雷(Thunder)”结合在一起，就像大炮发射时震撼的声响和精确的艺术一样。</p><h3 id="小故事-125"><a href="#小故事-125" class="headerlink" title="小故事"></a>小故事</h3><p>In the dense fog, the sound of artillery echoed through the valley. Tom, a young artillerist, aimed carefully and fired. The shell landed precisely on the target, a crucial hit for his team.</p><p>在浓雾中，炮声在山谷中回响。汤姆，一名年轻的炮兵，小心翼翼地瞄准并开火。炮弹精准地落在目标上，对他所在的队伍来说是一次关键的成功。</p><p>山谷中浓雾弥漫，炮兵汤姆专注地调整大炮，每声轰鸣都是他对胜利的追求。一发炮弹准确地命中目标，为他的团队赢得了重要的胜利。</p><hr><h2 id="ascend"><a href="#ascend" class="headerlink" title="ascend"></a>ascend</h2><h3 id="分析词义-126"><a href="#分析词义-126" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Ascend” 是一个动词，意思是往上升，通常指物体或人向上移动，也可以比喻地位、等级等的提高。</p><h3 id="列举例句-125"><a href="#列举例句-125" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The hot-air balloon slowly ascended into the sky.（热气球缓缓升入空中。）</li><li>She ascended the corporate ladder very quickly.（她很快地在公司里得到了晋升。）</li><li>We ascended the mountain to reach the summit.（我们攀登这座山以达到顶峰。）</li></ol><h3 id="词根分析-126"><a href="#词根分析-126" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Ascend” 来自拉丁语 “ascendere”，意为 “上升”。</p><h3 id="词缀分析-126"><a href="#词缀分析-126" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“a-“ 或 “asc-“：表示上升。</li><li>“-end-“：是动词后缀，表示动作的进行。</li><li>“-scend-“：是 “ascend” 的词根变化，常见于与上升相关的词汇。</li></ul><p>其他包含 “-scend-“ 的单词：</p><ul><li>Descend（下降）</li><li>Transcend（超越）</li></ul><h3 id="发展历史和文化背景-126"><a href="#发展历史和文化背景-126" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Ascend” 这个单词在历史上经常用来描述物理上的上升动作，如攀登山脉。在文学和宗教文本中，它也用于比喻灵魂的升华或提升。</p><h3 id="单词变形-126"><a href="#单词变形-126" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：ascension</li><li>形容词：ascendant（上升的，有影响力的）</li><li>副词：ascendently（以上升的方式）</li></ul><h3 id="记忆辅助-126"><a href="#记忆辅助-126" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “ascend” 这个词，可以联想到 “A”（像金字塔的形状），代表向上的动作，帮助你记住它表示“上升”。</p><h3 id="小故事-126"><a href="#小故事-126" class="headerlink" title="小故事"></a>小故事</h3><p>One sunny morning, we decided to ascend the highest peak in the region. The path was steep and rocky, but with each step we took, our determination grew stronger. Finally, as we reached the summit, we were rewarded with a breathtaking view.（在一个晴朗的早晨，我们决定攀登这个地区最高的山峰。小径既陡峭又多岩石，但每前进一步，我们的决心就更加强大。最终，当我们到达顶峰时，我们得到了一个令人叹为观止的景色。）</p><p>故事翻译：在一个阳光明媚的早晨，我们决定去攀登这个地区最高的山峰。路途崎岖，但是每走一步，我们的意志就更坚定。当我们终于到达山顶时，我们看到了一幅令人屏息的美丽景色。</p><hr><h2 id="ascertain"><a href="#ascertain" class="headerlink" title="ascertain"></a>ascertain</h2><h3 id="分析词义-127"><a href="#分析词义-127" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Ascertain” 是一个动词，它的意思是弄清楚、查明或者确定某件事情的真实情况。当我们对某些信息不确定，需要通过调查或询问来得到确切答案时，我们就会用到这个词。</p><h3 id="列举例句-126"><a href="#列举例句-126" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The detective worked hard to ascertain the truth behind the murder.<ul><li>侦探努力工作以查明谋杀案背后的真相。</li></ul></li><li>Before making a decision, you should ascertain all the facts.<ul><li>在做决定之前，你应该查清所有的事实。</li></ul></li><li>We need to ascertain the cause of the machine’s malfunction.<ul><li>我们需要找出机器故障的原因。</li></ul></li></ol><h3 id="词根分析-127"><a href="#词根分析-127" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Ascertain” 来自于拉丁语 “ascertainare”，意为“使确信”。它的词根 “cert-“ 源自拉丁语 “certus”，意思是“确定的，可靠的”。</p><h3 id="词缀分析-127"><a href="#词缀分析-127" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ascert-“：这是词根部分，来自于 “cert-“，意味着确定。</li><li>“-ain”：这是一个动词后缀，常常用于构成动词。</li></ul><h3 id="发展历史和文化背景-127"><a href="#发展历史和文化背景-127" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Ascertain” 这个词在中古英语时期进入英语，它最初的含义与现在相似，都是关于确定或查明的行为。在法律和侦探工作中，这个词经常被用来强调需要找到无可置疑的证据。</p><h3 id="单词变形-127"><a href="#单词变形-127" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：ascertainment（查明，确定）</li><li>形容词：ascertained（已确定的）</li></ul><h3 id="记忆辅助-127"><a href="#记忆辅助-127" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “ascertain” 这个词，你可以想象一个侦探（detective），他通过仔细调查（investigate）来得到一个“确定”的结论（certainty），从而“ascertain”真相。</p><h3 id="小故事-127"><a href="#小故事-127" class="headerlink" title="小故事"></a>小故事</h3><p>In a small town, a precious gem was stolen. The sheriff vowed to ascertain the thief. After a thorough investigation, he found the gem hidden under a rock, and the culprit was caught red-handed.<br>在一个小镇上，一颗珍贵的宝石被偷了。警长誓言要查明窃贼。经过彻底的调查，他在一块石头下找到了宝石，窃贼被当场抓获。</p><p>中文翻译：<br>在一个小镇上，一颗珍贵的宝石失窃了。警长承诺要查清楚谁是窃贼。经过一番详尽的调查，他在一块岩石下找到了宝石，窃贼被捉了个正着。</p><hr><h2 id="ascribe"><a href="#ascribe" class="headerlink" title="ascribe"></a>ascribe</h2><h3 id="分析词义-128"><a href="#分析词义-128" class="headerlink" title="分析词义"></a>分析词义</h3><ul><li>ascribe 这个单词是一个动词，意思是“归因于”，当我们认为某个结果或者特质是由于某个原因或者某人时，我们会用这个单词。比如，如果一个人成功了，我们可能会 ascribe（归功于）他的努力。</li></ul><h3 id="列举例句-127"><a href="#列举例句-127" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>Many people ascribe their success to hard work.</p><ul><li>许多人把自己的成功归功于努力工作。（中文翻译）</li></ul></li><li><p>The accident was ascribed to driver error.</p><ul><li>事故被归咎于驾驶员的失误。（中文翻译）</li></ul></li><li><p>She ascribes her happiness to her family and friends.</p><ul><li>她把自己的幸福归功于家人和朋友。（中文翻译）</li></ul></li></ol><h3 id="词根分析-128"><a href="#词根分析-128" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>ascribe 的词根是 “scribe”，意为“写”。前缀 “a-“ 通常表示“朝向”或”在…之中”，在这里可以理解为“归于”。</li></ul><h3 id="词缀分析-128"><a href="#词缀分析-128" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀：a-（表示方向或归属）</li><li>词根：scribe（写）</li><li>后缀：-e（在动词中常见，不改变词义）</li></ul><h3 id="发展历史和文化背景-128"><a href="#发展历史和文化背景-128" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><ul><li>“ascribe” 这个词源自拉丁语 “ascriptus”，意为“写下来”，在英语中逐渐演变成“归因于”的意思。在欧美文化中，这个词经常用在讨论因果关系或个人成就的语境中。</li></ul><h3 id="单词变形-128"><a href="#单词变形-128" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：ascription（归因）</li><li>过去式&#x2F;过去分词：ascribed</li><li>现在分词：ascribing</li></ul><h3 id="记忆辅助-128"><a href="#记忆辅助-128" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><ul><li>可以通过联想记忆法记住这个单词。比如，想到 “ascribe” 就想象自己在把成功（或失败）”写”在某个原因或人的”账”上。</li></ul><h3 id="小故事-128"><a href="#小故事-128" class="headerlink" title="小故事"></a>小故事</h3><p>One day, a farmer ascribed the bumper harvest to the sunny weather. He believed that without the sun’s warmth, his crops wouldn’t have grown so well.</p><ul><li>一天，一个农夫把丰收归功于晴朗的天气。他认为如果没有阳光的温暖，他的庄稼不会长得这么好。（中文翻译）</li></ul><hr><h2 id="aspect"><a href="#aspect" class="headerlink" title="aspect"></a>aspect</h2><h3 id="分析词义-129"><a href="#分析词义-129" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Aspect” 是一个英文单词，它可以指事物的某个方面或面貌。在英语中，这个词可以用于描述事物的外观、角度、观点或者某事的某个特定部分。</p><h3 id="列举例句-128"><a href="#列举例句-128" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The aspect of the building changed completely after the renovation.<ul><li>建筑翻新后的面貌完全改变了。</li></ul></li><li>We need to consider all aspects of the problem before making a decision.<ul><li>在做决定之前，我们需要考虑问题的所有方面。</li></ul></li><li>The company’s financial aspect is doing quite well.<ul><li>公司的财务方面表现得相当好。</li></ul></li></ol><h3 id="词根分析-129"><a href="#词根分析-129" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Aspect” 这个词的词根是 “spect”，来源于拉丁语 “spectare”，意为“看”。</p><h3 id="词缀分析-129"><a href="#词缀分析-129" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“as-“ 是前缀，在这里可以理解为“朝向”或“关于”。</li><li>“-pect” 是词根，与“看”有关。</li><li>“-t” 和 “-ce” 是后缀，帮助构成名词。</li></ul><h3 id="发展历史和文化背景-129"><a href="#发展历史和文化背景-129" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Aspect” 这个词在英语中的使用可以追溯到15世纪，它来自中古英语 “aspet”，而中古英语则借用了拉丁语 “aspectus”。在欧美文化中，这个词常用于讨论事物的多个角度或面貌，尤其在哲学和文学分析中。</p><h3 id="单词变形-129"><a href="#单词变形-129" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：aspects</li><li>动词：aspect (作为动词使用较少，意为“面向”或“关于”)</li><li>形容词：aspectual</li></ul><h3 id="记忆辅助-129"><a href="#记忆辅助-129" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “aspect” 这个词，可以联想记忆：“as”（像）+ “pect”（看）→ “看起来像的一面” → “方面”。</p><h3 id="小故事-129"><a href="#小故事-129" class="headerlink" title="小故事"></a>小故事</h3><p>Tom, a photographer, studied every aspect of the old house before snapping his camera. He wanted to capture its beauty from all angles.</p><ul><li>汤姆，一位摄影师，在按下快门之前研究了这所老房子的每一个方面。他想从所有角度捕捉它的美。</li></ul><p>中文翻译：</p><ul><li>汤姆是一位摄影师，在给这所老房子拍照之前，他仔细观察了它的每一个角度。他想从各个方面捕捉它的美丽。</li></ul><hr><h2 id="aspiration"><a href="#aspiration" class="headerlink" title="aspiration"></a>aspiration</h2><h3 id="分析词义-130"><a href="#分析词义-130" class="headerlink" title="分析词义"></a>分析词义</h3><p>“aspiration” 是一个名词，指的是一个人渴望实现的目标、抱负或理想。它反映了一个人对于成功或成就的强烈愿望。</p><h3 id="列举例句-129"><a href="#列举例句-129" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>His aspiration is to become a renowned scientist.<br>他的抱负是成为一名著名的科学家。</li><li>Many young people have the aspiration to make a difference in the world.<br>许多年轻人都有改变世界的抱负。</li><li>She worked hard to turn her aspiration of opening a bookstore into reality.<br>她努力工作，希望将自己的开书店的理想变为现实。</li></ol><h3 id="词根分析-130"><a href="#词根分析-130" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“aspire” 是词根，意味着渴望、追求。</li><li>“ation” 是后缀，通常用来表示行为或状态。</li></ul><h3 id="词缀分析-130"><a href="#词缀分析-130" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“aspire”：前缀 “a-“（无特定意义，用于形成动词）和词根 “spire”（呼吸，引申为渴望）。</li><li>“ation”：后缀，表示名词化，通常加在动词后面，形成名词。</li></ul><h3 id="发展历史和文化背景-130"><a href="#发展历史和文化背景-130" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“aspiration” 来自拉丁语 “aspire”，原意为“呼吸”，后来引申为内心深处的渴望。在欧美文化中，追求个人目标和抱负是积极向上的价值体现，被视为自我实现和个人发展的重要组成部分。</p><h3 id="单词变形-130"><a href="#单词变形-130" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>动词形式：aspire（渴望）</li><li>名词形式：aspirer（有抱负的人）</li><li>形容词形式：aspirational（有抱负的，激励人心的）</li></ul><h3 id="记忆辅助-130"><a href="#记忆辅助-130" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “aspiration” 可以通过这个词与呼吸的关系来辅助记忆。想象一个人对自己的目标如此渴望，就像呼吸一样自然和必需。</p><h3 id="小故事-130"><a href="#小故事-130" class="headerlink" title="小故事"></a>小故事</h3><p>Tom had a lifelong aspiration to travel the world. One day, he won a lottery and decided to make his dream come true. He packed his bags and embarked on an exciting journey, fulfilling his aspiration step by step.</p><p>汤姆有一个终生的愿望，那就是环游世界。有一天，他中了彩票，决定实现他的梦想。他打包行李，踏上了令人兴奋的旅程，一步步实现他的抱负。</p><p>中文翻译：<br>汤姆一生都有一个愿望，那就是环游世界。有一天，他中了彩票，决定让梦想成真。他收拾好行李，开始了一段令人激动的旅行，逐步实现他的愿望。</p><hr><h2 id="assassination"><a href="#assassination" class="headerlink" title="assassination"></a>assassination</h2><h3 id="分析词义-131"><a href="#分析词义-131" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Assassination” 是一个名词，它指的是秘密或有预谋地杀害某人的行为，尤其是政治人物或公众人物。在中文中，我们可以将它翻译为“暗杀”。</p><h3 id="列举例句-130"><a href="#列举例句-130" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The president’s assassination sent shockwaves throughout the country.<br>总统的暗杀事件让整个国家震惊。</li><li>The detective was tasked with preventing the assassination attempt on the visiting dignitary.<br>侦探负责阻止对来访要员的暗杀企图。</li><li>Historians believe that the assassination of Archduke Ferdinand triggered the outbreak of World War I.<br>历史学家认为，斐迪南大公的暗杀事件触发了第一次世界大战的爆发。</li></ol><h3 id="词根分析-131"><a href="#词根分析-131" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“Assassinate”（动词）是这个词的词根，意为“暗杀”。</li><li>“Assassin”（名词）指“刺客”。</li></ul><h3 id="词缀分析-131"><a href="#词缀分析-131" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Assassination” 由 “assassinate” 加上后缀 “-tion” 构成，在英语中 “-tion” 常用于形成名词，表示“行为”或“过程”。</li></ul><h3 id="发展历史和文化背景-131"><a href="#发展历史和文化背景-131" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Assassination” 这个词来源于阿拉伯语单词 “hashshashin”，指的是一个秘密团体成员，他们在中世纪通过暗杀来影响政治。这个词汇进入了法语，后来进入英语，并逐渐演变成现在的形式。</p><h3 id="单词变形-131"><a href="#单词变形-131" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>动词形式：assassinate（暗杀）</li><li>名词复数：assassinations（暗杀行为）</li><li>形容词：assassinated（被暗杀的）</li></ul><h3 id="记忆辅助-131"><a href="#记忆辅助-131" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过联想记忆来记住 “assassination” 这个词。例如，将其拆分为 “assassin”（刺客）和 “-ation”（行为），想象刺客执行的行为，即暗杀。</p><h3 id="小故事-131"><a href="#小故事-131" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was reading a historical novel about an assassination. It described how an innocent bystander became an accidental witness to the plotted killing of a royal. The紧张 scene described the swift move of the assassin, striking in the dead of night.</p><p>汤姆在读一本关于暗杀的历史小说。书中描述了一个无辜的路人意外目击了对一位皇室的预谋杀害。紧张的场景描述了刺客在深夜迅速行动的样子。</p><p>中文翻译：<br>汤姆在读一本关于暗杀的历史小说。书中讲述了一个无辜的旁观者如何意外地成为了皇室被预谋杀害的目击者。那紧张的一幕描绘了刺客在深夜进行的迅速一击。</p><hr><h2 id="assault"><a href="#assault" class="headerlink" title="assault"></a>assault</h2><h3 id="分析词义-132"><a href="#分析词义-132" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Assault” 是一个名词，也是一个动词。作为名词时，它指的是突然、猛烈的攻击，尤其是肉体的攻击。作为动词，它意味着对某人或某物进行攻击。</p><h3 id="列举例句-131"><a href="#列举例句-131" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p><strong>Noun</strong> - The police arrested the man for assaulting a passerby.<br><strong>中文</strong>：警方逮捕了这个男人，因为他攻击了一个过路人。</p></li><li><p><strong>Verb</strong> - He was charged with assaulting his colleague.<br><strong>中文</strong>：他被控告攻击了他的同事。</p></li><li><p><strong>Verb</strong> - The soldiers prepared to assault the enemy position.<br><strong>中文</strong>：士兵们准备对敌人的阵地发起攻击。</p></li></ol><h3 id="词根分析-132"><a href="#词根分析-132" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Assault” 来自于古法语 “assaillir”，意为“攻击，撞击”，其词根可能是拉丁语 “ad”（向）和 “salire”（跳）。</p><h3 id="词缀分析-132"><a href="#词缀分析-132" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li><strong>前缀</strong>：无显著前缀。</li><li><strong>词根</strong>：”assault” 的词根可以看作是 “assail”，意为攻击。</li><li><strong>后缀</strong>：无显著后缀。</li></ul><h3 id="发展历史和文化背景-132"><a href="#发展历史和文化背景-132" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Assault” 这个词在中世纪开始用于法律和军事语境，指无端的攻击或违反法律的对个人的攻击。在现代，它不仅指物理攻击，还可以延伸到心理或言语上的攻击。</p><h3 id="单词变形-132"><a href="#单词变形-132" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li><strong>名词</strong>：Assault（攻击）</li><li><strong>动词</strong>：To assault（攻击），assaulted（被攻击）</li><li><strong>形容词</strong>：Assaultive（攻击性的）</li><li><strong>副词</strong>：Assaultingly（攻击性地）</li></ul><h3 id="记忆辅助-132"><a href="#记忆辅助-132" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>联想到“assault”和“salt”（盐）的发音相似，可以想象一个人在攻击时像撒盐一样迅速且广泛地发起动作。</p><h3 id="小故事-132"><a href="#小故事-132" class="headerlink" title="小故事"></a>小故事</h3><p>One dark night, a thief assaulted a jewelry store. He shattered the glass with a hammer but triggered the alarm. The police arrived quickly and caught him in the act.</p><p><strong>中文翻译</strong>：<br>在一个黑暗的夜晚，一个小偷对一个珠宝店发起了攻击。他用锤子砸碎了玻璃，但触发了警报。警察迅速赶到，当场抓住了他。</p><hr><h2 id="assemble"><a href="#assemble" class="headerlink" title="assemble"></a>assemble</h2><h3 id="分析词义-133"><a href="#分析词义-133" class="headerlink" title="分析词义"></a>分析词义</h3><p>“assemble” 是一个动词，意思是“聚集”、“集合”、“组装”或“聚集在一起”。它可以用来描述人、物品或部件聚集到一起，形成一个整体或进行某种活动。</p><h3 id="列举例句-132"><a href="#列举例句-132" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The students assembled in the hall for the morning assembly.（学生们聚集在大厅里参加晨会。）</li><li>We need to assemble the new bookshelf before we can use it.（我们需要组装新书架后才能使用。）</li><li>The local residents assembled to protest against the new factory.（当地居民聚集起来抗议新工厂。）</li></ol><h3 id="词根分析-133"><a href="#词根分析-133" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“as-“ 是一个前缀，表示“朝向”、“一起”。</li><li>“-semble” 来自拉丁语 “semblare”，意味着“相似”、“类似”。</li></ul><h3 id="词缀分析-133"><a href="#词缀分析-133" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“as-“ 前缀还出现在其他词如 “associate”（联想，关联）。</li><li>“-semble” 词根相关的词有 “resemble”（相似）。</li></ul><h3 id="发展历史和文化背景-133"><a href="#发展历史和文化背景-133" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“assemble” 这个词源自中古英语，来源于拉丁语的 “semblare”。在历史上，它首先用于描述外貌或行为的相似，后来扩展到描述人或物的聚集。</p><h3 id="单词变形-133"><a href="#单词变形-133" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：assembly（集会，组装）</li><li>过去式：assembled</li><li>过去分词：assembled</li><li>现在分词：assembling</li><li>形容词：assembled（已组装的）</li><li>常见搭配：assemble together（一起聚集）</li></ul><h3 id="记忆辅助-133"><a href="#记忆辅助-133" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “assemble” 可以通过联想它的同义词 “gather” 或 “collect”。想象一下，当你把许多部件 “assemble” 一起，你就 “gather” 或 “collect” 了一个完整的物品。</p><h3 id="小故事-133"><a href="#小故事-133" class="headerlink" title="小故事"></a>小故事</h3><p>One by one, the pieces assembled on the table. Tom carefully connected them, working on his new puzzle.（一片片地，拼图在桌子上聚集。汤姆小心翼翼地将它们连接起来，制作他的新拼图。）</p><p>中文翻译：一片片地，拼图在桌子上拼凑起来。汤姆认真地连接它们，专心致志于他的新拼图游戏。</p><hr><h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><h3 id="分析词义-134"><a href="#分析词义-134" class="headerlink" title="分析词义"></a>分析词义</h3><p>“assert” 是一个动词，意思是坚定地表达或维护某种权利、意见或事实；确信并强调某事是真实的或存在的。</p><h3 id="列举例句-133"><a href="#列举例句-133" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>He asserted his innocence, claiming that he was not at the scene of the crime.<br>他坚称自己无辜，声称他不在犯罪现场。</p></li><li><p>The lawyer asserted her client’s right to a fair trial.<br>律师坚决主张她的客户有权获得公正的审判。</p></li><li><p>The scientist asserted that climate change is a significant threat to our planet.<br>科学家断言气候变化对我们的星球是一个重大威胁。</p></li></ol><h3 id="词根分析-134"><a href="#词根分析-134" class="headerlink" title="词根分析"></a>词根分析</h3><p>“assert” 的词根是 “sert”，这个词根来自拉丁语 “sertus”，意味着 “to join” 或 “to insert”。在英语中，这个词根并不常见，但我们可以从 “assert” 这个词的动作含义中捕捉到一种“插入观点”的意味。</p><h3 id="词缀分析-134"><a href="#词缀分析-134" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“as-“ 是前缀，在这里可以理解为加强语气的作用。</li><li>“-sert-“ 是词根，表示“插入”。</li><li>“-t” 是动词后缀，表示动作。</li></ul><p>其他带有 “-sert-“ 词根的单词可能包括 “insert”（插入）。</p><h3 id="发展历史和文化背景-134"><a href="#发展历史和文化背景-134" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“assert” 这个词源于拉丁语的 “assertus”，是 “assero” 的过去分词，”assero” 意为“坚定地说”或“断言”。在欧美文化中，”assert” 通常与自信、权利维护和主张表达相关联。</p><h3 id="单词变形-134"><a href="#单词变形-134" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：assertion（主张，断言）</li><li>形容词：assertive（自信的，主张的）</li><li>副词：assertively（自信地，坚定地）</li></ul><h3 id="记忆辅助-134"><a href="#记忆辅助-134" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “assert” 这个词，可以联想“as”（像是）和 “sert”（插入）。想象自己“插入”一个坚定的观点，就像是在对话中“像是”插入了一个不容置疑的事实。</p><h3 id="小故事-134"><a href="#小故事-134" class="headerlink" title="小故事"></a>小故事</h3><p>In a debate, Tom asserted his viewpoint with confidence, inserting firm arguments into the conversation. His assertiveness made others listen attentively.<br>在辩论中，汤姆自信地提出自己的观点，坚定地将有力的论据插入对话中。他的自信让其他人认真聆听。</p><p>在辩论中，汤姆坚定地阐述了自己的观点，将有力的论点巧妙地融入谈话之中。他的这种自信让其他人也认真起来，仔细聆听。</p><hr><h2 id="assess"><a href="#assess" class="headerlink" title="assess"></a>assess</h2><h3 id="分析词义-135"><a href="#分析词义-135" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Assess” 这个单词的意思是仔细地评价或判断某物的价值、重要性、质量或状况。在中文中，我们可以把它理解为“评估”或“评定”。</p><h3 id="列举例句-134"><a href="#列举例句-134" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The teacher will assess our understanding of the topic through a pop quiz.<ul><li>老师将通过一个突击测验来评估我们对该话题的理解。</li></ul></li><li>Before buying the house, we need to assess its structural integrity.<ul><li>在购买这座房子之前，我们需要评估它的结构完整性。</li></ul></li><li>The company is assessing the damage caused by the recent flood.<ul><li>公司正在评估最近洪水造成的损失。</li></ul></li></ol><h3 id="词根分析-135"><a href="#词根分析-135" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Assess” 来自于拉丁语 “assidere”，意为“坐下来”或“专心考虑”。现代英语中的词根是 “sess”，意味着“坐”。</p><h3 id="词缀分析-135"><a href="#词缀分析-135" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“as-“ 是前缀，表示“朝向”或“向着”。</li><li>“-sess-“ 是词根，表示“坐”。</li><li>“-s-“ 通常是一个连接元音的辅助音节。</li><li>“-ess” 是后缀，但在这里与词根结合紧密，不单独表现出词缀功能。</li></ul><h3 id="发展历史和文化背景-135"><a href="#发展历史和文化背景-135" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Assess” 这个词在历史上被广泛用于法律和税务领域，指的是对财产或收入的评估以确定应缴税款。在现代社会，它的应用扩展到了各个领域，包括教育、心理评估、环境评估等。</p><h3 id="单词变形-135"><a href="#单词变形-135" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词: assessment（评估）</li><li>动词时态: assessed（过去式），assessing（现在分词），has&#x2F;have assessed（现在完成时）</li><li>形容词: assessable（可评估的）</li></ul><h3 id="记忆辅助-135"><a href="#记忆辅助-135" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “assess” 这个词，可以联想记忆：“as”（像是）你“sit”（坐下来）去“sess”（考虑），就像是在做评估。</p><h3 id="小故事-135"><a href="#小故事-135" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was given the task to assess the antique vases. He carefully examined each one, trying to determine their value. To his surprise, a seemingly ordinary vase turned out to be the most valuable piece in the collection.</p><ul><li>汤姆被赋予评估这些古董花瓶的任务。他仔细检查了每一只，试图确定它们的价值。令他惊讶的是，一个看似普通的花瓶最终成了收藏中最有价值的一件。</li></ul><p>[中文翻译]<br>汤姆负责评估这些古董花瓶。他逐一细致地检查，想要确定它们的价值。出乎他意料的是，一个看起来平平无奇的花瓶竟然成了这套收藏中最贵重的物品。</p><hr><h2 id="asset"><a href="#asset" class="headerlink" title="asset"></a>asset</h2><h3 id="分析词义-136"><a href="#分析词义-136" class="headerlink" title="分析词义"></a>分析词义</h3><p>“asset” 这个单词在英语中通常指的是一个人、组织或公司拥有的有价值的物品或资源，可以是物质资产，比如金钱、土地、房产，也可以是非物质的，比如品牌、技能或者专利。在财务领域，asset 通常是指在企业资产负债表上具有经济价值的资源。</p><h3 id="列举例句-135"><a href="#列举例句-135" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The company’s most valuable asset is its brand name.<ul><li>公司最有价值的资产是它的品牌名称。</li></ul></li><li>Knowledge and skills can be your biggest assets in your career.<ul><li>知识和技能可以成为你职业生涯中最大的资产。</li></ul></li><li>He is a real asset to our team because of his excellent communication abilities.<ul><li>由于他出色的沟通能力，他是我们团队中的一位非常宝贵的资产。</li></ul></li></ol><h3 id="词根分析-136"><a href="#词根分析-136" class="headerlink" title="词根分析"></a>词根分析</h3><p>“asset” 的词根是 “asset”，这个词没有明显的词缀，但是它的词源来自意大利语 “assetto”，意为“充足”或“富有”。</p><h3 id="词缀分析-136"><a href="#词缀分析-136" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“asset” 本身并没有明显的词缀，但是可以加上不同的后缀来形成其他单词，例如：<ul><li>“assetted”：虽然不常用，但理论上表示“装备好的”或“资产充足的”。</li></ul></li></ul><h3 id="发展历史和文化背景-136"><a href="#发展历史和文化背景-136" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“asset” 这个词在商业和金融领域非常重要，它体现了西方经济体系中对财富和资源的重视。在欧美文化中，个人和企业的资产常常被视为成功和稳定的象征。</p><h3 id="单词变形-136"><a href="#单词变形-136" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：assets（复数）</li><li>形容词：asset-based（基于资产的）</li></ul><h3 id="记忆辅助-136"><a href="#记忆辅助-136" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “asset”，可以将它与“asset（资产）- set（设置）”联想起来，想象你正在“设置”或准备一组有价值的资源或工具，这些都是你宝贵的“资产”。</p><h3 id="小故事-136"><a href="#小故事-136" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was proud of his new asset. It was a small workshop where he could craft wooden toys. The workshop became a valuable asset, not just for income but for the joy it brought to the community. </p><ul><li>汤姆为他新的资产感到骄傲。那是一个他可以制作木制玩具的小工作室。这个工作室成了一个宝贵的资产，不仅因为它带来了收入，更因为它给社区带来了欢乐。</li></ul><p>中文翻译：<br>汤姆自豪于他的新资产，那是一个制作木制玩具的小工作室。这个工作室成了宝贵的资产，不只是因为它产生的收入，还因为它为社区带来的快乐。</p><hr><h2 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h2><h3 id="分析词义-137"><a href="#分析词义-137" class="headerlink" title="分析词义"></a>分析词义</h3><p>“assign” 这个单词是一个动词，它的基本意思是“分配”或“指派”。通常用于指派任务、责任或工作给某人，也可以用于分配资源或属性。</p><h3 id="列举例句-136"><a href="#列举例句-136" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The teacher assigned a research project to each student. </p><ul><li>老师给每个学生分配了一个研究项目。（教育场景）</li><li>中文翻译：老师指派给每位学生一个研究课题。</li></ul></li><li><p>The manager assigned John to lead the new project.</p><ul><li>经理指派约翰领导新项目。（工作场景）</li><li>中文翻译：经理分配给约翰负责领导新项目。</li></ul></li><li><p>They assigned a room to us for the meeting.</p><ul><li>他们为我们分配了一个会议室。（日常生活场景）</li><li>中文翻译：他们为我们指定了一个房间开会。</li></ul></li></ol><h3 id="词根分析-137"><a href="#词根分析-137" class="headerlink" title="词根分析"></a>词根分析</h3><p>“assign” 的词根是 “sign”，这意味着“标记”或“符号”。在这个词里，”sign” 的概念被扩展为“指定”或“指派”。</p><h3 id="词缀分析-137"><a href="#词缀分析-137" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“a-“ 是前缀，通常表示“朝向”或“加强”。</li><li>“-sign” 是词根，表示“标记”。</li><li>“-assign” 是动词后缀，它在这个词中并没有独立的含义，但帮助构成了动词的形式。</li></ul><h3 id="发展历史和文化背景-137"><a href="#发展历史和文化背景-137" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“assign” 这个词来自于拉丁语 “assignare”，意为“标出”或“选定”。在商业、教育和日常生活中，这个词经常被用来描述责任的分配或任务的指派，体现了责任分明和分工合作的西方社会价值观。</p><h3 id="单词变形-137"><a href="#单词变形-137" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：assignment（分配，任务）</li><li>形容词：assignable（可分配的）</li><li>副词：assignably（可分配地）</li><li>动词分词：assigned（被分配的）</li><li>现在分词：assigning（正在分配）</li></ul><h3 id="记忆辅助-137"><a href="#记忆辅助-137" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记忆 “assign” 这个词，可以联想记忆：“分配任务时，就像在每个人的名字上做标记（sign），指定（assign）他们要做什么。”</p><h3 id="小故事-137"><a href="#小故事-137" class="headerlink" title="小故事"></a>小故事</h3><p>John was excited to assign tasks to his team for their community service project. “You’ll clean the park,” he said to Sarah. “And you two, collect litter,” he told the twins.</p><ul><li>约翰兴奋地为他的团队分配社区服务项目的任务。“你负责清理公园，”他对莎拉说。“你们俩负责捡垃圾，”他告诉双胞胎。</li></ul><p>中文翻译：<br>约翰激动地给他的团队指派社区服务项目的任务。“你负责打扫公园，”他对莎拉说。“你们两个，负责收集垃圾，”他对双胞胎说。</p><hr><h2 id="assignment"><a href="#assignment" class="headerlink" title="assignment"></a>assignment</h2><h3 id="分析词义-138"><a href="#分析词义-138" class="headerlink" title="分析词义"></a>分析词义</h3><p>“assignment” 这个单词在英语中通常指分配的任务或者作业。它可以是学校里的作业，也可以是工作场所中分配给员工的工作。</p><h3 id="列举例句-137"><a href="#列举例句-137" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The teacher gave us an assignment to write a short story.</p><ul><li>老师给了我们一个写作短故事的作业。</li></ul></li><li><p>I have an important assignment due next week.</p><ul><li>我下星期有一份重要的任务要完成。</li></ul></li><li><p>The manager carefully reviewed the assignments for each team member.</p><ul><li>经理仔细审查了每位团队成员的任务分配。</li></ul></li></ol><h3 id="词根分析-138"><a href="#词根分析-138" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“assign” 是一个动词，意为“分配、指派”，是 “assignment” 的词根。</li><li>“ment” 是一个常见的名词后缀，表示“行为、过程或结果”。</li></ul><h3 id="词缀分析-138"><a href="#词缀分析-138" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“assign-“：词根，表示“分配”。</li><li>“-ment”：后缀，表示名词化。</li></ul><p>其他使用同样后缀 “ment” 的单词：</p><ul><li>assessment (评估)</li><li>development (发展)</li><li>achievement (成就)</li></ul><h3 id="发展历史和文化背景-138"><a href="#发展历史和文化背景-138" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“assignment” 来自于拉丁语 “assignare”，意为“指定、标明”。在现代英语中，这个单词广泛应用于教育和商业环境中，指的是分配给个人或团队的任务。</p><h3 id="单词变形-138"><a href="#单词变形-138" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：assignment(s)</li><li>动词：assign, assigned, assigning</li><li>形容词：assignable</li></ul><p>固定搭配：</p><ul><li>hand in&#x2F;turn in an assignment（上交作业）</li><li>complete an assignment（完成作业）</li></ul><h3 id="记忆辅助-138"><a href="#记忆辅助-138" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “assignment” 这个词，可以将其拆分为两部分：”assign”（分配）和 “-ment”（名词后缀）。想象一下，在学校或者工作中，当你被分配（assign）了一个任务，这个任务就是一个 “assignment”。</p><h3 id="小故事-138"><a href="#小故事-138" class="headerlink" title="小故事"></a>小故事</h3><p>Tom received a difficult assignment from his boss. He needed to finish a project report by the end of the week. Feeling stressed, Tom worked hard every day, and finally completed the assignment successfully.</p><p>汤姆从老板那里收到了一个困难的任务。他需要在周末前完成一个项目报告。感到压力的汤姆每天都努力工作，最终成功地完成了这个任务。</p><p>汤姆从老板那里得到了一份艰巨的任务。他需要在周末前完成一个项目报告。在感到压力的情况下，汤姆日以继夜地工作，最终顺利完成了这份任务。</p><hr><h2 id="assimilate"><a href="#assimilate" class="headerlink" title="assimilate"></a>assimilate</h2><h3 id="分析词义-139"><a href="#分析词义-139" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Assimilate” 这个单词在英语中主要指“吸收、融入”或者“理解、掌握”。它可以用于描述文化、知识、信息等的融合或个体对某事物的理解与内化。</p><h3 id="列举例句-138"><a href="#列举例句-138" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>Immigrants often need to assimilate into the new culture.<br>移民通常需要融入新的文化。</li><li>It’s important for students to assimilate the material before the exam.<br>对学生来说，在考试前理解并掌握材料是非常重要的。</li><li>The company aims to assimilate the latest technology into their products.<br>这家公司力求将最新的技术融入到他们的产品中。</li></ol><h3 id="词根分析-139"><a href="#词根分析-139" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Assimilate” 来自于拉丁语 “assimilare”，意为“使相似”。词根 “simil-“ 源自拉丁语 “similis”，意思是“相似的”。</p><h3 id="词缀分析-139"><a href="#词缀分析-139" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “ad-“ 在这里变成 “as-“，表示“向，朝着”。</li><li>词根 “simil-“ 意为“相似的”。</li><li>后缀 “-ate” 通常表示动词，有时还带有“使成为”或“进行”的意思。</li></ul><p>其他带有相似词根的单词：</p><ul><li>Similar</li><li>Simile</li><li>Dissimilate（与assimilate相反，意为“使不同”）</li></ul><h3 id="发展历史和文化背景-139"><a href="#发展历史和文化背景-139" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Assimilate” 这个词在历史和文化中常常用于描述不同文化或群体之间的融合过程。在欧美文化中，它也经常用于讨论多元文化社会中的个体如何适应主流文化。</p><h3 id="单词变形-139"><a href="#单词变形-139" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：Assimilation</li><li>形容词：Assimilative</li><li>副词：Assimilatively</li></ul><h3 id="记忆辅助-139"><a href="#记忆辅助-139" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “assimilate” 这个单词，可以联想记忆：“向着相似的（similarity）方向去吸收、学习或融合”。</p><h3 id="小故事-139"><a href="#小故事-139" class="headerlink" title="小故事"></a>小故事</h3><p>Tom moved to a new school where everyone spoke a different language. At first, he felt like an outsider. But gradually, he began to assimilate into the new environment. He learned the language and made friends. Now, Tom feels at home among his peers.</p><p>汤姆转学到了一个大家都说不同语言的新学校。起初，他感觉自己像个局外人。但渐渐地，他开始融入这个新环境。他学习了这种语言，也交到了朋友。现在，汤姆在同伴中感觉就像在家一样。</p><p>中文翻译：汤姆转到了一个新学校，那里的每个人都说着不同的语言。起初，他觉得自己是个外人。但是慢慢地，他开始适应这个新环境。他学会了那种语言，也交了一些朋友。现在，汤姆觉得自己在同学们中间就像在家里一样自在。</p><hr><h2 id="assistance"><a href="#assistance" class="headerlink" title="assistance"></a>assistance</h2><h3 id="分析词义-140"><a href="#分析词义-140" class="headerlink" title="分析词义"></a>分析词义</h3><p>“assistance” 是一个名词，意思是帮助或者援助。在日常生活中，当我们说某人提供”assistance”，就是指他们在帮助别人解决问题或完成任务。</p><h3 id="列举例句-139"><a href="#列举例句-139" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>If you need any assistance, please don’t hesitate to ask.（如果你需要任何帮助，请毫不犹豫地提出。）</li><li>The charity organization provides medical assistance to those in need.（这个慈善组织为有需要的人提供医疗援助。）</li><li>The GPS in the car offers real-time navigation assistance.（车里的GPS提供实时导航帮助。）</li></ol><h3 id="词根分析-140"><a href="#词根分析-140" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“assist” 是词根，意为帮助或支持。</li><li>“ance” 是后缀，通常加在动词后面，形成名词，表示行为或状态。</li></ul><h3 id="词缀分析-140"><a href="#词缀分析-140" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ass-“ 是前缀，来自拉丁语 “ad-“，意为朝向或加强。</li><li>“-ance” 如上所述，是名词后缀。</li></ul><h3 id="发展历史和文化背景-140"><a href="#发展历史和文化背景-140" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Assistance” 来自拉丁语 “assistere”，意为“站在旁边”。在欧美文化中，提供帮助是一种重要的社会行为，”assistance” 这个词也就经常出现在社会服务的各个领域。</p><h3 id="单词变形-140"><a href="#单词变形-140" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>动词原形：assist</li><li>名词：assistant（助手），unassisted（未经帮助的）</li><li>形容词：assisting（正在帮助的）</li></ul><h3 id="记忆辅助-140"><a href="#记忆辅助-140" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “assistance” 可以联想记忆 “assistant”，它们有相同的词根和意义相关的后缀。”Assistant” 是助手，而 “assistance” 就是助手所提供的帮助。</p><h3 id="小故事-140"><a href="#小故事-140" class="headerlink" title="小故事"></a>小故事</h3><p>Alice was shopping for a new computer when she felt lost among the numerous options. Feeling overwhelmed, she sought assistance from a sales assistant. The kind assistant carefully listened to her needs and provided excellent guidance. </p><p>爱丽丝在购买新电脑时，面对众多选择感到迷茫。感到不知所措时，她向一位销售助手寻求帮助。那位友善的助手仔细聆听了她的需求，并提供了出色的指导。</p><p>（爱丽丝在买新电脑的时候，因为选择太多而感到迷茫。在感到压力很大的时候，她向一个销售员寻求了帮助。那个友善的销售员仔细听了她的要求，给了她很好的建议。）</p><hr><h2 id="associate"><a href="#associate" class="headerlink" title="associate"></a>associate</h2><h3 id="分析词义-141"><a href="#分析词义-141" class="headerlink" title="分析词义"></a>分析词义</h3><p>“associate” 这个词在英语中既可以作动词，也可以作名词。作为动词时，它的基本意思是“联想、联系”，例如把两个事物或想法联系在一起。作为名词，它指的是“伙伴、同事”，或者在某些情况下也可以指“联想、关联”。</p><h3 id="列举例句-140"><a href="#列举例句-140" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>Verb: When I hear the word “beach,” I automatically associate it with summer vacation.</p><ul><li>我一听到“海滩”这个词，就会自动联想到夏天度假。</li></ul></li><li><p>Noun: He’s my close associate; we’ve worked together for many years.</p><ul><li>他是我亲密的伙伴，我们一起工作了好多年。</li></ul></li><li><p>Verb: The company associated itself with a well-known charity to improve its image.</p><ul><li>为了提升形象，这个公司和一个知名的慈善机构建立了联系。</li></ul></li></ol><h3 id="词根分析-141"><a href="#词根分析-141" class="headerlink" title="词根分析"></a>词根分析</h3><p>“associate” 这个词来自拉丁词 “associare”，意为 “to join together” 或 “unite”。词根主要来自于 “socius”，意为 “companion” 或 “ally”。</p><h3 id="词缀分析-141"><a href="#词缀分析-141" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“as-“ 或 “ad-“：前缀，表示 “to” 或 “toward”。</li><li>“-soci-“：词根，来自拉丁语 “socius”，意味着伙伴或同伴。</li><li>“-ate”：动词后缀，用于形成动词。</li></ul><h3 id="发展历史和文化背景-141"><a href="#发展历史和文化背景-141" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“associate” 这个词在英语中有着悠久的历史，起源于拉丁语，后来进入法语，最终进入英语。在商业和职业环境中，它经常用来描述合作伙伴或同事之间的关系。在心理学领域，它也用于描述联想过程，即一个人如何将不同的想法或物体联系在一起。</p><h3 id="单词变形-141"><a href="#单词变形-141" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>动词形式：associates (第三人称单数), associating (现在分词), associated (过去式和过去分词)</li><li>名词形式：association (协会、联想), associative (形容词，关联的)</li></ul><h3 id="记忆辅助-141"><a href="#记忆辅助-141" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “associate” 这个词，你可以想象有两个朋友（伙伴）手牵手一起加入（as-）一个小组（-soci-），这样就形成了 “associate”，意味着他们联合或联想在一起。</p><h3 id="小故事-141"><a href="#小故事-141" class="headerlink" title="小故事"></a>小故事</h3><p>Tom always associates the scent of coffee with his grandmother’s kitchen. It brings back memories of early mornings, shared laughter, and her warm embrace. To him, the smell is not just coffee; it’s a piece of his past, a link to cherished moments.</p><p>汤姆总是把咖啡的香味和他奶奶的厨房联系在一起。这让他回忆起清晨，共同的欢笑，和她温暖的拥抱。对他来说，这个味道不仅仅是咖啡；它是他过去的一块碎片，是珍视时光的纽带。</p><p>中文翻译：汤姆总是将咖啡的香味和他奶奶的厨房联想在一起。这让想起了清晨，一起的笑声，和她温馨的拥抱。对他而言，这个气味不仅仅是咖啡；它是他过往的一小部分，是与珍贵时刻的联系。</p><hr><h2 id="association"><a href="#association" class="headerlink" title="association"></a>association</h2><h3 id="分析词义-142"><a href="#分析词义-142" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Association” 这个词在英语中通常指的是一种联系或者关系，可以是人与人之间的社交联系，也可以是事物之间的相关性或相似性。</p><h3 id="列举例句-141"><a href="#列举例句-141" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>I have a close association with my high school friends.<br>我和我的高中朋友们保持着密切的联系。</p></li><li><p>The company has formed an association with a charity organization to help the underprivileged.<br>这家公司与一家慈善组织建立了联系，以帮助弱势群体。</p></li><li><p>There is a strong association between smoking and lung cancer.<br>吸烟和肺癌之间存在很强的关联性。</p></li></ol><h3 id="词根分析-142"><a href="#词根分析-142" class="headerlink" title="词根分析"></a>词根分析</h3><p>词根是 “soci-“, 来自古拉丁语 “socius”，意思是 “companion” 或 “ally”。这个词根与“社交”或“伙伴”的概念有关。</p><h3 id="词缀分析-142"><a href="#词缀分析-142" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀：无</li><li>词根：soci-</li><li>后缀：-ation，表示过程或状态</li></ul><p>其他包含 “soci-“ 词根的单词：</p><ul><li>society（社会）</li><li>social（社会的）</li><li>sociable（好交际的）</li></ul><p>带有 “-ation” 后缀的其他单词：</p><ul><li>education（教育）</li><li>information（信息）<br>-ilation（条件）</li></ul><h3 id="发展历史和文化背景-142"><a href="#发展历史和文化背景-142" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Association” 一词源于拉丁语的 “socius”，在中世纪晚期进入英语。在社会学和心理学领域，它用于描述事物之间的相互关系或影响。在欧美文化中，”association” 不仅仅指人际关系的建立，还涉及到品牌、思想、观念等之间的关联。</p><h3 id="单词变形-142"><a href="#单词变形-142" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：associations（复数形式）</li><li>动词：associate（动词原形），associating（现在分词），associated（过去式和过去分词）</li></ul><h3 id="记忆辅助-142"><a href="#记忆辅助-142" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过联想记忆法来记忆 “association” 这个词。例如，”soci-“ 可以让人想到 “social”（社会的），那么 “association” 就像是描述社会中人与人、事与事之间的“关联”或“联合会”。</p><h3 id="小故事-142"><a href="#小故事-142" class="headerlink" title="小故事"></a>小故事</h3><p>One evening, Tom attended a book association meeting. He loves how the association brings together book lovers to share ideas and discuss interesting literature. It’s a place where he always finds a warm atmosphere and friendly associates.</p><p>一个晚上，汤姆参加了一个书籍联合会的会议。他喜欢这个组织如何把爱书之人聚集在一起分享观点，讨论有趣的文学作品。对他来说，那是一个总能找到温暖氛围和友好伙伴的地方。</p><p>[中文翻译]<br>一个夜晚，汤姆参加了一场书籍协会的聚会。他非常喜欢这个协会将爱好书籍的人们聚集在一起，分享观点，讨论有趣的文学作品。对他而言，这里总有着温馨的氛围和友好的同伴。</p><hr><h2 id="assume"><a href="#assume" class="headerlink" title="assume"></a>assume</h2><h3 id="分析词义-143"><a href="#分析词义-143" class="headerlink" title="分析词义"></a>分析词义</h3><p>“assume” 是一个动词，它的基本意思是“认为”或“假设”，在某种情况下未经证实就接受某事是真实的。它还可以表示“承担”或“呈现”的意思。</p><h3 id="列举例句-142"><a href="#列举例句-142" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>Many people assume that all astronauts have gone to college.<br> 许多人认为所有宇航员都上过大学。</p></li><li><p>We can’t assume that the client will agree with our proposal without any discussion.<br>我们不能假设客户在不进行任何讨论的情况下就会同意我们的提案。</p></li><li><p>When he puts on the uniform, he assumes the role of a police officer.<br>当他穿上制服时，他就扮演起了警察的角色。</p></li></ol><h3 id="词根分析-143"><a href="#词根分析-143" class="headerlink" title="词根分析"></a>词根分析</h3><p>“assume” 来自拉丁语 “assumere”，意为“采取”或“承担”。</p><h3 id="词缀分析-143"><a href="#词缀分析-143" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“as-“ 是前缀，表示“向”，“sum-“ 是词根，表示“拿取”或“取”。</li><li>“-e” 是常见的动词结尾。</li><li>这个词没有明显的后缀。</li></ul><h3 id="发展历史和文化背景-143"><a href="#发展历史和文化背景-143" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“assume” 这个词在英语中已经使用了好几百年了。最初它主要用在法律和学术语境中，意味着“承担”或“宣称”。随着时间的推移，它的意思扩展到了“假设”或“认为”。</p><h3 id="单词变形-143"><a href="#单词变形-143" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词: assumption</li><li>动词过去式: assumed</li><li>动词过去分词: assumed</li><li>现在分词: assuming</li><li>形容词: assumptive</li></ul><h3 id="记忆辅助-143"><a href="#记忆辅助-143" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>“assume” 这个词可以通过联想记忆法来记忆。比如，我们可以联想到一个人“承担”起了一个角色（assume a role），就像演员上台前“假设”了角色的性格。</p><h3 id="小故事-143"><a href="#小故事-143" class="headerlink" title="小故事"></a>小故事</h3><p>One day, a young actor assumed the role of a wise king in a play. As he spoke his lines, he believed he truly was the king, commanding the attention of the audience.</p><p>有一天，一个年轻演员在剧中“承担”了智慧国王的角色。当他念出台词时，他相信自己真的是国王，赢得了观众的瞩目。</p><p>中文翻译：<br>有一天，一个年轻的演员在剧中扮演了一个智慧国王的角色。当他说出台词时，他感觉自己真的就是那位国王，吸引着全场的目光。</p><hr><h2 id="assumption"><a href="#assumption" class="headerlink" title="assumption"></a>assumption</h2><h3 id="分析词义-144"><a href="#分析词义-144" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Assumption” 是一个名词，它指的是一个人在没有充分证据的情况下认为某事是真实的信念或猜想。在中文中，我们可以将它理解为“假定”、“假设”或“设想”。</p><h3 id="列举例句-143"><a href="#列举例句-143" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The assumption that all people are honest is not valid in today’s society.</p><ul><li>在当今社会，认为所有人都是诚实的这种假设是不成立的。</li></ul></li><li><p>Before we start the project, we are making the assumption that the budget will not be cut.</p><ul><li>在我们开始项目之前，我们假设预算不会削减。</li></ul></li><li><p>His assumption of innocence was proven wrong when the evidence came to light.</p><ul><li>当证据浮出水面时，他对无辜的假设被证明是错误的。</li></ul></li></ol><h3 id="词根分析-144"><a href="#词根分析-144" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“Assumpt-“ 是词根，来源于拉丁语 “assumptio”，意为 “a taking up” 或 “a taking upon oneself”。</li><li>由词根 “assumpt-“ 衍生出来的其他单词：<ul><li>Assume（动词）：意为“假设”或“承担”。</li><li>Assumptive（形容词）：意为“假定的”或“擅自主张的”。</li></ul></li></ul><h3 id="词缀分析-144"><a href="#词缀分析-144" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Assumpt-“：词根，如上所述。</li><li>“-ion”：这是一个常见的名词后缀，表示“行为”或“过程”，如 “action”（行动）。</li></ul><h3 id="发展历史和文化背景-144"><a href="#发展历史和文化背景-144" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Assumption” 这个词源自于拉丁语的 “assumptio”，在中世纪晚期进入英语。它最初具有宗教意义，指的是圣母玛利亚被提升到天上的“升天”（the Assumption）。在更广泛的文化和语言使用中，这个词逐渐发展出“未经证实地接受为真”的含义。</p><h3 id="单词变形-144"><a href="#单词变形-144" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>形容词：assumptive</li><li>动词：assume<ul><li>过去式：assumed</li><li>现在分词：assuming</li><li>过去分词：assumed</li></ul></li></ul><h3 id="记忆辅助-144"><a href="#记忆辅助-144" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “assumption” 这个词，可以联想记忆：</p><ul><li>“Assume” 是动词形式，表示“承担”或“假设”，加上后缀 “-tion” 变成名词，表示一种行为或状态，即“假定”。</li></ul><h3 id="小故事-144"><a href="#小故事-144" class="headerlink" title="小故事"></a>小故事</h3><p>Tom made the assumption that his keys were on the table, but after a thorough search, he found them in his pocket.</p><p>汤姆假设他的钥匙在桌子上，但经过彻底搜索后，他发现钥匙在自己的口袋里。</p><p>中文翻译：<br>汤姆认为他的钥匙在桌子上，但当他仔细找过之后，发现钥匙原来在他的口袋里。</p><hr><h2 id="assurance"><a href="#assurance" class="headerlink" title="assurance"></a>assurance</h2><h3 id="分析词义-145"><a href="#分析词义-145" class="headerlink" title="分析词义"></a>分析词义</h3><p>“assurance” 是一个名词，它指的是对某件事情的坚定信念或确信，常常涉及到对未来的某种保证或担保。在情感上，它给人以安心和自信的感觉。</p><h3 id="列举例句-144"><a href="#列举例句-144" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The manager gave us an assurance that the project would be completed on time.<br>经理向我们保证项目将按时完成。</li><li>Her calm demeanor was an assurance to everyone that she was in control of the situation.<br>她的镇定自若让所有人都确信她控制着局面。</li><li>The warranty on the car provides assurance that any defects will be fixed.<br>汽车的保修服务让车主确信任何缺陷都会被修复。</li></ol><h3 id="词根分析-145"><a href="#词根分析-145" class="headerlink" title="词根分析"></a>词根分析</h3><p>“assurance” 来自于”assure”这个动词。</p><ul><li>“assure”：意为“保证，确保”，来自拉丁语”assidere”，意为“坐下，稳固”。</li></ul><h3 id="词缀分析-145"><a href="#词缀分析-145" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ass-“：前缀，表示“加强，增加”。</li><li>“-sure”：词根，表示“确定，安全”。</li><li>“-ance”：后缀，用来形成名词，表示“状态，行为”。</li></ul><h3 id="发展历史和文化背景-145"><a href="#发展历史和文化背景-145" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“assurance” 这个词在中世纪英语中开始出现，最初与”assure”动词紧密相关，意味着使人确信或担保某事。在商业和保险业中，”assurance”常常涉及到提供保证或保险服务。</p><h3 id="单词变形-145"><a href="#单词变形-145" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>动词形式：assure（保证）</li><li>形容词形式：assured（自信的，确定的）</li><li>名词复数：assurances（保证，担保）</li></ul><h3 id="记忆辅助-145"><a href="#记忆辅助-145" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住”assurance”这个单词，可以联想”assure”（保证）加上”-ance”（状态）的组合，意味着一种“保证的状态”或“自信的感觉”。</p><h3 id="小故事-145"><a href="#小故事-145" class="headerlink" title="小故事"></a>小故事</h3><p>Tom felt a deep assurance as he looked at the contract. It stated clearly that his idea would be protected. He could now innovate without fear.<br>汤姆看着合同，心中充满了深深的确定感。合同明确表示他的想法将受到保护。他现在可以无所畏惧地创新了。</p><p>中文翻译：<br>汤姆看着合同，心中有一种深深的安心。合同上清楚地写着他的想法将会受到保护。这下他可以毫无顾忌地进行创新了。</p><hr><h2 id="assure"><a href="#assure" class="headerlink" title="assure"></a>assure</h2><h3 id="分析词义-146"><a href="#分析词义-146" class="headerlink" title="分析词义"></a>分析词义</h3><p>“assure” 是一个动词，意思是使某人确信某事是真的或将会发生，向某人保证或担保某事。在中文中，我们可以将其翻译为“保证”、“担保”或“使确信”。</p><h3 id="列举例句-145"><a href="#列举例句-145" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The manager assured us that the project would be finished on time.<br>经理向我们保证项目将会按时完成。</li><li>I can assure you that this product is of the highest quality.<br>我可以向你保证，这个产品是最高质量的。</li><li>She assured her parents that she would be careful while traveling.<br>她向父母保证在旅行中会小心。</li></ol><h3 id="词根分析-146"><a href="#词根分析-146" class="headerlink" title="词根分析"></a>词根分析</h3><p>“assure” 的词根是 “sure”，意为“确信的”或“确定的”。前缀 “as-“ 在这里相当于 “ad-“，表示“向”，“向着”。</p><h3 id="词缀分析-146"><a href="#词缀分析-146" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“as-“：前缀，表示“向”或“向着”。</li><li>“-sure”：词根，表示“确信”。</li><li>“-e”：在古英语中，动词后加 “-e” 可以表示强调。</li></ul><h3 id="发展历史和文化背景-146"><a href="#发展历史和文化背景-146" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“assure” 这个词源于中古英语的 “assuren”，最早可以追溯到拉丁语的 “assicurare”，意为“使安全”或“使安心”。在欧美文化中，”assure” 常用于商业和人际关系中，表示给予对方信心和保证。</p><h3 id="单词变形-146"><a href="#单词变形-146" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：assurance（保证，担保）</li><li>时态：assures（现在时），assured（过去时），assuring（现在分词），assured（过去分词）</li></ul><h3 id="记忆辅助-146"><a href="#记忆辅助-146" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过联想记忆来记住 “assure”：想象你正在向某人“向着”确信的方向走，给予他们保证。</p><h3 id="小故事-146"><a href="#小故事-146" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was nervous about his speech. His friend, Jane, patted his back and assured him, “You’ll do great.” Tom felt much better after her assurance.<br>汤姆对演讲感到紧张。他的朋友简拍了拍他的背，向他保证说：“你会做得很好的。”在简的保证下，汤姆感觉好多了。</p><p>中文翻译：汤姆对即将到来的演讲感到很紧张。他的朋友简拍了拍他的背，向他保证说：“你会表现得很出色的。”简的保证让汤姆感觉好了很多。</p><hr><h2 id="athlete"><a href="#athlete" class="headerlink" title="athlete"></a>athlete</h2><h3 id="分析词义-147"><a href="#分析词义-147" class="headerlink" title="分析词义"></a>分析词义</h3><p>“athlete” 这个词指的是一个参与体育比赛，尤其是田径比赛的专业运动员。在更广泛的语境中，它也可以指任何形式的身体训练或竞赛中的运动员。</p><h3 id="列举例句-146"><a href="#列举例句-146" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>He is an accomplished athlete who has won many medals.</p><ul><li>他是一名成就卓著的运动员，赢得了很多奖牌。（中文翻译）</li></ul></li><li><p>The athlete trained rigorously for five hours every day.</p><ul><li>这名运动员每天严格训练五小时。（中文翻译）</li></ul></li><li><p>She aspired to become an athlete since she was a little girl.</p><ul><li>从小女孩子起，她就渴望成为一名运动员。（中文翻译）</li></ul></li></ol><h3 id="词根分析-147"><a href="#词根分析-147" class="headerlink" title="词根分析"></a>词根分析</h3><p>“athlete” 的词根来自古希腊语的 “athlētēs”，意味着“参与者”或“竞争者”。</p><h3 id="词缀分析-147"><a href="#词缀分析-147" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“ath-“ 是词根部分，来源于希腊语。</li><li>“-lete” 是后缀，来自于希腊语 “lēthēs”，意味着“竞争者”。</li><li>“-ic” 在一些衍生词中出现，如 “athletic”，表示与运动员或体育有关的。</li></ul><h3 id="发展历史和文化背景-147"><a href="#发展历史和文化背景-147" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“athlete” 这个词最早出现在古希腊，当时指的是参与古希腊奥运会的竞争者。古希腊奥运会是古希腊文化中一个非常重要的组成部分，它不仅是一种体育竞技活动，也是一种宗教庆典。</p><h3 id="单词变形-147"><a href="#单词变形-147" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：athlete（运动员）</li><li>形容词：athletic（运动的，运动员的）</li><li>副词：athletically（运动式地）</li><li>名词复数：athletes（运动员们）</li></ul><h3 id="记忆辅助-147"><a href="#记忆辅助-147" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “athlete” 这个词，可以想象一个在田径场上奔跑的运动员，”ath” 可以联想为“阿泰”，一个常见的中文人名，使单词更容易与一个具体的形象联系起来。</p><h3 id="小故事-147"><a href="#小故事-147" class="headerlink" title="小故事"></a>小故事</h3><p>Tom watched in awe as the athlete sprinted to the finish line, securing first place. The crowd roared with excitement. Tom thought, “One day, I’ll be like him.”</p><p>汤姆敬畏地看着运动员冲刺到终点，获得了第一名。观众们兴奋地欢呼。汤姆心想：“总有一天，我会像他一样。”</p><p>中文翻译：汤姆敬畏地看着运动员冲刺到终点，赢得了第一名。人群兴奋地大声欢呼。汤姆心想：“总有一天，我也能成为像他那样的运动员。”</p><hr><h2 id="atlas"><a href="#atlas" class="headerlink" title="atlas"></a>atlas</h2><h3 id="分析词义-148"><a href="#分析词义-148" class="headerlink" title="分析词义"></a>分析词义</h3><p>“atlas” 是一个名词，它有以下几个含义：</p><ol><li>地图集：一本包含各种地图的书籍。</li><li>姿势参考图：在医学或健身中，指明人体各部位正确姿势的图表。</li><li>承担重担的人：比喻一个承担重大责任或工作的人。</li></ol><h3 id="列举例句-147"><a href="#列举例句-147" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>I need to check the atlas for the location of the new restaurant.（我需要查看地图集以找到新餐厅的位置。）</p><ul><li>在这个句子中，”atlas” 指的是地图集。</li></ul></li><li><p>The yoga atlas shows all the poses we need to practice.（瑜伽图集展示了我们需要练习的所有姿势。）</p><ul><li>这里，”atlas” 是指姿势参考图。</li></ul></li><li><p>He is the atlas of the project, shouldering most of the work.（他是这个项目的顶梁柱，承担了大部分工作。）</p><ul><li>在这个例句中，”atlas” 用作比喻，指一个重要的人物。</li></ul></li></ol><h3 id="词根分析-148"><a href="#词根分析-148" class="headerlink" title="词根分析"></a>词根分析</h3><p>“atlas” 这个词源自希腊神话中的Atlas，他是提坦神族的一员，被罚永远支撑天球。词根来自于他的名字。</p><h3 id="词缀分析-148"><a href="#词缀分析-148" class="headerlink" title="词缀分析"></a>词缀分析</h3><p>“atlas” 本身并没有明显的词缀，它是一个完整的单词。</p><h3 id="发展历史和文化背景-148"><a href="#发展历史和文化背景-148" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“atlas” 这个词源自希腊神话。在现实世界中，地图集的概念起源于16世纪，当时地图的制作和收集开始变得更加系统和全面。</p><h3 id="单词变形-148"><a href="#单词变形-148" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：atlas（地图集）</li><li>无复数形式，也不用于构成其他词性。</li></ul><h3 id="记忆辅助-148"><a href="#记忆辅助-148" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “atlas” 可以通过联想它和希腊神话中的Atlas神，他因为支撑天空而著名。你可以想象自己像Atlas一样，承担着学习地图集的重任。</p><h3 id="小故事-148"><a href="#小故事-148" class="headerlink" title="小故事"></a>小故事</h3><p>Tom found an old atlas in his grandfather’s attic. As he flipped through the pages, he embarked on a journey around the world without leaving his room. He imagined himself as an explorer discovering new places, just like the Atlas who held the world on his shoulders.</p><p>汤姆在爷爷的阁楼上发现了一本旧地图集。他翻阅着书页，仿佛在没有离开房间的情况下环游了世界。他想象自己成为一名探险家，发现新地方，就像肩负着世界的Atlas一样。</p><p>（汤姆在爷爷的阁楼里找到了一本旧的地图集。他翻看着那些页面，感觉自己就像是在房间里环游了世界。他想象着自己像Atlas一样，虽然Atlas肩负着整个世界，而他却是在探索未知。）</p><hr><h2 id="atmosphere"><a href="#atmosphere" class="headerlink" title="atmosphere"></a>atmosphere</h2><h3 id="分析词义-149"><a href="#分析词义-149" class="headerlink" title="分析词义"></a>分析词义</h3><p>“atmosphere”这个单词指的是围绕地球或其他天体的气体层，特别是我们呼吸的空气。在更广泛的含义中，它可以指某个地方的气氛或特定环境中的情绪或感觉。</p><h3 id="列举例句-148"><a href="#列举例句-148" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The Earth’s atmosphere protects us from harmful solar radiation.</p><ul><li>地球的大气层保护我们免受有害的太阳辐射。</li></ul></li><li><p>The atmosphere at the party was lively and everyone enjoyed themselves.</p><ul><li>派对上的气氛很活跃，每个人都玩得很开心。</li></ul></li><li><p>He has a calm and peaceful atmosphere about him.</p><ul><li>他周围有一种平静和安宁的气氛。</li></ul></li></ol><h3 id="词根分析-149"><a href="#词根分析-149" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“atmosphere”这个词来源于希腊语“atmos”，意为蒸汽，和“sphere”，意为球体或层。</li></ul><h3 id="词缀分析-149"><a href="#词缀分析-149" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“atmo-”是词根，表示蒸汽或空气。</li><li>“-sphere”表示球体或层。</li></ul><p>其他含有“-sphere”的单词如：biosphere（生物圈），geosphere（地球圈）。</p><h3 id="发展历史和文化背景-149"><a href="#发展历史和文化背景-149" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“atmosphere”一词起源于17世纪，最初用于描述围绕地球的气体层。它的文化内涵还包括了在一些情境下对情绪或感觉的描述，比如在文学作品中，一个“神秘的气氛”可以帮助设定场景和情绪。</p><h3 id="单词变形-149"><a href="#单词变形-149" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：atmospheric（形容词），atmospherically（副词）</li><li>单复数：atmospheres（复数形式）</li></ul><h3 id="记忆辅助-149"><a href="#记忆辅助-149" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住“atmosphere”，可以联想它是由“atmo-”（空气）和“-sphere”（层）组成，想象成一个球形的空气层包裹着地球。</p><h3 id="小故事-149"><a href="#小故事-149" class="headerlink" title="小故事"></a>小故事</h3><p>One evening, as the sun set, the atmosphere of the small town became magical. Soft lights illuminated the streets, and the air was filled with the sweet scent of flowers. People strolled around, enjoying the peaceful atmosphere.</p><p>一个傍晚，太阳落山时，这个小镇的气氛变得神奇起来。柔和的灯光照亮了街道，空气中弥漫着鲜花的甜香。人们漫步其中，享受着和平的气氛。</p><p>（附中文翻译：一个傍晚，当太阳落山，这个小镇的大气变得神奇。柔和的灯光点亮了街道，空气中充满了花朵的甜蜜香气。人们四处漫步，享受着宁静的气氛。）</p><hr><h2 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h2><h3 id="分析词义-150"><a href="#分析词义-150" class="headerlink" title="分析词义"></a>分析词义</h3><p>“attach” 是一个动词，意思是“粘附”、“固定”、“附上”或“连接”。在计算机领域，它也有“附加”文件或数据的意思。</p><h3 id="列举例句-149"><a href="#列举例句-149" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>Please attach the receipt to the invoice before you submit it.<br>请在提交前将收据附在发票上。</p></li><li><p>Can you attach the photo to your email and send it to me?<br>你能将照片作为附件通过邮件发给我吗？</p></li><li><p>He attached a label to the gift to indicate who it was for.<br>他在礼物上贴了一个标签，以表明这是给谁的。</p></li></ol><h3 id="词根分析-150"><a href="#词根分析-150" class="headerlink" title="词根分析"></a>词根分析</h3><p>“attach” 来自法语 “attacher”，意为“绑定”或“固定”。词根 “tach” 来自中古英语 “tack”，意为“小钉”。</p><h3 id="词缀分析-150"><a href="#词缀分析-150" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“at-“ 是前缀，表示“朝向”或“在…之上”。</li><li>“-tach” 是词根。</li><li>“-e” 是后缀，常见于动词结尾，没有实际意义。</li></ul><p>其他含有 “-tach” 词根的单词：</p><ul><li>detach（分离）</li><li>attachment（附件）</li></ul><h3 id="发展历史和文化背景-150"><a href="#发展历史和文化背景-150" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“attach” 这个词在英语中已使用了好几个世纪，最初用于描述物理上的附着或固定。随着电子邮件和数字通讯的兴起，它的意义扩展到了虚拟文件的处理。</p><h3 id="单词变形-150"><a href="#单词变形-150" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：attachment</li><li>动词时态：attaches, attached, attaching</li><li>形容词：attachable</li><li>副词：typically, securely</li></ul><p>固定搭配：</p><ul><li>attach to（附上，固定）</li><li>attach importance to（重视）</li></ul><h3 id="记忆辅助-150"><a href="#记忆辅助-150" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “attach” 这个词，可以想象一个人用钉子（tack）将一张纸固定（attach）在公告板上。</p><h3 id="小故事-150"><a href="#小故事-150" class="headerlink" title="小故事"></a>小故事</h3><p>In the office, Tom attached the report to the email and hit send. It was an important document that needed urgent attention. As he waited for a reply, he felt a sense of accomplishment.<br>在办公室里，汤姆将报告作为附件发了邮件，并点击了发送。这是一份重要的文件，需要紧急处理。在等待回复时，他感到了一种成就感。</p><p>办公室里，汤姆将报告附在邮件中并发送出去。这是一份需要紧急关注的文件。在等待回信的过程中，他心中充满了成就感。</p><hr><h2 id="attack"><a href="#attack" class="headerlink" title="attack"></a>attack</h2><h3 id="分析词义-151"><a href="#分析词义-151" class="headerlink" title="分析词义"></a>分析词义</h3><p>“attack” 这个单词通常指的是采取突然和主动的行为去伤害或破坏。它可以用在物理层面，如战争或打斗中的攻击，也可以用在抽象层面，如对某人名誉的攻击。</p><h3 id="列举例句-150"><a href="#列举例句-150" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The army launched an attack on the enemy’s position. <ul><li>军队对敌人的阵地发起了攻击。</li></ul></li><li>Hackers launched a cyber attack on the government’s website.<ul><li>黑客对政府的网站发起了网络攻击。</li></ul></li><li>He felt he was under attack when his boss criticized his work in front of everyone.<ul><li>当他的老板在众人面前批评他的工作时，他感觉自己受到了攻击。</li></ul></li></ol><h3 id="词根分析-151"><a href="#词根分析-151" class="headerlink" title="词根分析"></a>词根分析</h3><p>“attack” 这个词没有明显的词根，它可能源自古法语 “attaque”，意为“急速前进”。</p><h3 id="词缀分析-151"><a href="#词缀分析-151" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“attack” 本身没有明显的词缀，但它可以添加前缀或后缀形成其他单词。<ul><li>例如：counter-attack（反击），attackable（可攻击的）</li></ul></li></ul><h3 id="发展历史和文化背景-151"><a href="#发展历史和文化背景-151" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“attack” 这个词的历史可以追溯到13世纪，最初用于描述军事行动。随着时间的发展，它的含义扩展到任何形式的侵犯或抨击。</p><h3 id="单词变形-151"><a href="#单词变形-151" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：attacks（复数形式）</li><li>动词：attacks, attacking, attacked</li><li>形容词：attackable</li><li>副词：attackingly</li></ul><h3 id="记忆辅助-151"><a href="#记忆辅助-151" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过联想记忆来记住”attack”这个词。例如，你可以想象一个穿着盔甲（armor）的人突然（suddenly）发起了攻击（attack），因为“盔甲人突然攻击”。</p><h3 id="小故事-151"><a href="#小故事-151" class="headerlink" title="小故事"></a>小故事</h3><p>Tom’s village was under attack by a group of bandits. People were scared, but Tom was brave. He gathered the villagers and planned a counter-attack. They fought back and the bandits fled.</p><p>汤姆的村庄遭到了一群土匪的攻击。人们都很害怕，但汤姆很勇敢。他召集了村民并计划了一场反击。他们进行了反击，土匪逃走了。</p><p>故事中的关键词 “attack” 描述了村庄遭受的突袭，同时也展现了通过团结和勇气对抗攻击的主题。</p><hr><h2 id="attain"><a href="#attain" class="headerlink" title="attain"></a>attain</h2><h3 id="分析词义-152"><a href="#分析词义-152" class="headerlink" title="分析词义"></a>分析词义</h3><p>“attain” 是一个动词，意思是达到某个目标、水平或状态。它可以用于指达到某种成就、理解、年龄或条件。</p><h3 id="列举例句-151"><a href="#列举例句-151" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>He hopes to attain a high level of fluency in English by the end of the year.<br>他希望到年底能获得很高的英语流利度。</p></li><li><p>After years of hard work, she finally attained her PhD.<br>经过多年的努力，她终于获得了博士学位。</p></li><li><p>The company has attained worldwide recognition for its innovative products.<br>该公司因其创新产品而获得了全球认可。</p></li></ol><h3 id="词根分析-152"><a href="#词根分析-152" class="headerlink" title="词根分析"></a>词根分析</h3><p>“attain” 来自于古法语 “atteinir”，这个词又源于拉丁语 “attinere”，意为“到达、达到”。</p><h3 id="词缀分析-152"><a href="#词缀分析-152" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“at-“ 是一个表示“朝向”的前缀。</li><li>“-tain-“ 是词根，意味着“持有、保持”。</li><li>“-ain” 是动词后缀。</li></ul><p>其他包含 “-tain-“ 词根的单词：</p><ul><li>maintain（维持）</li><li>retain（保留）</li><li>sustain（支撑）</li></ul><h3 id="发展历史和文化背景-152"><a href="#发展历史和文化背景-152" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“attain” 这个词在中世纪英语中开始使用，当时主要用在法律和学术领域，指达到某种法律年龄或学术成就。在现代英语中，它的使用范围已经扩大到生活的各个领域，包括职业目标、个人成就等。</p><h3 id="单词变形-152"><a href="#单词变形-152" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：attainment（成就，达到）</li><li>形容词：attainable（可达到的）</li><li>副词：attainably（可达地）</li></ul><h3 id="记忆辅助-152"><a href="#记忆辅助-152" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记忆 “attain”，可以联想记忆 “at”（在）和 “tain”（保持）。想象你要“保持在”一个目标或状态中，即你已经“达到”了它。</p><h3 id="小故事-152"><a href="#小故事-152" class="headerlink" title="小故事"></a>小故事</h3><p>Tom set himself a goal to attain a healthy lifestyle. He started jogging daily, eating nutritious food, and meditating. After a few months, he felt more energetic and attained a better well-being.</p><p>汤姆设定了一个目标，要达到健康的生活方式。他开始每天慢跑，吃营养食品，并进行冥想。几个月后，他感到更有活力，达到了更好的健康状况。</p><p>汤姆为自己设定了一个健康生活目标。他开始每天慢跑，吃有营养的食物，还做冥想。几个月过去后，他感到精力充沛，实现了更好的健康状态。</p><hr><h2 id="attempt"><a href="#attempt" class="headerlink" title="attempt"></a>attempt</h2><h3 id="分析词义-153"><a href="#分析词义-153" class="headerlink" title="分析词义"></a>分析词义</h3><p>“attempt” 是一个名词或动词，中文意思是“尝试”或“努力去做某事”。它通常指尝试做某事但未必成功。</p><h3 id="列举例句-152"><a href="#列举例句-152" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>He made an attempt to climb the mountain.（他尝试去爬山。）</li><li>Her latest novel is an attempt to explore the complexities of human emotions.（她的最新小说试图探索人类情感的复杂性。）</li><li>I won’t give up; I’ll keep attempting until I succeed.（我不会放弃，我会一直尝试直到成功。）</li></ol><h3 id="词根分析-153"><a href="#词根分析-153" class="headerlink" title="词根分析"></a>词根分析</h3><p>“attempt” 来自于拉丁语 “temptare”，意为“尝试”或“触摸”。词根 “tempt-“ 与 “attempt” 有相同的含义。</p><h3 id="词缀分析-153"><a href="#词缀分析-153" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“at-“ 是一个前缀，有时表示方向或动作的开始，但在这里没有明确的含义。</li><li>“-tempt” 是词根。</li><li>“-t” 和 “-ment” 是后缀，”ment” 通常表示行为或过程，是名词后缀。</li></ul><p>其他包含词根 “tempt” 的单词：</p><ul><li>temptation（诱惑）</li><li>tempt（诱惑，尝试）</li></ul><h3 id="发展历史和文化背景-153"><a href="#发展历史和文化背景-153" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“attempt” 这个词在中世纪英语中首次出现，用来描述尝试或努力去做某事的行为。在欧美文化中，它经常用来表达尽管面对困难或不确定性，仍然去努力的行为。</p><h3 id="单词变形-153"><a href="#单词变形-153" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：attempt</li><li>动词：attempt, attempts (第三人称单数), attempting (现在分词), attempted (过去式和过去分词)</li><li>固定搭配：make an attempt to do something（尝试做某事）</li></ul><h3 id="记忆辅助-153"><a href="#记忆辅助-153" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过联想记忆来记住 “attempt”：想象一个人在 “at”（在）一个很高的 “tempt”（诱惑，这里理解为挑战）面前，他正在尝试（attempt）去克服它。</p><h3 id="小故事-153"><a href="#小故事-153" class="headerlink" title="小故事"></a>小故事</h3><p>Tommy had always wanted to learn to play the piano. One rainy afternoon, he sat down and made his first attempt. Although the notes didn’t sound perfect, he felt a sense of pride in his attempt to fulfill his dream.</p><p>汤姆一直想学弹钢琴。在一个下雨的午后，他坐下来开始了他的第一次尝试。尽管音符听起来并不完美，但他为自己的尝试去实现梦想感到自豪。</p><p>中文翻译：<br>汤姆一直想要学弹钢琴。在一个阴雨的下午，他坐下来进行了他的第一次尝试。音符虽然不那么动听，但他为尝试去实现自己的梦想感到骄傲。</p><hr><h2 id="attendant"><a href="#attendant" class="headerlink" title="attendant"></a>attendant</h2><h3 id="分析词义-154"><a href="#分析词义-154" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Attendant” 是一个多义词，根据不同的上下文，它可以指：</p><ol><li>服务员或助理，如在会议、活动或医院中提供服务的人。</li><li>伴随的或相关的，意味着某事或某物与另一事或物相连或相伴。</li></ol><h3 id="列举例句-153"><a href="#列举例句-153" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The attendant at the gas station cleaned my windshield.<br> 加油站的助手清洗了我的挡风玻璃。</p></li><li><p>The rights of the employees are attendant to their responsibilities.<br>员工的权利与他们的责任是相关的。</p></li><li><p>There were numerous attendants at the royal wedding.<br>在皇家婚礼上有许多服务员。</p></li></ol><h3 id="词根分析-154"><a href="#词根分析-154" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Attendant” 来自于拉丁词 “attendere”，意为“留意、照顾”。词根 “attend” 意味着“照顾、关注”。</p><h3 id="词缀分析-154"><a href="#词缀分析-154" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“att-“ 是词根 “attend” 的简写形式。</li><li>“-ent” 是形容词后缀，通常用来形成由动词派生出来的形容词。</li></ul><p>其他带有 “-ent” 后缀的单词：</p><ul><li>“abundant”（丰富的）</li><li>“obedient”（服从的）</li></ul><h3 id="发展历史和文化背景-154"><a href="#发展历史和文化背景-154" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Attendant” 这个词在历史上与“服务”和“伴随”的概念紧密相关。在中世纪，它经常用来描述那些为贵族服务的仆人或随从。在现代英语中，这个词也用于描述任何形式的伴随或服务性质的职业。</p><h3 id="单词变形-154"><a href="#单词变形-154" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：attendant（服务员），attendants（服务员们）</li><li>形容词：attendant（伴随的，相关的）</li></ul><h3 id="记忆辅助-154"><a href="#记忆辅助-154" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记忆 “attendant”，可以联想 “attend”（参加，关注），加上 “-ant” 后缀，就像是一个“关注并伴随”的角色。</p><h3 id="小故事-154"><a href="#小故事-154" class="headerlink" title="小故事"></a>小故事</h3><p>At the art gallery, an attendant carefully watched over the paintings.<br>在艺术画廊里，一位服务员仔细地看护着画作。</p><p>Tom noticed the attendant’s attention was as vivid as the paintings themselves.<br>汤姆注意到，这位服务员的关注程度和画作一样生动。</p><p>中文翻译：<br>在艺术画廊里，一名服务员仔细地监护着那些画作。<br>汤姆发现，这位服务员的专注程度和那些画作一样引人注目。</p><hr><h2 id="attitude"><a href="#attitude" class="headerlink" title="attitude"></a>attitude</h2><h3 id="分析词义-155"><a href="#分析词义-155" class="headerlink" title="分析词义"></a>分析词义</h3><p>“attitude”是一个名词，它指的是一个人对于某事物或情境的看法、感受和表现出的姿态。在中文中，我们可以将其理解为“态度”。</p><h3 id="列举例句-154"><a href="#列举例句-154" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p><strong>场景：工作</strong></p><ul><li>英文：He has a positive attitude towards his work.</li><li>中文：他对工作持有积极的态度。</li></ul></li><li><p><strong>场景：学习</strong></p><ul><li>英文：The teacher praised the student for her good attitude towards learning.</li><li>中文：老师表扬了学生对学习持有的良好态度。</li></ul></li><li><p><strong>场景：困难</strong></p><ul><li>英文：Facing challenges with the right attitude is key to overcoming them.</li><li>中文：用正确的态度面对挑战是克服它们的关键。</li></ul></li></ol><h3 id="词根分析-155"><a href="#词根分析-155" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“attitude”这个词没有明显的词根，但可以分解为“at”（表示方向或位置）和“titude”，后者可能和“tude”有关，这在英语中常见于表示状态或条件的词尾。</li></ul><h3 id="词缀分析-155"><a href="#词缀分析-155" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“attitude”没有明显的词缀。</li></ul><h3 id="发展历史和文化背景-155"><a href="#发展历史和文化背景-155" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“attitude”这个词来源于拉丁语“aptitudo”，原意是“倾向”或“能力”。在现代英语中，它逐渐演变为描述个人对事物的心理倾向或表现出的行为特征。在欧美文化中，“attitude”常常被强调是个人的一个重要品质，影响着人们的行为和决策。</p><h3 id="单词变形-155"><a href="#单词变形-155" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：attitude</li><li>形容词：attitudinal（表示与态度有关的）</li><li>副词：attitudinally（在态度上）</li></ul><h3 id="记忆辅助-155"><a href="#记忆辅助-155" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住“attitude”这个词，可以联想记忆：“at”代表“在某个位置或情境中”，“titude”听起来像是“tight you do it”，意味着“你在某种情境下的行为表现”，合起来就是“态度”。</p><h3 id="小故事-155"><a href="#小故事-155" class="headerlink" title="小故事"></a>小故事</h3><p>Tom changed his <strong>attitude</strong> towards life after the accident. He became more positive and grateful for every day. </p><p>事故之后，Tom改变了他的<strong>态度</strong>。他变得更加积极，对每一天都充满感激。</p><p>After the accident, Tom began to see life with a new <strong>attitude</strong>. He was once negative, but now he’s full of positivity and gratitude for every single day.</p><p>（事故之后，Tom开始用一种新的<strong>态度</strong>看待生活。他曾经消极，但现在他对每一天都充满积极和感激。）</p><hr><h2 id="attract"><a href="#attract" class="headerlink" title="attract"></a>attract</h2><h3 id="分析词义-156"><a href="#分析词义-156" class="headerlink" title="分析词义"></a>分析词义</h3><p>“attract” 是一个动词，意思是“吸引”，“引起注意”或“引起兴趣”。它描述了一种使物体或人向自己这边来或引起他们注意的能力或行为。</p><h3 id="列举例句-155"><a href="#列举例句-155" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The beautiful flowers attracted a crowd of bees.（美丽的花朵吸引了一群蜜蜂。）</p><ul><li>在这个场景中，“attract”描述了花朵对蜜蜂的吸引力。</li></ul></li><li><p>The movie trailer is designed to attract potential audiences.（电影预告片旨在吸引潜在的观众。）</p><ul><li>这里“attract”用于描述营销策略中吸引顾客的手段。</li></ul></li><li><p>His kind smile attracted many friends.（他友善的微笑吸引了许多朋友。）</p><ul><li>在这个例句中，“attract”描述了人的性格特征对人际关系的积极影响。</li></ul></li></ol><h3 id="词根分析-156"><a href="#词根分析-156" class="headerlink" title="词根分析"></a>词根分析</h3><p>“attract” 的词根是 “tract”，意味着“拉”或“拖”。它来源于拉丁语 “trahere”，意为“to draw”。</p><h3 id="词缀分析-156"><a href="#词缀分析-156" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“at-“ 是前缀，在这里相当于 “to” 或 “toward”，表示方向。</li><li>“-tract-“ 是词根，表示“拉”。</li><li>“-t-“ 和 “-ct-“ 是变化形式，帮助发音。</li><li>“-ract” 是词根的变形，常见于与“拉”相关的动词中。</li></ul><p>其他含有 “tract” 词根的单词：</p><ul><li>contract（收缩）</li><li>distract（分心）</li><li>subtract（减去）</li></ul><h3 id="发展历史和文化背景-156"><a href="#发展历史和文化背景-156" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“attract” 这个词在英语中的使用可以追溯到15世纪晚期，从拉丁语演变而来。在社会和文化的语境中，”attract” 常用于描述各种吸引人的事物，无论是自然界的吸引，还是人际交往中的吸引力。</p><h3 id="单词变形-156"><a href="#单词变形-156" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：attraction（吸引力）</li><li>形容词：attractive（吸引人的）</li><li>副词：attractively（吸引人地）</li><li>现在分词：attracting（正在吸引）</li><li>过去式：attracted（吸引）</li><li>过去分词：attracted（被吸引）</li></ul><h3 id="记忆辅助-156"><a href="#记忆辅助-156" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “attract” 这个词的一个方法是想象一个有吸引力的物体（如磁铁），它将其他物体“拉”向它自己。</p><h3 id="小故事-156"><a href="#小故事-156" class="headerlink" title="小故事"></a>小故事</h3><p>One day, a mysterious artifact was found in the forest. It glowed and attracted many curious villagers. They gathered around, wondering what it could be.（有一天，在森林中发现了一个神秘的物品。它发光并吸引了许多好奇的村民。他们聚集在一起，想知道那是什么。）</p><ul><li>这则故事中，“attracted”描述了神秘物品对村民的吸引力，使他们聚集在一起。</li></ul><hr><h2 id="attractive"><a href="#attractive" class="headerlink" title="attractive"></a>attractive</h2><h3 id="分析词义-157"><a href="#分析词义-157" class="headerlink" title="分析词义"></a>分析词义</h3><p>“attractive” 是一个形容词，意思是“吸引人的”，“引起兴趣的”或“好看的”。它用来描述某人、某物或某种情况具有吸引人的特质，使人愿意接近或关注。</p><h3 id="列举例句-156"><a href="#列举例句-156" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>She is an attractive woman with a beautiful smile.<br>她是一位有着迷人笑容的吸引人的女士。</p></li><li><p>The new movie is very attractive; it has great reviews.<br>这部新电影很有吸引力，评论很好。</p></li><li><p>The company’s offer is attractive, but I need time to consider.<br>这家公司的报价很有吸引力，但我需要时间考虑。</p></li></ol><h3 id="词根分析-157"><a href="#词根分析-157" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“attract” 是词根，意为“吸引”。</li><li>“ive” 是后缀，通常用来形成形容词，表示“有……性质的”。</li></ul><h3 id="词缀分析-157"><a href="#词缀分析-157" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“at-“ 是前缀，源自拉丁语 “ad-“，意为“向，朝”。</li><li>“-tract-“ 是词根，表示“拖，拉”。</li><li>“-ive” 是后缀，表示形容词。</li></ul><h3 id="发展历史和文化背景-157"><a href="#发展历史和文化背景-157" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“attractive” 一词源自拉丁语 “attractus”，意为“被拖拽”。在欧美文化中，这个词常用来形容人们或事物具有吸引力，让人产生好感或兴趣。</p><h3 id="单词变形-157"><a href="#单词变形-157" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：attractiveness</li><li>动词：attract（吸引）</li><li>形容词比较级：more attractive</li><li>形容词最高级：most attractive</li></ul><h3 id="记忆辅助-157"><a href="#记忆辅助-157" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>可以将 “attractive” 和其词根 “attract” 联想在一起，想象一个人或事物具有如此大的吸引力（attract），以至于它变得非常吸引人（attractive）。</p><h3 id="小故事-157"><a href="#小故事-157" class="headerlink" title="小故事"></a>小故事</h3><p>One day, a man walked into a gallery and saw an attractive painting. It depicted a serene landscape with vibrant colors. He was so captivated by its beauty that he decided to buy it immediately.</p><p>有一天，一个人走进了一个画廊，看到了一幅非常吸引人的画。这幅画描绘了一个宁静的风景，颜色鲜艳。他被这幅画的美深深吸引，决定立刻买下来。</p><hr><h2 id="attribute"><a href="#attribute" class="headerlink" title="attribute"></a>attribute</h2><h3 id="分析词义-158"><a href="#分析词义-158" class="headerlink" title="分析词义"></a>分析词义</h3><p>“attribute” 是一个多义词，作为名词时，它指的是某个事物的特性或特点；作为动词，它常常用来表示认为某事或某物属于某人或某事，也可以表示把某个原因归咎于某人或某事。</p><h3 id="列举例句-157"><a href="#列举例句-157" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>As a noun: </p><ul><li><p>The kindness is an attribute of her personality.</p><ul><li>善良是她的个性特点之一。</li></ul></li><li><p>This product has many attributes that make it popular.</p><ul><li>这个产品有很多让它受欢迎的特性。</li></ul></li></ul></li><li><p>As a verb:</p><ul><li><p>People often attribute success to hard work.</p><ul><li>人们常常把成功归因于努力工作。</li></ul></li><li><p>The increase in sales can be attributed to the new marketing strategy.</p><ul><li>销售量的增加可以归功于新的市场营销策略。</li></ul></li></ul></li></ol><h3 id="词根分析-158"><a href="#词根分析-158" class="headerlink" title="词根分析"></a>词根分析</h3><p>“attribute” 的词根是 “tribut”，来源于拉丁语 “tribuere”，意为“分配”或“归属”。</p><h3 id="词缀分析-158"><a href="#词缀分析-158" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“at-“ 是前缀，表示”朝向”或”在…之上”，在这里它改变了词根的意味。</li><li>“-ute” 是词根的变化形式。</li><li>“-ment” 是后缀，通常用来形成名词。</li></ul><p>其他含有相同词根的单词：</p><ul><li>Contribute（贡献）</li><li>Distribute（分配）</li><li>Tributary（支流）</li></ul><h3 id="发展历史和文化背景-158"><a href="#发展历史和文化背景-158" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“attribute” 这个词源自于拉丁语，在中古英语中演变为现代英语的形态。在文化背景上，它可以指人的特质或事物的特点，在哲学和心理学领域也有着广泛的应用。</p><h3 id="单词变形-158"><a href="#单词变形-158" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词: attribute, attributes</li><li>动词: attributes, attributing, attributed, attribution (名词形式，表示归因的行为或过程)</li></ul><h3 id="记忆辅助-158"><a href="#记忆辅助-158" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>“attribute” 可以通过其发音和拼写相似性记忆，它的发音类似于中文的“啊-特-布-兔”，可以想象一个人把一只兔子（特性或原因）放在一个标签（归属）上。</p><h3 id="小故事-158"><a href="#小故事-158" class="headerlink" title="小故事"></a>小故事</h3><p>In the art gallery, a visitor attributed the beauty of the painting to the artist’s skillful use of colors. The vibrant hues, he believed, were the painting’s most notable attributes.</p><p>在艺术画廊里，一位参观者认为这幅画的美归功于艺术家对色彩的熟练运用。他认为，这些生动的颜色是这幅画最显著的特性。</p><p>在画廊里，一位访客把画的美丽归功于艺术家对色彩的巧妙应用。他觉得，那些鲜艳的色彩是画作最引人注目的特点。</p><hr><h2 id="auction"><a href="#auction" class="headerlink" title="auction"></a>auction</h2><h3 id="分析词义-159"><a href="#分析词义-159" class="headerlink" title="分析词义"></a>分析词义</h3><p>auction 这个单词指的是一种公开的售卖方式，人们会在这种活动中公开竞价，出价最高的人可以得到所售的商品或服务。</p><h3 id="列举例句-158"><a href="#列举例句-158" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The antique vase was sold at an auction for a high price.<br>古董花瓶在拍卖会上以高价售出。</p></li><li><p>I plan to attend an auction this weekend to look for some rare books.<br>这个周末我打算去参加一个拍卖会，寻找一些稀有书籍。</p></li><li><p>The auctioneer was skillful in getting the best price for each item.<br>拍卖师很擅长为每件物品争取到最高价。</p></li></ol><h3 id="词根分析-159"><a href="#词根分析-159" class="headerlink" title="词根分析"></a>词根分析</h3><p>auction 这个词来源于拉丁词 “auctus”，意为 “increased” 或 “augmented”，因为拍卖过程中价格会逐渐上升。</p><h3 id="词缀分析-159"><a href="#词缀分析-159" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>auc(t)- 是词根，表示 “increase” 或 “augment”。</li><li>-tion 是后缀，表示名词，通常加在动词后面构成名词。</li></ul><h3 id="发展历史和文化背景-159"><a href="#发展历史和文化背景-159" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>拍卖最早可以追溯到古罗马时期，当时用于出售战争中的战利品或是贵族的财产。在现代，拍卖已经成为艺术品、古董和其他珍贵物品交易的重要方式。</p><h3 id="单词变形-159"><a href="#单词变形-159" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：auctioneer（拍卖师）、auctioning（拍卖过程）</li><li>动词：auction（拍卖）、auctioned（被拍卖）</li><li>形容词：auctionable（可拍卖的）</li></ul><h3 id="记忆辅助-159"><a href="#记忆辅助-159" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>联想记忆法：可以将 “auction” 和 “auctioneer” 一起记忆，拍卖师（auctioneer）在拍卖（auction）过程中起着重要作用。</p><h3 id="小故事-159"><a href="#小故事-159" class="headerlink" title="小故事"></a>小故事</h3><p>Mary attended an auction hoping to buy a painting. The auction was lively, and the bids were rising rapidly. Finally, the auctioneer’s hammer fell, and Mary won the painting with a smile.</p><p>玛丽参加了一场拍卖会，希望能买下一幅画。拍卖会气氛热烈，竞价迅速攀升。最终，拍卖师落下了锤子，玛丽笑着赢得了那幅画。</p><p>在拍卖会上，玛丽希望能买到一幅画。拍卖很激烈，出价很快提高。拍卖师一锤定音，玛丽成功地得到了那幅画。</p><hr><h2 id="audience"><a href="#audience" class="headerlink" title="audience"></a>audience</h2><h3 id="分析词义-160"><a href="#分析词义-160" class="headerlink" title="分析词义"></a>分析词义</h3><p>“audience”这个词在英语中指的是一群聚集在一起听或观看某个表演、演讲或其它形式娱乐的人。它也可以指单独的一个人，在更广泛的意义上，还可以指任何接受信息或内容的群体。</p><h3 id="列举例句-159"><a href="#列举例句-159" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The audience clapped and cheered after the concert.<br>观众在音乐会结束后鼓掌欢呼。</p></li><li><p>She addressed her remarks to the audience gathered in the hall.<br>她对着聚集在大厅里的观众发表了讲话。</p></li><li><p>The audience for this new play is mainly composed of young people.<br>这部新剧的观众主要是由年轻人组成。</p></li></ol><h3 id="词根分析-160"><a href="#词根分析-160" class="headerlink" title="词根分析"></a>词根分析</h3><p>“audience”的词根来自于拉丁语“audire”，意味着“听”。</p><h3 id="词缀分析-160"><a href="#词缀分析-160" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“aud-”是词根，表示“听”。</li><li>“-ience”是后缀，通常与名词相关，表示“状态”或“行为”。</li></ul><h3 id="发展历史和文化背景-160"><a href="#发展历史和文化背景-160" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“audience”这个词源自于中古英语，最早可以追溯到13世纪。它从拉丁语“audientia”演变而来，原意是指“倾听的行为或能力”。随着时间的发展，它的意义扩展到了包含观看在内的接受信息的群体。</p><h3 id="单词变形-160"><a href="#单词变形-160" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：audience（观众）</li><li>复数：audiences（观众们）</li></ul><h3 id="记忆辅助-160"><a href="#记忆辅助-160" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记忆“audience”，可以联想听（aud-）一场音乐会或演讲，而“-ience”可以想象为你身处于其中的“体验”。</p><h3 id="小故事-160"><a href="#小故事-160" class="headerlink" title="小故事"></a>小故事</h3><p>One evening, a famous violinist stepped onto the stage. The audience, filled with anticipation, fell silent. As the first note echoed through the concert hall, everyone was captivated. After the performance, the audience rose in a standing ovation.</p><p>一个夜晚，一位著名的提琴家走上了舞台。充满期待的观众们安静下来。当第一个音符在音乐厅里回响时，所有人都被吸引住了。表演结束后，观众们起立鼓掌。</p><p>在那天晚上，著名的提琴家走上了舞台。满怀期待的观众鸦雀无声。当第一个音符在音乐厅内响起，全场都被迷住了。演出结束，观众们纷纷起立，报以经久不息的掌声。</p><hr><h2 id="authentic"><a href="#authentic" class="headerlink" title="authentic"></a>authentic</h2><h3 id="分析词义-161"><a href="#分析词义-161" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Authentic” 是一个形容词，意味着真实的、可信的或正宗的。它可以用来描述物品、经历或人，表示它们是真实的，没有经过伪造或模仿。</p><h3 id="列举例句-160"><a href="#列举例句-160" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>This painting is an authentic piece of artwork from the famous artist.<br> 这幅画是那位著名艺术家的真迹。</p></li><li><p>If you want authentic Italian cuisine, you should visit this small family-owned restaurant.<br> 如果你想品尝正宗的意大利菜，应该去这家小型的家族餐厅。</p></li><li><p>She’s an authentic person, always true to herself and others.<br> 她是个真诚的人，对自己和他人都始终如一。</p></li></ol><h3 id="词根分析-161"><a href="#词根分析-161" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Authentic” 来自于 “authent-“这个词根，源自希腊语 “authentes”，意为 “author” 或 “original”。</p><h3 id="词缀分析-161"><a href="#词缀分析-161" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“authent-“：词根，表示 “original” 或 “author”。</li><li>“-ic”：后缀，通常用来形成形容词，表示 “having the quality of” 或 “relating to”。</li></ul><h3 id="发展历史和文化背景-161"><a href="#发展历史和文化背景-161" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Authentic” 一词在历史上被用于描述物品或文档的真实性。在文化上，它不仅限于物理对象的真伪，还扩展到了个人行为和经历的真实性。在当今社会，这个词经常被用来强调某物的正宗性或某人的真诚。</p><h3 id="单词变形-161"><a href="#单词变形-161" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：authenticity</li><li>副词：authentically</li></ul><h3 id="记忆辅助-161"><a href="#记忆辅助-161" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>你可以通过 “authentic” 和 “author” 之间的联系来记忆这个单词。”Authentic”的东西就像作者本人一样，是原创的、真实的。</p><h3 id="小故事-161"><a href="#小故事-161" class="headerlink" title="小故事"></a>小故事</h3><p>One day, John visited a small antique shop, hoping to find an authentic piece to add to his collection. To his delight, he discovered a rare, authenticated vase from the 18th century.<br>有一天，约翰参观了一家小型的古董店，希望能找到一件真正的收藏品。让他欣喜的是，他发现了一个来自18世纪、经过认证的罕见花瓶。</p><p>中文翻译：<br>有一天，约翰走进了一家小古董店，希望能找到一件真正的收藏品。让他高兴的是，他发现了一个罕见的、真正的18世纪花瓶。</p><hr><h2 id="author"><a href="#author" class="headerlink" title="author"></a>author</h2><h3 id="分析词义-162"><a href="#分析词义-162" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Author” 这个英文单词指的是写作并创作书籍、文章或其他文学作品的人。在中文里，我们可以把它翻译为“作者”或“作家”。</p><h3 id="列举例句-161"><a href="#列举例句-161" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The author of this novel has won several literary awards.<br>这个小说的作者赢得了好几个文学奖项。（中文翻译）</p></li><li><p>I enjoy reading books by my favorite author.<br>我喜欢读我最喜欢的作者的书。（中文翻译）</p></li><li><p>She aspired to become an author since she was a child.<br>自小她就渴望成为一名作者。（中文翻译）</p></li></ol><h3 id="词根分析-162"><a href="#词根分析-162" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Author” 这个词的词根是 “autor”，来自拉丁语 “auctor”，意思是“创造者”或“发起人”。</p><h3 id="词缀分析-162"><a href="#词缀分析-162" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Auth-“ 是词根部分，表示“原始的”或“创作的”。</li><li>“-or” 是拉丁语的后缀，用于指人。</li></ul><h3 id="发展历史和文化背景-162"><a href="#发展历史和文化背景-162" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Author” 这个词源自拉丁语的 “auctor”，最初在文学和艺术的背景下指的是作品的创作者。在欧洲文化中，作者常常被认为是作品智慧和创意的源泉。</p><h3 id="单词变形-162"><a href="#单词变形-162" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：Author（单数），Authors（复数）</li><li>形容词：Authorial（作者的）</li><li>副词：Authoritatively（权威地）</li></ul><h3 id="记忆辅助-162"><a href="#记忆辅助-162" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “author” 这个词，你可以想象一个拿着笔和纸坐在桌子前创作的“作家”，这个形象可以帮助你联想到 “author”。</p><h3 id="小故事-162"><a href="#小故事-162" class="headerlink" title="小故事"></a>小故事</h3><p>One day, an aspiring author sat by the window, pen in hand, dreaming of writing a bestseller. She was determined to create a world filled with imagination.<br>有一天，一个有抱负的作者坐在窗边，手持钢笔，梦想着写一本畅销书。她决心创造一个充满想象的世界。</p><p>中文翻译：有一天，一个渴望成为作家的人坐在窗边，手里拿着笔，幻想着写一本畅销书。她决心要创造一个充满想象力的世界。</p><hr><h2 id="authoritative"><a href="#authoritative" class="headerlink" title="authoritative"></a>authoritative</h2><h3 id="分析词义-163"><a href="#分析词义-163" class="headerlink" title="分析词义"></a>分析词义</h3><p>“authoritative” 是一个形容词，意思是具有权威性的，值得信赖的，或者有决定权的。它用来形容某人或某事具有明确的权威或者能够让人信服。</p><h3 id="列举例句-162"><a href="#列举例句-162" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The professor’s lecture was very authoritative because he had done extensive research on the topic.</p><ul><li>教授的讲座非常具有权威性，因为他已经在这个课题上做了大量研究。</li></ul></li><li><p>We need an authoritative source to back up our claims.</p><ul><li>我们需要一个权威的来源来支持我们的主张。</li></ul></li><li><p>The book is considered authoritative in the field of astronomy.</p><ul><li>这本书在天文学领域被认为是权威的。</li></ul></li></ol><h3 id="词根分析-163"><a href="#词根分析-163" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“author” 是词根，意为“作者”或“创造者”。</li><li>“-ity” 是后缀，用来形成名词，表示“状态”或“性质”。</li><li>“-ative” 是另一个后缀，通常用来形成形容词，表示“具有……的”。</li></ul><h3 id="词缀分析-163"><a href="#词缀分析-163" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“author-“：表示与作者或创造者相关的。</li><li>“-ity”：形成名词，表示某种性质或状态。</li><li>“-ative”：形成形容词，表示具有某种特质。</li></ul><p>其他带有 “-ative” 后缀的单词：</p><ul><li>creative（创造性的）</li><li>directive（指导的）</li><li>indicative（指示的）</li></ul><h3 id="发展历史和文化背景-163"><a href="#发展历史和文化背景-163" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“authoritative” 一词源自 “author”，在中世纪英语中指的是“编写或创造某物的人”。随着时间的发展，这个词逐渐扩展到描述某事物或某人的权威性或可信度。</p><p>在欧美文化中，”authoritative” 常用来形容那些有专业知识或地位的人或事物，暗示他们的意见或作品是可信赖的。</p><h3 id="单词变形-163"><a href="#单词变形-163" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：authority（权威）</li><li>形容词比较级：more authoritative</li><li>形容词最高级：most authoritative</li></ul><h3 id="记忆辅助-163"><a href="#记忆辅助-163" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “authoritative” 这个词，可以联想记忆法：想象一位“author”（作者）因为他的“-itive”（有能力的）作品而变得“authoritative”（权威的）。</p><h3 id="小故事-163"><a href="#小故事-163" class="headerlink" title="小故事"></a>小故事</h3><p>A journalist was researching for a story and needed an authoritative voice. He found Dr. Smith, a renowned physicist, whose books were considered authoritative on the topic. Dr. Smith provided crucial insights, making the journalist’s article credible.</p><ul><li>一个记者在为一个故事做研究，他需要一位权威的声音。他找到了知名物理学家史密斯博士，他的书籍在该话题上被认为是权威的。史密斯博士提供了关键的见解，使记者的文章变得可信。</li></ul><p>中文翻译：<br>记者为了一个故事在调研，他需要一位有权威的专家。他找到了知名物理学家史密斯博士，因为史密斯博士的书在该领域有着权威性。史密斯博士提供了宝贵的洞见，使得记者的文章显得非常可靠。</p><hr><h2 id="authority"><a href="#authority" class="headerlink" title="authority"></a>authority</h2><h3 id="分析词义-164"><a href="#分析词义-164" class="headerlink" title="分析词义"></a>分析词义</h3><p>“authority” 这个单词在英语中通常指的是一个人或者一个组织拥有的权力、控制力或者决定权。它可以指官方的权力，也可以指在某个领域内的权威。</p><h3 id="列举例句-163"><a href="#列举例句-163" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The police have the authority to arrest criminals.<br>警方有权逮捕罪犯。（官方权力）</p></li><li><p>My father has authority over the family decisions.<br>我父亲有权决定家庭事务。（家庭内的权力）</p></li><li><p>When it comes to cooking, she is the authority in our family.<br>当涉及烹饪时，她是家里的权威。（在某个领域的权威）</p></li></ol><h3 id="词根分析-164"><a href="#词根分析-164" class="headerlink" title="词根分析"></a>词根分析</h3><p>词根 “author” 意味着“创造者”或“创始人”，而 “-ity” 是一个名词后缀，用来形成抽象名词，表示“状态”或“性质”。</p><h3 id="词缀分析-164"><a href="#词缀分析-164" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“author-“：词根，表示“创造者”或“创始人”。</li><li>“-ity”：后缀，表示名词性质，形成表示某种状态或性质的词。</li></ul><h3 id="发展历史和文化背景-164"><a href="#发展历史和文化背景-164" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“authority” 这个词来源于拉丁语 “auctoritas”，最初指的也是一种官方的或者道德上的影响力。在欧美文化中，它不仅与政府或法律机构的权力有关，还涉及到个人或团体在特定领域的专业性和可信度。</p><h3 id="单词变形-164"><a href="#单词变形-164" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：authority</li><li>形容词：authoritative（权威的）</li><li>副词：authoritatively（权威地）</li></ul><h3 id="记忆辅助-164"><a href="#记忆辅助-164" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “authority” 这个词，可以联想记忆：“author”（作者）拥有写出故事和创造世界的“-ity”（能力），就像在一个领域里拥有权力和权威一样。</p><h3 id="小故事-164"><a href="#小故事-164" class="headerlink" title="小故事"></a>小故事</h3><p>One day, a young cook challenged the authority of the famous chef in town. The crowd gathered to witness the cooking battle. With each dish, the young cook demonstrated skill and creativity, surprising everyone. In the end, the famous chef admitted the young cook’s authority in innovative cuisine.</p><p>有一天，一位年轻厨师挑战了镇上著名厨师的权威。人们聚集在一起观看这场烹饪对决。每一道菜，年轻厨师都展现了他的技巧和创新，让所有人惊讶。最后，著名厨师承认年轻厨师在创新料理方面的权威。</p><p>（故事中的单词 “authority” 体现了年轻厨师在烹饪领域的专业性和影响力。）</p><hr><h2 id="authorize"><a href="#authorize" class="headerlink" title="authorize"></a>authorize</h2><h3 id="分析词义-165"><a href="#分析词义-165" class="headerlink" title="分析词义"></a>分析词义</h3><p>“authorize” 是一个动词，意思是官方地允许或批准某事或某人做某事。在中文中，我们可以将其翻译为“授权”或“批准”。</p><h3 id="列举例句-164"><a href="#列举例句-164" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The manager authorized the employee to make the decision.<ul><li>经理授权这位员工做决定。</li></ul></li><li>You need to authorize your credit card before making a purchase.<ul><li>在购物之前，你需要授权你的信用卡。</li></ul></li><li>The new software update will authorize more features for users.<ul><li>新的软件更新将为用户授权更多功能。</li></ul></li></ol><h3 id="词根分析-165"><a href="#词根分析-165" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“author” 是词根，意为“作者”或“创造者”，在这个词中引申为“给予权利”的意思。</li><li>由词根 “author” 衍生出来的其他单词：authority（权威）、authorize（授权）、authorization（授权书）。</li></ul><h3 id="词缀分析-165"><a href="#词缀分析-165" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“authorize” 中 “auto-“ 是前缀，来自希腊语，意为“自己”，这里可以理解为“由自己给予”。</li><li>“-ize” 是后缀，通常加在名词或动词后面，构成动词，表示“使成为”或“使涉及”。</li><li>同样带有 “-ize” 后缀的单词：organize（组织）、recognize（认出）、standardize（标准化）。</li></ul><h3 id="发展历史和文化背景-165"><a href="#发展历史和文化背景-165" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“authorize” 这个词源自于拉丁语 “autorizare”，由 “autor”（权威）和 “izare”（做）组成。在欧美文化中，这个单词常用于法律、商业和行政环境中，强调正式的许可或权利的赋予。</p><h3 id="单词变形-165"><a href="#单词变形-165" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：authorization</li><li>形容词：authorized（被授权的）</li><li>动词不同时态：authorizes（现在时）、authorized（过去时）、authorizing（现在分词）、authorized（过去分词）</li></ul><h3 id="记忆辅助-165"><a href="#记忆辅助-165" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记忆 “authorize”，可以联想记忆：一个作者（author）给自己写的书授权（authorize）给出版社发行。</p><h3 id="小故事-165"><a href="#小故事-165" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was given a special authorize by his boss to close the big deal.<br>汤姆得到了老板的特别授权，去完成这笔大交易。</p><p>中文翻译：<br>汤姆被老板特别授权，去完成那笔大买卖。</p><hr><h2 id="autonomous"><a href="#autonomous" class="headerlink" title="autonomous"></a>autonomous</h2><h3 id="分析词义-166"><a href="#分析词义-166" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Autonomous” 这个单词来源于希腊语，意味着“self-governing”或“self-regulating”。在中文中，它可以被翻译为“自主的”、“自动的”或“自治的”。它描述的是一个能够独立操作或做决定的实体，不受外界控制或影响。</p><h3 id="列举例句-165"><a href="#列举例句-165" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The university is granted autonomous status, allowing it to make its own decisions on curriculum and admissions.</p><ul><li>这所大学被授予了自主地位，允许它自行决定课程和招生事项。</li></ul></li><li><p>Many modern cars have autonomous driving features that assist the driver.</p><ul><li>许多现代汽车拥有帮助司机的自动驾驶功能。</li></ul></li><li><p>The region declared itself autonomous and now operates independently from the central government.</p><ul><li>该地区宣布自己为自治区域，现在独立于中央政府运作。</li></ul></li></ol><h3 id="词根分析-166"><a href="#词根分析-166" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“Auto-“ 是一个前缀，来自希腊语，意味着“self”或“by oneself”。</li><li>“-nomous” 部分来自希腊语的 “nomo-“，意味着“to manage”或“to govern”。</li></ul><h3 id="词缀分析-166"><a href="#词缀分析-166" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>前缀 “auto-“ 在其他单词中，如 “autobiography”（自传）或 “automotive”（汽车的）。</li><li>后缀 “-ous” 通常用来表示形容词，意味着“full of”或“having the quality of”。</li></ul><h3 id="发展历史和文化背景-166"><a href="#发展历史和文化背景-166" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Autonomous” 一词在历史和文化中有着广泛的运用。它最初用于描述能够自我管理的政治实体或地区。在当代，随着技术的发展，这个词也被用来描述无需人工干预即可独立运作的机器或系统。</p><h3 id="单词变形-166"><a href="#单词变形-166" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：autonomy（自治）</li><li>动词：autonomize（使自治）</li><li>形容词比较级：more autonomous</li><li>形容词最高级：most autonomous</li></ul><h3 id="记忆辅助-166"><a href="#记忆辅助-166" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “autonomous” 这个词，可以联想记忆 “auto-“（自动）和 “-nomous”（管理），像是“自动管理”或“自我管理”。</p><h3 id="小故事-166"><a href="#小故事-166" class="headerlink" title="小故事"></a>小故事</h3><p>In a future city, autonomous vehicles ruled the roads. People relied on these self-driving cars to navigate through traffic. One day, a man named Alex hopped into his autonomous car and relaxed as it safely drove him to work.</p><p>在未来的城市里，自动驾驶车辆统治着道路。人们依赖这些自动驾驶汽车来穿越交通。有一天，一个名叫Alex的男人跳进他的自动驾驶汽车，放松地让它安全地把他送到了工作地点。</p><hr><h2 id="autonomy"><a href="#autonomy" class="headerlink" title="autonomy"></a>autonomy</h2><h3 id="分析词义-167"><a href="#分析词义-167" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Autonomy” 这个词来自希腊语，意味着“自我管理”或“自主”。它指的是一个人或一个组织在没有外部控制的情况下，拥有自我决策和行动的能力。</p><h3 id="列举例句-166"><a href="#列举例句-166" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>Universities should have autonomy in their academic programs and research initiatives.<br>大学应该在他们的学术课程和研究计划中拥有自主权。</p></li><li><p>The region was granted autonomy and now makes its own laws.<br>该地区获得了自治权，现在可以自行制定法律。</p></li><li><p>The company values the autonomy of its employees, allowing them to work on their own schedule.<br>这家公司重视员工的自主性，允许他们按自己的时间表工作。</p></li></ol><h3 id="词根分析-167"><a href="#词根分析-167" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“Auto-“ 是一个前缀，表示“自我”或“自动”。</li><li>“-nom-“ 是词根，来自希腊语 “nomos”，意味着“法律”或“管理”。</li><li>“-y” 是一个后缀，通常表示状态或性质。</li></ul><h3 id="词缀分析-167"><a href="#词缀分析-167" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Auto-“ 在其他单词中，如 “automobile”（汽车）或 “autobiography”（自传）也有“自我”或“自动”的含义。</li><li>“-nom-“ 还出现在 “dynasty”（朝代）和 “onomy”（治理）等词中。</li><li>“-y” 这个后缀也出现在 “bankruptcy”（破产）或 “privacy”（隐私）等词中，用来表示某种状态。</li></ul><h3 id="发展历史和文化背景-167"><a href="#发展历史和文化背景-167" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Autonomy” 这个概念在西方政治哲学中有着悠久的历史。它强调个体或集体在没有外部干涉的情况下进行自我管理的权利。在现代，这个词汇广泛应用于各个领域，如教育、政治、商业等，强调独立性和自我决策的重要性。</p><h3 id="单词变形-167"><a href="#单词变形-167" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：Autonomy</li><li>形容词：Autonomous（自主的）</li><li>副词：Autonomously（自主地）</li></ul><h3 id="记忆辅助-167"><a href="#记忆辅助-167" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “autonomy” 这个词，可以联想 “auto”（自动）和 “nom”（法律或管理），想象一个可以自动遵循规则或自我管理的系统。</p><h3 id="小故事-167"><a href="#小故事-167" class="headerlink" title="小故事"></a>小故事</h3><p>In the small town of Meadowville, the local government granted autonomy to its residents. They could now make decisions about community projects autonomously. This empowerment led to the construction of a beautiful new park, which the townspeople decided to name “Autonomy Green.”</p><p>在梅德维尔小镇，地方政府赋予了居民自治权。他们现在可以自主地决定社区项目。这种赋权导致了一个美丽的新公园的建造，镇上的人们决定将其命名为“自治绿”。</p><hr><h2 id="avail"><a href="#avail" class="headerlink" title="avail"></a>avail</h2><h3 id="分析词义-168"><a href="#分析词义-168" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Avail” 是一个英语单词，作为名词，意思是“效用”或“利益”，通常用于表达某事物是否有用或是否能带来帮助。作为动词，它的意思是“利用”或“有益于”。</p><h3 id="列举例句-167"><a href="#列举例句-167" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The medicine was of no avail; the patient’s condition did not improve.（这药没有效果，病人的病情没有改善。）</li><li>He tried to avail himself of the opportunity to learn from the expert.（他试图利用这个机会向专家学习。）</li><li>Time and effort will be wasted if we do not avail ourselves of this resource.（如果我们不利用这个资源，时间和努力将会白费。）</li></ol><h3 id="词根分析-168"><a href="#词根分析-168" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Avail” 来自古法语 “availlez”，意为“有益”或“有用”。这个词根没有明显的组成部分，但在英语中，”av-“ 可能与“有用”或“价值”的概念有关。</p><h3 id="词缀分析-168"><a href="#词缀分析-168" class="headerlink" title="词缀分析"></a>词缀分析</h3><p>“Avail” 本身可以看作是由前缀和词根组成：</p><ul><li>“av-“ 可能是表示价值或优势的前缀。</li><li>“-ail” 可能与动作或状态有关的后缀。</li></ul><p>由于 “avail” 的词缀不常见，没有直接的相同词缀的其他单词。</p><h3 id="发展历史和文化背景-168"><a href="#发展历史和文化背景-168" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Avail” 这个词在中古英语时期开始使用，当时主要用于法律语境中，表示“价值”或“利益”。随着时间的推移，它的意义扩展到更广泛的语境中，用于表达任何事物的有用性或利用价值。</p><h3 id="单词变形-168"><a href="#单词变形-168" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：avail（效用）</li><li>动词：avail oneself of（利用）</li><li>形容词：available（可用的）</li><li>副词：usually no direct adverb form, but one might say “with avail”（有效地）</li></ul><h3 id="记忆辅助-168"><a href="#记忆辅助-168" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “avail” 这个词可以用“有价值的（valuable）利用（use），就是取得利益”的方法来联想。</p><h3 id="小故事-168"><a href="#小故事-168" class="headerlink" title="小故事"></a>小故事</h3><p>In a busy office, John found an old printer that no one used. He cleaned it and made it available for the team. His colleagues were thrilled; the printer was of great avail to their daily tasks.（在一个繁忙的办公室里，约翰发现了一台没人用的旧打印机。他把它清理干净，并让大家可以使用。同事们都很高兴，这台打印机对他们的日常任务非常有帮助。）</p><p>在繁忙的办公室里，约翰找到了一台被遗忘的打印机。他把它清理好，让同事们也能用。同事们都很开心，因为这台打印机大大提高了他们工作的效率。</p><hr><h2 id="available"><a href="#available" class="headerlink" title="available"></a>available</h2><h3 id="分析词义-169"><a href="#分析词义-169" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Available” 这个词在英语中通常用作形容词，意思是“可用的”，“可得到的”，或者“有空的”。它描述的是某物或某人可以被利用或接受某种请求或任务的状态。</p><h3 id="列举例句-168"><a href="#列举例句-168" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>The tickets for the concert are not available anymore.（演唱会的票已经没有了。）</li><li>Are you available for a meeting this afternoon?（你今天下午有空参加会议吗？）</li><li>The new book will be available in stores next month.（新书将在下个月在书店上架。）</li></ol><h3 id="词根分析-169"><a href="#词根分析-169" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Available” 的词根是 “avail”，这个词根来自拉丁语 “availare”，意为“有用”或“有益”。而 “avail” 本身作为动词时，意思是“有益于”或“有助于”。</p><h3 id="词缀分析-169"><a href="#词缀分析-169" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“avai-“ 是词根部分，来源于拉丁语 “availare”。</li><li>“-l-“ 是中缀，用于连接和辅助发音。</li><li>“-able” 是后缀，表示“能够…的”或“适合…的”。</li></ul><p>其他带有 “-able” 后缀的单词：</p><ul><li>Loveable（可爱的）<br>-_readable（可读的）</li><li>Fixable（可修复的）</li></ul><h3 id="发展历史和文化背景-169"><a href="#发展历史和文化背景-169" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Available” 这个词在英语中的使用可以追溯到15世纪，它慢慢从拉丁语发展而来，并在现代英语中广泛使用，尤其在描述商品、服务、时间或人的可用性时。</p><h3 id="单词变形-169"><a href="#单词变形-169" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式：availability（可用性）</li><li>动词形式：avail oneself of（利用）</li><li>形容词比较级：more available</li><li>形容词最高级：most available</li></ul><h3 id="记忆辅助-169"><a href="#记忆辅助-169" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记忆 “available” 这个词时，可以联想 “avi” 像是鸟的简写，而鸟是可以飞来飞去为你提供帮助的，所以 “available” 就是“可得到的，可利用的”。</p><h3 id="小故事-169"><a href="#小故事-169" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was excited to hear that the new video game he wanted was finally available. He rushed to the store and found it on the shelf, waiting for him. He couldn’t wait to play it.</p><p>汤姆很高兴听说他想要的新视频游戏终于有货了。他冲到商店，发现它就在架子上等着他。他迫不及待地想要玩它。</p><p>中文翻译：汤姆听说他一直想要的新视频游戏终于可以买到了，非常激动。他急忙赶到商店，发现它就在货架上等着他。他急不可耐地想玩这个游戏。</p><hr><h2 id="avert"><a href="#avert" class="headerlink" title="avert"></a>avert</h2><h3 id="分析词义-170"><a href="#分析词义-170" class="headerlink" title="分析词义"></a>分析词义</h3><p>“avert” 是一个动词，意思是避免或转移某件事情的发生，通常用于表示避免不好的事情或危险。</p><h3 id="列举例句-169"><a href="#列举例句-169" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>He quickly averted his eyes to avoid looking at the accident scene.<br>他迅速转移视线，避免看到事故现场。</li><li>The driver managed to avert a collision by swerving the car at the last moment.<br>司机在最后一刻打转方向盘，成功避免了一场撞车事故。</li><li>The government has taken measures to avert an economic crisis.<br>政府已经采取措施以避免经济危机。</li></ol><h3 id="词根分析-170"><a href="#词根分析-170" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“aver-“ 是词根，来源于拉丁语 “avertere”，意为“转开，避免”。</li></ul><h3 id="词缀分析-170"><a href="#词缀分析-170" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“-t-“ 和 “-ve-“ 是连接部分，帮助构成动词形式。</li><li>“-rt” 是动词后缀，常见于由拉丁语衍生出的英语动词。</li></ul><h3 id="发展历史和文化背景-170"><a href="#发展历史和文化背景-170" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“avert” 一词源自拉丁语 “avertere”，在古罗马时期就已经存在。它不仅在英语中有着广泛的应用，在其他欧洲语言中也有相似的形式，可见其历史之久远。</p><h3 id="单词变形-170"><a href="#单词变形-170" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式：aversion（厌恶，避免的行为）</li><li>动词过去式&#x2F;过去分词：averted</li></ul><h3 id="记忆辅助-170"><a href="#记忆辅助-170" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “avert”，可以联想记忆 “avert” 读音像 “啊，避开”，帮助你联想到当看到危险或不愉快的事物时，你会“啊”的一声然后避开。</p><h3 id="小故事-170"><a href="#小故事-170" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was walking in the park when a frisbee came flying towards his face.quickly, he averted his head and the frisbee missed him.<br>汤姆在公园里散步时，一个飞盘朝他的脸飞来。他迅速转开头，飞盘没打中他。</p><p>汤姆在公园散步时，一个飞盘突然朝他的脸飞过来。他立刻躲闪，飞盘擦脸而过，没有打中。</p><hr><h2 id="aviation"><a href="#aviation" class="headerlink" title="aviation"></a>aviation</h2><h3 id="分析词义-171"><a href="#分析词义-171" class="headerlink" title="分析词义"></a>分析词义</h3><p>“aviation”这个英文单词指的是与飞行器、航空和飞行业务有关的活动和行业。简单来说，它涉及飞机、直升机、航天飞行等所有与空中航行相关的领域。</p><h3 id="列举例句-170"><a href="#列举例句-170" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>The aviation industry has seen rapid growth in recent years.<br>近几年，航空业发展迅速。<br>（中文翻译：近几年来，航空业已经经历了快速的增长。）</p></li><li><p>Aviation safety is a top priority for pilots and air traffic controllers.<br>航空安全对于飞行员和空中交通管制员来说是最重要的。<br>（中文翻译：对于飞行员和空中交通管制员来说，航空安全是最重要的优先事项。）</p></li><li><p>He has a degree in aviation engineering.<br>他拥有航空工程学位。<br>（中文翻译：他有一个航空工程的学位。）</p></li></ol><h3 id="词根分析-171"><a href="#词根分析-171" class="headerlink" title="词根分析"></a>词根分析</h3><ul><li>“avi-”是词根，来自拉丁语“avis”，意为“鸟”。</li><li>“-ation”是后缀，通常表示“行为”或“过程”。</li></ul><h3 id="词缀分析-171"><a href="#词缀分析-171" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“avi-”前缀与飞行或鸟有关。</li><li>“-ation”后缀通常加在动词后面，形成名词，表示行为或状态。</li></ul><p>其他含有“avi-”词根的单词：</p><ul><li>Avian（形容词）: 与鸟类有关的。</li><li>Aviculture（名词）: 养鸟作为爱好或行业。</li></ul><p>其他含有“-ation”后缀的单词：</p><ul><li>Education（名词）: 教育。</li><li>Graduation（名词）: 毕业。</li></ul><h3 id="发展历史和文化背景-171"><a href="#发展历史和文化背景-171" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“aviation”一词源于19世纪末，随着飞行器的发明和航空业的发展而出现。这个单词很快成为了描述与飞行有关的所有事物的术语。在欧美文化中，航空业不仅是技术进步的象征，也代表了一种探索精神和自由的理念。</p><h3 id="单词变形-171"><a href="#单词变形-171" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词: aviation（航空）</li><li>形容词: avionic（航空电子的）</li></ul><h3 id="记忆辅助-171"><a href="#记忆辅助-171" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住“aviation”这个词，可以联想到“avi-”（鸟）和飞行有关。鸟儿在天空中自由飞翔，而“aviation”涵盖了所有与空中飞行相关的概念。</p><h3 id="小故事-171"><a href="#小故事-171" class="headerlink" title="小故事"></a>小故事</h3><p>John always dreamt of working in aviation. One day, he became a pilot. Flying through the clouds, he felt the freedom of the avian world.<br>约翰一直梦想在航空领域工作。有一天，他成为了一名飞行员。穿越云层时，他体会到了鸟类世界的自由。</p><p>（中文翻译：约翰一直梦想在航空业工作。有一天，他实现了梦想成为一名飞行员。当他穿越云层时，他感受到了鸟类所享有的自由。）</p><hr><h2 id="avoid"><a href="#avoid" class="headerlink" title="avoid"></a>avoid</h2><h3 id="分析词义-172"><a href="#分析词义-172" class="headerlink" title="分析词义"></a>分析词义</h3><p>“avoid” 是一个动词，意思是“防止某事发生”，“躲避”或“避免”。它通常用来描述故意地让开或回避某人、某物或某种情况。</p><h3 id="列举例句-171"><a href="#列举例句-171" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li>It’s important to avoid conflicts at work.<ul><li>在工作中避免冲突是非常重要的。</li></ul></li><li>She tries to avoid crowded places during peak tourist seasons.<ul><li>她在旅游旺季尽量避开拥挤的地方。</li></ul></li><li>To stay healthy, you should avoid eating too much junk food.<ul><li>为了保持健康，你应该避免吃太多垃圾食品。</li></ul></li></ol><h3 id="词根分析-172"><a href="#词根分析-172" class="headerlink" title="词根分析"></a>词根分析</h3><p>“avoid” 来自于古英语 “efodi” 或 “avefiian”，其词根可以追溯到古日耳曼语，意为“离开”或“走开”。</p><h3 id="词缀分析-172"><a href="#词缀分析-172" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“av-“ 是前缀，来自拉丁语 “ab-“，意为“远离”。</li><li>“-oid” 是后缀，但在此单词中不表意，可能是用于形成动词。</li></ul><h3 id="发展历史和文化背景-172"><a href="#发展历史和文化背景-172" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“avoid” 这个词在中古英语时期就已经存在，当时意味着“走开”或“避开”。在现代英语中，它经常用于指避免某些不愉快或危险的情况。在西方文化中，避免冲突和寻求和平解决方式通常被看作是积极的社会行为。</p><h3 id="单词变形-172"><a href="#单词变形-172" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：avoidance（避免）</li><li>形容词：avoidable（可避免的）</li><li>副词：avoidably（可避免地）</li></ul><h3 id="记忆辅助-172"><a href="#记忆辅助-172" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>“avoid” 可以通过记忆词组 “a void” 来帮助记忆，想象一个“空洞”（void）在你面前，你正在“a”（一个）空洞前，所以要“避开”。</p><h3 id="小故事-172"><a href="#小故事-172" class="headerlink" title="小故事"></a>小故事</h3><p>One sunny day, Tom decided to avoid the crowded beach and went for a hike in the mountains instead. He enjoyed the peaceful scenery and fresh air, feeling glad he avoided the beach chaos.</p><p>有一天阳光明媚，汤姆决定避开拥挤的海滩，改为去山区徒步。他享受着宁静的景色和新鲜的空气，感到很高兴自己避开了海滩的混乱。</p><p>中文翻译：<br>在一个阳光明媚的日子里，汤姆决定不去人多的海滩，而是选择去山区徒步。在那里，他欣赏了宁静的风景，呼吸着清新的空气，为自己避开了海滩的喧嚣而感到庆幸。</p><hr><h2 id="award"><a href="#award" class="headerlink" title="award"></a>award</h2><h3 id="分析词义-173"><a href="#分析词义-173" class="headerlink" title="分析词义"></a>分析词义</h3><p>“award” 这个英文单词通常指的是给予某人某物作为对他们的认可或奖励，这种奖励可以是物质的，如奖品、奖金，也可以是荣誉上的，如奖章、证书。</p><h3 id="列举例句-172"><a href="#列举例句-172" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>He was awarded a medal for his bravery in the war.</p><ul><li>他因为在战争中的勇敢行为被授予了一枚奖章。</li></ul></li><li><p>The company awarded its best employees with an all-expense-paid vacation.</p><ul><li>公司为其最佳员工颁发了一份全费用报销的假期作为奖励。</li></ul></li><li><p>The film won the award for the best screenplay at the festival.</p><ul><li>这部电影在电影节上获得了最佳剧本奖。</li></ul></li></ol><h3 id="词根分析-173"><a href="#词根分析-173" class="headerlink" title="词根分析"></a>词根分析</h3><p>“award” 的词根是 “ard”，这个词根并不独立使用，”award” 本身就是一个完整的单词。</p><h3 id="词缀分析-173"><a href="#词缀分析-173" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“aw-“ 是前缀，在这里没有特定的意义，可能是为了帮助形成单词的音节。</li><li>“-ard” 是词干部分，与奖励有关。</li><li>通常，”award” 没有明显的后缀。</li></ul><h3 id="发展历史和文化背景-173"><a href="#发展历史和文化背景-173" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“award” 这个词来源于古英语 “ācernian” 或 “āweardian”，意味着”给予”或”分配”。在中世纪英语中，它演变成了 “award”，并且在法律和荣誉方面有着广泛的应用。</p><h3 id="单词变形-173"><a href="#单词变形-173" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：award, awards</li><li>动词：award, awarded, awarding</li></ul><h3 id="记忆辅助-173"><a href="#记忆辅助-173" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了更好地记住 “award” 这个单词，可以联想记忆，将 “aw-“ 想象成 “啊，-“，表示惊叹，”ard” 可以联想成 “硬”，合起来就是“啊，硬（实）的成果得到了奖励”。</p><h3 id="小故事-173"><a href="#小故事-173" class="headerlink" title="小故事"></a>小故事</h3><p>In the ceremony, the CEO stood up and announced, “The award for the most innovative project goes to Team Alpha.” The team members cheered, their hard work finally awarded.</p><p>在典礼上，CEO站起来宣布：“最具创新项目奖授予Alpha团队。”团队成员欢呼雀跃，他们的辛勤工作终于得到了嘉奖。</p><p>在典礼中，首席执行官站起来说：“最具创新项目的奖项颁给了Alpha团队。”团队成员们欢呼，他们辛勤的努力终于获得了肯定。</p><hr><h2 id="aware"><a href="#aware" class="headerlink" title="aware"></a>aware</h2><h3 id="分析词义-174"><a href="#分析词义-174" class="headerlink" title="分析词义"></a>分析词义</h3><p>“aware” 是一个形容词，意思是意识到或知道某事或某种情况。它涉及到对信息、感觉或环境有认识或理解。</p><h3 id="列举例句-173"><a href="#列举例句-173" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>He is aware of his surroundings at all times.<br>他总是能意识到周围的环境。</p></li><li><p>You need to be aware that the deadline is tomorrow.<br>你需要意识到截止日期是明天。</p></li><li><p>She became aware of someone watching her.<br>她注意到有人在观察她。</p></li></ol><h3 id="词根分析-174"><a href="#词根分析-174" class="headerlink" title="词根分析"></a>词根分析</h3><p>“aware” 的词根并不明显，但可以追溯到古英语 “eware”，意味着“小心”或“警惕”。</p><h3 id="词缀分析-174"><a href="#词缀分析-174" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>无明显前缀或后缀。</li></ul><h3 id="发展历史和文化背景-174"><a href="#发展历史和文化背景-174" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“aware” 这个词最早可以追溯到古英语，它在英语中有着悠久的使用历史。它不仅仅意味着简单的“知道”，还常常和意识到某种情感、危险或责任感有关。</p><h3 id="单词变形-174"><a href="#单词变形-174" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式：awareness（意识）</li><li>动词形式：be aware（意识到）</li></ul><h3 id="记忆辅助-174"><a href="#记忆辅助-174" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>记住 “aware” 这个词，可以联想 “a”（一个）和 “ware”（小心），就像是有一个人一直在提醒你要小心或注意。</p><h3 id="小故事-174"><a href="#小故事-174" class="headerlink" title="小故事"></a>小故事</h3><p>Tom was walking home at night when he became aware of footsteps behind him. He turned and saw a shadowy figure. Scared, he quickened his pace. When he reached a well-lit street, the figure was gone. Tom felt relieved but remained aware of his surroundings.</p><p>汤姆晚上走路回家时，他注意到身后有脚步声。他转身看到了一个模糊的身影。感到害怕，他加快了步伐。当他走到一个光线明亮的街道时，那个身影不见了。汤姆感到松了一口气，但仍然保持着对周围环境的警觉。</p><p>汤姆晚上走路回家时，突然意识到身后有脚步声。他回头一看，发现有个身影。这让他感到害怕，于是他加快了速度。等到走到有灯光的街道，那个身影就不见了。虽然汤姆松了一口气，但他还是继续留意着四周。</p><hr><h2 id="awkward"><a href="#awkward" class="headerlink" title="awkward"></a>awkward</h2><h3 id="分析词义-175"><a href="#分析词义-175" class="headerlink" title="分析词义"></a>分析词义</h3><p>“Awkward” 这个单词是形容词，意思是形容一个人或事物不协调、不灵活、笨拙的，或者形容一个情况使人感到不舒服、尴尬的。</p><h3 id="列举例句-174"><a href="#列举例句-174" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>He has an awkward way of walking, always stumbling over his own feet.<br>他走路的样子很笨拙，总是绊到自己的脚。</p></li><li><p>It was an awkward moment when she realized she had worn the same dress as her friend.<br>当她意识到自己和朋友穿了一样的裙子时，场面十分尴尬。</p></li><li><p>The chair was placed in an awkward position, right in the middle of the doorway.<br>这把椅子被放在了一个尴尬的位置，正好在门口的正中央。</p></li></ol><h3 id="词根分析-175"><a href="#词根分析-175" class="headerlink" title="词根分析"></a>词根分析</h3><p>“Awkward” 这个单词没有明显的词根，但可以分解成 “awk” 和 “ward”。其中 “ward” 通常是一个表示方向的后缀，但在这里它的意义不太明显。”Awk” 可能与古英语中的 “awk”，意味着“不自然的”有关。</p><h3 id="词缀分析-175"><a href="#词缀分析-175" class="headerlink" title="词缀分析"></a>词缀分析</h3><ul><li>“Awk-“：可能是表示负面含义的前缀。</li><li>“-ward”：一般表示方向，但在这里可能是强调某种状态。</li></ul><h3 id="发展历史和文化背景-175"><a href="#发展历史和文化背景-175" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“Awkward” 这个词来源于古英语 “awk”，最初的意思是“不自然的”或“逆向的”。在现代英语中，它主要用来形容人的行为或某个社交场合的不适宜。</p><h3 id="单词变形-175"><a href="#单词变形-175" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词形式：awkwardness</li><li>动词形式（非正式）：to awkwardly（副词形式，表示以笨拙的方式）</li></ul><h3 id="记忆辅助-175"><a href="#记忆辅助-175" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>为了记住 “awkward” 这个词，可以联想记忆：“A”看起来像一个人站得不稳要摔倒，“wk”像两个歪歪扭扭的腿，“ward”可以想象成向一个不舒服的方向移动。</p><h3 id="小故事-175"><a href="#小故事-175" class="headerlink" title="小故事"></a>小故事</h3><p>Tom felt awkward at the party. He spilled his drink on the carpet, and everyone looked at him. Trying to make a joke, he said, “Now the carpet matches my shirt.” Everyone laughed, relieving the tension.</p><p>汤姆在派对上感到很不自在。他不小心把饮料洒在了地毯上，大家都看着他。为了化解尴尬，他开玩笑说：“现在地毯和我的衬衫搭上了。”大家都笑了，气氛缓和了下来。</p><p>中文翻译：<br>汤姆在派对上感到很尴尬。他不小心把饮料洒在了地毯上，大家都看着他。为了打破尴尬，他开玩笑说：“现在地毯和我的衬衫一样了。”大家都笑了，紧张的气氛得以缓解。</p><hr><h2 id="axis"><a href="#axis" class="headerlink" title="axis"></a>axis</h2><h3 id="分析词义-176"><a href="#分析词义-176" class="headerlink" title="分析词义"></a>分析词义</h3><p>“axis” 这个单词在英语中通常指轴线或者中心线。在几何学中，它是指一个通过一个几何体的中心并垂直于其表面的线。在政治或地理领域，它可以指代某个重要的发展或活动轴线。</p><h3 id="列举例句-175"><a href="#列举例句-175" class="headerlink" title="列举例句"></a>列举例句</h3><ol><li><p>In geometry, the axis of a cylinder is the line that passes through the center of the cylinder. </p><ul><li>在几何学中，圆柱体的轴线是通过其中心的线。</li></ul></li><li><p>The city plans to develop an economic axis along the river.</p><ul><li>该市计划沿河发展一个经济轴线。</li></ul></li><li><p>The axis of rotation for the earth is an imaginary line through the North and South Poles.</p><ul><li>地球的旋转轴线是一条通过南北极的想象线。</li></ul></li></ol><h3 id="词根分析-176"><a href="#词根分析-176" class="headerlink" title="词根分析"></a>词根分析</h3><p>“axis” 的词根是 “ax”，这个词根来自拉丁语 “axis”，原意是指车轴或轮子上的轴。</p><h3 id="词缀分析-176"><a href="#词缀分析-176" class="headerlink" title="词缀分析"></a>词缀分析</h3><p>“axis” 本身可以看作是一个完整的词根，没有明显的词缀。</p><h3 id="发展历史和文化背景-176"><a href="#发展历史和文化背景-176" class="headerlink" title="发展历史和文化背景"></a>发展历史和文化背景</h3><p>“axis” 这个词源自拉丁语，它在古罗马时期就已经存在，最初用来描述物体转动的中心轴线。在第二次世界大战期间，”Axis Powers”（轴心国）这个词汇因意大利、德国和日本的联盟而广为人知。</p><h3 id="单词变形-176"><a href="#单词变形-176" class="headerlink" title="单词变形"></a>单词变形</h3><ul><li>名词：axis（单数），axes（复数）</li><li>无特定动词形式，但可用作动词短语，如 “to rotate on an axis”（绕轴旋转）</li></ul><h3 id="记忆辅助-176"><a href="#记忆辅助-176" class="headerlink" title="记忆辅助"></a>记忆辅助</h3><p>“axis” 这个单词可以通过想象一个地球仪上的旋转轴线来记忆，这条线穿过地球的南北极，地球绕着它转动。</p><h3 id="小故事-176"><a href="#小故事-176" class="headerlink" title="小故事"></a>小故事</h3><p>Tommy was given a globe for his birthday. As he rotated it, he noticed the thin line running from top to bottom, which his teacher called the “axis”. He realized that the earth spins around this axis, creating day and night.</p><p>汤姆在生日时收到了一个地球仪。当他旋转它时，他注意到了从上到下的一条细线，他的老师称之为“轴线”。他意识到地球绕着这条轴线旋转，形成了昼夜更替。</p><p>中文翻译：汤姆在生日那天收到了一个地球仪作为礼物。当他转动地球仪时，他注意到了从地球仪顶部贯穿到底部的一条细线，他的老师告诉他说这叫“轴线”。他意识到地球就是绕着这条轴线旋转，从而产生了白天和黑夜。</p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习常见领域记录</title>
    <link href="/2024/10/07/ml-algorithm/"/>
    <url>/2024/10/07/ml-algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="机器学习记录"><a href="#机器学习记录" class="headerlink" title="机器学习记录"></a>机器学习记录</h1><p>之前做过一篇偏课内的笔记 <a href="https://iamlihua.github.io/2024/06/09/ml-learn/">机器学习复习 - I am LiHua</a></p><h2 id="半监督学习-amp-自监督学习"><a href="#半监督学习-amp-自监督学习" class="headerlink" title="半监督学习&amp;自监督学习"></a>半监督学习&amp;自监督学习</h2><p><a href="https://blog.csdn.net/qq_44015059/article/details/106448533">一文看懂半监督学习(Semi-supervised Learning)和自监督学习(Self-Supervised Learning)</a></p><blockquote><p>将大量的无类标签的样例加入到有限的有类标签的样本中一起训练来进行学习，期望能对学习性能起到改进的作用</p></blockquote><p>自监督学习是一种无监督学习的方法</p><h2 id="对比学习"><a href="#对比学习" class="headerlink" title="对比学习"></a>对比学习</h2><p><a href="https://blog.csdn.net/jcfszxc/article/details/135381129">【深度学习：（Contrastive Learning） 对比学习】深入浅出讲解对比学习</a></p><blockquote><p>在学习到的嵌入空间中，相似的实例应靠得更近，而不相似的实例应离得更远</p></blockquote><p>对比学习是自监督学习的一个子集</p><h2 id="元学习"><a href="#元学习" class="headerlink" title="元学习"></a>元学习</h2><p><a href="https://zhuanlan.zhihu.com/p/136975128">一文入门元学习（Meta-Learning）（附代码）</a></p><img src="https://pic4.zhimg.com/v2-2155d09e7227f572140b5e01c420daf7.webp" alt="img" style="zoom:50%;"><blockquote><p>二者的目的都是找一个Function，只是两个Function的功能不同，要做的事情不一样。机器学习中的Function直接作用于特征和标签，去寻找特征与标签之间的关联；而元学习中的Function是用于寻找新的f，新的f才会应用于具体的任务。</p></blockquote><p>有点像 普通方程和微分方程的区别</p><h2 id="小样本学习"><a href="#小样本学习" class="headerlink" title="小样本学习"></a>小样本学习</h2><p><a href="https://blog.csdn.net/zhaohongfei_358/article/details/124057980">【学习笔记】小样本学习（Few-shot Learning）_小样本训练</a></p><p><a href="https://zhuanlan.zhihu.com/p/61215293">小样本学习（Few-shot Learning）</a></p><blockquote><p>可以学习一个相似度函数sim(x,x’) 来判定样本x和x’的相似度，相似度越高，表示这两个样本越可能是同一个类别。例如，可以通过一个很大的数据集学习出一个相似度函数，然后用该函数进行预测。</p></blockquote><p>元学习可以用于小样本学习</p><h2 id="迁移学习"><a href="#迁移学习" class="headerlink" title="迁移学习"></a>迁移学习</h2><p><a href="https://blog.csdn.net/dakenz/article/details/85954548">迁移学习概述（Transfer Learning）</a></p><blockquote><p>将某个领域或任务上学习到的知识或模式应用到不同但相关的领域或问题中。</p></blockquote><p>会看源数据和目标数据的分布差别&#x2F;使用共享参数这样的方法</p><h2 id="大模型的微调"><a href="#大模型的微调" class="headerlink" title="大模型的微调"></a>大模型的微调</h2><p><a href="https://community.modelscope.cn/66f907112db35d1195f223b8.html">【大模型微调】一文掌握7种大模型微调的方法</a></p><blockquote><p>文章探讨了大型模型微调的技术手段，包括全面微调和参数高效微调（PEFT），并详细介绍了PEFT中的各种方法，如LoRA、QLoRA、适配器调整、前缀调整、提示调整、P-Tuning及P-Tuning v2等。</p></blockquote><p>大模型的微调是迁移学习的一种形式</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="多模态学习"><a href="#多模态学习" class="headerlink" title="多模态学习"></a>多模态学习</h3><p><a href="https://zhuanlan.zhihu.com/p/582878508">多模态学习综述(MultiModal Learning) </a></p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zst文件解压</title>
    <link href="/2024/09/05/zst-wen-jian-jie-ya/"/>
    <url>/2024/09/05/zst-wen-jian-jie-ya/</url>
    
    <content type="html"><![CDATA[<h1 id="zst文件解压-windows"><a href="#zst文件解压-windows" class="headerlink" title="zst文件解压-windows"></a>zst文件解压-windows</h1><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>在linux下可以用tar命令解压zst文件</p><p><a href="https://blog.csdn.net/sevendays_7/article/details/111282640">tar.zst 文件格式解压-CSDN博客</a></p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>在windows下：</p><ol><li><p><a href="https://github.com/facebook/zstd/releases">Releases · facebook&#x2F;zstd (github.com)</a></p></li><li><p><code>zstd -d filename.zst</code></p></li></ol><p>linux应该也可以用这个方法</p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强化学习入门</title>
    <link href="/2024/07/23/rl-learn/"/>
    <url>/2024/07/23/rl-learn/</url>
    
    <content type="html"><![CDATA[<h1 id="强化学习入门"><a href="#强化学习入门" class="headerlink" title="强化学习入门"></a>强化学习入门</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/datawhalechina/easy-rl">datawhalechina&#x2F;easy-rl: 强化学习中文教程（蘑菇书🍄）</a></p><p><a href="https://hrl.boyuai.com/">动手学强化学习 (boyuai.com)</a></p><h2 id="关于DQN"><a href="#关于DQN" class="headerlink" title="关于DQN"></a>关于DQN</h2><h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/qq_74722169/article/details/137471413">https://blog.csdn.net/qq_74722169/article/details/137471413</a></p><p><a href="https://hrl.boyuai.com/chapter/2/dqn%E7%AE%97%E6%B3%95">DQN 算法 (boyuai.com)</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> gym<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> collections<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReplayBuffer</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27; 经验回放池 &#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, capacity</span>):<br>        self.buffer = collections.deque(maxlen=capacity)  <span class="hljs-comment"># 队列,先进先出</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, state, action, reward, next_state, done</span>):  <span class="hljs-comment"># 将数据加入buffer</span><br>        self.buffer.append((state, action, reward, next_state, done))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sample</span>(<span class="hljs-params">self, batch_size</span>):  <span class="hljs-comment"># 从buffer中采样数据,数量为batch_size</span><br>        transitions = random.sample(self.buffer, batch_size)<br>        state, action, reward, next_state, done = <span class="hljs-built_in">zip</span>(*transitions)<br>        <span class="hljs-keyword">return</span> np.array(state), action, reward, np.array(next_state), done<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">size</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 目前buffer中数据的数量</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.buffer)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Qnet</span>(torch.nn.Module):<br>    <span class="hljs-string">&#x27;&#x27;&#x27; 只有一层隐藏层的Q网络 &#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, state_dim, hidden_dim, action_dim</span>):<br>        <span class="hljs-built_in">super</span>(Qnet, self).__init__()<br>        self.fc1 = torch.nn.Linear(state_dim, hidden_dim)<br>        self.fc2 = torch.nn.Linear(hidden_dim, action_dim)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = F.relu(self.fc1(x))  <span class="hljs-comment"># 隐藏层使用ReLU激活函数</span><br>        <span class="hljs-keyword">return</span> self.fc2(x)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DQN</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27; DQN算法 &#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, state_dim, hidden_dim, action_dim, learning_rate, gamma,</span><br><span class="hljs-params">                 epsilon, target_update, device</span>):<br>        self.action_dim = action_dim<br>        self.q_net = Qnet(state_dim, hidden_dim,<br>                          self.action_dim).to(device)  <span class="hljs-comment"># Q网络</span><br>        <span class="hljs-comment"># 目标网络</span><br>        self.target_q_net = Qnet(state_dim, hidden_dim,<br>                                 self.action_dim).to(device)<br>        <span class="hljs-comment"># 使用Adam优化器</span><br>        self.optimizer = torch.optim.Adam(self.q_net.parameters(),<br>                                          lr=learning_rate)<br>        self.gamma = gamma  <span class="hljs-comment"># 折扣因子</span><br>        self.epsilon = epsilon  <span class="hljs-comment"># epsilon-贪婪策略</span><br>        self.target_update = target_update  <span class="hljs-comment"># 目标网络更新频率</span><br>        self.count = <span class="hljs-number">0</span>  <span class="hljs-comment"># 计数器,记录更新次数</span><br>        self.device = device<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">take_action</span>(<span class="hljs-params">self, state</span>):  <span class="hljs-comment"># epsilon-贪婪策略采取动作</span><br>        <span class="hljs-keyword">if</span> np.random.random() &lt; self.epsilon:<br>            action = np.random.randint(self.action_dim)<br>        <span class="hljs-keyword">else</span>:<br>            state = torch.tensor([state], dtype=torch.<span class="hljs-built_in">float</span>).to(self.device)<br>            action = self.q_net(state).argmax().item()<br>        <span class="hljs-keyword">return</span> action<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, transition_dict</span>):<br>        states = torch.tensor(transition_dict[<span class="hljs-string">&#x27;states&#x27;</span>],<br>                              dtype=torch.<span class="hljs-built_in">float</span>).to(self.device)<br>        actions = torch.tensor(transition_dict[<span class="hljs-string">&#x27;actions&#x27;</span>]).view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>).to(self.device)<br>        rewards = torch.tensor(transition_dict[<span class="hljs-string">&#x27;rewards&#x27;</span>],<br>                               dtype=torch.<span class="hljs-built_in">float</span>).view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>).to(self.device)<br>        next_states = torch.tensor(transition_dict[<span class="hljs-string">&#x27;next_states&#x27;</span>],<br>                                   dtype=torch.<span class="hljs-built_in">float</span>).to(self.device)<br>        dones = torch.tensor(transition_dict[<span class="hljs-string">&#x27;dones&#x27;</span>],<br>                             dtype=torch.<span class="hljs-built_in">float</span>).view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>).to(self.device)<br><br>        q_values = self.q_net(states).gather(<span class="hljs-number">1</span>, actions)  <span class="hljs-comment"># Q值</span><br>        <span class="hljs-comment"># 下个状态的最大Q值</span><br>        max_next_q_values = self.target_q_net(next_states).<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>].view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>        q_targets = rewards + self.gamma * max_next_q_values * (<span class="hljs-number">1</span> - dones)  <span class="hljs-comment"># TD误差目标</span><br>        dqn_loss = torch.mean(F.mse_loss(q_values, q_targets))  <span class="hljs-comment"># 均方误差损失函数</span><br>        self.optimizer.zero_grad()  <span class="hljs-comment"># PyTorch中默认梯度会累积,这里需要显式将梯度置为0</span><br>        dqn_loss.backward()  <span class="hljs-comment"># 反向传播更新参数</span><br>        self.optimizer.step()<br><br>        <span class="hljs-keyword">if</span> self.count % self.target_update == <span class="hljs-number">0</span>:<br>            self.target_q_net.load_state_dict(<br>                self.q_net.state_dict())  <span class="hljs-comment"># 更新目标网络</span><br>        self.count += <span class="hljs-number">1</span><br><br><br>lr = <span class="hljs-number">2e-3</span><br>num_episodes = <span class="hljs-number">500</span><br>hidden_dim = <span class="hljs-number">128</span><br>gamma = <span class="hljs-number">0.98</span><br>epsilon = <span class="hljs-number">0.01</span><br>target_update = <span class="hljs-number">10</span><br>buffer_size = <span class="hljs-number">10000</span><br>minimal_size = <span class="hljs-number">500</span><br>batch_size = <span class="hljs-number">64</span><br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>) <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> torch.device(<span class="hljs-string">&quot;cpu&quot;</span>)<br><br>env_name = <span class="hljs-string">&#x27;CartPole-v0&#x27;</span><br>env = gym.make(env_name)<br>random.seed(<span class="hljs-number">0</span>)<br>np.random.seed(<span class="hljs-number">0</span>)<br>env.seed(<span class="hljs-number">0</span>)<br>torch.manual_seed(<span class="hljs-number">0</span>)<br>replay_buffer = ReplayBuffer(buffer_size)<br>state_dim = env.observation_space.shape[<span class="hljs-number">0</span>]<br>action_dim = env.action_space.n<br>agent = DQN(state_dim, hidden_dim, action_dim, lr, gamma, epsilon,<br>            target_update, device)<br><br>return_list = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">with</span> tqdm(total=<span class="hljs-built_in">int</span>(num_episodes / <span class="hljs-number">10</span>), desc=<span class="hljs-string">&#x27;Iteration %d&#x27;</span> % i) <span class="hljs-keyword">as</span> pbar:<br>        <span class="hljs-keyword">for</span> i_episode <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(num_episodes / <span class="hljs-number">10</span>)):<br>            episode_return = <span class="hljs-number">0</span><br>            state = env.reset()<br>            done = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> done:<br>                action = agent.take_action(state)<br>                next_state, reward, done, _ = env.step(action)<br>                replay_buffer.add(state, action, reward, next_state, done)<br>                state = next_state<br>                episode_return += reward<br>                <span class="hljs-comment"># 当buffer数据的数量超过一定值后,才进行Q网络训练</span><br>                <span class="hljs-keyword">if</span> replay_buffer.size() &gt; minimal_size:<br>                    b_s, b_a, b_r, b_ns, b_d = replay_buffer.sample(batch_size)<br>                    transition_dict = &#123;<br>                        <span class="hljs-string">&#x27;states&#x27;</span>: b_s,<br>                        <span class="hljs-string">&#x27;actions&#x27;</span>: b_a,<br>                        <span class="hljs-string">&#x27;next_states&#x27;</span>: b_ns,<br>                        <span class="hljs-string">&#x27;rewards&#x27;</span>: b_r,<br>                        <span class="hljs-string">&#x27;dones&#x27;</span>: b_d<br>                    &#125;<br>                    agent.update(transition_dict)<br>            return_list.append(episode_return)<br>            <span class="hljs-keyword">if</span> (i_episode + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>                pbar.set_postfix(&#123;<br>                    <span class="hljs-string">&#x27;episode&#x27;</span>:<br>                        <span class="hljs-string">&#x27;%d&#x27;</span> % (num_episodes / <span class="hljs-number">10</span> * i + i_episode + <span class="hljs-number">1</span>),<br>                    <span class="hljs-string">&#x27;return&#x27;</span>:<br>                        <span class="hljs-string">&#x27;%.3f&#x27;</span> % np.mean(return_list[-<span class="hljs-number">10</span>:])<br>                &#125;)<br>            pbar.update(<span class="hljs-number">1</span>)<br><br>episodes_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(return_list)))<br>plt.plot(episodes_list, return_list)<br>plt.xlabel(<span class="hljs-string">&#x27;Episodes&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Returns&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;DQN on &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(env_name))<br>plt.show()<br><br></code></pre></td></tr></table></figure><p>注意<code>gym</code>版本，不能过高</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install gym==0.25.2<br></code></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/2024/07/23/rl-learn/image-20240723173046070.png" alt="运行结果"></p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习复习</title>
    <link href="/2024/06/09/ml-learn/"/>
    <url>/2024/06/09/ml-learn/</url>
    
    <content type="html"><![CDATA[<h1 id="机器学习复习"><a href="#机器学习复习" class="headerlink" title="机器学习复习"></a>机器学习复习</h1><p><em>这是一篇非常不完整的学习笔记，只会记录一些我觉得需要记录的东西</em></p><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="归纳偏置"><a href="#归纳偏置" class="headerlink" title="归纳偏置"></a>归纳偏置</h3><p>在机器学习中，<em><strong>归纳偏置</strong></em>（Inductive bias）指的是学习算法在学习过程中对特定解决方案的偏好或倾向。它描述了学习算法在面对有限数据和不确定性时，如何做出合理的预测和泛化。</p><p>更直白地说，归纳偏置可以理解为学习算法对世界的“假设”。这些假设可以帮助算法更好地理解训练数据，并做出更准确的预测。</p><p>举个例子，假设我们正在训练一个用于图像识别的机器学习模型。该模型需要学习如何将图像中的对象分类为不同的类别，例如猫、狗或汽车。为了做到这一点，模型需要对图像中的物体可能是什么以及它们可能如何出现做出一些假设。</p><p>例如，模型可以假设猫通常有四条腿和胡须，而狗通常有四条腿和耷拉着的耳朵。这些假设可以帮助模型更好地理解训练数据，并做出更准确的预测。</p><p>归纳偏置在机器学习中起着重要作用。它可以帮助算法：</p><ul><li><strong>提高泛化能力：</strong>泛化能力是指算法在遇到新数据时做出准确预测的能力。归纳偏置可以帮助算法学习更一般的模式，从而提高泛化能力。</li><li><strong>减少过拟合：</strong>过拟合是指算法在训练数据上表现非常好，但在新数据上表现很差。归纳偏置可以帮助算法避免过拟合，从而提高泛化能力。</li><li><strong>提高学习效率：</strong>归纳偏置可以帮助算法更快地学习，因为它可以减少需要考虑的假设数量。</li></ul><p>常用的归纳偏置包括：</p><ul><li><strong>奥卡姆剃刀（Occam’s razor）：</strong>奥卡姆剃刀是一种原则，认为在解释现象时，应尽量选择简单而有效的假设。在机器学习中，奥卡姆剃刀可以用来选择具有较少参数的模型。</li><li><strong>正则化（Regularization）：</strong>正则化是一种技术，用于惩罚模型的复杂度。通过正则化，可以避免模型过拟合训练数据。</li><li><strong>先验知识（Prior knowledge）：</strong>先验知识是指在学习之前已知的关于世界的信息。先验知识可以用来约束模型的假设，从而提高泛化能力。</li></ul><p>归纳偏置是机器学习中一个重要概念。它可以帮助算法更好地学习和泛化，从而提高机器学习模型的性能。</p><h4 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h4><p>卷积神经网络（CNN）具有以下两个重要的归纳偏置：</p><ul><li><strong>局部性（Locality）：</strong>CNN假设图像中的相邻像素点是相关的。这意味着局部区域内的像素点比相距较远的像素点更相关。这种归纳偏置反映了自然图像的统计特性，即相邻像素点往往具有相同的颜色或纹理。</li><li><strong>平移不变性（Translation invariance）：</strong>CNN假设图像内容的平移不会改变其类别。这意味着图像在空间上平移后，CNN应该输出相同的类别预测。这种归纳偏置反映了自然图像的另一个统计特性，即物体的类别与其在图像中的位置无关。</li></ul><p>这两个归纳偏置使得 CNN 能够很好地学习图像特征，并应用于图像分类、目标检测等任务。</p><p>具体来说，CNN 中的卷积操作可以实现局部性，而权重共享机制则可以实现平移不变性。</p><ul><li><strong>卷积操作：</strong>卷积操作可以提取图像局部区域的特征。在卷积操作中，一个滤波器会被应用于图像的局部区域，以提取该区域的特征。由于相邻像素点是相关的，因此卷积操作可以有效地提取图像的局部特征。</li><li><strong>权重共享机制：</strong>CNN 中的权重共享机制是指同一层中的所有滤波器共享相同的权重。这意味着不同位置的局部区域会被用相同的权重来提取特征。由于平移不变性，因此权重共享机制可以确保图像内容的平移不会改变 CNN 的输出。</li></ul><p>由于 CNN 具有局部性和平移不变性这两个归纳偏置，因此它能够很好地学习图像特征，并应用于图像分类、目标检测等任务。</p><p>此外，CNN 还具有以下一些其他归纳偏置：</p><ul><li><strong>尺度不变性（Scale invariance）：</strong>CNN 假设图像内容的缩放不会改变其类别。</li><li><strong>旋转不变性（Rotation invariance）：</strong>CNN 假设图像内容的旋转不会改变其类别。</li><li><strong>不变性组合（Composition of invariances）：</strong>CNN 可以组合多个不变性，例如尺度不变性和旋转不变性，以学习更复杂的特征。</li></ul><p>这些归纳偏置使得 CNN 能够更加有效地学习图像特征，并应用于更广泛的任务。</p><p>总而言之，CNN 具有多种归纳偏置，这些偏置使得 CNN 能够很好地学习图像特征，并应用于图像分类、目标检测等任务。</p><h4 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h4><p>循环神经网络（RNN）具有以下两个重要的归纳偏置：</p><ul><li><strong>序列性（Sequentiality）：</strong>RNN 假设序列中的元素是相互依赖的。这意味着序列中前一个元素的信息可以帮助理解后一个元素。这种归纳偏置反映了自然语言和时间序列数据的统计特性，即序列中的元素往往存在顺序关系。</li><li><strong>时间不变性（Time invariance）：</strong>RNN 假设模型在处理序列的不同时间步时具有相同的行为。这意味着模型的参数在不同的时间步之间共享。这种归纳偏置可以提高模型的效率，并减少模型的参数数量。</li></ul><p>这两个归纳偏置使得 RNN 能够很好地学习序列数据中的依赖关系，并应用于自然语言处理、时间序列预测等任务。</p><p>具体来说，RNN 中的循环连接可以实现序列性，而权重共享机制则可以实现时间不变性。</p><ul><li><strong>循环连接：</strong>RNN 中的每个神经元都与它自己在上一个时间步的状态相连接。这意味着 RNN 可以利用序列中前一个元素的信息来理解后一个元素。</li><li><strong>权重共享机制：</strong>RNN 中的不同时间步共享相同的参数。这意味着 RNN 在处理序列的不同时间步时具有相同的行为。</li></ul><p>由于 RNN 具有序列性和时间不变性这两个归纳偏置，因此它能够很好地学习序列数据中的依赖关系，并应用于自然语言处理、时间序列预测等任务。</p><p>此外，RNN 还具有以下一些其他归纳偏置：</p><ul><li><strong>平滑性（Smoothness）：</strong>RNN 假设序列中的元素是平滑变化的。这意味着相邻时间步之间的元素差异较小。</li><li><strong>局部依赖性（Local dependency）：</strong>RNN 假设序列中元素之间的依赖关系是局部的。这意味着只有相邻的元素之间存在依赖关系。</li></ul><p>这些归纳偏置使得 RNN 能够更加有效地学习序列数据中的依赖关系，并应用于更广泛的任务。</p><p>总而言之，RNN 具有多种归纳偏置，这些偏置使得 RNN 能够很好地学习序列数据中的依赖关系，并应用于自然语言处理、时间序列预测等任务。</p><h2 id="模型评估与选择"><a href="#模型评估与选择" class="headerlink" title="模型评估与选择"></a>模型评估与选择</h2><h3 id="精确率-amp-召回率"><a href="#精确率-amp-召回率" class="headerlink" title="精确率&amp;召回率"></a>精确率&amp;召回率</h3><p>精确率：查准率</p><p>召回率：查准率</p><p>精确率和召回率是两个常用的分类模型评价指标，用于衡量模型的性能。</p><p><strong>精确率</strong>（Precision）是指模型预测为正例的样本中，实际为正例的样本的比例。换句话说，就是预测正确的结果占所有预测结果的比例。</p><p><strong>公式</strong>：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">精确率 = TP / (TP + <span class="hljs-built_in">FP</span>)<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li>TP：真正例（True Positive），指模型预测为正例且实际为正例的样本数。</li><li>FP：假正例（False Positive），指模型预测为正例但实际为负例的样本数。</li></ul><p><strong>举个例子</strong>：假设我们训练了一个用于垃圾邮件过滤的机器学习模型。该模型需要学习如何将电子邮件分类为垃圾邮件或非垃圾邮件。</p><p>如果该模型将 100 封电子邮件标记为垃圾邮件，其中 80 封确实是垃圾邮件，那么该模型的精确率为 80%。这意味着该模型预测为垃圾邮件的邮件中，有 80% 是真正的垃圾邮件。</p><p><strong>召回率</strong>（Recall）是指实际为正例的样本中，被模型预测为正例的样本的比例。换句话说，就是实际存在的正例中有多少被正确识别出来了。</p><p><strong>公式</strong>：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">召回率 = TP / (TP + <span class="hljs-meta">FN</span>)<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li>FN：假反例（False Negative），指模型预测为负例但实际为正例的样本数。</li></ul><p><strong>使用相同的例子</strong>：如果实际有 100 封垃圾邮件，该模型将 80 封标记为垃圾邮件，那么该模型的召回率为 80%。这意味着实际存在的垃圾邮件中有 80% 被该模型正确识别出来了。</p><p><strong>精确率和召回率</strong>是两个相互矛盾的指标。通常情况下，提高一个指标会降低另一个指标。例如，如果我们提高模型的精确率，这意味着模型会更加谨慎地将邮件标记为垃圾邮件，从而降低召回率，即可能会漏掉一些真正的垃圾邮件。</p><p><strong>在实际应用中</strong>，需要根据具体情况来选择合适的指标或权衡两者之间的关系。例如，对于垃圾邮件过滤系统，如果更重要是尽量减少误报（即提高精确率），那么可以适当降低召回率；如果更重要是尽量不放过任何垃圾邮件（即提高召回率），那么可以适当降低精确率。</p><p>除了精确率和召回率之外，还有一些其他的分类模型评价指标，例如准确率（Accuracy）、F1 值（F1 Score）等。</p><ul><li><strong>准确率</strong>（Accuracy）是指所有样本中预测正确的样本数占总样本数的比例。它是衡量模型总体性能的指标，但对于数据类别分布不均衡的情况可能给出误导性的结果。</li><li><strong>F1 值</strong>（F1 Score）是精确率和召回率的调和平均值，可以综合衡量模型的准确性和召回能力。</li></ul><p><strong>总结</strong>：</p><ul><li>精确率和召回率是两个常用的分类模型评价指标，用于衡量模型的性能。</li><li>精确率是指模型预测为正例的样本中，实际为正例的样本的比例。</li><li>召回率是指实际为正例的样本中，被模型预测为正例的样本的比例。</li><li>精确率和召回率是两个相互矛盾的指标，需要根据具体情况来选择合适的指标或权衡两者之间的关系。</li></ul><h3 id="P-R曲线"><a href="#P-R曲线" class="headerlink" title="P-R曲线"></a>P-R曲线</h3><p><strong>P-R曲线</strong>（Precision-Recall Curve），又称为<strong>精度-召回率曲线</strong>，是用于评估信息检索系统、文本分类系统等性能的一种常用方法。它以<strong>召回率</strong>（Recall）为横轴，以<strong>精确率</strong>（Precision）为纵轴，绘制出一条曲线。</p><p><strong>P-R曲线</strong>可以直观地反映出模型在不同召回率下的精确率水平。曲线越靠近右上角，说明模型的性能越好。</p><p><strong>P-R曲线</strong>的&#x3D;&#x3D;绘制方法&#x3D;&#x3D;如下：</p><ol><li>将样本按照模型预测的概率排序，从高到低排列。</li><li>计算每个排序位置的召回率和精确率。</li><li>将召回率和精确率作为坐标，绘制出一条曲线。</li></ol><p><strong>P-R曲线</strong>的分析方法如下：</p><ol><li>观察曲线的位置：曲线越靠近右上角，说明模型的性能越好。</li><li>观察曲线的形状：曲线越陡峭，说明模型在不同召回率下的精确率变化越快。</li><li>计算曲线下面积：曲线下面积越大，说明模型的整体性能越好。</li></ol><p><strong>P-R曲线</strong>在以下场景中具有广泛的应用：</p><ul><li><strong>信息检索系统</strong>：评估搜索引擎的性能，例如召回率和精确率。</li><li><strong>文本分类系统</strong>：评估垃圾邮件过滤器的性能，例如召回率和精确率。</li><li><strong>推荐系统</strong>：评估推荐算法的性能，例如召回率和精确率。</li><li><strong>自然语言处理</strong>：评估机器翻译系统的性能，例如召回率和精确率。</li></ul><p><strong>P-R曲线</strong>与<strong>ROC曲线</strong>（Receiver Operating Characteristic Curve）是两种常用的分类模型评价指标。<strong>ROC曲线</strong>以<strong>假阳率</strong>（False Positive Rate）为横轴，以<strong>真阳率</strong>（True Positive Rate）为纵轴，绘制出一条曲线。</p><p><strong>P-R曲线</strong>和<strong>ROC曲线</strong>的区别在于：</p><ul><li><strong>P-R曲线</strong>更关注正例的识别情况，而<strong>ROC曲线</strong>则同时关注正例和负例的识别情况。</li><li><strong>P-R曲线</strong>适用于数据类别分布不均衡的情况，而<strong>ROC曲线</strong>则对数据类别分布的均衡性没有要求。</li></ul><p><strong>在实际应用中</strong>，可以根据具体情况来选择合适的指标或权衡两者之间的关系。</p><h3 id="偏差-amp-方差-amp-噪声"><a href="#偏差-amp-方差-amp-噪声" class="headerlink" title="偏差&amp;方差&amp;噪声"></a>偏差&amp;方差&amp;噪声</h3><p>在机器学习中，<strong>偏差</strong>（Bias）、<strong>方差</strong>（Variance）和<strong>噪声</strong>（Noise）是三个重要的概念，它们用来衡量机器学习模型的性能。</p><p><strong>偏差</strong>是指模型的预测值与真实值之间的差异。偏差越小，说明模型越准确。偏差通常是由模型的假设引起的。例如，如果我们假设线性回归模型，那么对于非线性的数据，该模型就会产生偏差。</p><p><strong>方差</strong>是指模型每一次输出结果与模型输出期望之间的误差的平方的期望。方差越小，说明模型越稳定。方差通常是由数据的波动引起的。例如，如果训练数据量不足，或者数据本身存在噪声，那么模型的方差就会比较大。</p><p><strong>噪声</strong>是指真实标记与数据集中的实际标记间的偏差。噪声是不可控的，它是由数据本身的随机性引起的。</p><p>偏差、方差和噪声的关系可以表示如下：</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">均方误差 </span>=<span class="hljs-string"> 偏差^2 + 方差 + 噪声</span><br></code></pre></td></tr></table></figure><p><strong>也就是说，模型的总误差是由偏差、方差和噪声三部分共同决定的。</strong></p><p>为了提高模型的性能，我们需要降低偏差和方差。然而，偏差和方差通常是此消彼长的。例如，如果我们通过增加模型的复杂度来降低偏差，那么模型的方差就会增加。</p><p><strong>在实际应用中</strong>，我们需要根据具体情况来权衡偏差和方差之间的关系。例如，对于一些对准确性要求很高的任务，我们可以降低模型的偏差，即使这会导致模型的方差增加。而对于一些对鲁棒性要求很高的任务，我们可以降低模型的方差，即使这会导致模型的偏差增加。</p><p>以下是一些降低偏差和方差的方法：</p><ul><li><strong>降低偏差</strong><ul><li>使用更复杂的模型</li><li>使用更多的训练数据</li><li>进行特征工程</li></ul></li><li><strong>降低方差</strong><ul><li>使用正则化技术</li><li>进行早期停止</li><li>使用集成学习方法</li></ul></li></ul><h2 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h2><h3 id="最小二乘"><a href="#最小二乘" class="headerlink" title="最小二乘"></a>最小二乘</h3><p>为什么使偏导数为0的值是使RSS最小的值而不是最大的值？</p><blockquote><p>使偏导数为0的值是使RSS（残差平方和）最小的值而不是最大的值，这是因为我们是在寻找一个函数的极值点，而根据微积分中的极值定理，当一个函数在某点处的一阶偏导数为0时，该点可能是函数的极大值点、极小值点或鞍点（既不是极大值也不是极小值的临界点）。然而，在最小二乘估计的情况下，我们可以进一步分析来确定这个点确实是极小值点。</p><p>首先，RSS是一个关于参数（在这里是<em>a</em>和<em>b</em>）的非负函数，因为平方项总是非负的。因此，RSS没有上界，但理论上有一个下界（即当模型完美拟合数据时，RSS为0）。我们的目标是找到使RSS尽可能小的参数值。</p><p>其次，通过求解偏导数为0的方程组，我们找到的是RSS函数的驻点（即一阶偏导数为0的点）。由于RSS是一个二次函数（在<em>a</em>和<em>b</em>上是线性的线性组合的平方），它的图形是一个向上开口的抛物面（在多维空间中）。这种抛物面只有一个极小值点，没有极大值点。因此，当我们找到使偏导数为0的点时，这个点必然是RSS的极小值点。</p><p>…</p></blockquote><h3 id="logistic函数"><a href="#logistic函数" class="headerlink" title="logistic函数"></a>logistic函数</h3><p>$y&#x3D;1&#x2F;(1+e^{-z})$，一个单增函数</p><p>Logistic函数在机器学习中被广泛使用，主要有以下几个原因：</p><p><strong>1. 能够将输入值映射到0到1之间</strong></p><p>Logistic函数的输出值介于0到1之间，这使得它非常适合用于二分类任务。例如，在垃圾邮件过滤中，我们可以使用Logistic函数将电子邮件分类为垃圾邮件或非垃圾邮件。Logistic函数的输出值可以解释为某个事件发生的概率。例如，在医学诊断中，我们可以使用Logistic函数预测患者患某种疾病的概率。</p><p><strong>2. 简单易于理解</strong></p><p>Logistic函数的公式非常简单，易于理解和实现。这使得它成为机器学习初学者入门的好选择。即使是复杂的机器学习模型，也可能包含Logistic函数作为其中的一个组件。</p><p><strong>3. 非线性</strong></p><p>Logistic函数是非线性的，这意味着它可以用于拟合非线性的数据。这使得它比线性回归更强大，更灵活。在许多现实世界中，数据都是非线性的，因此Logistic函数可以更好地拟合这些数据。</p><p><strong>4. 具有良好的数学性质</strong></p><p>Logistic函数具有良好的数学性质，这使得它易于优化。例如，Logistic函数的梯度始终存在且有界，这使得它可以用于梯度下降算法。</p><p><strong>5. 计算效率高</strong></p><p>Logistic函数的计算效率很高，这使得它可以在大型数据集上进行训练。</p><p><strong>总而言之，Logistic函数在机器学习中被广泛使用，因为它具有简单易懂、非线性、具有良好的数学性质和计算效率高等优点。</strong></p><p>以下是一些Logistic函数在机器学习中的具体应用：</p><ul><li><strong>二分类任务</strong>：例如，垃圾邮件过滤、医学诊断、欺诈检测等。</li><li><strong>多分类任务</strong>：例如，手写数字识别、图像分类、自然语言处理等。</li><li><strong>回归任务</strong>：例如，预测房价、股票价格、客户行为等。</li></ul><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><h3 id="信息熵-amp-信息增益-amp-基尼指数"><a href="#信息熵-amp-信息增益-amp-基尼指数" class="headerlink" title="信息熵&amp;信息增益&amp;基尼指数"></a>信息熵&amp;信息增益&amp;基尼指数</h3><p><a href="https://xiaosheng.blog/2018/04/07/decision-tree#%E5%88%92%E5%88%86%E9%80%89%E6%8B%A9">决策树：信息增益、增益率和基尼指数 - 小昇的博客)</a></p><p>信息熵越小，样本集的纯度越高</p><p>信息增益(或者信息增益率)越大，使用该属性进行划分的纯度提升越大(所以要选信息增益大的)</p><p>属性的可能取值越多，属性的固有值越大，最好取信息增益率高的</p><p>基尼越小，数据集的纯度越高；划分属性时选择划分后进制数最小的属性</p><h2 id="其他的一些问题-x2F-概念"><a href="#其他的一些问题-x2F-概念" class="headerlink" title="其他的一些问题&#x2F;概念"></a>其他的一些问题&#x2F;概念</h2><p>可能是深度学习里面的问题，暂时先放在这里了</p><h3 id="few-shot-problem"><a href="#few-shot-problem" class="headerlink" title="few-shot problem"></a>few-shot problem</h3><p>Few-shot problem（小样本问题）通常出现在机器学习和人工智能领域，特别是在机器学习模型的训练过程中。它指的是在只有少量训练样本的情况下，如何有效地训练一个模型以使其能够泛化到新的、未见过的数据上的问题。</p><p>在许多实际应用中，获取大量的标注数据可能非常困难或成本高昂。例如，在医学图像分析中，某些罕见疾病的图像可能很少；在自然语言处理中，某些小语种的语言数据也可能不足。在这些情况下，传统的机器学习方法可能无法有效工作，因为它们通常需要大量的数据来学习复杂的模式和特征。</p><p>为了解决few-shot问题，研究人员开发了一些方法，包括但不限于：</p><ol><li><strong>迁移学习（Transfer Learning）</strong>：利用在一个大型数据集上预训练的模型，并将其应用到一个小样本问题上，通过微调（fine-tuning）来适应新任务。</li><li><strong>元学习（Meta-Learning）</strong>：设计模型以学习如何快速适应新任务，即使只有少量的样本。</li><li><strong>数据增强（Data Augmentation）</strong>：通过对现有数据进行变换来增加数据的多样性，从而提高模型的泛化能力。</li><li><strong>多任务学习（Multi-task Learning）</strong>：同时学习多个相关任务，以共享知识并提高模型在每个任务上的性能。</li><li><strong>模型蒸馏（Model Distillation）</strong>：将一个大模型的知识压缩到一个小模型中，以便于在资源受限的情况下使用。</li></ol><p>Few-shot问题是一个活跃的研究领域，因为解决这一问题对于许多实际应用来说都是至关重要的。</p><h3 id="long-tail-effect"><a href="#long-tail-effect" class="headerlink" title="long-tail effect"></a>long-tail effect</h3><p>在推荐系统中，long-tail effect（长尾效应）指的是用户对商品或内容的偏好分布呈现出不均匀性，即少数热门商品或内容会得到大量用户的关注和推荐，而大量的长尾商品或内容则只被少数用户所偏好。</p><p>这种现象在推荐系统中有以下几个特点：</p><ol><li><p><strong>不均衡的流行度分布</strong>：在推荐系统中，一小部分商品或内容（头部）会获得极高的流行度，而大多数商品或内容（长尾）的流行度相对较低。</p></li><li><p><strong>用户偏好的多样性</strong>：用户的偏好是多样化的，有些用户可能对热门商品感兴趣，而另一些用户则可能偏好那些不那么流行的长尾商品。</p></li><li><p><strong>推荐系统挑战</strong>：长尾效应给推荐系统带来了挑战，因为系统需要在推荐热门商品和发现用户对长尾商品的偏好之间找到平衡。</p></li><li><p><strong>多样性和新颖性</strong>：为了应对长尾效应，推荐系统可能需要引入多样性和新颖性的概念，以确保长尾商品也能得到推荐机会。</p></li><li><p><strong>个性化推荐</strong>：推荐系统需要更好地理解用户的个性化需求，以便能够推荐那些符合用户独特口味的长尾商品。</p></li><li><p><strong>冷启动问题</strong>：长尾效应还加剧了推荐系统中的冷启动问题，即对于新用户或新商品，系统可能缺乏足够的数据来进行有效的推荐。</p></li><li><p><strong>数据稀疏性</strong>：长尾商品由于交互数据较少，导致数据稀疏性问题，这使得模型学习用户偏好变得更加困难。</p></li></ol><p>为了解决长尾效应带来的问题，推荐系统研究者和工程师可能会采用多种策略，如利用内容基推荐、协同过滤、混合推荐方法、深度学习技术等，以提高对长尾商品的推荐效果。</p><h3 id="Cold-start-problem"><a href="#Cold-start-problem" class="headerlink" title="Cold-start problem"></a>Cold-start problem</h3><p>Cold-start problem（冷启动问题）是推荐系统中的一个常见问题，特别是在系统初次启动或面对新用户、新物品时。这个问题描述了在缺乏足够用户行为数据的情况下，如何提供准确的个性化推荐。</p><p>在推荐系统中，冷启动问题主要分为以下几种类型：</p><ol><li><p><strong>新用户冷启动</strong>：当系统遇到一个全新的用户时，由于没有该用户的历史行为数据，系统难以了解其偏好并提供个性化推荐。</p></li><li><p><strong>新物品冷启动</strong>：当系统中引入了新的商品或内容时，由于缺乏用户与这些新物品的交互数据，系统难以评估这些新物品的受欢迎程度或推荐给合适的用户。</p></li><li><p><strong>系统冷启动</strong>：在推荐系统刚开始运行时，由于缺乏用户和物品的交互数据，系统需要在没有用户行为信息的情况下进行推荐。</p></li><li><p><strong>隐式冷启动</strong>：即使用户或物品不是全新的，但如果它们在系统中的交互数据非常有限，也可能面临类似冷启动的问题。</p></li></ol><p>解决冷启动问题的一些常见策略包括：</p><ul><li><strong>基于内容的推荐</strong>：通过分析物品的属性或内容来推荐与用户过去喜欢的物品相似的新物品。</li><li><strong>基于人口统计学的推荐</strong>：根据用户的性别、年龄、地理位置等人口统计信息来推荐物品。</li><li><strong>混合推荐系统</strong>：结合多种推荐技术，如协同过滤、基于内容的推荐和人口统计学信息，以提高推荐的准确性。</li><li><strong>利用用户反馈</strong>：在用户注册或使用过程中收集用户的偏好信息，如通过问卷调查或初始评分来获取用户的兴趣。</li><li><strong>转移学习</strong>：利用在其他领域或任务上预训练的模型，将其应用到推荐系统中，以减少对大量用户行为数据的依赖。</li><li><strong>元学习</strong>：使模型能够快速适应新任务，即使在数据有限的情况下也能提供有效的推荐。</li><li><strong>主动学习</strong>：系统主动请求用户对推荐的物品进行评分或反馈，以收集更多数据并改进推荐。</li></ul><p>冷启动问题是推荐系统领域的一个重要研究方向，解决这一问题对于提高用户满意度和系统性能至关重要。</p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL笔记</title>
    <link href="/2024/04/09/stl/"/>
    <url>/2024/04/09/stl/</url>
    
    <content type="html"><![CDATA[<h1 id="STL笔记"><a href="#STL笔记" class="headerlink" title="STL笔记"></a>STL笔记</h1><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; map_test;<br>    map_test[<span class="hljs-number">1</span>]=<span class="hljs-number">100</span>;<br>    map_test[<span class="hljs-number">2</span>]=<span class="hljs-number">200</span>;<br>    <span class="hljs-comment">// 返回键的迭代器</span><br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;::iterator i=map_test.<span class="hljs-built_in">find</span>(<span class="hljs-number">1</span>);<br>    cout&lt;&lt;i-&gt;second&lt;&lt;endl;<span class="hljs-comment">//100</span><br>    <br>    <span class="hljs-comment">// 如果没有就是返回尾指针</span><br>    i=map_test.<span class="hljs-built_in">find</span>(<span class="hljs-number">-1</span>);<br>    cout&lt;&lt;(i == map_test.<span class="hljs-built_in">end</span>())&lt;&lt;endl; <span class="hljs-comment">// 1</span><br><br>    <span class="hljs-comment">// 遍历</span><br>    <span class="hljs-keyword">for</span>(map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;::iterator i=map_test.<span class="hljs-built_in">begin</span>();i!=map_test.<span class="hljs-built_in">end</span>();i++)&#123;<br>        cout&lt;&lt;i-&gt;first&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;i-&gt;second&lt;&lt;endl;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除一个元素</span><br>    map_test.<span class="hljs-built_in">erase</span>(map_test.<span class="hljs-built_in">find</span>(<span class="hljs-number">2</span>));<br>    <span class="hljs-comment">// 字典大小</span><br>    cout&lt;&lt;map_test.<span class="hljs-built_in">size</span>()&lt;&lt;endl; <span class="hljs-comment">// 1</span><br><br>    <span class="hljs-comment">// 清除字典</span><br>    map_test.<span class="hljs-built_in">clear</span>();<br>    cout&lt;&lt;map_test.<span class="hljs-built_in">empty</span>()&lt;&lt;endl; <span class="hljs-comment">// 1</span><br>       <br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; vector_test &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><br>    <span class="hljs-comment">// 在尾部加入</span><br>    vector_test.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:vector_test)&#123;<br>        cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>; <span class="hljs-comment">// 1 2 3 4</span><br>    &#125;cout&lt;&lt;endl;<br>    <br>    <span class="hljs-comment">// 在尾部弹出</span><br>    vector_test.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i=vector_test.<span class="hljs-built_in">begin</span>();i!=vector_test.<span class="hljs-built_in">end</span>();i++)&#123;<br>        cout&lt;&lt;*i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<span class="hljs-comment">//1 2 3</span><br>    &#125;cout&lt;&lt;endl;<br><br>    <span class="hljs-comment">// 删除指定</span><br>    vector_test.<span class="hljs-built_in">erase</span>(vector_test.<span class="hljs-built_in">begin</span>());<br>    cout&lt;&lt;vector_test.<span class="hljs-built_in">size</span>()&lt;&lt;endl;<span class="hljs-comment">//2</span><br><br>    <span class="hljs-comment">// 清除</span><br>    vector_test.<span class="hljs-built_in">clear</span>();<br>    cout&lt;&lt;vector_test.<span class="hljs-built_in">empty</span>()&lt;&lt;endl;<span class="hljs-comment">//1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>排序方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp_greater</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">return</span> x &gt; y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; vector_test &#123;<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v1</span><span class="hljs-params">(vector_test)</span></span>;<span class="hljs-comment">//注意:对于vector这两个都是深拷贝</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; v2=vector_test;<span class="hljs-comment">//注意:对于vector这两个都是深拷贝</span><br><br>    <span class="hljs-built_in">sort</span>(vector_test.<span class="hljs-built_in">begin</span>(),vector_test.<span class="hljs-built_in">end</span>(),<span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;()); <span class="hljs-comment">// 从大到小</span><br>    <span class="hljs-built_in">sort</span>(v1.<span class="hljs-built_in">begin</span>(),v1.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 默认从小到大</span><br>    <span class="hljs-built_in">sort</span>(v2.<span class="hljs-built_in">begin</span>(),v2.<span class="hljs-built_in">end</span>(),cmp_greater);<span class="hljs-comment">// 从大到小</span><br><br>    vector&lt;<span class="hljs-type">int</span>&gt; v3=vector_test;<span class="hljs-comment">//深拷贝</span><br>    <span class="hljs-comment">// 逆序</span><br>    <span class="hljs-built_in">reverse</span>(v3.<span class="hljs-built_in">begin</span>(),v3.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//从小到大</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;v1.<span class="hljs-built_in">size</span>();i++)&#123;<br>        cout&lt;&lt;vector_test[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;v1[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;v2[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;v3[i]&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    5 1 5 1</span><br><span class="hljs-comment">    4 2 4 2</span><br><span class="hljs-comment">    3 3 3 3</span><br><span class="hljs-comment">    2 4 2 4</span><br><span class="hljs-comment">    1 5 1 5</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>和vector差不多</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;list&gt;</span></span><br><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    list&lt;<span class="hljs-type">int</span>&gt; list_test &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><br>    list_test.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:list_test)&#123;<br>        cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>; <span class="hljs-comment">// 1 2 3 4</span><br>    &#125;cout&lt;&lt;endl;<br>    <br>    list_test.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i=list_test.<span class="hljs-built_in">begin</span>();i!=list_test.<span class="hljs-built_in">end</span>();i++)&#123;<br>        cout&lt;&lt;*i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<span class="hljs-comment">//1 2 3</span><br>    &#125;cout&lt;&lt;endl;<br><br>    list_test.<span class="hljs-built_in">erase</span>(list_test.<span class="hljs-built_in">begin</span>());<br>    cout&lt;&lt;list_test.<span class="hljs-built_in">size</span>()&lt;&lt;endl;<span class="hljs-comment">//2</span><br><br>    list_test.<span class="hljs-built_in">clear</span>();<br>    cout&lt;&lt;list_test.<span class="hljs-built_in">empty</span>()&lt;&lt;endl;<span class="hljs-comment">//1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>和vector的区别：<a href="https://www.cnblogs.com/shijingjing07/p/5587719.html">C++ vector和list的区别 - 迪米特 - 博客园 (cnblogs.com)</a></p><blockquote><p>list&lt;int&gt;::iterator不支持“+”、“+&#x3D;”、“&lt;”等</p><p>vector&lt;int&gt;::iterator和list&lt;int&gt;::iterator都重载了“++”运算符。</p><p>总之，如果需要高效的随机存取，而不在乎插入和删除的效率，使用vector;</p><p>如果需要大量的插入和删除，而不关心随机存取，则应使用list。</p></blockquote><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-function">string <span class="hljs-title">s1</span><span class="hljs-params">(<span class="hljs-string">&quot;hello&quot;</span>)</span></span>;<br>    <span class="hljs-function">string <span class="hljs-title">s2</span><span class="hljs-params">(<span class="hljs-string">&quot;world&quot;</span>)</span></span>;<br><br>    cout&lt;&lt;(s1&gt;s2)&lt;&lt;endl;<span class="hljs-comment">//0 按字典序</span><br><br>    s1.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;,&#x27;</span>); <span class="hljs-comment">//只能插字符</span><br>    s1.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;world&quot;</span>); <span class="hljs-comment">// 或者直接+=</span><br>    s2+=<span class="hljs-string">&quot;!&quot;</span>;<br>    cout&lt;&lt;s1&lt;&lt;endl;<span class="hljs-comment">//hello,world</span><br>    cout&lt;&lt;s2&lt;&lt;endl;<span class="hljs-comment">//world!</span><br><br>    <span class="hljs-comment">// 可以用vector的方法遍历</span><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// 字符串查找 替换</span><br>    <br>    <span class="hljs-function">string <span class="hljs-title">s3</span><span class="hljs-params">(<span class="hljs-string">&quot;hello world&quot;</span>)</span></span>;<br>    <span class="hljs-type">int</span> pos=s3.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;world&quot;</span>);<br>    <span class="hljs-keyword">if</span>(pos!=string::npos)&#123;<span class="hljs-comment">//string::npos是一个特殊的值，表示没有找到</span><br>        s3.<span class="hljs-built_in">replace</span>(pos,<span class="hljs-number">5</span>,<span class="hljs-string">&quot;C++&quot;</span>);<span class="hljs-comment">// 替换5个字符</span><br>    &#125;<br>    cout&lt;&lt;s3&lt;&lt;endl;<span class="hljs-comment">//hello C++</span><br><br>    <span class="hljs-comment">//提取子串</span><br>    string s6=s3.<span class="hljs-built_in">substr</span>(<span class="hljs-number">6</span>,<span class="hljs-number">5</span>);<span class="hljs-comment">// 6到10</span><br>    cout&lt;&lt;s6&lt;&lt;endl;<span class="hljs-comment">//C++</span><br>    <br>    <span class="hljs-built_in">reverse</span>(s1.<span class="hljs-built_in">begin</span>(),s1.<span class="hljs-built_in">end</span>());<br>    cout&lt;&lt;s1&lt;&lt;endl;<span class="hljs-comment">//dlrow,olleh</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++ string 成员函数 <code>length()</code> 等同于 <code>size()</code></p><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>在C++中，<code>std::set</code> 是一个关联容器，它包含唯一元素。<code>std::set</code> 底层使用红黑树实现，其中的元素默认按键值<strong>自动升序排序</strong>，并且每个元素的值都是唯一的。下面列出了 <code>std::set</code> 的一些常见操作：</p><ol><li><strong>插入元素</strong>：</li></ol><ul><li><code>insert()</code>: 向集合中插入一个或多个元素。如果元素已存在，则插入操作不会进行。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;<span class="hljs-type">int</span>&gt; s;<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">20</span>);<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">30</span>);<br></code></pre></td></tr></table></figure><p>或者使用初始化列表进行批量插入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;<span class="hljs-type">int</span>&gt; s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>删除元素</strong>：</li></ol><ul><li><code>erase()</code>: 从集合中删除一个元素或一个元素范围。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;<span class="hljs-type">int</span>&gt; s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br>s.<span class="hljs-built_in">erase</span>(<span class="hljs-number">20</span>); <span class="hljs-comment">// 删除元素20</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>查找元素</strong>：</li></ol><ul><li><code>find()</code>: 在集合中查找一个元素，并返回一个迭代器指向它。如果元素不存在，则返回 <code>end()</code> 迭代器。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;<span class="hljs-type">int</span>&gt; s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br><span class="hljs-keyword">auto</span> it = s.<span class="hljs-built_in">find</span>(<span class="hljs-number">20</span>);<br><span class="hljs-keyword">if</span> (it != s.<span class="hljs-built_in">end</span>()) &#123;<br>    <span class="hljs-comment">// 元素存在</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li><strong>判断集合是否为空</strong>：</li></ol><ul><li><code>empty()</code>: 检查集合是否为空。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;<span class="hljs-type">int</span>&gt; s;<br><span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">empty</span>()) &#123;<br>    <span class="hljs-comment">// 集合为空</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li><strong>获取集合大小</strong>：</li></ol><ul><li><code>size()</code>: 返回集合中元素的数量。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;<span class="hljs-type">int</span>&gt; s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Set size: &quot;</span> &lt;&lt; s.<span class="hljs-built_in">size</span>() &lt;&lt; std::endl; <span class="hljs-comment">// 输出：Set size: 3</span><br></code></pre></td></tr></table></figure><ol start="6"><li><strong>遍历集合</strong>：<br>使用迭代器或基于范围的for循环来遍历集合。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;<span class="hljs-type">int</span>&gt; s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = s.<span class="hljs-built_in">begin</span>(); it != s.<span class="hljs-built_in">end</span>(); ++it) &#123;<br>    std::cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>std::cout &lt;&lt; std::endl; <span class="hljs-comment">// 输出：10 20 30</span><br></code></pre></td></tr></table></figure><p>或者使用基于范围的for循环：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; elem : s) &#123;<br>    std::cout &lt;&lt; elem &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>std::cout &lt;&lt; std::endl; <span class="hljs-comment">// 输出：10 20 30</span><br></code></pre></td></tr></table></figure><ol start="7"><li><strong>获取集合中的最大和最小元素</strong>：<br>由于 <code>std::set</code> 是有序的，因此可以通过 <code>begin()</code> 和 <code>rbegin()</code> 直接获取最小和最大元素。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;<span class="hljs-type">int</span>&gt; s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br><span class="hljs-type">int</span> min_elem = *s.<span class="hljs-built_in">begin</span>(); <span class="hljs-comment">// 获取最小元素</span><br><span class="hljs-type">int</span> max_elem = *s.<span class="hljs-built_in">rbegin</span>(); <span class="hljs-comment">// 获取最大元素</span><br></code></pre></td></tr></table></figure><ol start="8"><li><strong>其他操作</strong>：<ul><li><code>clear()</code>: 清空集合中的所有元素。</li><li><code>count()</code>: 返回集合中某个元素的数量（对于 <code>std::set</code>，结果要么是0要么是1，因为元素是唯一的）。</li></ul></li></ol><p>这些是 <code>std::set</code> 的一些基本操作。当然，<code>std::set</code> 还提供了其他成员函数和操作符，但这些是最常用和基本的操作。</p><p>示例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    set&lt;<span class="hljs-type">int</span>&gt; s;<br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">3</span>);<br>    cout&lt;&lt;s.<span class="hljs-built_in">size</span>()&lt;&lt;endl;<span class="hljs-comment">//2</span><br><br>    set&lt;<span class="hljs-type">int</span>&gt;::iterator it =s.<span class="hljs-built_in">find</span>(<span class="hljs-number">3</span>);<br>    cout&lt;&lt;*it&lt;&lt;endl;<span class="hljs-comment">//3</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i=s.<span class="hljs-built_in">begin</span>();i!=s.<span class="hljs-built_in">end</span>();i++)&#123;<br>        cout&lt;&lt;*i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<span class="hljs-comment">//1 3</span><br>    &#125;cout&lt;&lt;endl;<br><br>    s.<span class="hljs-built_in">clear</span>();<br>    cout&lt;&lt;s.<span class="hljs-built_in">empty</span>();<span class="hljs-comment">//1</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>感觉和list差不多，就是不能重复，如果希望元素能重复的话，可以用<code>multiset</code></p><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>C++的<code>stack</code>是一个容器适配器，它给予程序员栈的功能，即后进先出（LIFO）的数据结构。<code>stack</code>不是一个完整的容器，它只是一个封装了另一个容器的对象，通常这个被封装的容器是<code>deque</code>，但也可以是其他任何提供了必要操作的容器。</p><p>以下是一些C++ <code>stack</code>的常用操作：</p><ol><li><strong>push()</strong>: 将一个元素压入栈顶。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::stack&lt;<span class="hljs-type">int</span>&gt; myStack;  <br>myStack.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <span class="hljs-comment">// 将5压入栈顶</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>pop()</strong>: 移除栈顶的元素。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::stack&lt;<span class="hljs-type">int</span>&gt; myStack;  <br>myStack.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br>myStack.<span class="hljs-built_in">pop</span>();  <span class="hljs-comment">// 移除栈顶的元素，即5</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>top()</strong>: 返回栈顶的元素，但不移除它。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::stack&lt;<span class="hljs-type">int</span>&gt; myStack;  <br>myStack.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br><span class="hljs-type">int</span> topElement = myStack.<span class="hljs-built_in">top</span>();  <span class="hljs-comment">// topElement现在是5，但5仍然在栈中</span><br></code></pre></td></tr></table></figure><ol start="4"><li><strong>size()</strong>: 返回栈中的元素数量。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::stack&lt;<span class="hljs-type">int</span>&gt; myStack;  <br>myStack.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br>myStack.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);  <br><span class="hljs-type">size_t</span> stackSize = myStack.<span class="hljs-built_in">size</span>();  <span class="hljs-comment">// stackSize现在是2</span><br></code></pre></td></tr></table></figure><ol start="5"><li><strong>empty()</strong>: 检查栈是否为空，如果为空则返回<code>true</code>，否则返回<code>false</code>。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::stack&lt;<span class="hljs-type">int</span>&gt; myStack;  <br><span class="hljs-type">bool</span> isEmpty = myStack.<span class="hljs-built_in">empty</span>();  <span class="hljs-comment">// isEmpty现在是true，因为栈是空的  </span><br>myStack.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br>isEmpty = myStack.<span class="hljs-built_in">empty</span>();  <span class="hljs-comment">// isEmpty现在是false，因为栈中有一个元素</span><br></code></pre></td></tr></table></figure><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p>C++的<code>queue</code>也是一个容器适配器，它提供了队列的功能，即先进先出（FIFO）的数据结构。与<code>stack</code>类似，<code>queue</code>也不是一个完整的容器，而是封装了另一个容器（通常是<code>deque</code>）的对象。</p><p>在队列（Queue）数据结构中，”队头”（Front）和”队尾”（Rear）是两个重要的概念。</p><ol><li><strong>队头（Front）</strong>：<br>队头是指队列中第一个元素的位置。在先进先出（FIFO）的队列中，队头元素是最早进入队列的元素，也将是第一个被移除的元素。当你调用队列的出队操作（如<code>pop</code>或<code>dequeue</code>）时，位于队头的元素会被移除。</li><li><strong>队尾（Rear）</strong>：<br>队尾是指队列中最后一个元素的位置。在队列中，新元素总是被添加到队尾。当你调用队列的入队操作（如<code>push</code>或<code>enqueue</code>）时，新元素会被添加到队尾。</li></ol><p>以下是一些C++ <code>queue</code>的常用操作：</p><ol><li><strong>push()</strong>: 向队列尾部添加一个元素。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::queue&lt;<span class="hljs-type">int</span>&gt; myQueue;  <br>myQueue.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <span class="hljs-comment">// 将5添加到队列尾部</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>pop()</strong>: 移除队列的第一个元素。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::queue&lt;<span class="hljs-type">int</span>&gt; myQueue;  <br>myQueue.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br>myQueue.<span class="hljs-built_in">pop</span>();  <span class="hljs-comment">// 移除队列的第一个元素，即5</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>front()</strong>: 返回队列的第一个元素，但不移除它。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::queue&lt;<span class="hljs-type">int</span>&gt; myQueue;  <br>myQueue.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br><span class="hljs-type">int</span> frontElement = myQueue.<span class="hljs-built_in">front</span>();  <span class="hljs-comment">// frontElement现在是5，但5仍然在队列中</span><br></code></pre></td></tr></table></figure><ol start="4"><li><strong>back()</strong>: 返回队列的最后一个元素，但不移除它（C++11及以后版本）。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::queue&lt;<span class="hljs-type">int</span>&gt; myQueue;  <br>myQueue.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br><span class="hljs-type">int</span> backElement = myQueue.<span class="hljs-built_in">back</span>();  <span class="hljs-comment">// backElement现在是5，且5仍然在队列中</span><br></code></pre></td></tr></table></figure><ol start="5"><li><strong>size()</strong>: 返回队列中的元素数量。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::queue&lt;<span class="hljs-type">int</span>&gt; myQueue;  <br>myQueue.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br>myQueue.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);  <br><span class="hljs-type">size_t</span> queueSize = myQueue.<span class="hljs-built_in">size</span>();  <span class="hljs-comment">// queueSize现在是2</span><br></code></pre></td></tr></table></figure><ol start="6"><li><strong>empty()</strong>: 检查队列是否为空，如果为空则返回<code>true</code>，否则返回<code>false</code>。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::queue&lt;<span class="hljs-type">int</span>&gt; myQueue;  <br><span class="hljs-type">bool</span> isEmpty = myQueue.<span class="hljs-built_in">empty</span>();  <span class="hljs-comment">// isEmpty现在是true，因为队列是空的  </span><br>myQueue.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br>isEmpty = myQueue.<span class="hljs-built_in">empty</span>();  <span class="hljs-comment">// isEmpty现在是false，因为队列中有一个元素</span><br></code></pre></td></tr></table></figure><p>与<code>stack</code>类似，虽然队列容器适配器提供了对其底层容器的一些访问，但通常最好坚持使用队列自己的成员函数来保持其FIFO特性。在实际编程中，最常用的操作通常是<code>push()</code>, <code>pop()</code>, <code>front()</code>, 和<code>back()</code>（如果使用C++11或更新版本）。这些操作直接对应于队列的基本概念和行为。</p><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><p><code>deque</code>（双端队列）提供了一系列常用操作，这些操作允许你在队列的两端添加或删除元素，以及进行其他相关操作。以下是一些<code>deque</code>的常用操作：</p><ol><li><p><strong>push_front(element)</strong>: 在<code>deque</code>的前端插入一个元素。</p></li><li><p><strong>push_back(element)</strong>: 在<code>deque</code>的后端插入一个元素。</p></li><li><p><strong>pop_front()</strong>: 移除<code>deque</code>前端的元素。</p></li><li><p><strong>pop_back()</strong>: 移除<code>deque</code>后端的元素。</p></li><li><p><strong>front()</strong>: 返回对<code>deque</code>第一个元素的引用，但不移除该元素。</p></li><li><p><strong>back()</strong>: 返回对<code>deque</code>最后一个元素的引用，但不移除该元素。</p></li><li><p><strong>size()</strong>: 返回<code>deque</code>中元素的数量。</p></li><li><p><strong>empty()</strong>: 检查<code>deque</code>是否为空，如果为空则返回<code>true</code>，否则返回<code>false</code>。</p></li><li><p><strong>clear()</strong>: 移除<code>deque</code>中的所有元素，使其变为空队列。</p></li><li><p><strong>begin() &#x2F; end()</strong>: 返回指向<code>deque</code>第一个元素和尾后元素的迭代器。</p></li><li><p><strong>rbegin() &#x2F; rend()</strong>: 返回指向<code>deque</code>最后一个元素和首前元素的逆向迭代器。</p></li><li><p><strong>insert(position, element)</strong>: 在指定位置插入一个或多个元素。</p></li><li><p><strong>erase(position)</strong>: 移除指定位置的元素。</p></li><li><p><strong>at(index)</strong>: 返回指定索引位置的元素引用。</p></li><li><p><strong>[]</strong>: 通过索引访问元素，类似于数组的下标操作。</p></li></ol><p>这些操作提供了对<code>deque</code>的基本控制和访问功能。需要注意的是，具体的方法和函数名称可能会根据你所使用的编程语言和库有所不同。例如，在C++的STL（Standard Template Library）中，<code>deque</code>是一个模板类，提供了上述的方法。在其他语言或库中，可能会有类似的功能，但名称和实现可能略有不同。</p><p>下面是一个简单的C++示例，展示了如何使用<code>deque</code>的一些基本操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::deque&lt;<span class="hljs-type">int</span>&gt; myDeque;<br><br>    <span class="hljs-comment">// 添加元素到队尾</span><br>    myDeque.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>    myDeque.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>    myDeque.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br><br>    <span class="hljs-comment">// 添加元素到队首</span><br>    myDeque.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">5</span>);<br>    myDeque.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 输出deque的内容</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : myDeque) &#123;<br>        std::cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    std::cout &lt;&lt; std::endl; <span class="hljs-comment">// 输出: 0 5 10 20 30</span><br><br>    <span class="hljs-comment">// 移除队首和队尾的元素</span><br>    myDeque.<span class="hljs-built_in">pop_front</span>();<br>    myDeque.<span class="hljs-built_in">pop_back</span>();<br><br>    <span class="hljs-comment">// 再次输出deque的内容</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : myDeque) &#123;<br>        std::cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    std::cout &lt;&lt; std::endl; <span class="hljs-comment">// 输出: 5 10 20</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><p>在C++中，可以使用 <code>std::priority_queue</code> 来实现优先队列。优先队列是一个容器，其中的元素按照一定的优先级顺序进行排列，具有较高优先级的元素会在队列的前面。</p><p>以下是一个简单的示例，展示了如何使用 <code>std::priority_queue</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建一个整数优先队列，默认是最大堆</span><br>    std::priority_queue&lt;<span class="hljs-type">int</span>&gt; maxHeap;<br><br>    <span class="hljs-comment">// 插入一些元素</span><br>    maxHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">30</span>);<br>    maxHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);<br>    maxHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">50</span>);<br>    maxHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">20</span>);<br><br>    <span class="hljs-comment">// 访问队列顶部元素</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Top element of max heap: &quot;</span> &lt;&lt; maxHeap.<span class="hljs-built_in">top</span>() &lt;&lt; std::endl;<br><br>    <span class="hljs-comment">// 弹出队列顶部元素</span><br>    maxHeap.<span class="hljs-built_in">pop</span>();<br><br>    <span class="hljs-comment">// 输出剩余元素</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Elements in max heap after popping: &quot;</span>;<br>    <span class="hljs-keyword">while</span> (!maxHeap.<span class="hljs-built_in">empty</span>()) &#123;<br>        std::cout &lt;&lt; maxHeap.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        maxHeap.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码首先创建了一个整数优先队列 <code>maxHeap</code>，并将一些整数元素插入其中。然后，它访问并输出了队列中的顶部元素，接着弹出了顶部元素，并输出了弹出后队列中剩余的元素。 </p><p>需要注意的是，默认情况下，<code>std::priority_queue</code> 是使用 <code>std::less</code> 来实现的，因此默认是最大堆。如果要使用最小堆，需要指定比较函数，可以通过传递第三个参数来实现，例如 <code>std::priority_queue&lt;int, std::vector&lt;int&gt;, std::greater&lt;int&gt;&gt; minHeap;</code> 就是创建一个最小堆。</p><p>要自定义比较函数，你需要提供一个函数或者函数对象，该函数或对象用于定义元素之间的比较规则。在C++中，可以使用函数或者函数对象作为比较函数。以下是两种方式的示例：</p><p><strong>方式一：使用函数</strong>(建议不要用 有点看不懂decltype这个推断关键字)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-comment">// 自定义比较函数，用于最小堆</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">customCompare</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b; <span class="hljs-comment">// 降序排列</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建一个整数优先队列，使用自定义比较函数</span><br>    std::priority_queue&lt;<span class="hljs-type">int</span>, std::vector&lt;<span class="hljs-type">int</span>&gt;, <span class="hljs-keyword">decltype</span>(&amp;customCompare)&gt; <span class="hljs-built_in">minHeap</span>(customCompare);<br><br>    <span class="hljs-comment">// 插入一些元素</span><br>    minHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">30</span>);<br>    minHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);<br>    minHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">50</span>);<br>    minHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">20</span>);<br><br>    <span class="hljs-comment">// 输出最小堆中的元素</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Elements in min heap: &quot;</span>;<br>    <span class="hljs-keyword">while</span> (!minHeap.<span class="hljs-built_in">empty</span>()) &#123;<br>        std::cout &lt;&lt; minHeap.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        minHeap.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方式二：使用函数对象（仿函数）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-comment">// 自定义比较仿函数，用于最小堆</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">CustomCompare</span> &#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a &gt; b; <span class="hljs-comment">// 降序排列</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建一个整数优先队列，使用自定义比较仿函数</span><br>    std::priority_queue&lt;<span class="hljs-type">int</span>, std::vector&lt;<span class="hljs-type">int</span>&gt;, CustomCompare&gt; minHeap;<br><br>    <span class="hljs-comment">// 插入一些元素</span><br>    minHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">30</span>);<br>    minHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);<br>    minHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">50</span>);<br>    minHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">20</span>);<br><br>    <span class="hljs-comment">// 输出最小堆中的元素</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Elements in min heap: &quot;</span>;<br>    <span class="hljs-keyword">while</span> (!minHeap.<span class="hljs-built_in">empty</span>()) &#123;<br>        std::cout &lt;&lt; minHeap.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        minHeap.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优先的大小和比较是反着的，如最大优先用的是less函数比较，最小优先使用的是greater函数进行比较</strong></p><p>后来发现还能这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<span class="hljs-comment">//堆里存储距离和节点编号</span><br>priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<span class="hljs-comment">//小根堆</span><br></code></pre></td></tr></table></figure><p>在C++中，<code>std::greater&lt;pair&lt;int, int&gt;&gt;</code> 是一个功能对象（也称为仿函数），它定义了一个“大于”关系，用于比较两个 <code>std::pair&lt;int, int&gt;</code> 对象。</p><p>具体来说，<code>std::greater&lt;T&gt;</code> 是一个模板类，它提供了一个函数调用操作符 <code>operator()</code>，该操作符接受两个类型为 <code>T</code> 的参数，并返回一个布尔值，表示第一个参数是否大于第二个参数。</p><p>当 <code>T</code> 是 <code>std::pair&lt;int, int&gt;</code> 时，<code>std::greater&lt;pair&lt;int, int&gt;&gt;</code> 就可以用来比较两个 <code>std::pair&lt;int, int&gt;</code> 对象。比较的方式是首先比较 <code>pair</code> 的第一个元素，如果第一个元素相等，则比较第二个元素。</p><p>举个例子，假设你有两个 <code>pair&lt;int, int&gt;</code> 对象：<code>p1 = &#123;3, 2&#125;</code> 和 <code>p2 = &#123;2, 5&#125;</code>。使用 <code>std::greater&lt;pair&lt;int, int&gt;&gt;</code> 来比较它们时，会先比较第一个元素。因为 <code>p1</code> 的第一个元素（3）大于 <code>p2</code> 的第一个元素（2），所以 <code>std::greater&lt;pair&lt;int, int&gt;&gt;()(p1, p2)</code> 会返回 <code>true</code>。</p><h2 id="关于深拷贝"><a href="#关于深拷贝" class="headerlink" title="关于深拷贝"></a>关于深拷贝</h2><p>在构造函数和赋值的时候都是深拷贝</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;list&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-function">string <span class="hljs-title">s1</span><span class="hljs-params">(<span class="hljs-string">&quot;hello&quot;</span>)</span></span>;<br>    <span class="hljs-function">string <span class="hljs-title">s2</span><span class="hljs-params">(s1)</span></span>;<br>    <span class="hljs-built_in">reverse</span>(s2.<span class="hljs-built_in">begin</span>(),s2.<span class="hljs-built_in">end</span>());<br>    cout&lt;&lt;s1&lt;&lt;<span class="hljs-string">&quot;---&quot;</span>&lt;&lt;s2;<span class="hljs-comment">//hello---olleh</span><br>    cout&lt;&lt;endl;<br><br>    list&lt;<span class="hljs-type">int</span>&gt; l1&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>    list&lt;<span class="hljs-type">int</span>&gt; l2=l1;<br>    <span class="hljs-built_in">reverse</span>(l2.<span class="hljs-built_in">begin</span>(),l2.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:l1)&#123;<br>        cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<span class="hljs-comment">// 1 2 3</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关于去重"><a href="#关于去重" class="headerlink" title="关于去重"></a>关于去重</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span>  </span><br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    std::vector&lt;<span class="hljs-type">int</span>&gt; myVector = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">33</span>, <span class="hljs-number">55</span>&#125;;  <br>      <br>    <span class="hljs-comment">// 排序  </span><br>    std::<span class="hljs-built_in">sort</span>(myVector.<span class="hljs-built_in">begin</span>(), myVector.<span class="hljs-built_in">end</span>());  <br>      <br>    <span class="hljs-comment">// 去重  </span><br>    std::vector&lt;<span class="hljs-type">int</span>&gt;::iterator dupilcated = std::<span class="hljs-built_in">unique</span>(myVector.<span class="hljs-built_in">begin</span>(), myVector.<span class="hljs-built_in">end</span>());  <br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:myVector)&#123;<br>        std::cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&#x27;*&#x27;</span>;<span class="hljs-comment">//3*4*5*6*33*55*6*33*55</span><br>    &#125;<br>      <br>    <span class="hljs-comment">// 擦除重复元素  </span><br>    myVector.<span class="hljs-built_in">erase</span>(dupilcated, myVector.<span class="hljs-built_in">end</span>());  <br>      <br>    <span class="hljs-comment">// 输出结果  </span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; num : myVector) &#123;  <br>        std::cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">//3 4 5 6 33 55</span><br>    &#125;  <br>      <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>为什么这种方法可以把所有重复的元素都去除了，而不是只去除一个？</p></blockquote><blockquote><p>这种方法能够去除所有重复的元素，而不仅仅是去除一个，是因为它结合了排序和去重的操作。让我们详细分析一下这个过程：</p><ol><li><strong>排序</strong>：首先，<code>std::sort</code>函数对<code>vector</code>中的所有元素进行排序。排序是一个关键的步骤，因为它确保了所有重复的元素都相邻排列在一起。如果没有排序，那么重复的元素可能会分布在<code>vector</code>的不同位置，这使得去重变得更加复杂。</li><li><strong>去重</strong>：接下来，<code>std::unique</code>函数被用来去重。<code>std::unique</code>函数的工作原理是，它遍历排序后的<code>vector</code>，并将每个不重复的元素移动到它应该在的位置（即它首次出现的位置）。同时，它将所有重复的元素移动到<code>vector</code>的末尾，但并不从容器中删除它们。<code>std::unique</code>返回一个迭代器，指向最后一个不重复元素之后的位置。</li></ol><p>由于<code>vector</code>已经被排序，<code>std::unique</code>能够确保每个不重复的元素只出现一次，并且所有重复的元素都被移动到<code>vector</code>的末尾。</p><ol><li><strong>擦除</strong>：最后，使用<code>vector</code>的<code>erase</code>成员函数来删除从<code>std::unique</code>返回的迭代器位置到<code>vector</code>末尾的所有元素。这些元素就是所有重复的元素，因为<code>std::unique</code>已经将它们移动到了<code>vector</code>的末尾。</li></ol><p>通过这种方式，所有重复的元素都被有效地从<code>vector</code>中删除了，只剩下不重复的元素。</p><p>需要注意的是，<code>std::unique</code>函数仅适用于已排序的范围。如果<code>vector</code>没有事先排序，那么<code>std::unique</code>将不能正确地去除所有重复的元素。因此，在使用<code>std::unique</code>之前进行排序是至关重要的一步。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法笔记</title>
    <link href="/2024/04/09/algorithm/"/>
    <url>/2024/04/09/algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="算法笔记"><a href="#算法笔记" class="headerlink" title="算法笔记"></a>算法笔记</h1><p>跟着<a href="https://www.acwing.com/activity/content/11/">活动 - AcWing</a>来</p><h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>理解：<a href="https://zhuanlan.zhihu.com/p/350934702">快速排序（图解+C代码） - 知乎 (zhihu.com)</a></p><p>自己手搓的c语言实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">q_sort</span><span class="hljs-params">(<span class="hljs-type">int</span>*nums,<span class="hljs-type">int</span> begin,<span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-keyword">if</span> (begin &gt;= end) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> base = nums[begin];<br>    <span class="hljs-type">int</span> orgin_begin = begin;<br>    <span class="hljs-type">int</span> orgin_end = end;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (end&gt;begin)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-keyword">if</span> (nums[end] &lt; base) &#123;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            end--;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <br><br>            <span class="hljs-keyword">if</span> (nums[begin] &gt; base) &#123;<br>                flag = <span class="hljs-number">1</span>;<br>                <span class="hljs-type">int</span> tmp = nums[begin];<br>                nums[begin] = nums[end];<br>                nums[end] = tmp;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            begin++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> tmp = nums[begin];<br>    nums[begin] = base;<br>    nums[orgin_begin] = tmp;<br>    q_sort(nums, orgin_begin, begin - <span class="hljs-number">1</span>);<br>    q_sort(nums, begin + <span class="hljs-number">1</span>, orgin_end);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-type">int</span> *num = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*n); <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, num + i);<br>    &#125;<br><br>    q_sort(num,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<span class="hljs-comment">//注意这里要是n-1</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, num[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>人工智能写的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> begin, <span class="hljs-type">int</span> end)</span> </span>&#123;  <br>    <span class="hljs-type">int</span> pivot = nums[begin]; <span class="hljs-comment">// 选择第一个元素作为基准  </span><br>    <span class="hljs-type">int</span> i = begin + <span class="hljs-number">1</span>, j = end;  <br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;  <br>        <span class="hljs-keyword">while</span> (i &lt;= j &amp;&amp; nums[i] &lt; pivot) i++;  <br>        <span class="hljs-keyword">while</span> (i &lt;= j &amp;&amp; nums[j] &gt; pivot) j--;  <br>        <span class="hljs-keyword">if</span> (i &gt;= j) <span class="hljs-keyword">break</span>;  <br>        <span class="hljs-built_in">swap</span>(nums[i++], nums[j--]);  <br>    &#125;  <br>    <span class="hljs-built_in">swap</span>(nums[begin], nums[j]); <span class="hljs-comment">// 将基准值放到正确的位置  </span><br>    <span class="hljs-keyword">return</span> j; <span class="hljs-comment">// 返回基准值的索引  </span><br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">q_sort</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> begin, <span class="hljs-type">int</span> end)</span> </span>&#123;  <br>    <span class="hljs-keyword">if</span> (begin &lt; end) &#123;  <br>        <span class="hljs-type">int</span> pivot_index = <span class="hljs-built_in">partition</span>(nums, begin, end); <span class="hljs-comment">// 获取基准值的索引  </span><br>        <span class="hljs-built_in">q_sort</span>(nums, begin, pivot_index - <span class="hljs-number">1</span>); <span class="hljs-comment">// 对基准值左边的部分进行递归排序  </span><br>        <span class="hljs-built_in">q_sort</span>(nums, pivot_index + <span class="hljs-number">1</span>, end); <span class="hljs-comment">// 对基准值右边的部分进行递归排序  </span><br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-comment">// main 函数保持不变...</span><br></code></pre></td></tr></table></figure><p><img src="/2024/04/09/algorithm/image-20240409160922094.png" alt="全部超时，乐"></p><h3 id="第K小的数"><a href="#第K小的数" class="headerlink" title="第K小的数"></a>第K小的数</h3><p>这老哥的方法无敌</p><p><a href="https://www.acwing.com/solution/content/4502/">AcWing 786. 写一个和yxc大佬不同但差不多思想的方法，代码更简单 - AcWing</a></p><p><img src="/2024/04/09/algorithm/image-20240409162204857.png" alt="image-20240409162204857"></p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>看这个 <a href="https://www.acwing.com/solution/content/138050/">AcWing 787- AcWing</a></p><p>感觉非常清楚了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N],tmp[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span> <span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> mid,<span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>,i = l,j = mid+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] &lt;= a[j]) tmp[k++] = a[i++];<br>        <span class="hljs-keyword">else</span> tmp[k++] = a[j++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k++] = a[i++];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) tmp[k++] = a[j++];<br>    <span class="hljs-keyword">for</span> (i = l,j = <span class="hljs-number">1</span>;i &lt;= r;i++,j++) a[i] = tmp[j];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mergeSort</span> <span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">mergeSort</span> (a,l,mid);<br>    <span class="hljs-built_in">mergeSort</span> (a,mid + <span class="hljs-number">1</span>,r);<br>    <span class="hljs-built_in">merge</span> (a,l,mid,r);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++) cin &gt;&gt; a[i];<br>    <span class="hljs-built_in">mergeSort</span> (a,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++) cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="逆序对的数量"><a href="#逆序对的数量" class="headerlink" title="逆序对的数量"></a>逆序对的数量</h3><p><a href="https://www.acwing.com/problem/content/790/">788. 逆序对的数量 - AcWing题库</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span>  cnt = <span class="hljs-number">0</span>;<br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator it;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> be, <span class="hljs-type">int</span> end)</span> </span>&#123;<br>    <span class="hljs-comment">// 处理范围:[be,end-1]</span><br>    <span class="hljs-keyword">if</span> (be &gt;= end<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 分解为子问题</span><br>    <span class="hljs-type">int</span> mid = (be+end) / <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">// 解决子问题</span><br>    <span class="hljs-built_in">func</span>(nums, be, mid);<br>    <span class="hljs-built_in">func</span>(nums, mid, end);<br>    <span class="hljs-comment">// 合并解</span><br>    <span class="hljs-type">int</span> i = be, j = mid;<br>    <span class="hljs-keyword">while</span> (i &lt; mid &amp;&amp; j &lt; end) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] &lt;= nums[j]) &#123;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 逆序情况</span><br>            j++;<br>            cnt = cnt + mid - i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(it + be, it + end);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nums</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; nums[i];<br>    &#125;<br>    it = nums.<span class="hljs-built_in">begin</span>();<br><br>    <span class="hljs-built_in">func</span>(nums, <span class="hljs-number">0</span>, n);<br><br>    cout &lt;&lt; cnt;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里要注意的是把一个列表传给函数，要注意是要传引用而不是传赋值。</p><p>还有就是<code>cnt</code>这种东西还是用<code>long long</code>的好</p><h3 id="数的范围"><a href="#数的范围" class="headerlink" title="数的范围"></a>数的范围</h3><p><a href="https://www.acwing.com/activity/content/problem/content/823/">https://www.acwing.com/activity/content/problem/content/823/</a></p><p>算是自己写出来了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,q;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;n,&amp;q);<br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; map_begin;<br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; map_end;<br>    <span class="hljs-type">int</span> last=<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> now =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;now);<br>        <span class="hljs-keyword">if</span>(!i)&#123;<br>            last=now;<br>            map_begin[now]=i;<br>            <br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(last == now)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            map_end[last]=i<span class="hljs-number">-1</span>;<br>            last=now;<br>            map_begin[now]=i;<span class="hljs-comment">//map_begin.insert(now,i);</span><br>        &#125;<br><br>    &#125;<br>    map_end[last]=n<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span>* query=(<span class="hljs-type">int</span>* )<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)*q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;query[i]);<br>        <br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q;i++)&#123;<br>        <span class="hljs-keyword">auto</span> it_begin=map_begin.<span class="hljs-built_in">find</span>(query[i]);<br>        <span class="hljs-keyword">if</span>(it_begin==map_begin.<span class="hljs-built_in">end</span>())&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1 -1\n&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,map_begin[query[i]],map_end[query[i]]);<br>    &#125;<br>    <br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><p>我是天才</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;list&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    string s1;<br>    string s2;<br><br>    cin &gt;&gt; s1;<br>    cin&gt;&gt;s2;<br>    <span class="hljs-keyword">if</span>(s1.<span class="hljs-built_in">length</span>()&gt;s2.<span class="hljs-built_in">length</span>()) <span class="hljs-built_in">swap</span>(s1,s2);<br>    <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br>    string s3;<br>    <span class="hljs-built_in">reverse</span>(s1.<span class="hljs-built_in">begin</span>(),s1.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">reverse</span>(s2.<span class="hljs-built_in">begin</span>(),s2.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s1.<span class="hljs-built_in">length</span>();i++)&#123;<br>        <span class="hljs-type">char</span> c1=s1[i];<br>        <span class="hljs-type">char</span> c2=s2[i];<br>        <span class="hljs-type">int</span> i1=<span class="hljs-built_in">int</span>(c1)-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-type">int</span> i2=<span class="hljs-built_in">int</span>(c2)-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-type">int</span> i3=(i1+i2+flag)%<span class="hljs-number">10</span>;<br>        flag=(i1+i2+flag)/<span class="hljs-number">10</span>;<br>        <span class="hljs-type">char</span> c3=<span class="hljs-built_in">char</span>(i3+<span class="hljs-string">&#x27;0&#x27;</span>);<br>        s3.<span class="hljs-built_in">push_back</span>(c3);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=s1.<span class="hljs-built_in">length</span>();i&lt;s2.<span class="hljs-built_in">length</span>();i++)&#123;<br>        <span class="hljs-type">int</span> i1=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">char</span> c2=s2[i];<br>        <span class="hljs-type">int</span> i2=<span class="hljs-built_in">int</span>(c2)-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-type">int</span> i3=(i1+i2+flag)%<span class="hljs-number">10</span>;<br>        flag=(i1+i2+flag)/<span class="hljs-number">10</span>;<br>        <span class="hljs-type">char</span> c3=<span class="hljs-built_in">char</span>(i3+<span class="hljs-string">&#x27;0&#x27;</span>);<br>        s3.<span class="hljs-built_in">push_back</span>(c3);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(flag) s3.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>    <span class="hljs-built_in">reverse</span>(s3.<span class="hljs-built_in">begin</span>(),s3.<span class="hljs-built_in">end</span>());<br>    cout&lt;&lt;s3;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>就是这个’0’的加减有点没适应过来</p><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><p><a href="https://www.acwing.com/solution/content/27238/">AcWing 795. 前缀和 【c++详细题解】 - AcWing</a></p><h3 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;list&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> num[<span class="hljs-number">100000</span>];<br><span class="hljs-type">int</span> res[<span class="hljs-number">100000</span>];<span class="hljs-comment">//res[i]=num[i]-num[i-1]</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num[i]);<br>        res[i]=num[i]-num[i<span class="hljs-number">-1</span>];<br>        <br>    &#125;<br>    <span class="hljs-type">int</span> l,r,c;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,&amp;l,&amp;r,&amp;c);<br>        res[l]+=c;<br>        res[r+<span class="hljs-number">1</span>]-=c;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        num[i]=res[i]+num[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,num[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>i从1开始这点挺妙的</p><h3 id="差分矩阵"><a href="#差分矩阵" class="headerlink" title="差分矩阵"></a>差分矩阵</h3><p><a href="https://www.acwing.com/solution/content/27325/">AcWing 798. 差分矩阵 【 c++详细题解 】 - AcWing</a></p><p>这个解答的图示做的非常好</p><h3 id="最长不重复子序列"><a href="#最长不重复子序列" class="headerlink" title="最长不重复子序列"></a>最长不重复子序列</h3><p><a href="https://www.acwing.com/solution/content/13491/">AcWing 799. 画个简图辅助理解 - AcWing</a></p><p><img src="/2024/04/09/algorithm/image-20240410100654396.png" alt="关于循环"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-type">int</span> v[<span class="hljs-number">100002</span>];<br><span class="hljs-type">int</span> f[<span class="hljs-number">100002</span>];<span class="hljs-comment">//频率记录</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    std::cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; v[i];<br>        f[v[i]]++;<span class="hljs-comment">//频率+1</span><br>        <span class="hljs-keyword">while</span> (f[v[i]] &gt; <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//有重复</span><br>            f[v[j]]--;<span class="hljs-comment">//前面的指针向后移动 直到排除这个重复元素</span><br>            j++;<br>        &#125;<br>        ans = <span class="hljs-built_in">max</span>(ans, i - j + <span class="hljs-number">1</span>);<br>    &#125;<br>    cout &lt;&lt; ans;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里要注意的是f这个东西的大小必须大于v[i]的大小，而不是大于n的大小</p><h3 id="数组元素的目标和"><a href="#数组元素的目标和" class="headerlink" title="数组元素的目标和"></a>数组元素的目标和</h3><p><a href="https://www.acwing.com/problem/content/802/">800. 数组元素的目标和 - AcWing题库</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m, x;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">A</span><span class="hljs-params">(n)</span>, <span class="hljs-title">B</span><span class="hljs-params">(m)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; A[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>        cin &gt;&gt; B[j];<br>    &#125;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = m<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span> (A[i] + B[j] != x) &#123;<br>        <span class="hljs-keyword">if</span> (A[i] + B[j] &gt; x) j--;<br>        <span class="hljs-keyword">if</span> (A[i] + B[j] &lt; x) i++;<br>    &#125;<br>    cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; j;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>双指针算法，不难</p><h3 id="计算二进制中1的数量"><a href="#计算二进制中1的数量" class="headerlink" title="计算二进制中1的数量"></a>计算二进制中1的数量</h3><p><a href="https://www.acwing.com/solution/content/2370/">https://www.acwing.com/solution/content/2370/</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;list&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbits</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span>&#123;<br>    <span class="hljs-comment">// 找出最后一个1及其后面的数</span><br>    <span class="hljs-keyword">return</span> num&amp;(-num);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,t;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;t;<br>        <span class="hljs-type">int</span> cnt_1=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(t) &#123;t-=<span class="hljs-built_in">lowbits</span>(t);cnt_1++;&#125;<br>        cout&lt;&lt;cnt_1&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h3><p><a href="https://www.acwing.com/problem/content/805/">803. 区间合并 - AcWing题库</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>priority_queue &lt; pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&gt; pqii;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        pqii.<span class="hljs-built_in">push</span>(&#123;l, r&#125;);<br>    &#125;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> last_r = <span class="hljs-number">-1e9</span> - <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span> (!pqii.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> l=pqii.<span class="hljs-built_in">top</span>().first;<br>        <span class="hljs-type">int</span> r = pqii.<span class="hljs-built_in">top</span>().second;<br>        pqii.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (last_r &lt; l) &#123;<br>            cnt += <span class="hljs-number">1</span>;<br>            last_r = r;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            last_r = <span class="hljs-built_in">max</span>(last_r, r);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; cnt;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><p><a href="https://www.acwing.com/problem/content/832/">830. 单调栈 - AcWing题库</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 这题的关键是建立一个上大下小的栈</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n; <br>cin &gt;&gt; n;<br>stack&lt;<span class="hljs-type">int</span>&gt; stk;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">int</span> j = <span class="hljs-number">-1</span>;<br>cin &gt;&gt; j;<br><span class="hljs-keyword">while</span> (!stk.<span class="hljs-built_in">empty</span>()) &#123;<br><span class="hljs-keyword">if</span> (j &gt; stk.<span class="hljs-built_in">top</span>()) &#123;<br><span class="hljs-comment">// 比栈顶更大则加入</span><br>cout &lt;&lt; stk.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>stk.<span class="hljs-built_in">push</span>(j);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 比栈顶更小则出栈保证栈顶大于栈底</span><br>stk.<span class="hljs-built_in">pop</span>();<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (stk.<span class="hljs-built_in">empty</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>stk.<span class="hljs-built_in">push</span>(j);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><p><a href="https://www.acwing.com/solution/content/97229/">AcWing 154. 滑动窗口—海绵宝宝来喽 - AcWing</a></p><p>这里用队列的原因是为了某个元素被滑动窗口滑出后，还能找到下一个候选元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n,k; <br>cin &gt;&gt; n &gt;&gt; k;<br>deque&lt;<span class="hljs-type">int</span>&gt; qmax, qmin;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">1</span>) &#123;<br>cin &gt;&gt; v[i];<br>&#125;<br><span class="hljs-comment">// 处理最小值</span><br><span class="hljs-comment">// 初始化为一个单调递增的队列 即队头小于队尾</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br><span class="hljs-keyword">while</span> (!qmin.<span class="hljs-built_in">empty</span>() &amp;&amp; v[i] &lt; qmin.<span class="hljs-built_in">back</span>()) &#123;<br>qmin.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><span class="hljs-comment">// 此时新元素小于队尾或者队列为空</span><br>qmin.<span class="hljs-built_in">push_back</span>(v[i]);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = k; i &lt; n; i += <span class="hljs-number">1</span>) &#123;<br>cout &lt;&lt; qmin.<span class="hljs-built_in">front</span>() &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">if</span> (qmin.<span class="hljs-built_in">front</span>() == v[i - k]) qmin.<span class="hljs-built_in">pop_front</span>();<span class="hljs-comment">//该移出了</span><br><br><span class="hljs-keyword">while</span> (!qmin.<span class="hljs-built_in">empty</span>() &amp;&amp; v[i] &lt; qmin.<span class="hljs-built_in">back</span>()) &#123;<br>qmin.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><span class="hljs-comment">// 此时新元素小于队尾或者队列为空</span><br>qmin.<span class="hljs-built_in">push_back</span>(v[i]);<br>&#125;<br><span class="hljs-comment">// 输出最后一个</span><br>cout &lt;&lt; qmin.<span class="hljs-built_in">front</span>() &lt;&lt; endl;<br><br><br><span class="hljs-comment">// 处理最大值</span><br><span class="hljs-comment">// 初始化为一个单调递减的队列 即队头大于队尾</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br><span class="hljs-keyword">while</span> (!qmax.<span class="hljs-built_in">empty</span>() &amp;&amp; v[i] &gt; qmax.<span class="hljs-built_in">back</span>()) &#123;<br>qmax.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><span class="hljs-comment">// 此时新元素大于队尾或者队列为空</span><br>qmax.<span class="hljs-built_in">push_back</span>(v[i]);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = k; i &lt; n; i += <span class="hljs-number">1</span>) &#123;<br>cout &lt;&lt; qmax.<span class="hljs-built_in">front</span>() &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">if</span>(qmax.<span class="hljs-built_in">front</span>() == v[i-k]) qmax.<span class="hljs-built_in">pop_front</span>();<span class="hljs-comment">//该移出了</span><br><br><span class="hljs-keyword">while</span> (!qmax.<span class="hljs-built_in">empty</span>() &amp;&amp; v[i] &gt; qmax.<span class="hljs-built_in">back</span>()) &#123;<br>qmax.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><span class="hljs-comment">// 此时新元素大于队尾或者队列为空</span><br>qmax.<span class="hljs-built_in">push_back</span>(v[i]);<br>&#125;<br><span class="hljs-comment">// 输出最后一个</span><br>cout &lt;&lt; qmax.<span class="hljs-built_in">front</span>() &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Trie字符串统计"><a href="#Trie字符串统计" class="headerlink" title="Trie字符串统计"></a>Trie字符串统计</h3><p><a href="https://www.acwing.com/problem/content/837/">835. Trie字符串统计 - AcWing题库</a></p><p>就当学习一下unordered_map的使用了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> N;<br>    cin &gt;&gt; N;<br><br>    unordered_map&lt;string, <span class="hljs-type">int</span>&gt; string_count;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) &#123;<br>        string operation, str;<br>        cin &gt;&gt; operation &gt;&gt; str;<br><br>        <span class="hljs-keyword">if</span> (operation == <span class="hljs-string">&quot;I&quot;</span>) &#123;<br>            string_count[str]++;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (operation == <span class="hljs-string">&quot;Q&quot;</span>) &#123;<br>            cout &lt;&lt; string_count[str] &lt;&lt; endl;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="最大异或对"><a href="#最大异或对" class="headerlink" title="最大异或对"></a>最大异或对</h3><p><a href="https://www.acwing.com/problem/content/145/">143. 最大异或对 - AcWing题库</a></p><p>为了得到两个整数的异或结果最大值，我们可以使用一种基于字典树（Trie）的算法。具体步骤如下：</p><ol><li>初始化一个空的字典树（Trie），每个节点可以有两个子节点，分别代表下一位是0或者1。</li><li>遍历所有给定的整数，将它们转换成二进制形式，并将每个整数的二进制表示插入到字典树中。插入的时候，从最高位（二进制的最左边）开始，依次向下创建或遍历节点。</li><li>再次遍历所有给定的整数，对于每个整数，在字典树中查找一个路径，使得该路径上每一位尽可能与该整数的对应位不同（因为异或运算中，相同位异或结果为0，不同位异或结果为1，所以为了得到最大值，我们希望尽可能找到不同的位）。这样我们就能得到该整数与字典树中某个数异或的最大值。</li><li>在遍历所有整数并计算每个整数可能得到的最大异或值之后，选择其中的最大值作为答案。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieNode</span> &#123;  <br><span class="hljs-keyword">public</span>:  <br>    TrieNode* children[<span class="hljs-number">2</span>];  <br>  <br>    <span class="hljs-built_in">TrieNode</span>() &#123;  <br>        children[<span class="hljs-number">0</span>] = <span class="hljs-literal">NULL</span>;  <br>        children[<span class="hljs-number">1</span>] = <span class="hljs-literal">NULL</span>;  <br>    &#125;  <br>&#125;;  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;  <br><span class="hljs-keyword">private</span>:  <br>    TrieNode* root;  <br>  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(TrieNode* root, <span class="hljs-type">int</span> num)</span> </span>&#123;  <br>        TrieNode* node = root;  <br>  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">31</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;  <br>            <span class="hljs-type">int</span> bit = (num &gt;&gt; i) &amp; <span class="hljs-number">1</span>;  <br>            <span class="hljs-keyword">if</span> (node-&gt;children[bit] == <span class="hljs-literal">NULL</span>) &#123;  <br>                node-&gt;children[bit] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TrieNode</span>();  <br>            &#125;  <br>            node = node-&gt;children[bit];  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMaximumXOR</span><span class="hljs-params">(TrieNode* root, <span class="hljs-type">int</span> num)</span> </span>&#123;  <br>        TrieNode* node = root;  <br>        <span class="hljs-type">int</span> xorResult = <span class="hljs-number">0</span>;  <br>  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">31</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;  <br>            <span class="hljs-type">int</span> bit = (num &gt;&gt; i) &amp; <span class="hljs-number">1</span>;  <br>            <span class="hljs-type">int</span> oppositeBit = <span class="hljs-number">1</span> - bit;  <br>  <br>            <span class="hljs-keyword">if</span> (node-&gt;children[oppositeBit] != <span class="hljs-literal">NULL</span>) &#123;  <br>                xorResult |= (<span class="hljs-number">1</span> &lt;&lt; i);  <br>                node = node-&gt;children[oppositeBit];  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                node = node-&gt;children[bit];  <br>            &#125;  <br>        &#125;  <br>  <br>        <span class="hljs-keyword">return</span> xorResult;  <br>    &#125;  <br>  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Trie</span>() &#123;  <br>        root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TrieNode</span>();  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;  <br>        <span class="hljs-built_in">insert</span>(root, num);  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMaximumXORHelper</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;  <br>        <span class="hljs-type">int</span> maxXOR = <span class="hljs-number">0</span>;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;  <br>            <span class="hljs-built_in">insert</span>(num);  <br>            <span class="hljs-type">int</span> currentXOR = <span class="hljs-built_in">findMaximumXOR</span>(root, num);  <br>            maxXOR = <span class="hljs-built_in">max</span>(maxXOR, currentXOR);  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> maxXOR;  <br>    &#125;  <br>&#125;;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMaximumXOR</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;  <br>    Trie trie;  <br>    <span class="hljs-keyword">return</span> trie.<span class="hljs-built_in">findMaximumXORHelper</span>(nums);  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-type">int</span> N;  <br>    cin &gt;&gt; N;  <br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nums</span><span class="hljs-params">(N)</span></span>;  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) &#123;  <br>        cin &gt;&gt; nums[i];  <br>    &#125;  <br>  <br>    cout &lt;&lt; <span class="hljs-built_in">findMaximumXOR</span>(nums) &lt;&lt; endl;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="合并集合"><a href="#合并集合" class="headerlink" title="合并集合"></a>合并集合</h3><p>并查集</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> num[<span class="hljs-number">100002</span>];<span class="hljs-comment">//0这个节点保留不用 故当num[i]==0 i节点为根</span><br><br><span class="hljs-comment">// 找到对应节点的根</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>    <span class="hljs-type">int</span> j=i;<br>    <span class="hljs-keyword">while</span> (num[j]) &#123;<br>        j = num[j];<br>    &#125;<br>    <span class="hljs-comment">// 找到根节点后进行路径优化</span><br>    <span class="hljs-keyword">while</span> (num[i]&amp;&amp;num[i]!=j) &#123;<span class="hljs-comment">//num[i]为0就不用优化了</span><br>        <span class="hljs-type">int</span> next = num[i];<br>        num[i] = j;<br>        i = next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> j;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-type">char</span> oper;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        cin &gt;&gt; oper &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-type">int</span> root_a = <span class="hljs-built_in">find</span>(a);<br>        <span class="hljs-type">int</span> root_b = <span class="hljs-built_in">find</span>(b);<br>        <span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&#x27;M&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (root_b != root_a) &#123;<br>                num[root_b] = root_a;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (root_a != root_b) cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/solution/content/20690/">AcWing 836. 并查集(保姆级讲解) - AcWing</a></p><p>这是另外一种设计方法，当<code>num[id]==id</code>时代表该节点为根，它的优化方法比我的妙一点，用了递归</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> p[N];<span class="hljs-comment">//定义多个集合</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(p[x]!=x) p[x]=<span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    经上述可以发现,每个集合中只有祖宗节点的p[x]值等于他自己,即:</span><br><span class="hljs-comment">    p[x]=x;</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">return</span> p[x];<br>    <span class="hljs-comment">//找到了便返回祖宗节点的值</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) p[i]=i;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">char</span> op[<span class="hljs-number">2</span>];<br>        <span class="hljs-type">int</span> a,b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d%d&quot;</span>,op,&amp;a,&amp;b);<br>        <span class="hljs-keyword">if</span>(*op==<span class="hljs-string">&#x27;M&#x27;</span>) p[<span class="hljs-built_in">find</span>(a)]=<span class="hljs-built_in">find</span>(b);<span class="hljs-comment">//集合合并操作</span><br>        <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(a)==<span class="hljs-built_in">find</span>(b))<br>        <span class="hljs-comment">//如果祖宗节点一样,就输出yes</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="连通块中点的数量"><a href="#连通块中点的数量" class="headerlink" title="连通块中点的数量"></a>连通块中点的数量</h3><p><a href="https://www.acwing.com/problem/content/839/">837. 连通块中点的数量 - AcWing题库</a></p><p>和上面题目类似，就是可以选择将根节点的<code>num[id]</code>设置为<code>size</code></p><h3 id="食物链"><a href="#食物链" class="headerlink" title="食物链"></a>食物链</h3><p>带权并查集</p><p><a href="https://www.acwing.com/solution/content/1007/">AcWing 240. 食物链 - AcWing</a></p><p>需要按下面的评论改一下：</p><img src="/2024/04/09/algorithm/image-20240525120810894.png" alt="image-20240525120810894" style="zoom: 67%;"><h3 id="模拟散列表"><a href="#模拟散列表" class="headerlink" title="模拟散列表"></a>模拟散列表</h3><p><a href="https://www.acwing.com/problem/content/842/">840. 模拟散列表 - AcWing题库</a></p><p>就当是练练stl了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> N;<br>    cin &gt;&gt; N;<br>    unordered_set&lt;<span class="hljs-type">int</span>&gt; us;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-type">char</span> o;<br>        cin &gt;&gt; o &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-string">&#x27;I&#x27;</span>) &#123;<br>            us.<span class="hljs-built_in">insert</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (us.<span class="hljs-built_in">find</span>(x) != us.<span class="hljs-built_in">end</span>()) &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; endl;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><p><a href="https://www.acwing.com/solution/content/24738/">AcWing 841. 字符串哈希 【公式助理解】 - AcWing</a></p><p>设计hash函数，通过将字符串中的每个字符转成数字来将整个字符串转成p进制</p><p>再用$mod\ 2^{64}$的方法，如果超过了<code>unsigned long long</code>的范围，相当于取模了，非常巧妙</p><p>也用了前缀和的方法来计算子串和</p><h2 id="搜索与图论"><a href="#搜索与图论" class="headerlink" title="搜索与图论"></a>搜索与图论</h2><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><p><a href="https://www.acwing.com/problem/content/844/">842. 排列数字 - AcWing题库</a></p><p>这是一个排列树问题，是通过交换实现的遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; vi, <span class="hljs-type">int</span> l)</span> </span>&#123;<span class="hljs-comment">//l:已经确定l位</span><br>    <span class="hljs-keyword">if</span> (l == vi.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i += <span class="hljs-number">1</span>) &#123;<br>            cout &lt;&lt; vi[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;cout &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt; vi.<span class="hljs-built_in">size</span>(); i += <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">swap</span>(vi[l],vi[i]);<br>        <span class="hljs-built_in">backtrack</span>(vi, l + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//swap(vi[l], vi[i]);//这里交换了就不是字典序了</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vi</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">1</span>) &#123;<br>        vi[i] = i+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">backtrack</span>(vi, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>说实话，我也不是很懂为什么回溯的结束交换一下就不是字典序了，不交换就正确了，<strong>所以最好不要用</strong></p><p>但是可以看下面这种解法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">path, visited, n</span>):  <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(path) == n:  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, path)))  <br>        <span class="hljs-keyword">return</span>  <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):  <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> visited[i]:  <br>            visited[i] = <span class="hljs-literal">True</span>  <br>            path.append(i)  <br>            dfs(path, visited, n)  <br>            path.pop()  <br>            visited[i] = <span class="hljs-literal">False</span>  <br>  <br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())  <br>visited = [<span class="hljs-literal">False</span>] * (n + <span class="hljs-number">1</span>)  <br>dfs([], visited, n)<br></code></pre></td></tr></table></figure><p>可以用一个标志位来实现正确的遍历</p><h3 id="n皇后问题"><a href="#n皇后问题" class="headerlink" title="n皇后问题"></a>n皇后问题</h3><p><a href="https://www.acwing.com/problem/content/description/845/">843. n-皇后问题 - AcWing题库</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> vi[<span class="hljs-number">100002</span>];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> now)</span> </span>&#123;<span class="hljs-comment">//now is new to the solution</span><br>    <span class="hljs-comment">//任意两个皇后都不能处于同一行、同一列或同一斜线上</span><br>    <span class="hljs-type">int</span> r=now, c=vi[now];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; now; i++) &#123;<br>        <span class="hljs-keyword">if</span> (vi[i] == c) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(i - r) == <span class="hljs-built_in">abs</span>(c - vi[i])) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> vi[], <span class="hljs-type">int</span> l)</span> </span>&#123;<span class="hljs-comment">//0-&gt;l-1 is selected</span><br>    <span class="hljs-keyword">if</span> (l == n) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i += <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; l; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j == vi[i]) cout &lt;&lt; <span class="hljs-string">&quot;Q&quot;</span>;<br>                <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;.&quot;</span>;<br>            &#125;cout &lt;&lt; endl;<br>        &#125;cout &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt; n; i += <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">swap</span>(vi[l],vi[i]);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(l)) <span class="hljs-built_in">backtrack</span>(vi, l + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">swap</span>(vi[l], vi[i]);<span class="hljs-comment">//这里一定要恢复现场</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">1</span>) &#123;<br>        vi[i] = i;<br>    &#125;<br>    <span class="hljs-built_in">backtrack</span>(vi, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>总结：尽量用恢复现场的方法，如果dfs要求字典序，则要用一个标志数组来记录有没有遍历对应的位置</p><h3 id="走迷宫"><a href="#走迷宫" class="headerlink" title="走迷宫"></a>走迷宫</h3><p><a href="https://www.acwing.com/solution/content/36520/">AcWing 844. 走迷宫：图解+代码注释 - AcWing</a></p><p>这个解法对于四个走的方向的处理还是很妙的，使用了dx和dy两个4维数组存储四个方向的移动值来方便查询4个移动方向</p><p>最先走到终点的一定是最短路径，当然这题在记录层数的时候可以放一个-1在队列里面</p><h3 id="八数码"><a href="#八数码" class="headerlink" title="八数码"></a>八数码</h3><p><a href="https://www.acwing.com/solution/content/15149/">AcWing 845. 八数码 - AcWing</a></p><p>这个存状态有没有走过使用了字符串，感觉是比较妙的点</p><h3 id="树的重心"><a href="#树的重心" class="headerlink" title="树的重心"></a>树的重心</h3><p>这个感觉非常搞</p><p>大致思路：<a href="https://www.acwing.com/solution/content/4917/">AcWing 846. 树的重心 - AcWing</a></p><p>关于代码中的sum&#x2F;res&#x2F;ans的意义：<a href="https://www.acwing.com/solution/content/117855/">AcWing 846. 树的重心(把这道题研究成灰的题解) - AcWing</a></p><p>本题使用了树的邻接表表示方法，但不是用链表实现的</p><p>插入（头插法）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>; <span class="hljs-comment">//数据范围是10的5次方</span><br><span class="hljs-comment">//邻接表</span><br><span class="hljs-type">int</span> h[N], e[N * <span class="hljs-number">2</span>], ne[N * <span class="hljs-number">2</span>], idx;<span class="hljs-comment">//h数组的大小是节点数 e/ne的大小是边数</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h); <span class="hljs-comment">//初始化h数组 -1表示尾节点</span><br>    cin &gt;&gt; n; <span class="hljs-comment">//表示树的结点数</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-built_in">add</span>(a, b), <span class="hljs-built_in">add</span>(b, a); <span class="hljs-comment">//无向图</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/solution/content/104791/">遍历</a>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)  <br>&#123;<br>    cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;:&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=h[i];j!=<span class="hljs-number">-1</span>;j=ne[j])<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;-&gt;&quot;</span>&lt;&lt;e[j]; <br>    &#125;<br>    cout&lt;&lt;endl;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1:-&gt;4-&gt;7-&gt;2</span><br><span class="hljs-comment">2:-&gt;5-&gt;8-&gt;1</span><br><span class="hljs-comment">3:-&gt;9-&gt;4</span><br><span class="hljs-comment">4:-&gt;6-&gt;3-&gt;1</span><br><span class="hljs-comment">5:-&gt;2</span><br><span class="hljs-comment">6:-&gt;4</span><br><span class="hljs-comment">7:-&gt;1</span><br><span class="hljs-comment">8:-&gt;2</span><br><span class="hljs-comment">9:-&gt;3</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>关于h,e,ne讲的还算清楚的一个：</p><p><img src="/2024/04/09/algorithm/image-20240526102649875.png" alt="image-20240526102649875"></p><h3 id="有向图的拓扑序列"><a href="#有向图的拓扑序列" class="headerlink" title="有向图的拓扑序列"></a>有向图的拓扑序列</h3><p>超时了，所以说不要自己手搓类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">point</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> cout;<br>    <span class="hljs-type">static</span> set&lt;<span class="hljs-type">int</span>&gt; zero_in;<br>    <span class="hljs-type">int</span> id;<br>    set&lt;<span class="hljs-type">int</span>&gt; in;<br>    set&lt;<span class="hljs-type">int</span>&gt; out;<br>    <span class="hljs-built_in">point</span>() &#123;<br>        id = cout++;<br>        <span class="hljs-keyword">if</span>(id)zero_in.<span class="hljs-built_in">insert</span>(id);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>        in.<span class="hljs-built_in">erase</span>(id);<br>        <span class="hljs-keyword">if</span> (in.<span class="hljs-built_in">empty</span>()) &#123;<br>            zero_in.<span class="hljs-built_in">insert</span>(<span class="hljs-keyword">this</span>-&gt;id);<br>        &#125;<br>    &#125;<br>&#125;; <span class="hljs-type">int</span> point::cout = <span class="hljs-number">0</span>;<br>set&lt;<span class="hljs-type">int</span>&gt; point:: zero_in=<span class="hljs-built_in">set</span>&lt;<span class="hljs-type">int</span>&gt;();<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    string result;<br>    <span class="hljs-comment">//point* p = new point[n];</span><br>    <span class="hljs-function">vector&lt;point&gt; <span class="hljs-title">p</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>    set&lt;<span class="hljs-type">int</span>&gt; res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        res.<span class="hljs-built_in">insert</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        p[a].out.<span class="hljs-built_in">insert</span>(b);<br>        point::zero_in.<span class="hljs-built_in">erase</span>(b);<br>        p[b].in.<span class="hljs-built_in">insert</span>(a);<br>    &#125;<br>    <span class="hljs-keyword">while</span> (point::zero_in.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-type">int</span> pi = *(point::zero_in.<span class="hljs-built_in">begin</span>());<br>        point::zero_in.<span class="hljs-built_in">erase</span>(pi);<br>        res.<span class="hljs-built_in">erase</span>(pi);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = p[pi].out.<span class="hljs-built_in">begin</span>(); i != p[pi].out.<span class="hljs-built_in">end</span>(); i++) &#123;<br>            p[*i].<span class="hljs-built_in">remove</span>(pi);<br>        &#125;<br>        result = result + <span class="hljs-built_in">to_string</span>(pi)+<span class="hljs-string">&#x27; &#x27;</span>;<br><br>    &#125;<br>    <span class="hljs-keyword">if</span> (res.<span class="hljs-built_in">size</span>()) cout &lt;&lt; <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; result;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="有边数限制的最短路-Bellman-ford"><a href="#有边数限制的最短路-Bellman-ford" class="headerlink" title="有边数限制的最短路(Bellman_ford)"></a>有边数限制的最短路(Bellman_ford)</h3><p><a href="https://www.acwing.com/solution/content/6320/">AcWing 853. 有边数限制的最短路 - AcWing</a></p><p>Dijkstra算法不能用在有负权重的边中</p><h3 id="SPFA算法"><a href="#SPFA算法" class="headerlink" title="SPFA算法"></a>SPFA算法</h3><p>在Bellman_ford的基础上只选择一部分点进行更新</p><p><a href="https://www.acwing.com/solution/content/9306/">AcWing 851. SPFA算法 - AcWing</a></p><blockquote><p>Bellman-ford可以处理任意带负权边和负权环的图，SPFA可以处理带负权边的图，Dijkstra只能处理带正权边的图；当然，从时间复杂度的效率来讲，是反过来的</p></blockquote><h3 id="spfa判断负环"><a href="#spfa判断负环" class="headerlink" title="spfa判断负环"></a>spfa判断负环</h3><p><a href="https://www.acwing.com/solution/content/6336/">AcWing 852. spfa判断负环 - AcWing</a></p><h3 id="floyd算法"><a href="#floyd算法" class="headerlink" title="floyd算法"></a>floyd算法</h3><p><a href="https://www.acwing.com/solution/content/6976/">AcWing 854. Floyd求最短路 - AcWing</a>：这个链接还有各种求最短路径方法的总结</p><p>其中代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">210</span>, M = <span class="hljs-number">2e+10</span>, INF = <span class="hljs-number">1e9</span>;<br><br><span class="hljs-type">int</span> n, m, k, x, y, z;<br><span class="hljs-type">int</span> d[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">floyd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>                d[i][j] = <span class="hljs-built_in">min</span>(d[i][j], d[i][k] + d[k][j]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            <span class="hljs-keyword">if</span>(i == j) d[i][j] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> d[i][j] = INF;<br>    <span class="hljs-keyword">while</span>(m--) &#123;<br>        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;<br>        d[x][y] = <span class="hljs-built_in">min</span>(d[x][y], z);<br>        <span class="hljs-comment">//注意保存最小的边</span><br>    &#125;<br>    <span class="hljs-built_in">floyd</span>();<br>    <span class="hljs-keyword">while</span>(k--) &#123;<br>        cin &gt;&gt; x &gt;&gt; y;<br>        <span class="hljs-keyword">if</span>(d[x][y] &gt; INF/<span class="hljs-number">2</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>        <span class="hljs-comment">//由于有负权边存在所以约大过INF/2也很合理</span><br>        <span class="hljs-keyword">else</span> cout &lt;&lt; d[x][y] &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>if(d[x][y] &gt; INF/2) puts(&quot;impossible&quot;);</code>：个人理解这行是因为有负权重才设置为这样的条件的，如果不是负权重则<code>d[x][y] == INF</code>就行</p><h3 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h3><p><a href="https://www.acwing.com/solution/content/8022/">AcWing 858. Prim算法求最小生成树(堆优化写法) - AcWing</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">502</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">2</span> * <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> flag[N];<br><span class="hljs-type">int</span> e[M],ne[M], h[M],w[M],idx;<br><span class="hljs-type">int</span> ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    e[idx] = b;<br>    w[idx] = x;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h); <span class="hljs-comment">//初始化h数组 -1表示尾节点</span><br>    <span class="hljs-built_in">memset</span>(flag, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> flag); <span class="hljs-comment">//初始化h数组 -1表示尾节点</span><br>    <span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<span class="hljs-comment">//堆里存储距离和节点编号</span><br>    priority_queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&gt; heap;<span class="hljs-comment">//小根堆</span><br><br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-type">int</span> u, v, x;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (u == v)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">add</span>(u, v, x);<br>        <span class="hljs-built_in">add</span>(v, u, x);<br>    &#125;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    heap.<span class="hljs-built_in">push</span>(&#123; <span class="hljs-number">0</span>,<span class="hljs-number">1</span> &#125;);<br>    <br>    <span class="hljs-keyword">while</span> (heap.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-type">int</span> x = heap.<span class="hljs-built_in">top</span>().first;<br>        <span class="hljs-type">int</span> p = heap.<span class="hljs-built_in">top</span>().second;<br>        heap.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (flag[p]) <span class="hljs-keyword">continue</span>;<br>        flag[p] = <span class="hljs-literal">true</span>;<br>        ans += x;<br>        cnt++;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[p]; i != <span class="hljs-number">-1</span>; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (!flag[j]) heap.<span class="hljs-built_in">push</span>(&#123; w[i], j &#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cnt == n) cout &lt;&lt; ans;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;impossible&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>他说的对，上面这种写法确实有点重复：</p><p><img src="/2024/04/09/algorithm/image-20240527102036172.png" alt="image-20240527102036172"></p><h3 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h3><p><a href="https://www.acwing.com/solution/content/104383/">AcWing 859. Kruskal算法求最小生成树—海绵宝宝来喽 - AcWing</a></p><p>使用并查集实现</p><h3 id="染色法判定二分图"><a href="#染色法判定二分图" class="headerlink" title="染色法判定二分图"></a>染色法判定二分图</h3><p><a href="https://www.acwing.com/solution/content/105874/">AcWing 860. 染色法判定二分图—详细代码注释+图解 - AcWing</a></p><p>这个比较妙的一个点是它把点的颜色和是否遍历过这个点放在同一个数组进行存储</p><h3 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h3><p><a href="https://www.acwing.com/solution/content/5334/">AcWing 861. 二分图的最大匹配 - AcWing</a></p><h2 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h2><h3 id="分解质因数"><a href="#分解质因数" class="headerlink" title="分解质因数"></a>分解质因数</h3><p>这个需要把重复的子问题存起来：如将已经判定是质数的数字存到一个数组，等这个数组不够大了再扩充</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//  判断是否为质数</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> m)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (m == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">int</span> t = <span class="hljs-built_in">sqrt</span>(m)+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; t; i++) &#123;<br>        <span class="hljs-keyword">if</span> ((!(m % i))&amp;&amp;m!=i) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; ps = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//质数数组</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; m;<br>        <span class="hljs-comment">// 当前已经遍历到质数数组的第j个</span><br>        <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (m != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (j == ps.<span class="hljs-built_in">size</span>()) &#123;<br>                <span class="hljs-comment">// 遍历到最后一个了 需要扩充</span><br>                <span class="hljs-type">int</span> k = ps[ps.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>]+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isPrime</span>(k)) &#123;<br>                    k++;<br>                &#125;<br>                ps.<span class="hljs-built_in">push_back</span>(k);<br>                <span class="hljs-comment">//cout &lt;&lt; &quot;扩充质数队列&quot; &lt;&lt; k &lt;&lt; endl;</span><br>                <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-built_in">sqrt</span>(m) + <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-comment">// 这个后面说</span><br>                    cout &lt;&lt; m &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-number">1</span>&lt;&lt; endl;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(!(m % ps[j])) &#123;<br>                <span class="hljs-comment">// 约分</span><br>                <span class="hljs-keyword">if</span> (!cnt) &#123;<br>                    cout &lt;&lt; ps[j] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>                &#125;<br>                cnt++;<br>                <span class="hljs-comment">//cout &lt;&lt; &quot;除以一次&quot; &lt;&lt; ps[j] &lt;&lt; endl;</span><br>                m /= ps[j];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cnt) &#123;<br>                <span class="hljs-comment">// 该质数已经分析完毕 需要开始分析下一个质数</span><br>                cout &lt;&lt; cnt &lt;&lt; endl;<br>            &#125;<br>            <span class="hljs-comment">// 下一个</span><br>            j++;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>关于这一步的添加：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (k &gt; <span class="hljs-built_in">sqrt</span>(m) + <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 这个后面说</span><br>    cout &lt;&lt; m &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-number">1</span>&lt;&lt; endl;<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>遇到1389338897&#x3D;23*60406039这种</p><p>我的算法需要一直扩充到60406039才能确定60406039是一个质数，然后再输出</p><p>事实上只要扩充到sqrt(60406039)就可以确定60406039是一个质数了，直接输出就行了，注意此时的m不需要加入质数队列</p><h3 id="筛质数"><a href="#筛质数" class="headerlink" title="筛质数"></a>筛质数</h3><p><a href="https://www.acwing.com/solution/content/2559/">AcWing 868. 筛质数 - AcWing</a></p><p>我的代码(应该不是最快的)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>vector&lt;<span class="hljs-type">int</span>&gt; ps = &#123;&#125;;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> m)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(ps.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-comment">// 需要初始化质数队列</span><br>        <span class="hljs-keyword">if</span> (m == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> t = <span class="hljs-built_in">sqrt</span>(m)+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; t; i++) &#123;<br>            <span class="hljs-keyword">if</span> ((!(m % i))&amp;&amp;m!=i) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 迭代质数队列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ps.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-type">int</span> t = ps[i];<br>            <span class="hljs-keyword">if</span> (t &gt; <span class="hljs-built_in">sqrt</span>(m) + <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// 已知的质数无法整除m 说明m是质数</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (m % t == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// m是合数</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isPrime</span>(i)) &#123;<br>            cnt++;<br>            ps.<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; cnt;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="试除法求约数"><a href="#试除法求约数" class="headerlink" title="试除法求约数"></a>试除法求约数</h3><p><a href="https://www.acwing.com/solution/content/148960/">AcWing 869. 试除法求约数–海绵宝宝来喽 - AcWing</a></p><p>set用多了，看啥都想用set来排序，事实上也可以先搞一个vector再最后排序(理论上这两种方法的复杂度是一样的)</p><h3 id="约数个数"><a href="#约数个数" class="headerlink" title="约数个数"></a>约数个数</h3><p><a href="https://www.acwing.com/solution/content/148964/">AcWing 870. 约数个数—海绵宝宝来喽 - AcWing</a></p><p>是基于质因数分解的解题，它的算法在分解因数的过程中保证了因数一定是一个质数，不用专门判定这个数是不是质数</p><h3 id="约数之和"><a href="#约数之和" class="headerlink" title="约数之和"></a>约数之和</h3><p><a href="https://www.acwing.com/solution/content/145781/">AcWing 871. \Huge\color{gold}{约数之和} - AcWing</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>map&lt;<span class="hljs-type">long</span>, <span class="hljs-type">long</span>&gt;mii;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> n,m;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> mod1 = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-comment">// 寻找所有数的质因数</span><br>        cin &gt;&gt; m;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> j = <span class="hljs-number">2</span>; j &lt;= m / j; j++) &#123;<br>            <span class="hljs-keyword">while</span> (m % j == <span class="hljs-number">0</span>) &#123;<br>                mii[j]++;<br>                m /= j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (m &gt; <span class="hljs-number">1</span>) &#123;<br>            mii[m]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = mii.<span class="hljs-built_in">begin</span>(); i != mii.<span class="hljs-built_in">end</span>(); i++) &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> a = i-&gt;first;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> b = i-&gt;second;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (b--) &#123;<br>            <span class="hljs-comment">// 这里不用等比数列求和的原因是怕临时和太大</span><br>            t = (t * a + <span class="hljs-number">1</span>) % mod1;<br>        &#125;<br>        res = res * t % mod1;<br>    &#125;<br>    cout &lt;&lt; res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>有时候还得是long long而不是int</p><p>犯了个错：$10e2$和$1e2$不是一回事，前者是$10<em>\ 10^2$后者是$1</em>\ 10^2$</p><p>类似的，$2e2$是$200$</p><h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3><p>即辗转相除法</p><p><a href="https://www.acwing.com/solution/content/145791/">AcWing 872. 最大公约数–海绵宝宝来喽 - AcWing</a></p><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><p><a href="https://www.acwing.com/solution/content/15293/">AcWing 875. 快速幂-数论-C++(递归、迭代、暴力) - AcWing</a></p><p>化为二进制求解</p><h3 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h3><p>这个推导结合辗转相除法，不是很难</p><p>就是要记住0和非零数的$gcd$是这个非零数</p><p><a href="https://www.acwing.com/solution/content/1393/">AcWing 877. 扩展欧几里得算法 - AcWing</a></p><h3 id="线性同余方程"><a href="#线性同余方程" class="headerlink" title="线性同余方程"></a>线性同余方程</h3><p>换了一个皮的扩展欧几里得算法</p><p><a href="https://www.acwing.com/solution/content/5937/">AcWing 878. 线性同余方程 - AcWing</a></p><p>其他数论题涉及证明的题太多了，先跳了</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h3><p><a href="https://www.acwing.com/solution/content/1374/">AcWing 2. 01背包问题（状态转移方程讲解） - AcWing</a></p><p>二维的比较容易理解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">1005</span>;<br><span class="hljs-type">int</span> v[MAXN];    <span class="hljs-comment">// 体积</span><br><span class="hljs-type">int</span> w[MAXN];    <span class="hljs-comment">// 价值 </span><br><span class="hljs-type">int</span> f[MAXN][MAXN];  <span class="hljs-comment">// f[i][j], j体积下前i个物品的最大价值 </span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;   <br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <br>        cin &gt;&gt; v[i] &gt;&gt; w[i];<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            <span class="hljs-comment">//  当前背包容量装不进第i个物品，则价值等于前i-1个物品</span><br>            <span class="hljs-keyword">if</span>(j &lt; v[i]) <br>                f[i][j] = f[i - <span class="hljs-number">1</span>][j];<br>            <span class="hljs-comment">// 能装，需进行决策是否选择第i个物品</span><br>            <span class="hljs-keyword">else</span>    <br>                f[i][j] = <span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][j], f[i - <span class="hljs-number">1</span>][j - v[i]] + w[i]);<br>        &#125;           <br><br>    cout &lt;&lt; f[n][m] &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>大概拓展方式是下面这样：</p><table><thead><tr><th>物品\容积</th><th>0</th><th>1</th><th>2</th></tr></thead><tbody><tr><td>0</td><td>-&gt;</td><td>-&gt;</td><td>-&gt;</td></tr><tr><td>1</td><td>-&gt;</td><td>-&gt;</td><td>-&gt;</td></tr><tr><td>2</td><td>-&gt;</td><td>-&gt;</td><td>-&gt;</td></tr></tbody></table><h3 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h3><p><a href="https://www.acwing.com/problem/content/description/3/">3. 完全背包问题 - AcWing题库</a></p><p>这个有了上面的题解，只要改一点就好了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//f[i][j] = max(f[i - 1][j], f[i - 1][j - v[i]] + w[i]);</span><br><span class="hljs-comment">//改成</span><br>f[i][j] = <span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][j], f[i][j - v[i]] + w[i]);<span class="hljs-comment">//因为装了以后可以继续装</span><br></code></pre></td></tr></table></figure><h3 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h3><p><a href="https://www.acwing.com/problem/content/4/">4. 多重背包问题 I - AcWing题库</a></p><p>文心一言它真有，这种算法在一直重置$f[i][j]$的值，保证最后它的值是最大的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">105</span>;<br><span class="hljs-type">int</span> v[MAXN];    <span class="hljs-comment">// 体积</span><br><span class="hljs-type">int</span> w[MAXN];    <span class="hljs-comment">// 价值 </span><br><span class="hljs-type">int</span> s[MAXN];    <span class="hljs-comment">// 件数</span><br><span class="hljs-type">int</span> f[MAXN][MAXN];  <span class="hljs-comment">// f[i][j], j体积下前i个物品的最大价值 </span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            <span class="hljs-comment">// 初始化当前状态为不选择第i个物品的情况  </span><br>            f[i][j] = f[i - <span class="hljs-number">1</span>][j];<br>            <span class="hljs-comment">// 尝试放入第i个物品，考虑数量限制  </span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= s[i] &amp;&amp; k * v[i] &lt;= j; k++) &#123;<br>                f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i - <span class="hljs-number">1</span>][j - k * v[i]] + k * w[i]);<br>            &#125;<br>        &#125;<br><br>    cout &lt;&lt; f[n][m] &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们看文心一言怎么说：</p><blockquote><p>这是一个典型的背包问题，具体来说，它属于多重背包问题的范畴。在多重背包问题中，每种物品有一个固定的数量限制，而不是像01背包或完全背包问题中那样只能取一个或无限制。</p><p>为了求解这个问题，我们可以使用动态规划的方法。我们定义一个二维数组<code>dp[i][j]</code>，表示考虑前<code>i</code>个物品，当前背包容量为<code>j</code>时的最大价值。状态转移方程可以表示为：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = max(dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>, dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-k*v<span class="hljs-comment">[i]</span>]</span> + k*w<span class="hljs-comment">[i]</span>) for all k from 0 to min(s<span class="hljs-comment">[i]</span>, j/v<span class="hljs-comment">[i]</span>)<br></code></pre></td></tr></table></figure><p>其中<code>k</code>代表第<code>i</code>种物品选择的数量，<code>v[i]</code>、<code>w[i]</code>和<code>s[i]</code>分别代表第<code>i</code>种物品的体积、价值和数量限制。</p><p>但是，上述方法的时间复杂度较高，为<code>O(NV*S)</code>，其中<code>S</code>是<code>s[i]</code>中的最大值。为了优化这个问题，我们可以采用二进制优化的方法，将多重背包转化为01背包进行处理，以降低时间复杂度。</p><p>二进制优化的基本思想是将每种物品的数量<code>s[i]</code>拆分成若干个“新的物品”，这些新物品的价值和体积是原物品的1倍、2倍、4倍…直到不能再拆分（即超过原数量<code>s[i]</code>）。这样可以将原问题转化为01背包问题，并大大减少需要考虑的物品数量，从而降低时间复杂度。</p><p>具体实现时，我们可以先对每种物品进行二进制拆分，然后使用01背包的方法求解。</p><p>然而，在这个问题中，由于数据范围较小（N, V, v[i], w[i], s[i] 均不超过100），我们甚至可以直接使用未优化的多重背包方法来解决。</p><p>下面是一个使用未优化的多重背包方法来解决这个问题的Python代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">N, V = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>items = []<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    v, w, s = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    items.append((v, w, s))<br><br><span class="hljs-comment"># 初始化dp数组</span><br>dp = [<span class="hljs-number">0</span>] * (V + <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 多重背包求解</span><br><span class="hljs-keyword">for</span> v, w, s <span class="hljs-keyword">in</span> items:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(V, v - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">min</span>(s, j // v) + <span class="hljs-number">1</span>):<br>            dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - k * v] + k * w)<br><br><span class="hljs-built_in">print</span>(dp[V])<br></code></pre></td></tr></table></figure><p>注意：这个解法在数据范围较大时可能不够高效，但对于本题的数据范围是足够的。如果需要处理更大的数据范围，建议使用二进制优化或其他更高效的算法。</p></blockquote><p>来看看二进制优化是怎么样的：</p><p><a href="https://www.acwing.com/solution/content/20115/">AcWing 5. 二进制优化，它为什么正确，为什么合理，凭什么可以这样分？？ - AcWing</a></p><h3 id="分组背包问题"><a href="#分组背包问题" class="headerlink" title="分组背包问题"></a>分组背包问题</h3><p>这个也不难，就是把i理解成第i组而不是第i个，然后进行迭代求解</p><p><a href="https://www.acwing.com/solution/content/3483/">AcWing 9. 分组背包问题 - AcWing</a></p><h3 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h3><p>这个只看了一个简单方法，二分的还没看</p><p><a href="https://www.acwing.com/solution/content/182361/">AcWing 895. 最长上升子序列-小白专享 - AcWing</a></p><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><p><a href="https://www.acwing.com/solution/content/179443/">AcWing 897. 一图全解最长公共子序列问题~（算法基础课） - AcWing</a></p><p>这个也不难</p><h3 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h3><p><a href="https://www.acwing.com/solution/content/13945/">AcWing 282. 石子合并（区间 DP 模版题详解分析） - AcWing</a></p><img src="/2024/04/09/algorithm/image-20240601155522346.png" alt="image-20240601155522346" style="zoom: 67%;"><p>按这个解答所示，就是将第一个下标和第二个下标表示为从一个开始到结束的代价</p><p>其中s数组是前缀和，$s[j]−s[i−1]$表示将这两堆石子合并的代价</p><h3 id="整数划分"><a href="#整数划分" class="headerlink" title="整数划分"></a>整数划分</h3><p>这个比较特别，$f[0][0]$需要被初始化为1</p><p>$f[i][j]&#x3D;f[i−1][j]+f[i][j−i]$</p><p><a href="https://www.acwing.com/solution/content/2954/">AcWing 900. 整数划分 （求方案数、朴素做法 、等价变形 ） - AcWing</a></p><h3 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h3><p>这个我是真看懂了：<a href="https://www.acwing.com/solution/content/105019/">AcWing 285. 没有上司的舞会 - AcWing</a></p><p>感觉多数DP问题的关键在于如何构造$f[i][j]$这个数组的含义</p><h3 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h3><p>使用一个数组来存储状态，如果这个数组中的数值变化了，则说明已经是最优，否则需要更新</p><p><a href="https://www.acwing.com/solution/content/131293/">AcWing 901. $\color{blue}{滑雪—-记忆化搜索（超详细讲解）}$ - AcWing</a></p><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><h3 id="区间选点"><a href="#区间选点" class="headerlink" title="区间选点"></a>区间选点</h3><p><a href="https://www.acwing.com/solution/content/16905/">AcWing 905. 区间选点 - AcWing</a></p><p>这种题肯定需要关注左右端点</p><h3 id="最大不相交区间数量"><a href="#最大不相交区间数量" class="headerlink" title="最大不相交区间数量"></a>最大不相交区间数量</h3><p>最早结束时间，看右端点</p><p><a href="https://www.acwing.com/solution/content/200374/">AcWing 908. 最大不相交区间数量-最易懂的证明 - AcWing</a></p><h3 id="区间分组"><a href="#区间分组" class="headerlink" title="区间分组"></a>区间分组</h3><p>最小厚度问题，看左端点</p><p><a href="https://www.acwing.com/solution/content/200493/">AcWing 906. 区间分组-最易懂的证明 - AcWing</a></p><h3 id="区间覆盖"><a href="#区间覆盖" class="headerlink" title="区间覆盖"></a>区间覆盖</h3><p>这个有点难想到</p><p><a href="https://www.acwing.com/solution/content/16980/">AcWing 907. 区间覆盖 - AcWing</a></p><h3 id="合并果子"><a href="#合并果子" class="headerlink" title="合并果子"></a>合并果子</h3><p>就是哈夫曼树</p><p><a href="https://www.acwing.com/solution/content/3258/">AcWing 148. 合并果子 - AcWing</a></p><h3 id="排队打水"><a href="#排队打水" class="headerlink" title="排队打水"></a>排队打水</h3><p>短作业优先</p><p><a href="https://www.acwing.com/solution/content/126928/">AcWing 913. 排队打水 —— 经典贪心 - AcWing</a></p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记</title>
    <link href="/2024/03/08/paper-reading/"/>
    <url>/2024/03/08/paper-reading/</url>
    
    <content type="html"><![CDATA[<h1 id="深度学习论文阅读笔记"><a href="#深度学习论文阅读笔记" class="headerlink" title="深度学习论文阅读笔记"></a>深度学习论文阅读笔记</h1><p>跟着 <a href="https://github.com/mli/paper-reading">mli&#x2F;paper-reading: 深度学习经典、新论文逐段精</a> 这个系列视频进行学习，这里做一个简单的笔记</p><h2 id="如何读论文"><a href="#如何读论文" class="headerlink" title="如何读论文"></a>如何读论文</h2><p><a href="https://www.bilibili.com/video/BV1H44y1t75x/">https://www.bilibili.com/video/BV1H44y1t75x/</a></p><p>这个收获比较大的地方是第一次看论文的abstract和conclusion</p><p>第二次看图表</p><h2 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a>AlexNet</h2><p><a href="https://www.bilibili.com/video/BV1ih411J7Kz">https://www.bilibili.com/video/BV1ih411J7Kz</a></p><p>深度和宽度都重要</p><p>AlexNet之前人们认为无监督学习更好，AlexNet证明了数据量够好和够深的网络也能打赢无监督学习</p><p>预处理：简单裁剪</p><p>end to end</p><p>并行训练：现在NLP领域又兴起了</p><p>dropout在现行模型上等价于一个L2正则项</p><p>降lr的方法：人工手工降（现在用cos函数慢慢降低</p><h2 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h2><p><a href="https://www.bilibili.com/video/BV1Fb4y1h73E">https://www.bilibili.com/video/BV1Fb4y1h73E</a></p><p>可以用ResNet来让更深的模型更容易训练</p><p>和AlexNet一样的降lr方法</p><p>ResNet训练比较快的原因：梯度保持的好</p><h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><p><a href="https://www.bilibili.com/video/BV1pu411o7BE">https://www.bilibili.com/video/BV1pu411o7BE</a></p><p>编码器-解码器架构，解决机器翻译问题</p><p>RNN 特点（缺点）：难以并行，丢失很早的历史信息</p><p>encoder 一次性看全整个句子，decoder 的输出词是一个一个生成的</p><p><img src="/2024/03/08/paper-reading/image-20240620172604329.png" alt="Transformer"></p><p>简单设计：只需调 2 个参数 dmodel 每层维度有多大 和 N 多少层，影响后续一系列网络的设计，BERT、GPT。</p><p>LayerNorm而不是BatchNorm</p><p>做Mask的方法：把 t 时刻以后 Qt 和 Kt 的值换成一个很大的负数</p><p>Positional Encoding：简单相加</p><h2 id="GNN"><a href="#GNN" class="headerlink" title="GNN"></a>GNN</h2><p><a href="https://www.bilibili.com/video/BV1iT4y1d7zP/">https://www.bilibili.com/video/BV1iT4y1d7zP/</a></p><p>图信息：点，边，图整体（虚构，来连接很远的点），连接情况</p><p>问题：矩阵很大（难以存储），边通常是稀疏的（难以并行），邻接矩阵的 行、列顺序交换，不会影响图（异构）</p><p>方法：存一个邻接列表</p><p>可以做几个MLP来研究4种图信息的关系，可以分开做，也可以一起做（GCN）</p><p>GNN 对超参数比较敏感</p><h2 id="GAN"><a href="#GAN" class="headerlink" title="GAN"></a>GAN</h2><p><a href="https://www.bilibili.com/video/BV1rb4y187vD">https://www.bilibili.com/video/BV1rb4y187vD</a></p><p>每次迭代，先更新 D 再更新 G，但是双方最好实力相当</p><p>无监督学习，无需标注数据</p><h2 id="BERT"><a href="#BERT" class="headerlink" title="BERT"></a>BERT</h2><p><a href="https://www.bilibili.com/video/BV1PL411M7eQ">https://www.bilibili.com/video/BV1PL411M7eQ</a></p><p>pre-training: 在一个大的数据集上训练好一个模型 pre-training，模型的主要任务是用在其它任务 training 上。</p><p>BERT: 用深的、双向的、transformer 来做预训练，用来做语言理解的任务。</p><p>GPT unidirectional，使用左边的上下文信息 预测未来</p><p>NLP任务分两类：句子关系，完形填空</p><p>BERT 通过 MLM 带掩码的语言模型 作为预训练的目标，来减轻 语言模型的单向约束。</p><p>在无标号的大量数据集上训练的模型效果 &gt; 有标号、但数据量少一些的数据集上训练效果不好</p><p>在大量无标号的图片上训练的模型，可能比 有标号的 ImageNet 百万图片 效果更好。</p><h2 id="ViT"><a href="#ViT" class="headerlink" title="ViT"></a>ViT</h2><p><a href="https://www.bilibili.com/video/BV15P4y137jb">https://www.bilibili.com/video/BV15P4y137jb</a></p><p>原本cv中的注意力：attention + CNN ，轴attention</p><p>对图片块进行自注意力</p><p>CNN的归纳偏置：先卷积还是先平移没有影响</p><p>CNN 有 很多先验信息 –&gt; 需要较少的数据去学好一个模型</p><p>引入一维位置编码</p><h2 id="InstructGPT"><a href="#InstructGPT" class="headerlink" title="InstructGPT"></a>InstructGPT</h2><p><a href="https://www.bilibili.com/video/BV1hd4y187CR/?vd_source=737ee62e1c886f11b0be14090dbafc9e">InstructGPT 论文精读【论文精读·48】</a></p><p>感觉比较有意思的地方是用了强化学习，专门做了一个RL模型(奖励)来给原来模型的微调模型(策略)给分，因为微调参数变了，分布参数也会变。然后RL是个排序模型，可以节省大量的标注。</p><h2 id="GPT-1-2-3"><a href="#GPT-1-2-3" class="headerlink" title="GPT-1-2-3"></a>GPT-1-2-3</h2><p><a href="https://www.bilibili.com/video/BV1AF411b7xQ/?vd_source=737ee62e1c886f11b0be14090dbafc9e">GPT，GPT-2，GPT-3 论文精读【论文精读】</a></p><p>Bert是完形填空，GPT是预测未来(更难但是上限更高)</p><p>GPT是预训练模型，是Transformer的解码器。(BERT:编码器)</p><p>GPT在训练过程中加入了分隔符这种辅助的符号</p><p>GPT2主打zero-shot，相对没特别多的创新</p><p>GPT3是few-shot，训练完了不更新模型参数</p><h2 id="多模态"><a href="#多模态" class="headerlink" title="多模态"></a>多模态</h2><p><a href="https://www.bilibili.com/video/BV1Vd4y1v77v/">https://www.bilibili.com/video/BV1Vd4y1v77v/</a></p><p><a href="https://blog.csdn.net/qq_42030496/article/details/136051417">https://blog.csdn.net/qq_42030496/article/details/136051417</a></p><p>多模态看来真的很吃资源</p><p><strong>CLIP</strong>:使用对比学习，将不相关的图像和文本之间的距离拉大，相关的图像和文本之间的距离拉小，最后只要做一个点乘就好了</p><h3 id="ALBEF"><a href="#ALBEF" class="headerlink" title="ALBEF"></a><strong>ALBEF</strong></h3><p>在多模态学习中，视觉特征编码器要大于文本特征编码器，引入<strong>ITC loss</strong></p><p>ITM loss:</p><blockquote><p>那我们就先来说一下这个 ITM loss，也就是 image text matching，<strong>其实很简单，就是说你给定一个图片，给定一个文本，而这个图像文本通过这个 ALBEF的模型之后，就会出来一个特征，那在这个特征之后加一个分类头，也就是一个 FC 层。然后我去判断到底这个 i 和 t 是不是一个对，那说白了这个 ITM 就是一个二分类任务。</strong>那这个 loss 虽然听起来很合理，我们确实应该用它，<strong>但是实际操作的时候你会发现这个 loss 太简单了</strong>。因为判断正样本可能还有点难度，但是判断谁和谁是负样本，这个就太简单了。因为如果你不对这个负样本做什么要求，那基本上很多很多的这个图片&#x2F;文本，它都可以当成是现在图像&#x2F;文本内的负样本，所以这个分类任务很快它的准确度就提升了很高很高。那在预训练的时候，训练再久其实也没有任何意义了。那这个时候一个常见的做法，就是说我在选这个负样本的时候，我给它一些constrain。那在 ALBEF这篇论文里，它就是采取了最常用的一个方法，就是通过某种方式去选择最难的那个负样本，也就是最接近于正样本的那个负样本。具体来说。那在 ALBEF这篇论文里，它的这个 batch size 是512，那对于 ITM 这个 loss 来说，它的这个正样本对就是 512 个。那对于这个 Mini batch 里的每一张图像，我去哪儿找它的这个 hard negative 的文本，这个时候 ITM 还依赖于之前的这个ITC，他就把这张图片和同一个 batch 里所有的这个文本都算一遍这个 cosine similarity，然后他在这里选择一个除了他自己之外相似度最高的那个文本当做这个negative。也就是说其实这个文本和这个图像已经非常相似了，它基本都可以拿来当正样本用，但是我非说它是一个负样本，也就是 hard negative 的定义。那这个时候 ITM loss 就变得非常 challenging 了，然后让这个模型更好的去判断谁到底是一个图像文本对，也就是他这里说的 image text matching。</p></blockquote><p>MLM loss</p><blockquote><p>​    那最后一个目标函数就是我们耳熟能详的 mask language modeling Bert 里用的<strong>完形填空</strong>，那其实就是把<strong>原来完整的句子</strong>这个 text t 变成一个 t’，也就是说<strong>有些单词被musk 掉</strong>。<strong>然后他把这个缺失的句子和这个图片一起，通过这个 ALBEF的模型，然后最后去把之前的这个完整的句子给预测出来。</strong>那在这里其实<strong>它不是像 NLP 那边单纯的一个 MLM 了，它其实也借助了图像这边的信息去帮助它更好的恢复这个哪个单词被 mask 掉。</strong></p><p>​    <strong>但这里有一个小细节很值得关注，就是说在我们算这个 i t c loss 和这个 i t m loss 的时候，其实我们的输入都是原始的 i 和t，但是当我们算这个 m l m loss 的时候，它的输入是原始的i，但是mask过 的t。</strong>这意味着什么呢？<strong>这说明 ALBEF这个模型每一个训练的iteration，其实它做了两次模型的forward。一次模型的forward 是用了这个原始的 i 和t，另一次模型的 forward 是用了原始的 i 和mask过 的t。</strong>当然了，不光是 ALBEF这篇论文会有这种多次前向的这个过程，其实 vilt 包括之前的很多模型，它都会做好几次前向，甚至做三次前向过程。这也是其中一个原因。就是**为什么多模态学习普遍的方法，它的训练时间都比较长，**因为它为了算好几个不同的loss，它还得做好几次不同的 forward 去满足各种各样的条件。****那到这儿三点儿一和三点儿 2 节就讲完了，最后我们可以看到在文章的这个公式5，这个 ALBEF的所有在训练时候用的这个目标函数就都在这里了，就是 ITC MLM 和 ITM 的这个合体。</p></blockquote><p>动量蒸馏:将独热标签变成多热标签，算Softmax score，可以利于在noise中学习</p><h3 id="VLMo"><a href="#VLMo" class="headerlink" title="VLMo"></a>VLMo</h3><p>将两个模态分开训练，看下图，transformer的参数共享，但是最后不同模态的FFN层不同，在执行不同任务时使用不同的结构</p><p><img src="/2024/03/08/paper-reading/image-20240606212030126.png" alt="VLMo结构"></p><p>这个训练顺序还挺有意思的：</p><p><img src="/2024/03/08/paper-reading/image-20240606212715433.png" alt="先训练视觉再文本"></p><p>注意第二步：拿视觉上训练好的自注意力层参数去建模文本</p><h2 id="Neural-Corpus-Indexer"><a href="#Neural-Corpus-Indexer" class="headerlink" title="Neural Corpus Indexer"></a>Neural Corpus Indexer</h2><p>文档检索是一件很贵的事(因为文档可能很多)</p><p>输入查询，输出id，但是我们的数据是&lt;doc和doc-id&gt;，可以将doc拆成很多查询</p><p><img src="/2024/03/08/paper-reading/image-20240606224708041.png" alt="模型输入输出"></p><p>层次化K-means</p><p><img src="/2024/03/08/paper-reading/image-20240606225215073.png" alt="层次化K-means"></p><p>得到的decodes前缀类似说明这两个类比较接近</p><h2 id="Parameter-Server"><a href="#Parameter-Server" class="headerlink" title="Parameter Server"></a>Parameter Server</h2><p>沐神自己的论文，系统+ai方向，是比较有机的融合而不是简单的a+b</p><p><a href="http://www.bilibili.com/video/BV1YA4y197G8">www.bilibili.com/video/BV1YA4y197G8</a></p><p>和分布式有关，写了一段给不搞机器学习的学者看的机器学习科普</p><h2 id="OpenAI-Whisper"><a href="#OpenAI-Whisper" class="headerlink" title="OpenAI Whisper"></a>OpenAI Whisper</h2><p><a href="http://www.bilibili.com/video/BV1VG4y1t74x/">www.bilibili.com/video/BV1VG4y1t74x/</a></p><p>数据集足够大，模型的选择关系不是很大，效果都差不多</p><p>它的输入是一个时间为横坐标，频率为纵坐标的数据结构(值为能量)</p><p><strong>弱监督学习</strong>：弱监督学习中，训练样本的标签可能是不可靠的，这包括标签不正确、多种标记、标记不充分或局部标记等情况。与强监督学习相比，弱监督学习中的标签可能并不总是准确地表示样本的真实类别或属性。</p><p>弱监督学习（Weakly Supervised Learning）是一种机器学习范式，它介于完全监督学习和完全无监督学习之间。在这种学习方式中，模型使用的标签信息是部分正确、不完整或不确定的。弱监督学习通常用于以下情况：</p><ol><li><strong>标签噪声</strong>：训练数据的标签可能包含错误或不一致性。</li><li><strong>标签不完整</strong>：只有部分数据有标签，其他数据没有标签。</li><li><strong>标签模糊</strong>：标签可能不够精确，例如，对于图像分类任务，标签可能只是“动物”，而不是具体的“猫”或“狗”。</li><li><strong>标签成本高</strong>：获取精确标签的成本很高，因此只能提供低成本的、质量较低的标签。</li></ol><p>弱监督学习的目标是利用这些不完美的标签来训练模型，同时尽可能地减少标签错误对学习过程的影响。这通常涉及到一些特殊的算法或技术，例如：</p><ul><li><strong>数据清洗</strong>：在训练前尝试识别和纠正标签中的错误。</li><li><strong>集成学习</strong>：结合多个模型的预测来提高整体的准确性。</li><li><strong>主动学习</strong>：模型主动选择最不确定的样本请求标注，以减少对不准确标签的依赖。</li><li><strong>多任务学习</strong>：同时学习多个相关任务，以利用任务之间的相关性来提高学习效果。</li></ul><p>弱监督学习在实际应用中非常有价值，因为在很多情况下获取大量精确标注的数据是不现实的。通过弱监督学习，可以更有效地利用现有的数据资源，提高模型的泛化能力和实用性。</p><hr><p><strong>自监督学习</strong>：</p><p><strong>自监督学习是一种从无标签数据中挖掘监督信息，以训练机器学习模型的方法</strong>。</p><p>在机器学习领域，自监督学习是介于监督学习和无监督学习之间的一种范式。它利用辅助任务（或称为假托任务）从未标记的数据中生成隐式标签，以此来训练模型。这种方法的核心在于，通过构造某种形式的监督信息，使模型能够在没有人工标注的情况下进行训练。这种学习方式在计算机视觉和自然语言处理等领域尤为有用，因为这些领域通常需要大量标注数据来训练先进的AI模型，而获取这些标注数据既耗时又昂贵。</p><p>自监督学习的主要方法可以分为基于上下文、基于时序和基于对比三种类别。例如，在NLP领域中，Word2vec算法通过预测句子中词的顺序来学习单词的表征，而在图像处理中，研究人员通过调整图像块的位置并让模型预测其相对位置来学习图像的特征。这些方法都旨在通过自动构建的预测任务来学习数据的有用表征，从而对下游任务产生积极影响。</p><p>自监督学习的发展不仅解决了监督学习依赖手工标注数据的问题，还为模型提供了更丰富的语义表征。这种学习方式使得模型能够在没有明确人工标注的情况下，通过数据本身的内在结构和相关性获得有效信息。因此，自监督学习在减少人工标注成本和提升模型泛化能力方面具有显著优势。</p><p>总的来说，自监督学习通过创新地从数据自身提取监督信号，实现了在无需外部标注的情况下训练高效机器学习模型的目标。这一方法不仅节省了数据标注的成本和时间，还在某些情况下提高了模型的泛化能力和性能表现，成为人工智能领域的重要研究方向。</p><p><strong>自监督和无监督学习有什么区别？</strong></p><p>自监督学习和无监督学习在机器学习中都是重要的概念，它们之间的区别主要体现在以下几个方面：</p><ol><li>学习目标和方式<ul><li>自监督学习：自监督学习可以看作是特殊的无监督学习的一个子类别，但它并非完全等同于无监督学习。自监督学习的关键思想是让模型无需手动标签即可学习数据表示。在自监督学习中，模型会利用输入数据的某些特性，自动生成目标标签，最终通过这些标签来训练模型。例如，模型可能会假设图像中相邻的像素存在相互关系，或者音频信号中连续的时间片段具有类似的特征等。</li><li>无监督学习：无监督学习则是在没有明确标签或指令的情况下，根据数据本身的潜在关联，从数据集中提取特征、模式和关系的机器学习方法。它的主要目的是通过模型的自学习期来发掘数据的内在结构和模式，更好地理解数据背后的潜在规律，并将其扩展到新的情境中。</li></ul></li><li>目标函数的选择<ul><li>自监督学习：在自监督学习中，模型会自动生成目标标签，并在这些自动生成的目标上进行学习。常见的自监督学习算法包括自动编码器（Autoencoder）和对比性预训练（Contrastive Pretraining）等。</li><li>无监督学习：无监督学习则是在数据集的自然结构上学习，而不是在自动生成的目标上。无监督学习的方法包括聚类、异常检测、数据降维等。</li></ul></li></ol><hr><p><strong>半监督学习</strong>：</p><p><strong>半监督学习</strong>（Semi-supervised learning）是一种机器学习方法，它利用少量标记数据和大量未标记数据来训练模型。与监督学习和无监督学习相比，半监督学习具有以下特点：</p><ul><li><strong>利用了标记数据和未标记数据的优势</strong>：标记数据可以为模型提供学习方向，而未标记数据可以丰富模型的训练集，提高模型的泛化能力。</li><li><strong>降低了对标记数据的需求</strong>：在许多实际应用中，标记数据的获取成本很高，而未标记数据的获取成本相对较低。因此，半监督学习可以帮助我们降低对标记数据的需求。</li><li><strong>提高了模型的性能</strong>：在许多情况下，半监督学习可以比监督学习和无监督学习取得更高的性能。</li></ul><p><strong>半监督学习</strong>的<strong>工作原理</strong>可以概括如下：</p><ol><li>收集大量未标记数据和少量标记数据。</li><li>利用标记数据训练一个初始模型。</li><li>使用初始模型对未标记数据进行预测，并根据预测结果为未标记数据分配伪标签。</li><li>将伪标签数据与原始标记数据一起用于训练最终模型。</li></ol><p><strong>半监督学习</strong>的<strong>常见算法</strong>包括：</p><ul><li><strong>自我训练</strong>（Self-training）：这是最简单的半监督学习算法之一。它使用初始模型对未标记数据进行预测，并根据预测结果为未标记数据分配伪标签。然后，将伪标签数据与原始标记数据一起用于训练最终模型。</li><li><strong>期望最大化</strong>（Expectation-maximization，EM）：EM算法是一种迭代算法，它通过交替估计模型参数和隐变量来最大化模型的似然函数。在半监督学习中，EM算法可以用于估计模型参数和未标记数据的伪标签。</li><li><strong>图半监督学习</strong>（Graph semi-supervised learning）：图半监督学习利用图结构来辅助半监督学习。在图半监督学习中，未标记数据之间的关系可以用图来表示，而图结构可以为模型提供额外的信息，从而提高模型的性能。</li></ul><p><strong>半监督学习</strong>在<strong>许多领域</strong>都有应用，例如：</p><ul><li><strong>自然语言处理</strong>：例如，文本分类、情感分析、机器翻译等。</li><li><strong>计算机视觉</strong>：例如，图像分类、目标检测、图像分割等。</li><li><strong>推荐系统</strong>：例如，推荐电影、音乐、商品等。</li></ul><p><strong>半监督学习</strong>是一个<strong>活跃的研究领域</strong>，新的算法和应用不断涌现。随着研究的深入，半监督学习将在机器学习中发挥越来越重要的作用。</p><h2 id="DALL·E-2"><a href="#DALL·E-2" class="headerlink" title="DALL·E 2"></a>DALL·E 2</h2><p>两阶段模型 prior 和 decoder</p><ul><li>prior ：text embedding &#x3D;&gt; image embedding</li><li>decoder：image embedding &#x3D;&gt; 图像</li></ul><p><img src="/2024/03/08/paper-reading/image-20240621214645824.png" alt="上面是CLIP"></p><p>CLIP：输入文本对和图像对进行对比学习，这个对是正样本，其他都是负样本</p><p>扩散模型：<a href="https://blog.csdn.net/DFCED/article/details/132394895">扩散模型 (Diffusion Model) 之最全详解图解-CSDN博客</a></p><p>自监督学习，在原图像的基础上逐步加入噪声，然后再逐步重建（马尔科夫链）</p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>torch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio sync 失败</title>
    <link href="/2024/01/27/android-studio-sync-shi-bai/"/>
    <url>/2024/01/27/android-studio-sync-shi-bai/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-sync-失败解决方案"><a href="#Android-Studio-sync-失败解决方案" class="headerlink" title="Android Studio sync 失败解决方案"></a>Android Studio sync 失败解决方案</h1><p>Android Studio新建项目的时候，会报一个<code>Gradle project sync failed.Basic functionality (e.g. editing, debugging) will not work properly.</code>这样的错误。如下图所示：</p><p><img src="/2024/01/27/android-studio-sync-shi-bai/image-20240127092121869.png" alt="Gradle project sync failed"></p><p>解决方案是对gradle换源</p><p>打开<code>gradle/wrapper/gradle-wrapper.properties</code>这个文件</p><p>把其中的<code>distributionUrl</code>这个字段换成镜像地址:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">https://mirrors.cloud.tencent.com/gradle/gradle-8.0-bin.zip<br></code></pre></td></tr></table></figure><p><img src="/2024/01/27/android-studio-sync-shi-bai/image-20240127092542449.png" alt="换源"></p><p>然后try again就可以了，可以发现在正常下载</p><p><img src="/2024/01/27/android-studio-sync-shi-bai/image-20240127092806401.png" alt="sync in progress"></p>]]></content>
    
    
    <categories>
      
      <category>config</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注册表笔记</title>
    <link href="/2023/12/14/zhu-ce-biao-bi-ji/"/>
    <url>/2023/12/14/zhu-ce-biao-bi-ji/</url>
    
    <content type="html"><![CDATA[<h1 id="注册表笔记"><a href="#注册表笔记" class="headerlink" title="注册表笔记"></a>注册表笔记</h1><p>有时候在文件上的右键菜单和在文件夹上的右键菜单不是很美观(刚从Eclipse转了IDEA，发现IDEA的右键菜单有点长)，想自定义一下，就有了这篇笔记</p><h2 id="注册表编辑器"><a href="#注册表编辑器" class="headerlink" title="注册表编辑器"></a>注册表编辑器</h2><p><code>Win+r</code>输入<code>regedit</code>打开注册表编辑器，接下来的操作要从这上面改</p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214184441793.png" alt="注册表编辑器"></p><h2 id="右键文件"><a href="#右键文件" class="headerlink" title="右键文件"></a>右键文件</h2><p>到<code>计算机\HKEY_CLASSES_ROOT\*\shell</code>这个路径下</p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214184423141.png" alt="计算机\HKEY_CLASSES_ROOT\*\shell"></p><p>点击<strong>Open with IntelliJ IDEA Community Edition</strong></p><p>它的键值对如右边所示，第一个是它的名称，第二个是它的图标路径，都可以改</p><p>然后是它下面的<strong>command</strong></p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214184733894.png" alt="计算机\HKEY_CLASSES_ROOT\*\shell\command"></p><p>我们查看它的完整命令：</p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214184816177.png" alt="注意%1"></p><p>是用<strong>idea64.exe</strong>来打开输入的第一个参数<code>%1</code>(这里指的是点击的文件)，注意要用引号包围</p><h2 id="右键文件夹背景"><a href="#右键文件夹背景" class="headerlink" title="右键文件夹背景"></a>右键文件夹背景</h2><p>到路径<code>计算机\HKEY_CLASSES_ROOT\Directory\Background\shell</code>下</p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214185612106.png" alt="计算机\HKEY_CLASSES_ROOT\Directory\Background\shell"></p><p>这里还是到<strong>IntelliJ IDEA Community Edition</strong>这里来</p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214185637649.png" alt="老地方"></p><p>这两项和上面一样</p><p>看下面的<strong>command</strong>，发现参数变成了<code>%V</code></p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214185832214.png" alt="注意%V"></p><p>注意这里修改的是右击文件夹背景的菜单，而不是直接右键文件夹的菜单</p><h2 id="右键文件夹"><a href="#右键文件夹" class="headerlink" title="右键文件夹"></a>右键文件夹</h2><p>直接右键文件夹的菜单的修改要到路径<code>计算机\HKEY_CLASSES_ROOT\Directory\shell</code>下，和上面的对比发现少一个<strong>background</strong></p><p>还是老样子，基本都是类似的，不过注意到这里的命令参数变成了<code>%1</code>，因为这里是直接右键选中的文件夹</p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214190134586.png" alt="计算机\HKEY_CLASSES_ROOT\Directory\shell"></p><h2 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h2><p>通过<code>.reg</code>文件的新建文件可以参考<a href="https://www.cnblogs.com/zhoujiayingvana/p/12357812.html">Typora添加右键新建Markdown文件 - 墨莲玦 - 博客园 (cnblogs.com)</a></p><p>使用这样的<code>.reg</code>文件：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#">Windows Registry Editor Version <span class="hljs-number">5.00</span><br><br>[<span class="hljs-meta">HKEY_CLASSES_ROOT\.md</span>]<br>@=<span class="hljs-string">&quot;Typora.md&quot;</span><br><span class="hljs-string">&quot;Content Type&quot;</span>=<span class="hljs-string">&quot;text/markdown&quot;</span><br><span class="hljs-string">&quot;PerceivedType&quot;</span>=<span class="hljs-string">&quot;text&quot;</span><br><br>[<span class="hljs-meta">HKEY_CLASSES_ROOT\.md\ShellNew</span>]<br><span class="hljs-string">&quot;NullFile&quot;</span>=<span class="hljs-string">&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p>打开注册表后发现这一项比其他的多一个<code>ShellNew</code></p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214191154310.png" alt="和上面的.markdown项对比一下"></p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>注册表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker学习</title>
    <link href="/2023/12/08/docker-learn/"/>
    <url>/2023/12/08/docker-learn/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker学习笔记"><a href="#Docker学习笔记" class="headerlink" title="Docker学习笔记"></a>Docker学习笔记</h1><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>去<a href="https://www.docker.com/">Docker: Accelerated Container Application Development</a>安装docker</p><h2 id="验证-Docker-安装"><a href="#验证-Docker-安装" class="headerlink" title="验证 Docker 安装"></a>验证 Docker 安装</h2><p>安装完成后，通过运行以下命令来验证 Docker 是否正确安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker --version<br>docker run hello-world<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/docker-learn/image-20231208145856984.png" alt="hello-world"></p><h2 id="用一个C语言的猜数字程序为例学习"><a href="#用一个C语言的猜数字程序为例学习" class="headerlink" title="用一个C语言的猜数字程序为例学习"></a>用一个C语言的猜数字程序为例学习</h2><h3 id="创建-C-语言程序"><a href="#创建-C-语言程序" class="headerlink" title="创建 C 语言程序"></a>创建 C 语言程序</h3><p>创建一个简单的猜数字的 C 语言程序，比如 <code>guess_number.c</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    srand(time(<span class="hljs-number">0</span>));<br>    <span class="hljs-type">int</span> number_to_guess = rand() % <span class="hljs-number">100</span>;<br>    <span class="hljs-type">int</span> guess, attempts = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome to the Number Guessing Game!\n&quot;</span>);<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter your guess: &quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;guess);<br>        attempts++;<br><br>        <span class="hljs-keyword">if</span> (guess &gt; number_to_guess) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Too high! Try again.\n&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (guess &lt; number_to_guess) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Too low! Try again.\n&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Congratulations! You guessed the number in %d attempts.\n&quot;</span>, attempts);<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (guess != number_to_guess);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="创建-Dockerfile"><a href="#创建-Dockerfile" class="headerlink" title="创建 Dockerfile"></a>创建 Dockerfile</h3><p>在 C 语言程序的目录下创建一个名为 <code>Dockerfile</code> 的文件：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># Dockerfile</span><br><span class="hljs-keyword">FROM</span> gcc:latest<br><br><span class="hljs-comment"># 这一行的作用是将当前目录（Docker 上下文中的当前目录，即包含 Dockerfile 的目录）中的所有文件和文件夹复制到容器中的 /app 目录中。</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . /app</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> gcc guess_number.c -o guess_number</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;./guess_number&quot;</span>]</span><br><br></code></pre></td></tr></table></figure><p>这个 Dockerfile 使用了 <code>gcc:latest</code> 镜像，将C 语言程序复制到容器中，并编译成可执行文件。最后，定义了容器启动时运行的命令。</p><h3 id="构建-Docker-镜像"><a href="#构建-Docker-镜像" class="headerlink" title="构建 Docker 镜像"></a>构建 Docker 镜像</h3><p>在包含 Dockerfile 的目录下运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t guess_number_image .<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/docker-learn/image-20231208150355046.png" alt="docker build"></p><p>构建后当前文件夹下没有多出任何文件，应该是把镜像构建在<strong>docker</strong>指定的位置了</p><h3 id="运行-Docker-容器"><a href="#运行-Docker-容器" class="headerlink" title="运行 Docker 容器"></a>运行 Docker 容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it --<span class="hljs-built_in">rm</span> guess_number_image<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/docker-learn/image-20231208150412144.png" alt="docker run"></p><p>其中 <code>-it</code> 选项表示使用交互模式，并分配一个终端，<code>--rm</code> 选项表示容器停止后自动删除。</p><h3 id="查看Docker-Desktop"><a href="#查看Docker-Desktop" class="headerlink" title="查看Docker Desktop"></a>查看Docker Desktop</h3><p>此时猜数字程序已经退出</p><p><img src="/2023/12/08/docker-learn/image-20231208150542490.png" alt="Docker Desktop"></p><h3 id="查看运行中的容器"><a href="#查看运行中的容器" class="headerlink" title="查看运行中的容器"></a>查看运行中的容器</h3><p>再次打开猜数字程序，然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/docker-learn/image-20231208150852414.png" alt="docker ps"></p><h3 id="停止和删除容器"><a href="#停止和删除容器" class="headerlink" title="停止和删除容器"></a>停止和删除容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker stop container_id<br>docker <span class="hljs-built_in">rm</span> container_id<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/docker-learn/image-20231208151005279.png" alt="docker stop"></p><h2 id="镜像与容器的区别"><a href="#镜像与容器的区别" class="headerlink" title="镜像与容器的区别"></a>镜像与容器的区别</h2><p>镜像是一个静态的、不可变的软件包，而容器是一个动态的、可变的运行实例。</p><p>镜像用于定义应用程序的静态结构，而容器用于在运行时执行和修改应用程序。</p><p>在实际应用中，通常通过镜像来创建容器，以便启动和运行应用程序。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="问题1：error-during-connect"><a href="#问题1：error-during-connect" class="headerlink" title="问题1：error during connect"></a>问题1：error during connect</h3><p>在build时遇到</p><blockquote><p>error during connect: In the default daemon configuration on Windows, the docker client must be run with elevated privileges to connect</p></blockquote><p><img src="/2023/12/08/docker-learn/image-20231208151800769.png" alt="error during connect"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>打开<strong>docker desktop</strong></p><p>此时问题可以解决</p><h3 id="问题2：请启用虚拟机平台-Windows-功能并确保在-BIOS-中启用虚拟化"><a href="#问题2：请启用虚拟机平台-Windows-功能并确保在-BIOS-中启用虚拟化" class="headerlink" title="问题2：请启用虚拟机平台 Windows 功能并确保在 BIOS 中启用虚拟化"></a>问题2：请启用虚拟机平台 Windows 功能并确保在 BIOS 中启用虚拟化</h3><p>使用<strong>wsl</strong>的时候遇到</p><p>在如下系统设置中勾中虚拟机平台，其实在<strong>Windows</strong>下用<strong>docker</strong>的比较少</p><p><img src="/2023/12/08/docker-learn/image-20231208152222011.png" alt="虚拟机平台"></p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python实用函数</title>
    <link href="/2023/12/03/python-shi-yong-han-shu/"/>
    <url>/2023/12/03/python-shi-yong-han-shu/</url>
    
    <content type="html"><![CDATA[<h1 id="python实用函数"><a href="#python实用函数" class="headerlink" title="python实用函数"></a>python实用函数</h1><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><blockquote><p>合并两个列表</p></blockquote><p>返回值为一个<code>zip</code>对象</p><p><code>zip</code>中的每个元素都是一个元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># zip是将两个列表合在一起</span><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>b = [<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>]<br><span class="hljs-comment"># print(zip(a,b)) # &lt;zip object at 0x00000234EA475140&gt;</span><br><span class="hljs-keyword">for</span> (i, j) <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b):<br>    <span class="hljs-built_in">print</span>(i, j)  <span class="hljs-comment"># 1 4 - 2 5 - 3 6</span><br><br></code></pre></td></tr></table></figure><h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h2><blockquote><p>enumerate会给列表加上序号 从0开始</p></blockquote><p>返回值为一个<code>enumerate</code>对象</p><p><code>enumerate</code>中的每个元素都是一个元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># enumerate会给列表加上序号 从0开始</span><br>c = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-comment"># print(enumerate(c)) # &lt;enumerate object at 0x0000027817E216C0&gt;</span><br><span class="hljs-keyword">for</span> (i, j) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(c):<br>    <span class="hljs-built_in">print</span>(i, j)  <span class="hljs-comment"># 0 a - 1 b - 2 c</span><br></code></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>格式: lambda &lt;args&gt; : &lt;expression&gt;</p><p>参考: <a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017451447842528">匿名函数 - 廖雪峰的官方网站</a></p><blockquote><p>关键字<code>lambda</code>表示匿名函数，冒号前面的<code>x</code>表示函数参数。</p><p>匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。</p><p>用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">d=<span class="hljs-keyword">lambda</span> x,y,z:x*y*z<br><span class="hljs-built_in">print</span>(d(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>((<span class="hljs-keyword">lambda</span> x:x**<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><h3 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h3><blockquote><p>map()是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">map</span>(function, iterable, ...)<br></code></pre></td></tr></table></figure><p>事实上<code>map</code>函数返回的是一个<code>map</code>对象</p><p><code>map</code>的第一个参数可以写一个已知的函数，也可以写一个<strong>lambda</strong>表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">d</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x + <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">map</span>(d, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]):<br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x ** <span class="hljs-number">2</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]):<br>    <span class="hljs-built_in">print</span>(j)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python rich库</title>
    <link href="/2023/11/09/python-rich/"/>
    <url>/2023/11/09/python-rich/</url>
    
    <content type="html"><![CDATA[<h1 id="python-rich库笔记"><a href="#python-rich库笔记" class="headerlink" title="python rich库笔记"></a>python <code>rich</code>库笔记</h1><p><a href="https://github.com/textualize/rich/blob/master/README.cn.md">官网中文文档</a></p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>在命令行输入以下命令进行预览</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python -m rich<br></code></pre></td></tr></table></figure><h2 id="rich-print"><a href="#rich-print" class="headerlink" title="rich.print"></a>rich.print</h2><p>这是一个导入即用的函数，它的参数与<code>python</code>自带的<code>print</code>函数一致</p><p>以下是一个示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rich <span class="hljs-keyword">import</span> <span class="hljs-built_in">print</span><br><br><span class="hljs-comment"># rich的print会根据数据类型给打印的对象加上不同的颜色</span><br><span class="hljs-built_in">print</span>(&#123;<span class="hljs-number">1</span>:[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]&#125;)<br><span class="hljs-comment"># 标签语法 输出红色的hello和斜体+下划线的world</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[red]hello[/red] [i u]world[/i u]&quot;</span>)<br><br></code></pre></td></tr></table></figure><p><img src="/2023/11/09/python-rich/fig1.png"></p><h2 id="rich-console-Console"><a href="#rich-console-Console" class="headerlink" title="rich.console.Console"></a>rich.console.Console</h2><p>这个比刚刚的<code>print</code>更高级一些</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rich.console <span class="hljs-keyword">import</span> Console<br><br>console = Console()<br>console.<span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>) <span class="hljs-comment"># 和之前的rich.print一样</span><br><span class="hljs-comment"># log会打印时间和所在行数</span><br>console.log(<span class="hljs-string">&#x27;[blue]world[/blue]&#x27;</span>) <span class="hljs-comment"># [16:34:39] world     t.py:4</span><br>console.log(<span class="hljs-string">&#x27;log_locals选项可以用来打印局部变量的值&#x27;</span>,log_locals=<span class="hljs-literal">True</span>) <span class="hljs-comment"># 不过还是觉得需要看什么变量就直接打印就行了</span><br></code></pre></td></tr></table></figure><p><img src="/2023/11/09/python-rich/fig2.png"></p><p><em>图的右侧还有代码的行数，这里没有截到右边</em></p><h2 id="rich-inspect"><a href="#rich-inspect" class="headerlink" title="rich.inspect"></a>rich.inspect</h2><p>可以用来检查对应对象或者实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rich <span class="hljs-keyword">import</span> inspect<br><br>my_list = [<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>]<br><span class="hljs-comment"># methods参数决定是否显示对应方法</span><br>inspect(my_list, methods=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 当然你也可以查看它自己</span><br>inspect(inspect)<br></code></pre></td></tr></table></figure><p><img src="/2023/11/09/python-rich/fig3.png"></p><h2 id="rich-progress-track"><a href="#rich-progress-track" class="headerlink" title="rich.progress.track"></a>rich.progress.track</h2><p>打印无闪烁的进度条</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rich.progress <span class="hljs-keyword">import</span> track<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">do_step</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-comment"># print(arg)</span><br>    <span class="hljs-comment"># 如果有打印的话 可以发现那个进度条永远是在最后的</span><br>    time.sleep(<span class="hljs-number">0.1</span>)<br><br><span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> track(<span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>)):<br>    do_step(step)<br></code></pre></td></tr></table></figure><p><img src="/2023/11/09/python-rich/fig4.png"></p><p><em>进度条右侧的剩余时间是它自己估计的</em></p><h2 id="rich-console-Console-status"><a href="#rich-console-Console-status" class="headerlink" title="rich.console.Console.status"></a>rich.console.Console.status</h2><p>对于那些很难计算进度的情况，你可以使用 status 方法，它会展示一个“环形旋转”的动画和文字信息。这个动画并不会妨碍你正常使用控制台。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> rich.console <span class="hljs-keyword">import</span> Console<br><br>console = Console()<br>tasks = [<span class="hljs-string">f&quot;task <span class="hljs-subst">&#123;n&#125;</span>&quot;</span> <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)]<br><br><span class="hljs-keyword">with</span> console.status(<span class="hljs-string">&quot;[bold green]Working on tasks...&quot;</span>) <span class="hljs-keyword">as</span> status:<br>    <span class="hljs-keyword">while</span> tasks:<br>        task = tasks.pop(<span class="hljs-number">0</span>)<br>        sleep(<span class="hljs-number">1</span>)<br>        console.log(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;task&#125;</span> complete&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/11/09/python-rich/fig5.png"></p><p><em>这个小动画和前面的进度条不同，进度条结束了也会保留，而这个小动画结束之后会消失。</em></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>还有一些类似显示$Markdown$和语法高亮的功能，感觉挺实用的，以后要用的时候可以学一下</p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python装饰器</title>
    <link href="/2023/11/09/python-decorator/"/>
    <url>/2023/11/09/python-decorator/</url>
    
    <content type="html"><![CDATA[<h1 id="python装饰器"><a href="#python装饰器" class="headerlink" title="python装饰器"></a>python装饰器</h1><h2 id="函数内的函数定义"><a href="#函数内的函数定义" class="headerlink" title="函数内的函数定义"></a>函数内的函数定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">b</span>):<br>        <span class="hljs-keyword">return</span> a + b<br>    <span class="hljs-keyword">return</span> f2<br><br><span class="hljs-comment"># 计算3+4=7</span><br>t = f1(<span class="hljs-number">3</span>) <span class="hljs-comment"># 这里返回的是一个函数</span><br><span class="hljs-built_in">print</span>(t(<span class="hljs-number">4</span>)) <span class="hljs-comment"># 7</span><br></code></pre></td></tr></table></figure><h2 id="一个简单的装饰器"><a href="#一个简单的装饰器" class="headerlink" title="一个简单的装饰器"></a>一个简单的装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fun_to_run</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    输入参数是一个函数</span><br><span class="hljs-string">    返回值也是一个函数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        t_begin = time.time()<br>        fun_to_run()<br>        t_end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@timer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>():<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>):<br>        r+=i<br>    <span class="hljs-built_in">print</span>(r)<br><br>my_func() <span class="hljs-comment"># 函数my_func的运行时间为: 0.04650068283081055 s</span><br></code></pre></td></tr></table></figure><p>相当于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fun_to_run</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    输入参数是一个函数</span><br><span class="hljs-string">    返回值也是一个函数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        t_begin = time.time()<br>        fun_to_run()<br>        t_end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>():<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>):<br>        r+=i<br>    <span class="hljs-built_in">print</span>(r)<br><br>t=timer(my_func)<br>t() <span class="hljs-comment"># 函数my_func的运行时间为: 0.04343557357788086 s</span><br></code></pre></td></tr></table></figure><h2 id="在装饰器中使用函数参数"><a href="#在装饰器中使用函数参数" class="headerlink" title="在装饰器中使用函数参数"></a>在装饰器中使用函数参数</h2><p>按照一定的顺序进行定义，如下面的代码所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fun_to_run</span>):<br>    <span class="hljs-comment"># 第一个参数是要装饰的函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args,**kargs</span>):<br>        <span class="hljs-comment"># 第二个参数是要装饰的函数的参数</span><br>        t_begin = time.time()<br>        fun_to_run(*args,**kargs)<br>        t_end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@timer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">num</span>):<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        r+=i<br>    <span class="hljs-built_in">print</span>(r)<br><br>my_func(<span class="hljs-number">5555</span>) <span class="hljs-comment"># 函数my_func的运行时间为: 0.04650068283081055 s</span><br></code></pre></td></tr></table></figure><h2 id="带参数的函数装饰器"><a href="#带参数的函数装饰器" class="headerlink" title="带参数的函数装饰器"></a>带参数的函数装饰器</h2><p>按照一定的顺序进行定义，如下面的代码所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">unit</span>):<br>    <span class="hljs-comment"># 第一个参数是装饰器参数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">middle</span>(<span class="hljs-params">fun_to_run</span>):<br>        <span class="hljs-comment"># 第二个参数是要装饰的函数</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            <span class="hljs-comment"># 第三个参数是要装饰的函数的参数</span><br>            t_begin = time.time()<br>            fun_to_run(*args, **kwargs)<br>            t_end = time.time()<br>            <span class="hljs-keyword">if</span> unit == <span class="hljs-string">&quot;ms&quot;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;(t_end - t_begin)*<span class="hljs-number">1000</span>&#125;</span> ms&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> unit == <span class="hljs-string">&quot;s&quot;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> middle<br><br><span class="hljs-meta">@timer(<span class="hljs-params"><span class="hljs-string">&quot;ms&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">num</span>):<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        r+=i<br>    <span class="hljs-built_in">print</span>(r)<br><br>my_func(<span class="hljs-number">500000</span>) <span class="hljs-comment"># 函数my_func的运行时间为: 0.0 ms</span><br></code></pre></td></tr></table></figure><h2 id="使用被装饰的函数的返回值"><a href="#使用被装饰的函数的返回值" class="headerlink" title="使用被装饰的函数的返回值"></a>使用被装饰的函数的返回值</h2><p>这样装饰器就不是返回一个函数了，而是返回对应的返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fun_to_run</span>):<br>    <span class="hljs-comment"># 第一个参数是要装饰的函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args,**kargs</span>):<br>        <span class="hljs-comment"># 第二个参数是要装饰的函数的参数</span><br>        t_begin = time.time()<br>        result =fun_to_run(*args,**kargs)<br>        t_end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>        <span class="hljs-comment"># 要在wrapper函数设定返回值</span><br>        <span class="hljs-keyword">return</span> result<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@timer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">num</span>):<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        r+=i<br>    <span class="hljs-keyword">return</span> r<br><br>res = my_func(<span class="hljs-number">5555</span>) <span class="hljs-comment"># 函数my_func的运行时间为: 0.0 s</span><br><span class="hljs-built_in">print</span>(res) <span class="hljs-comment"># 15426235</span><br></code></pre></td></tr></table></figure><p>如果按老样子，不改的话，就会输出以下内容，这是因为<code>wrapper</code>函数没有返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fun_to_run</span>):<br>    <span class="hljs-comment"># 第一个参数是要装饰的函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args,**kargs</span>):<br>        <span class="hljs-comment"># 第二个参数是要装饰的函数的参数</span><br>        t_begin = time.time()<br>        result = fun_to_run(*args,**kargs)<br>        t_end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@timer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">num</span>):<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        r+=i<br>    <span class="hljs-keyword">return</span> r<br><br>res = my_func(<span class="hljs-number">5555</span>) <span class="hljs-comment"># 函数my_func的运行时间为: 0.0 s</span><br><span class="hljs-built_in">print</span>(res) <span class="hljs-comment"># None</span><br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>此外也有类装饰器等，可以以后有需要了再学。</p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python传参机制</title>
    <link href="/2023/08/08/python-chuan-can-ji-zhi/"/>
    <url>/2023/08/08/python-chuan-can-ji-zhi/</url>
    
    <content type="html"><![CDATA[<p><em>这篇笔记只是个人拙见，可能有不对的地方，还请海涵</em></p><h1 id="Python传参机制"><a href="#Python传参机制" class="headerlink" title="Python传参机制"></a>Python传参机制</h1><blockquote><p>Python 中一切皆为对象，数字是对象，列表是对象，函数也是对象，任何东西都是对象。而变量只是对象的一个引用，对象的操作都是通过引用来完成的</p></blockquote><p>个人认为，python函数内重新赋值时，不会改变函数外的值，但在函数内修改成员变量的值时，会改变函数外的值</p><h2 id="python内存分配机制"><a href="#python内存分配机制" class="headerlink" title="python内存分配机制"></a>python内存分配机制</h2><p>这个机制让我想起了Java的字符串分配内存的情形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>String s1=<span class="hljs-string">&quot;hello&quot;</span>;<br>String s2=<span class="hljs-string">&quot;hello&quot;</span>;<br>String s3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(s1==s2);<span class="hljs-comment">//true</span><br>System.out.println(s1==s3);<span class="hljs-comment">//false</span><br>System.out.println(s1.equals(s3));<span class="hljs-comment">//true</span><br><span class="hljs-type">int</span> num1=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> num2=<span class="hljs-number">1</span>;<br>System.out.println(num1==num2);<span class="hljs-comment">//true</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>放一段代码以做对照</p><h3 id="对于不可变对象"><a href="#对于不可变对象" class="headerlink" title="对于不可变对象"></a>对于不可变对象</h3><p>关于不可变对象（数字、字符或元组），来看一个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">1</span><br>b=<span class="hljs-number">1</span><br>c=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a),<span class="hljs-built_in">id</span>(b),<span class="hljs-built_in">id</span>(c))  <span class="hljs-comment"># 140706301014824 140706301014824 140706301014824</span><br>b=<span class="hljs-number">2</span><br>c+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a),<span class="hljs-built_in">id</span>(b),<span class="hljs-built_in">id</span>(c))  <span class="hljs-comment"># 140706301014824 140706301014856 140706301014856</span><br><br></code></pre></td></tr></table></figure><p>可以看出，值相同，就是指向一样的内存地址</p><h3 id="对于可变对象"><a href="#对于可变对象" class="headerlink" title="对于可变对象"></a>对于可变对象</h3><p>关于可变对象（字典、列表），来看一个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>b=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>c=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a),<span class="hljs-built_in">id</span>(b),<span class="hljs-built_in">id</span>(c))  <span class="hljs-comment"># 140706301014824 140706301014824 140706301014824</span><br>b.append(<span class="hljs-number">3</span>) <span class="hljs-comment"># [1, 2, 3]</span><br>c.append(<span class="hljs-number">3</span>) <span class="hljs-comment"># [1, 2, 3]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a),<span class="hljs-built_in">id</span>(b),<span class="hljs-built_in">id</span>(c))  <span class="hljs-comment"># 140706301014824 140706301014856 140706301014856</span><br><br></code></pre></td></tr></table></figure><p>修改其中的值后，会指向新的对象</p><h2 id="对于赋值"><a href="#对于赋值" class="headerlink" title="对于赋值"></a>对于赋值</h2><p>赋值会为新的值开辟新的空间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值前x的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(x))) <span class="hljs-comment"># 140706301014824 x和a指向的位置一样</span><br>    x=<span class="hljs-number">2</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值后x的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(x))) <span class="hljs-comment"># 140706301014856 x的指向改变，不再指向1</span><br><br><br>a=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值前a的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(a))) <span class="hljs-comment"># 140706301014824</span><br>fun(a)<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><p>即使是实参是列表也是一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值前x的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(x))) <span class="hljs-comment"># 140706301014824</span><br>    x=<span class="hljs-number">2</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值后x的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(x))) <span class="hljs-comment"># 140706301014856</span><br><br><br>a=[<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值前a的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(a))) <span class="hljs-comment"># 140706301014824</span><br>fun(a)<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><h2 id="对于修改值"><a href="#对于修改值" class="headerlink" title="对于修改值"></a>对于修改值</h2><p>修改值会影响函数外面的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x</span>):<br>    x[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-number">1</span><br>    x[<span class="hljs-string">&#x27;b&#x27;</span>] = <span class="hljs-number">2</span>      <br>    <span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span><br>    x = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">4</span>&#125;<br>    <span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># &#123;&#x27;a&#x27;: 3, &#x27;b&#x27;: 4&#125;</span><br><br><br>t = &#123;&#125;<br>func(t)<br><span class="hljs-built_in">print</span>(t)  <span class="hljs-comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span><br><br></code></pre></td></tr></table></figure><p>看一个类的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        x=<span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">t:Test</span>):<br>    t.x=<span class="hljs-number">2</span><br>    t()<br><br>a=Test()<br>fun(a)  <span class="hljs-comment"># 2</span><br><br></code></pre></td></tr></table></figure><p>也是一样的</p><h1 id="修改全局变量"><a href="#修改全局变量" class="headerlink" title="修改全局变量"></a>修改全局变量</h1><p>顺便说一下怎么修改全局变量</p><p>直接修改是修改不了的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>():<br>    a=<span class="hljs-number">2</span><br><br>a=<span class="hljs-number">1</span><br>fun()<br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><p>事实上，修改不了的原因应该在于函数内部是无法直接访问全局变量的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">1</span>  <span class="hljs-comment"># 可以看到，即使把a提到最前面也会报错</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>():<br>    <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># UnboundLocalError: cannot access local variable &#x27;a&#x27; where it is not associated with a value</span><br>    a=<span class="hljs-number">2</span><br><br>fun()<br></code></pre></td></tr></table></figure><p>想要修改的话，可以使用<code>global</code>这个关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>():<br>    <span class="hljs-comment"># 下面这种写法是错误的</span><br>    <span class="hljs-keyword">global</span> a=<span class="hljs-number">2</span>  <span class="hljs-comment"># SyntaxError: invalid syntax</span><br><br>a=<span class="hljs-number">1</span><br>fun()<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><p>像这样就修改成功了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>():<br>    <span class="hljs-keyword">global</span> a<br>    a=<span class="hljs-number">2</span><br><br>a=<span class="hljs-number">1</span><br>fun()<br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 2</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于python -m visdom.server缓慢</title>
    <link href="/2023/07/15/guan-yu-python-m-visdom-server-huan-man/"/>
    <url>/2023/07/15/guan-yu-python-m-visdom-server-huan-man/</url>
    
    <content type="html"><![CDATA[<h1 id="解决python-m-visdom-server缓慢的问题"><a href="#解决python-m-visdom-server缓慢的问题" class="headerlink" title="解决python -m visdom.server缓慢的问题"></a>解决<code>python -m visdom.server</code>缓慢的问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>使用<code>python -m visdom.server</code>后没反应</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta">E:\pprogram\test&gt;python -m visdom.<span class="hljs-keyword">server</span><br>Checking <span class="hljs-keyword">for</span> scripts.<br>Downloading scripts, <span class="hljs-keyword">this</span> may take a little <span class="hljs-keyword">while</span><br></code></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>下载这个文件夹中的所有文件<a href="https://github.com/fossasia/visdom/tree/master/py/visdom/static">visdom&#x2F;py&#x2F;visdom&#x2F;static at master · fossasia&#x2F;visdom (github.com)</a></p><p>去替换conda库环境下的文件夹，如我这里是<code>D:\Anaconda3\envs\torch\Lib\site-packages\visdom\static</code></p><p>对于版本为<code>0.2.4</code> 可以去找<code>D:\Anaconda3\envs\torch\Lib\site-packages\visdom\server\run_server.py</code>这个文件</p><p>靠前一些的版本如果没有这个文件，可以去找找看有没有叫<code>server.py</code>的文件</p><p>找到这里，如我这里是在235行，将其注释掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_scripts_and_run</span>():<br>  <span class="hljs-comment"># download_scripts()</span><br>  main()<br></code></pre></td></tr></table></figure><p>然后就重新开始就好了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">(torch) E:\pprogram\test&gt;python -m visdom.server<br>It&#x27;s Alive!<br>INFO:root:Application Started<br>INFO:root:Working directory: C:\Users\Administrator\.visdom<br>You can navigate to http://localhost:8097<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>bug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>torch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>torch笔记</title>
    <link href="/2023/07/12/torch-learn/"/>
    <url>/2023/07/12/torch-learn/</url>
    
    <content type="html"><![CDATA[<h1 id="torch笔记"><a href="#torch笔记" class="headerlink" title="torch笔记"></a>torch笔记</h1><h2 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h2><p><a href="http://www.bilibili.com/video/BV1hE411t7RN">www.bilibili.com/video/BV1hE411t7RN</a></p><h2 id="基本类的使用"><a href="#基本类的使用" class="headerlink" title="基本类的使用"></a>基本类的使用</h2><h3 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h3><p>作用：数据导入</p><p>模块位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Dataset需要重写下面这三个函数</span><br><span class="hljs-string">__init__:写初始化的准备工作，当然可以空着</span><br><span class="hljs-string">__getitem__:如何获取指定元素</span><br><span class="hljs-string">__len__:数据集有多大</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image <span class="hljs-comment"># python image lib, py自带的库</span><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root_dir, image_dir, label_dir</span>): <span class="hljs-comment"># 参数的个数和名字随意，只要有__init__这个函数就行</span><br>        self.root_dir = root_dir<br>        self.image_dir = image_dir<br>        self.label_dir = label_dir<br>        self.label_path = os.path.join(self.root_dir, self.label_dir)<br>        self.image_path = os.path.join(self.root_dir, self.image_dir)<br>        self.image_list = os.listdir(self.image_path)<br>        self.label_list = os.listdir(self.label_path)<br>        <span class="hljs-comment"># 因为label 和 Image文件名相同，进行一样的排序，可以保证取出的数据和label是一一对应的</span><br>        self.image_list.sort()<br>        self.label_list.sort()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>): <span class="hljs-comment"># idx是序号</span><br>        img_name = self.image_list[idx]<br>        label_name = self.label_list[idx]<br>        img_item_path = os.path.join(self.root_dir, self.image_dir, img_name)<br>        label_item_path = os.path.join(self.root_dir, self.label_dir, label_name)<br>        img = Image.<span class="hljs-built_in">open</span>(img_item_path)<br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(label_item_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            label = f.readline()<br><br>        <span class="hljs-comment"># img = np.array(img)</span><br>        sample = &#123;<span class="hljs-string">&#x27;img&#x27;</span>: img, <span class="hljs-string">&#x27;label&#x27;</span>: label&#125;<br>        <span class="hljs-keyword">return</span> sample<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(self.image_list) == <span class="hljs-built_in">len</span>(self.label_list)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.image_list)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    root_dir = <span class="hljs-string">&quot;F:\\test\\pytorch-tutorial-master\\dataset\\train&quot;</span><br>    image_ants = <span class="hljs-string">&quot;ants_image&quot;</span><br>    label_ants = <span class="hljs-string">&quot;ants_label&quot;</span><br>    ants_dataset = MyData(root_dir, image_ants, label_ants)<br>    ants_dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;img&#x27;</span>].show() <span class="hljs-comment"># 获得第一张图片</span><br></code></pre></td></tr></table></figure><h3 id="tensorboard-SummaryWriter"><a href="#tensorboard-SummaryWriter" class="headerlink" title="tensorboard.SummaryWriter"></a>tensorboard.SummaryWriter</h3><p>日志记录，可以记录标量或者图片的变化</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br>image_path = <span class="hljs-string">&quot;F:\\test\\pytorch-tutorial-master\\dataset\\train\\ants_image\\6240329_72c01e663e.jpg&quot;</span><br>img_PIL = Image.<span class="hljs-built_in">open</span>(image_path)<br>img_array = np.array(img_PIL)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img_array))<br><span class="hljs-built_in">print</span>(img_array.shape)<br><br>writer.add_image(<span class="hljs-string">&quot;train&quot;</span>, img_array, <span class="hljs-number">1</span>, dataformats=<span class="hljs-string">&#x27;HWC&#x27;</span>) <span class="hljs-comment"># dataformats这个参数用来指明数组中通道的意义(长宽高顺序),1是第一张,后面还可以加第2张第3张等</span><br><span class="hljs-comment"># 如果是加入图片数组的话是使用add_images()方法 显示时是一堆图片拼接在一起</span><br><span class="hljs-comment"># y = 2x</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    writer.add_scalar(<span class="hljs-string">&quot;y=2x&quot;</span>, <span class="hljs-number">3</span>*i, i) <span class="hljs-comment"># 加入标量</span><br><br>writer.close()  <span class="hljs-comment"># 别忘了关</span><br></code></pre></td></tr></table></figure><p>查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda activate torch<br>tensorboard --logdir=E:\pprogram\<span class="hljs-built_in">test</span>\logs <span class="hljs-comment"># 这个是代码中指定的路径</span><br></code></pre></td></tr></table></figure><h3 id="transforms"><a href="#transforms" class="headerlink" title="transforms"></a>transforms</h3><p>图片处理类</p><p>导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset, DataLoader<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root_dir, image_dir, label_dir, transform=<span class="hljs-literal">None</span></span>):<br>        self.root_dir = root_dir<br>        self.image_dir = image_dir<br>        self.label_dir = label_dir<br>        self.label_path = os.path.join(self.root_dir, self.label_dir)<br>        self.image_path = os.path.join(self.root_dir, self.image_dir)<br>        self.image_list = os.listdir(self.image_path)<br>        self.label_list = os.listdir(self.label_path)<br>        self.transform = transform<br>        <span class="hljs-comment"># 因为label 和 Image文件名相同，进行一样的排序，可以保证取出的数据和label是一一对应的</span><br>        self.image_list.sort()<br>        self.label_list.sort()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        img_name = self.image_list[idx]<br>        label_name = self.label_list[idx]<br>        img_item_path = os.path.join(self.root_dir, self.image_dir, img_name)<br>        label_item_path = os.path.join(self.root_dir, self.label_dir, label_name)<br>        img = Image.<span class="hljs-built_in">open</span>(img_item_path)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(label_item_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            label = f.readline()<br><br>        <span class="hljs-keyword">if</span> self.transform:<br>            img = transform(img)<br>            <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            python里面有一个魔法函数叫__call__()</span><br><span class="hljs-string">            在实现它后 类的实例可以发挥出类似函数的功能</span><br><span class="hljs-string">            e.g.</span><br><span class="hljs-string">            p=new Person(&quot;lihua&quot;) # 这里调用构造函数__init__(str)</span><br><span class="hljs-string">            age=p(18) # 这里调用魔法函数__call__(int)</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br><br>        <span class="hljs-keyword">return</span> img, label<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(self.image_list) == <span class="hljs-built_in">len</span>(self.label_list)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.image_list)<br><br>transform = transforms.Compose([transforms.Resize(<span class="hljs-number">400</span>), transforms.ToTensor()])<br>root_dir = <span class="hljs-string">&quot;dataset/train&quot;</span><br>image_ants = <span class="hljs-string">&quot;ants_image&quot;</span><br>label_ants = <span class="hljs-string">&quot;ants_label&quot;</span><br>ants_dataset = MyData(root_dir, image_ants, label_ants, transform=transform)<br>image_bees = <span class="hljs-string">&quot;bees_image&quot;</span><br>label_bees = <span class="hljs-string">&quot;bees_label&quot;</span><br>bees_dataset = MyData(root_dir, image_bees, label_bees, transform=transform)<br></code></pre></td></tr></table></figure><p><code>transform = transforms.ToTensor()</code>使所有数据转换为<code>Tensor</code>，如果不进行转换则返回的是PIL图片。<code>transforms.ToTensor()</code>将尺寸为 (H x W x C) 且数据位于[0, 255]的PIL图片或者数据类型为<code>np.uint8</code>的NumPy数组转换为尺寸为(C x H x W)且数据类型为<code>torch.float32</code>且位于[0.0, 1.0]的<code>Tensor</code>。</p><h3 id="dataloader"><a href="#dataloader" class="headerlink" title="dataloader"></a>dataloader</h3><p>数据分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><br><span class="hljs-comment"># 准备的测试数据集</span><br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>test_data = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor())<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">batch_size:一组有多少的数据</span><br><span class="hljs-string">shuffle:是否打乱</span><br><span class="hljs-string">num_workers:多线程装载,windows下最好写0</span><br><span class="hljs-string">drop_last:是否丢弃最后一组不满一组的</span><br><span class="hljs-string">它的装载方式是这样的:</span><br><span class="hljs-string">例如如果dataset中的每一项是x,y;batch_size=4</span><br><span class="hljs-string">那test_loader中的每一项是(Xs,Ys),其中Xs和Ys都是4元组</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>test_loader = DataLoader(dataset=test_data, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">0</span>, drop_last=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 测试数据集中第一张图片及target</span><br>img, target = test_data[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(img.shape)<br><span class="hljs-built_in">print</span>(target)<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;dataloader&quot;</span>)<br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    step = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader:<br>        <span class="hljs-comment"># 由于shuffle=True,所以两次for循环中test_loader返回的东西不一样</span><br>        imgs, targets = data<br>        <span class="hljs-comment"># print(imgs.shape)</span><br>        <span class="hljs-comment"># print(targets)</span><br>        writer.add_images(<span class="hljs-string">&quot;Epoch: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch), imgs, step)<br>        step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="一些注意"><a href="#一些注意" class="headerlink" title="一些注意"></a>一些注意</h3><p>需要多看看官方文档，一方面要看看输入输出的数据类型是什么，另一方面不清楚返回值的话要试试<code>print(type(x))</code>或者关注一下<code>print(x.shape)</code>的值</p><h2 id="使用torch自带的数据集"><a href="#使用torch自带的数据集" class="headerlink" title="使用torch自带的数据集"></a>使用torch自带的数据集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset_transform = torchvision.transforms.Compose([<br>    torchvision.transforms.ToTensor()<br>])<br><br>train_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=dataset_transform, download=<span class="hljs-literal">True</span>) <span class="hljs-comment"># 用CIFAR10数据集,download=True代表要从网上在线下载,如果已经有的话,就不会再下载了</span><br>test_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=dataset_transform, download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># print(test_set[0])</span><br><span class="hljs-comment"># print(test_set.classes)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># img, target = test_set[0]</span><br><span class="hljs-comment"># print(img)</span><br><span class="hljs-comment"># print(target)</span><br><span class="hljs-comment"># print(test_set.classes[target])</span><br><span class="hljs-comment"># img.show()</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># print(test_set[0])</span><br><br>writer = SummaryWriter(<span class="hljs-string">&quot;p10&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    img, target = test_set[i]<br>    writer.add_image(<span class="hljs-string">&quot;test_set&quot;</span>, img, i)<br><br>writer.close()<br></code></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="nn-module"><a href="#nn-module" class="headerlink" title="nn.module"></a>nn.module</h3><p>torch.nn.Module is Base class for all neural network modules.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        <span class="hljs-comment"># 前趋,需要实现</span><br>        output = <span class="hljs-built_in">input</span> + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br>x = torch.tensor(<span class="hljs-number">1.0</span>)<br>output = tudui(x) <span class="hljs-comment"># 感觉这里有点像魔法函数__call__</span><br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><h3 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h3><p>F.conv2d</p><p>导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">torch.nn.functional.conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1) → Tensor</span><br><span class="hljs-string">input:(minibatch , in_channels , iH , iW) 最小批量 通道数 高 宽</span><br><span class="hljs-string">weight:(&#123;out_channels&#125; , \frac&#123;\text&#123;in\_channels&#125;&#125;&#123;\text&#123;groups&#125;&#125; , kH , kW) 卷积核</span><br><span class="hljs-string">bias: 偏置量 默认没有</span><br><span class="hljs-string">stride:每步长度 默认为1</span><br><span class="hljs-string">padding:外侧空白填充的行或者列数 默认为0</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>                      [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]])<br><br>kernel = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>],<br>                       [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>],<br>                       [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]])<br><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>))<br>kernel = torch.reshape(kernel, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><span class="hljs-built_in">print</span>(kernel.shape)<br><br>output = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output)<br><br>output2 = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(output2)<br><br>output3 = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output3)<br></code></pre></td></tr></table></figure><h3 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h3><p>Conv2d</p><p>用于选取特征</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        <span class="hljs-comment"># 和之前的代码不同，这里的只需要指定输入输出通道数，卷积核大小，卷积核内的权重是会自己随机初始化的</span><br>        self.conv1 = Conv2d(in_channels=<span class="hljs-number">3</span>, out_channels=<span class="hljs-number">6</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;./logs&quot;</span>)<br><br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    output = tudui(imgs)<br>    <span class="hljs-built_in">print</span>(imgs.shape)<br>    <span class="hljs-built_in">print</span>(output.shape)<br>    <span class="hljs-comment"># torch.Size([64, 3, 32, 32])</span><br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>    <span class="hljs-comment"># torch.Size([64, 6, 30, 30])  -&gt; [xxx, 3, 30, 30]</span><br><br>    output = torch.reshape(output, (-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>))  <span class="hljs-comment"># 6通道无法正常显示 所以reshape</span><br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br><br>    step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h3><p>用于减少数据量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, download=<span class="hljs-literal">True</span>,<br>                                       transform=torchvision.transforms.ToTensor())<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.maxpool1 = MaxPool2d(kernel_size=<span class="hljs-number">3</span>, ceil_mode=<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 多出来的部分的处理方式 为False为不保留</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.maxpool1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_maxpool&quot;</span>)<br>step = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>    output = tudui(imgs)<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="非线性激活"><a href="#非线性激活" class="headerlink" title="非线性激活"></a>非线性激活</h3><p>拟合特征</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> ReLU, Sigmoid<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>, -<span class="hljs-number">0.5</span>],<br>                      [-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>]])<br><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, download=<span class="hljs-literal">True</span>,<br>                                       transform=torchvision.transforms.ToTensor())<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.relu1 = ReLU()<br>        self.sigmoid1 = Sigmoid()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.sigmoid1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_relu&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, global_step=step)<br>    output = tudui(imgs)<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step += <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="线性层"><a href="#线性层" class="headerlink" title="线性层"></a>线性层</h3><p><img src="https://img-blog.csdnimg.cn/b7bc507721f3420f9ae5202676331b80.png" alt="img"></p><p>图中每个箭头都是一个线性计算 $$y&#x3D;ax+b$$ 具体是矩阵乘法</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>, drop_last=<span class="hljs-literal">True</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.linear1 = Linear(<span class="hljs-number">196608</span>, <span class="hljs-number">10</span>)  <span class="hljs-comment"># 将196608维输入变为10层的输出</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.linear1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    <span class="hljs-built_in">print</span>(imgs.shape)<br>    output = torch.flatten(imgs)  <span class="hljs-comment"># torch.flatten可以将Tenor展开成一行(1,1,1,...,n)这种形式</span><br>    <span class="hljs-built_in">print</span>(output.shape)<br>    output = tudui(output)<br>    <span class="hljs-built_in">print</span>(output.shape)<br></code></pre></td></tr></table></figure><h3 id="seq"><a href="#seq" class="headerlink" title="seq"></a>seq</h3><p>用于简化表达</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br><span class="hljs-built_in">print</span>(tudui)<br><span class="hljs-built_in">input</span> = torch.ones((<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))  <span class="hljs-comment"># 用来检验网络参数是否正确</span><br>output = tudui(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output.shape)<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_seq&quot;</span>)<br>writer.add_graph(tudui, <span class="hljs-built_in">input</span>)  <span class="hljs-comment"># 画流程图</span><br>writer.close()<br><br></code></pre></td></tr></table></figure><p><code>net[0]</code>这样根据下标访问子模块的写法只有当<code>net</code>是个<code>ModuleList</code>或者<code>Sequential</code>实例时才可以</p><h3 id="损失"><a href="#损失" class="headerlink" title="损失"></a>损失</h3><h4 id="loss"><a href="#loss" class="headerlink" title="loss"></a>loss</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> L1Loss<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>inputs = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], dtype=torch.float32)<br>targets = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>], dtype=torch.float32)<br><br>inputs = torch.reshape(inputs, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br>targets = torch.reshape(targets, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br><br>loss = L1Loss(reduction=<span class="hljs-string">&#x27;sum&#x27;</span>)  <span class="hljs-comment"># 作差然后绝对值</span><br>result = loss(inputs, targets)<br><br>loss_mse = nn.MSELoss()  <span class="hljs-comment"># 平方差</span><br>result_mse = loss_mse(inputs, targets)<br><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-built_in">print</span>(result_mse)<br><br><br>x = torch.tensor([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>])<br>y = torch.tensor([<span class="hljs-number">1</span>])<br>x = torch.reshape(x, (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br>loss_cross = nn.CrossEntropyLoss()<br>result_cross = loss_cross(x, y)<br><span class="hljs-built_in">print</span>(result_cross)<br></code></pre></td></tr></table></figure><h4 id="backward"><a href="#backward" class="headerlink" title="backward"></a>backward</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>loss = nn.CrossEntropyLoss()<br>tudui = Tudui()<br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    outputs = tudui(imgs)<br>    result_loss = loss(outputs, targets)<br>    result_loss.backward()  <span class="hljs-comment"># 和forward对应</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ok&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>loss = nn.CrossEntropyLoss()<br>tudui = Tudui()<br>optim = torch.optim.SGD(tudui.parameters(), lr=<span class="hljs-number">0.01</span>)  <span class="hljs-comment"># 用指定的网络初始化它的参数</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    <span class="hljs-comment"># 训练20次</span><br>    running_loss = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>        imgs, targets = data<br>        outputs = tudui(imgs)  <span class="hljs-comment"># 前向计算</span><br>        result_loss = loss(outputs, targets)  <span class="hljs-comment"># 损失计算</span><br>        optim.zero_grad()  <span class="hljs-comment"># 梯度置0</span><br>        result_loss.backward()  <span class="hljs-comment"># 反向传播</span><br>        optim.step()  <span class="hljs-comment"># 优化</span><br>        running_loss = running_loss + result_loss<br>    <span class="hljs-built_in">print</span>(running_loss)  <span class="hljs-comment"># 看每次的loss总和</span><br><br></code></pre></td></tr></table></figure><h3 id="打印参数及初始化参数"><a href="#打印参数及初始化参数" class="headerlink" title="打印参数及初始化参数"></a>打印参数及初始化参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> init<br><br>net = nn.Sequential(nn.Linear(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>), nn.ReLU(), nn.Linear(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># pytorch已进行默认初始化</span><br><span class="hljs-built_in">print</span>(net)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(net.named_parameters()))<br><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> net.named_parameters():<br>    <span class="hljs-comment"># 返回的名字自动加上了层数的索引作为前缀。 </span><br>    <span class="hljs-built_in">print</span>(name, param.size())<br><span class="hljs-comment"># 我们再来访问net中单层的参数。对于使用Sequential类构造的神经网络，我们可以通过方括号[]来访问网络的任一层。索引0表示隐藏层为Sequential实例最先添加的层。</span><br><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> net[<span class="hljs-number">0</span>].named_parameters():<br>    <span class="hljs-built_in">print</span>(name, param.size(), <span class="hljs-built_in">type</span>(param))<br><br><span class="hljs-comment"># 将权重参数初始化成均值为0、标准差为0.01的正态分布随机数，并依然将偏差参数清零</span><br><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> net.named_parameters():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;weight&#x27;</span> <span class="hljs-keyword">in</span> name:<br>        init.normal_(param, mean=<span class="hljs-number">0</span>, std=<span class="hljs-number">0.01</span>)<br>        <span class="hljs-built_in">print</span>(name, param.data)<br>        <br><span class="hljs-comment"># 使用常数来初始化权重参数</span><br><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> net.named_parameters():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;bias&#x27;</span> <span class="hljs-keyword">in</span> name:<br>        init.constant_(param, val=<span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">print</span>(name, param.data)<br></code></pre></td></tr></table></figure><h2 id="使用预下载好的模型"><a href="#使用预下载好的模型" class="headerlink" title="使用预下载好的模型"></a>使用预下载好的模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><br><span class="hljs-comment"># train_data = torchvision.datasets.ImageNet(&quot;data_image_net&quot;, split=&#x27;train&#x27;, download=True,</span><br><span class="hljs-comment">#                                            transform=torchvision.transforms.ToTensor())  # 这个数据集太大了</span><br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>vgg16_false = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 只是初始化 没有训练好参数</span><br>vgg16_true = torchvision.models.vgg16(pretrained=<span class="hljs-literal">True</span>) <span class="hljs-comment"># 已经预训练好参数</span><br><br><span class="hljs-built_in">print</span>(vgg16_true)<br><br>train_data = torchvision.datasets.CIFAR10(<span class="hljs-string">&#x27;dataset&#x27;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 训练集</span><br><br><span class="hljs-comment"># 由于vgg16的最后一层会输出1000维 也就是1000类的分类 有时候我们只需要10分类 所以可以修改为10维的输出</span><br>vgg16_true.classifier.add_module(<span class="hljs-string">&#x27;add_linear&#x27;</span>, nn.Linear(<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>))  <span class="hljs-comment"># 在网络中的classifier层的最后加一层</span><br><span class="hljs-built_in">print</span>(vgg16_true)<br><br><span class="hljs-built_in">print</span>(vgg16_false)<br>vgg16_false.classifier[-<span class="hljs-number">1</span>] = nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">10</span>)  <span class="hljs-comment"># 修改网络中的classifier层的最后层</span><br><span class="hljs-built_in">print</span>(vgg16_false)<br></code></pre></td></tr></table></figure><h2 id="测试网络参数是否正确"><a href="#测试网络参数是否正确" class="headerlink" title="测试网络参数是否正确"></a>测试网络参数是否正确</h2><p>使用<code>torch.zeros</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">import</span> torch<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(nn.Module):<br>    <span class="hljs-comment"># 自定义网络</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 调用Net的父类的构造函数，初始化神经网络对象</span><br>        <span class="hljs-built_in">super</span>(Net, self).__init__()<br>        self.conv1 = nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, kernel_size=<span class="hljs-number">5</span>)<br>        self.conv2 = nn.Conv2d(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, kernel_size=<span class="hljs-number">5</span>)<br>        <span class="hljs-comment"># 对卷积层的输出进行dropout操作，随机丢弃一些神经元，防止过拟合</span><br>        self.conv2_drop = nn.Dropout2d()<br>        self.fc1 = nn.Linear(<span class="hljs-number">320</span>, <span class="hljs-number">50</span>)<br>        self.fc2 = nn.Linear(<span class="hljs-number">50</span>, <span class="hljs-number">10</span>)<br><br>    <span class="hljs-comment"># 定义了给定的层之间的连接方式</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-comment"># 卷积，池化核大小为2的最大池化操作，对池化结果进行激活操作，池化核大小是一个超参数，常取2/3</span><br>        x = F.relu(F.max_pool2d(self.conv1(x), <span class="hljs-number">2</span>))<br>        <span class="hljs-comment"># x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))</span><br>        x = F.relu(F.max_pool2d(self.conv2(x), <span class="hljs-number">2</span>))<br>        <span class="hljs-comment"># 重塑张量x，-1表示根据其他维度推断（行数），320列数</span><br>        x = x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">320</span>)<br>        x = F.relu(self.fc1(x))<br>        <span class="hljs-comment"># dropout函数用于全连接层，Dropout2d用于卷积层</span><br>        <span class="hljs-comment"># x = F.dropout(x, training=self.training)</span><br>        x = self.fc2(x)<br>        <span class="hljs-keyword">return</span> F.log_softmax(x, dim=-<span class="hljs-number">1</span>)<br><br><br>net = Net()<br><span class="hljs-built_in">print</span>(net)<br><span class="hljs-comment"># 这是1张图,但直接用会</span><br><span class="hljs-comment"># RuntimeError: Expected 3D (unbatched) or 4D (batched) input to conv2d, but got input of size: [28, 28]</span><br>test_in_1 = torch.zeros([<span class="hljs-number">28</span>, <span class="hljs-number">28</span>], dtype=torch.float32)  <span class="hljs-comment"># 需要用float32,否则报错</span><br>test_in_2 = torch.zeros([<span class="hljs-number">28</span>, <span class="hljs-number">28</span>], dtype=torch.float32)  <span class="hljs-comment"># 需要用float32,否则报错</span><br><span class="hljs-comment"># test_in_2 = torch.zeros([2, 1, 28, 28], dtype=torch.float32)  # 也可以直接这样</span><br>test_in_1 = test_in_1.view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>)  <span class="hljs-comment"># 要加等号,这里的conv1需要单通道的输入</span><br>test_in_2 = torch.reshape(test_in_2, (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>))  <span class="hljs-comment"># 要加等号,这里的conv1需要单通道的输入</span><br>test_out_1 = net(test_in_1)<br>test_out_2 = net(test_in_2)<br><span class="hljs-built_in">print</span>(test_out_1)<br><span class="hljs-built_in">print</span>(test_out_2)<br></code></pre></td></tr></table></figure><h2 id="保存和使用已有模型的参数"><a href="#保存和使用已有模型的参数" class="headerlink" title="保存和使用已有模型的参数"></a>保存和使用已有模型的参数</h2><p>保存参数 两种方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>vgg16 = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># 保存方式1,模型结构+模型参数</span><br>torch.save(vgg16, <span class="hljs-string">&quot;vgg16_method1.pth&quot;</span>)<br><br><span class="hljs-comment"># 保存方式2，模型参数（官方推荐）</span><br>torch.save(vgg16.state_dict(), <span class="hljs-string">&quot;vgg16_method2.pth&quot;</span>)<br><br><span class="hljs-comment"># 陷阱</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.conv1 = nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">64</span>, kernel_size=<span class="hljs-number">3</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br>torch.save(tudui, <span class="hljs-string">&quot;tudui_method1.pth&quot;</span>)<br></code></pre></td></tr></table></figure><p>读取参数 与之对应的两种方法，这两种方法就相当于加载好了实例了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-comment"># from model_save import *</span><br><span class="hljs-comment"># 方式1-》保存方式1，加载模型</span><br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>model = torch.load(<span class="hljs-string">&quot;vgg16_method1.pth&quot;</span>)<br><span class="hljs-comment"># print(model)</span><br><br><span class="hljs-comment"># 方式2，加载模型</span><br>vgg16 = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br>vgg16.load_state_dict(torch.load(<span class="hljs-string">&quot;vgg16_method2.pth&quot;</span>))<br><span class="hljs-comment"># model = torch.load(&quot;vgg16_method2.pth&quot;)</span><br><span class="hljs-comment"># print(vgg16)</span><br><br><span class="hljs-comment"># 陷阱1 需要导入其中所有的包</span><br><span class="hljs-comment"># class Tudui(nn.Module):</span><br><span class="hljs-comment">#     def __init__(self):</span><br><span class="hljs-comment">#         super(Tudui, self).__init__()</span><br><span class="hljs-comment">#         self.conv1 = nn.Conv2d(3, 64, kernel_size=3)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     def forward(self, x):</span><br><span class="hljs-comment">#         x = self.conv1(x)</span><br><span class="hljs-comment">#         return x</span><br><br>model = torch.load(<span class="hljs-string">&#x27;tudui_method1.pth&#x27;</span>)<br><span class="hljs-built_in">print</span>(model)<br></code></pre></td></tr></table></figure><h2 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-keyword">from</span> model <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># 准备数据集</span><br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>train_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                         download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># length 长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><span class="hljs-comment"># 如果train_data_size=10, 训练数据集的长度为：10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><br><span class="hljs-comment"># 利用 DataLoader 来加载数据集</span><br>train_dataloader = DataLoader(train_data, batch_size=<span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br>tudui = Tudui()<br><br><span class="hljs-comment"># 损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br><br><span class="hljs-comment"># 优化器</span><br><span class="hljs-comment"># learning_rate = 0.01</span><br><span class="hljs-comment"># 1e-2=1 x (10)^(-2) = 1 /100 = 0.01</span><br>learning_rate = <span class="hljs-number">1e-2</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 设置训练网络的一些参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;../logs_train&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------第 &#123;&#125; 轮训练开始-------&quot;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))<br><br>    <span class="hljs-comment"># 训练步骤开始</span><br>    tudui.train()  <span class="hljs-comment"># 这步在一般情况下可以没有 训练状态</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        outputs = tudui(imgs)<br>        loss = loss_fn(outputs, targets)<br><br>        <span class="hljs-comment"># 优化器优化模型</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数：&#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    tudui.<span class="hljs-built_in">eval</span>()  <span class="hljs-comment"># 这步在一般情况下可以没有 评估状态</span><br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():  <span class="hljs-comment"># 评估的时候不用梯度</span><br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            <span class="hljs-comment"># argmax显示最大的参数是第几个 argmax(1)代表看每行的 argmax(0)代表看每列的</span><br>            <span class="hljs-comment"># 列表==列表 会返回一个列表 其中的每一项都是对应项比较后的True或者False</span><br>            <span class="hljs-comment"># 列表.sum()会计算列表中True的数量</span><br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br><br>    torch.save(tudui, <span class="hljs-string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br></code></pre></td></tr></table></figure><h2 id="GPU加速"><a href="#GPU加速" class="headerlink" title="GPU加速"></a>GPU加速</h2><p>需要在三个地方进行设置</p><ol><li>网络</li><li>数据集</li><li>损失函数</li></ol><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>用.cuda()的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>train_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                         download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># length 长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><span class="hljs-comment"># 如果train_data_size=10, 训练数据集的长度为：10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><br><span class="hljs-comment"># 利用 DataLoader 来加载数据集</span><br>train_dataloader = DataLoader(train_data, batch_size=<span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span>*<span class="hljs-number">4</span>*<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>tudui = Tudui()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    tudui = tudui.cuda()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在使用gpu&#x27;</span>)<br><br><span class="hljs-comment"># 损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    loss_fn = loss_fn.cuda()<br><span class="hljs-comment"># 优化器</span><br><span class="hljs-comment"># learning_rate = 0.01</span><br><span class="hljs-comment"># 1e-2=1 x (10)^(-2) = 1 /100 = 0.01</span><br>learning_rate = <span class="hljs-number">1e-2</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 设置训练网络的一些参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_train&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------第 &#123;&#125; 轮训练开始-------&quot;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))<br><br>    <span class="hljs-comment"># 训练步骤开始</span><br>    tudui.train()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        <span class="hljs-keyword">if</span> torch.cuda.is_available():<br>            imgs = imgs.cuda()<br>            targets = targets.cuda()<br>        outputs = tudui(imgs)<br>        loss = loss_fn(outputs, targets)<br><br>        <span class="hljs-comment"># 优化器优化模型</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数：&#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    tudui.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            <span class="hljs-keyword">if</span> torch.cuda.is_available():<br>                imgs = imgs.cuda()<br>                targets = targets.cuda()<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br><br>    torch.save(tudui, <span class="hljs-string">&quot;pth/tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>用to(device)的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br><span class="hljs-comment"># 定义训练的设备</span><br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>)  <span class="hljs-comment"># 也可以写成&quot;cuda:0&quot;表示第1块gpu,如果是cpu的话就直接写&#x27;cpu&#x27;</span><br><br>train_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                         download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># length 长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><span class="hljs-comment"># 如果train_data_size=10, 训练数据集的长度为：10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><br><span class="hljs-comment"># 利用 DataLoader 来加载数据集</span><br>train_dataloader = DataLoader(train_data, batch_size=<span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span>*<span class="hljs-number">4</span>*<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model(x)<br>        <span class="hljs-keyword">return</span> x<br>tudui = Tudui()<br>tudui = tudui.to(device)  <span class="hljs-comment"># 模型网络和损失函数这里可以直接.to(device),不用赋值,但是在后面数据那里还是需要赋值的</span><br><br><span class="hljs-comment"># 损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br>loss_fn = loss_fn.to(device)  <span class="hljs-comment"># 模型网络和损失函数这里可以直接.to(device),不用赋值,但是在后面数据那里还是需要赋值的</span><br><span class="hljs-comment"># 优化器</span><br><span class="hljs-comment"># learning_rate = 0.01</span><br><span class="hljs-comment"># 1e-2=1 x (10)^(-2) = 1 /100 = 0.01</span><br>learning_rate = <span class="hljs-number">1e-2</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 设置训练网络的一些参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_train&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------第 &#123;&#125; 轮训练开始-------&quot;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))<br><br>    <span class="hljs-comment"># 训练步骤开始</span><br>    tudui.train()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        imgs = imgs.to(device)<br>        targets = targets.to(device)<br>        outputs = tudui(imgs)<br>        loss = loss_fn(outputs, targets)<br><br>        <span class="hljs-comment"># 优化器优化模型</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数：&#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    tudui.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            imgs = imgs.to(device)<br>            targets = targets.to(device)<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br><br>    torch.save(tudui, <span class="hljs-string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>torch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>conda配置</title>
    <link href="/2023/04/10/conda-pei-zhi/"/>
    <url>/2023/04/10/conda-pei-zhi/</url>
    
    <content type="html"><![CDATA[<h2 id="Windows系统下"><a href="#Windows系统下" class="headerlink" title="Windows系统下"></a>Windows系统下</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">conda config --<span class="hljs-built_in">set</span> show_channel_urls yes<br></code></pre></td></tr></table></figure><p>用这段命令在用户文件夹下生成<code>.condarc</code>文件</p><h2 id="其他系统下"><a href="#其他系统下" class="headerlink" title="其他系统下"></a>其他系统下</h2><p>直接就有<code>.condarc</code>文件，可以直接修改</p><h2 id="修改-condarc文件"><a href="#修改-condarc文件" class="headerlink" title="修改.condarc文件"></a>修改<code>.condarc</code>文件</h2><p>根据<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">镜像站使用帮助 | 清华大学开源软件镜像站</a></p><p>复制以下内容进去,<code>CtrlA</code>+<code>CtrlV</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs condarc">channels:<br>  - defaults<br>show_channel_urls: true<br>default_channels:<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2<br>custom_channels:<br>  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  deepmodeling: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/<br></code></pre></td></tr></table></figure><p>运行 <code>conda clean -i</code> 清除索引缓存，保证用的是镜像站提供的索引。</p><p>亲测不会卡进度。</p><h2 id="复制已有环境"><a href="#复制已有环境" class="headerlink" title="复制已有环境"></a>复制已有环境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda create -n new_env --<span class="hljs-built_in">clone</span> exist_env<br></code></pre></td></tr></table></figure><h2 id="安装miniconda命令"><a href="#安装miniconda命令" class="headerlink" title="安装miniconda命令"></a>安装miniconda命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-latest-Linux-x86_64.sh<br>bash Miniconda3-latest-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><p>然后<code>yes -&gt; enter -&gt; yes</code></p><p>如果不想直接进入<code>base</code>环境，就输入以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda config --<span class="hljs-built_in">set</span> auto_activate_base <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="apt换源命令"><a href="#apt换源命令" class="headerlink" title="apt换源命令"></a>apt换源命令</h2><p>再补一个apt换源方法：<a href="https://blog.csdn.net/WU2629409421perfect/article/details/110881141">Ubuntu 20.04 &amp;&amp; Ubuntu 18.04 修改 apt 源_ubuntu 20.04 &amp;&amp; ubuntu18.04 xiu gai-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>config</category>
      
    </categories>
    
    
    <tags>
      
      <tag>conda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL note</title>
    <link href="/2023/04/07/sql-note/"/>
    <url>/2023/04/07/sql-note/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL笔记"><a href="#SQL笔记" class="headerlink" title="SQL笔记"></a>SQL笔记</h1><h2 id="PSQL操作"><a href="#PSQL操作" class="headerlink" title="PSQL操作"></a>PSQL操作</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs psql">\?   帮助<br>\l   列举数据库<br>\c DBNAME  连接到新数据库<br>\d         描述表，视图，序列，或索引<br>\dt        列出表<br>\q   退出psgl<br></code></pre></td></tr></table></figure><h3 id="打开PSQL"><a href="#打开PSQL" class="headerlink" title="打开PSQL"></a>打开PSQL</h3><p>如下，一路enter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs psql">Server [localhost]:<br>Database [postgres]:<br>Port [5432]:<br>Username [postgres]: # 在这里输密码就可以了<br>用户 postgres 的口令：<br>psql (15.2)<br>输入 &quot;help&quot; 来获取帮助信息.<br></code></pre></td></tr></table></figure><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs psql">postgres=# \l<br><br># 看下面的截图<br>(4 行记录)<br><br><br>postgres=# drop database learndb<br>postgres-# ;<br>DROP DATABASE<br>postgres=# create database learndb<br>postgres-# ;<br>CREATE DATABASE<br>postgres=# \l<br><br># 看下面的截图<br>(4 行记录)<br><br><br>postgres=# \c learndb<br>您现在已经连接到数据库 &quot;learndb&quot;,用户 &quot;postgres&quot;.<br>learndb=# \d<br>没有找到任何关系<br></code></pre></td></tr></table></figure><p>这个时候其实已经是可以在里面输入数据库查询语句了，不过这个是空数据库，查不到任何东西。</p><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p><img src="/2023/04/07/sql-note/PSQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.png" alt="截图"></p><h3 id="关于postgres"><a href="#关于postgres" class="headerlink" title="关于postgres=#"></a>关于<code>postgres=#</code></h3><ul><li>postgres:当前的数据库名</li><li>&#x3D;:当前是新语句</li><li>-:如果不是<code>=</code>而是<code>-</code>的话，说明PSQL没有读到<code>;</code>，认为上一句还没有结束</li><li>(:在图形化界面不是<code>-</code>而是<code>(</code></li></ul><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs postgresql">learndb=# <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> department(<br>learndb(#   dNo           <span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>)        <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br>learndb(#   dName         <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>learndb(#   officeRoom    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>),<br>learndb(#   homePage      <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">80</span>),<br>learndb(#   <span class="hljs-keyword">PRIMARY KEY</span>(dNo)<br>learndb(# );<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span><br></code></pre></td></tr></table></figure><p>也可以不在psql里面做这个事情，可以在postgreSQL专门的查询界面干这事</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> department(<br>  dNo           <span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>)        <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br>  dName         <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>  officeRoom    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>),<br>  homePage      <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">80</span>),<br>  <span class="hljs-keyword">PRIMARY KEY</span>(dNo)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student(<br>  sNo <span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>)        <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br>  sName<span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)    <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  sex<span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>)        <span class="hljs-keyword">CHECK</span> (sex <span class="hljs-keyword">IN</span>(<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>)),      <br>  age<span class="hljs-type">INT</span>,<br>  email         <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>  dNo<span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>),<br>  <span class="hljs-keyword">PRIMARY KEY</span>(sNo),<br>  <span class="hljs-keyword">FOREIGN KEY</span> (dNo) <span class="hljs-keyword">REFERENCES</span>  department(dNo)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> course(<br>  cNo<span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>)       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br>  cName<span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)    <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  cPNo<span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>),<br>  credit<span class="hljs-type">INT</span>,<br>  dNo           <span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>),<br>  <span class="hljs-keyword">PRIMARY KEY</span>(cNo),<br>  <span class="hljs-keyword">FOREIGN KEY</span> (cPNo) <span class="hljs-keyword">REFERENCES</span>  course(cNo),<br>  <span class="hljs-keyword">FOREIGN KEY</span> (dNo)  <span class="hljs-keyword">REFERENCES</span>  department(dNo)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> sc(<br>  sNo<span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>)       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  cNo<span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>)       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  score<span class="hljs-type">INT</span>,<br>  recordDate    <span class="hljs-type">date</span>           <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">current_date</span>,<br>  <span class="hljs-keyword">PRIMARY KEY</span>(sNo,cNo),<br>  <span class="hljs-keyword">FOREIGN KEY</span> (sNo) <span class="hljs-keyword">REFERENCES</span>  student(sNo),<br>  <span class="hljs-keyword">FOREIGN KEY</span> (cNo) <span class="hljs-keyword">REFERENCES</span>  course(cNo)<br>);<br></code></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;01&#x27;</span>,<span class="hljs-string">&#x27;信息学院&#x27;</span>,<span class="hljs-string">&#x27;行政楼409&#x27;</span>,<span class="hljs-string">&#x27;www.xxx.edu.cn&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;02&#x27;</span>,<span class="hljs-string">&#x27;软件学院&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;03&#x27;</span>,<span class="hljs-string">&#x27;理学院&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;04&#x27;</span>,<span class="hljs-string">&#x27;文学院&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;05&#x27;</span>,<span class="hljs-string">&#x27;外国语学院&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">......</span><br><span class="hljs-comment">下面省略不写</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> SC <br><span class="hljs-keyword">SET</span> score<span class="hljs-operator">=</span><span class="hljs-number">60</span><br><span class="hljs-keyword">WHERE</span> sNo<span class="hljs-operator">=</span><span class="hljs-number">123</span>;<br><br></code></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> sNo<span class="hljs-operator">=</span><span class="hljs-string">&#x27;070122&#x27;</span>;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> STUDENT;<br></code></pre></td></tr></table></figure><h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> [<span class="hljs-keyword">DISTINCT</span><span class="hljs-operator">|</span><span class="hljs-keyword">ALL</span>]&#123;<span class="hljs-operator">*</span><span class="hljs-operator">|</span>[columnExpression[<span class="hljs-keyword">AS</span> <br>newName]][,…]&#125;<br><span class="hljs-keyword">FROM</span> TableName[alias][,…]<br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>]<br>[<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> columnList][<span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">condition</span>]<br>[<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> columnList]<br></code></pre></td></tr></table></figure><h3 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">这是多行注释</span><br><span class="hljs-comment">pgAdmin4的常用快捷键:</span><br><span class="hljs-comment">  - Ctrl+Shift+K:格式化</span><br><span class="hljs-comment">  - F5:运行</span><br><span class="hljs-comment">  - Alt+S:保存</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> STUDENT;<span class="hljs-comment">-- 这是单行注释，注意双减号后面要有空格</span><br><br><br><span class="hljs-keyword">SELECT</span> SNO,<br>SNAME<br><span class="hljs-keyword">FROM</span> STUDENT;<span class="hljs-comment">-- 查询两个字段</span><br><br><br><span class="hljs-keyword">SELECT</span> SNAME,<br><span class="hljs-number">2023</span> - AGE <span class="hljs-keyword">AS</span> X <span class="hljs-comment">-- 用AS进行重命名</span><br><span class="hljs-keyword">FROM</span> STUDENT;<br><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> SNO <span class="hljs-comment">-- DISTINCT代表多个重复结果只保留一个</span><br><span class="hljs-keyword">FROM</span> SC;<br><br><br><span class="hljs-keyword">SELECT</span> SNO<br><span class="hljs-keyword">FROM</span> STUDENT<br><span class="hljs-keyword">WHERE</span> AGE <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">20</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">23</span>; <span class="hljs-comment">-- 这里AGE后面可以用类似 &lt;= 17 / IN(18,19,20)之类的筛选条件，sql中用`=`而不是`==`表示相等</span><br></code></pre></td></tr></table></figure><h3 id="LIKE语句"><a href="#LIKE语句" class="headerlink" title="LIKE语句"></a>LIKE语句</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*LIKE*/</span><br><span class="hljs-keyword">SELECT</span> sNo,sName<br><span class="hljs-keyword">FROM</span> Student <br><span class="hljs-keyword">WHERE</span> sName <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;张%&#x27;</span>; <span class="hljs-comment">-- `%`可以指代一个及以上的字符</span><br><br><span class="hljs-keyword">SELECT</span> sNo,sName<br><span class="hljs-keyword">FROM</span> Student <br><span class="hljs-keyword">WHERE</span> sName <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;张_&#x27;</span>; <span class="hljs-comment">-- `_`可以指代一个字符</span><br><br><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> Course<br><span class="hljs-keyword">WHERE</span> cName <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;DB\_%i__&#x27;</span> <span class="hljs-keyword">ESCAPE</span> <span class="hljs-string">&#x27;\&#x27;</span>; <span class="hljs-comment">-- `ESCAPE`指出`\`是转义字符</span><br><br><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> Student <br><span class="hljs-keyword">WHERE</span> sName ~ <span class="hljs-string">&#x27;^[\u4E00-\u9FA5]&#123;3,4&#125;$&#x27;</span>; <span class="hljs-comment">-- `~`指出正则表达式</span><br></code></pre></td></tr></table></figure><h3 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h3><p><code>null</code>代表未知</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*NULL</span><br><span class="hljs-comment">NULL代表未知(注意不是&quot;&quot;空字符串),意思是所有可能都存在</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">以下是SQL中WHERE语句可能返回的三种结果及其原因</span><br><span class="hljs-comment">- true:有返回数据</span><br><span class="hljs-comment">- false:无返回数据</span><br><span class="hljs-comment">- NULL(未知):此时也无返回数据</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span>; <span class="hljs-comment">-- 有结果，因为1=1返回true</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span>=<span class="hljs-number">0</span>; <span class="hljs-comment">-- 无结果，因为1=0返回false</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span>=<span class="hljs-keyword">NULL</span>; <span class="hljs-comment">-- 无结果，因为SQL也不知道1是不是等于NULL(1=NULL返回NULL)</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NULL</span>=<span class="hljs-keyword">NULL</span>; <span class="hljs-comment">-- 无结果</span><br><br><span class="hljs-comment">-- NOT语句:false和null的区别</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span>(<span class="hljs-number">1</span>=<span class="hljs-number">0</span>); <span class="hljs-comment">-- 有结果，因为SQL知道NOT false就是true</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>; <span class="hljs-comment">-- 无结果， 而NOT(NULL)还是未知，说句题外话，NOT后面的东西只能是boolean值</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span>(<span class="hljs-number">1</span>=<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 无结果，因为SQL也不知道1是不是等于NULL(true和false都有可能)</span><br><br><span class="hljs-comment">-- IS语句判断NULL</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> STUDENT <span class="hljs-keyword">WHERE</span> AGE = <span class="hljs-keyword">NULL</span>; <span class="hljs-comment">-- 无结果</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> STUDENT <span class="hljs-keyword">WHERE</span> AGE <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>; <span class="hljs-comment">-- 有结果</span><br><br><span class="hljs-comment">-- IN语句</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 有结果，因为1确实在元组里面</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">2</span>,<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 无结果，因为1在不在元组里面是未知的</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 无结果，因为两个NULL虽然都是未知，但是是不同的</span><br><span class="hljs-comment">-- NOT IN</span><br><span class="hljs-comment">-- 一旦NOT IN后面的括号里面有null,NOT IN表达式返回的只能是false或null</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 无结果，因为1确实在元组里面</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">2</span>,<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 无结果，因为1在不在元组里面是未知的</span><br><br><span class="hljs-comment">-- 比较</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> STUDENT <span class="hljs-keyword">WHERE</span> AGE &lt;&gt; <span class="hljs-number">18</span>; <span class="hljs-comment">-- AGE为null的人不被计入</span><br></code></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*排序*/</span><br><span class="hljs-keyword">SELECT</span> SNO,<br>SCORE<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> CNO = <span class="hljs-string">&#x27;010101&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> SCORE <span class="hljs-keyword">DESC</span>; <span class="hljs-comment">-- DESC代表降序排列  ASC代表升序排列(默认ASC)</span><br><br><span class="hljs-keyword">SELECT</span> * <br><span class="hljs-keyword">FROM</span> Student <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> dNo, age <span class="hljs-keyword">DESC</span>; <span class="hljs-comment">-- dNo为第一关键字，升序；age为第二关键字，降序</span><br><span class="hljs-comment">-- 另外，null在升序排序结果中在最后，而在降序排序中在最前，所以可以将null视为最大值</span><br></code></pre></td></tr></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>聚合函数输入的是一组数据的集合，输出的是单个值</p><p><strong>注意</strong>:聚合函数一般无视<code>null</code></p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs postgresql">COUNT([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] *)<br>COUNT([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] &lt;columnName&gt;) <br>SUM([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] &lt;columnName&gt;) <br>AVG([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] &lt; columnName &gt;)<br>MAX([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] &lt; columnName &gt;) <br>MIN([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] &lt; columnName &gt;)<br></code></pre></td></tr></table></figure><h3 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*聚合函数*/</span><br><span class="hljs-comment">-- COUNT</span><br><span class="hljs-comment">-- 你会发现COUNT可以对多维数组进行处理，但是其他很多聚合函数只能对一列进行处理</span><br><span class="hljs-keyword">SELECT</span> COUNT(*) <span class="hljs-comment">-- 返回Student的列数</span><br><span class="hljs-keyword">FROM</span> Student;<br><br><span class="hljs-keyword">SELECT</span> COUNT(age) <span class="hljs-comment">-- 返回Student中age的列数</span><br><span class="hljs-keyword">FROM</span> Student; <span class="hljs-comment">-- 注意，由于聚合函数无视null，所以这个命令和上面那个命令的返回结果可能不同</span><br><br><span class="hljs-keyword">SELECT</span> COUNT(*) <span class="hljs-keyword">AS</span> countOf <span class="hljs-comment">-- 可以重命名结果</span><br><span class="hljs-keyword">FROM</span> Course<br><span class="hljs-keyword">WHERE</span> credit &gt;= <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">SELECT</span> COUNT(<span class="hljs-keyword">DISTINCT</span> sNo) <span class="hljs-comment">-- 重复的不管</span><br><span class="hljs-keyword">FROM</span> SC;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/07/sql-note/COUNT.png" alt="COUNT示例"></p><h3 id="AVG"><a href="#AVG" class="headerlink" title="AVG"></a>AVG</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">SELECT</span> AVG(score) <br><span class="hljs-keyword">FROM</span> SC <br><span class="hljs-keyword">WHERE</span> cNo=<span class="hljs-string">&#x27;010101&#x27;</span>; <span class="hljs-comment">-- 可以先进行筛选再聚合</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/07/sql-note/AVG.png" alt="AVG示例"></p><p>其他<code>MIN</code> <code>MAX</code> <code>SUM</code>什么的都是类似的</p><h3 id="GROUP"><a href="#GROUP" class="headerlink" title="GROUP"></a>GROUP</h3><p>类似合并单元格</p><p>先分组后聚合(null也会被分成一组)</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">-- HAVING</span><br><span class="hljs-comment">-- 满足HAVING 子句中条件的分组将被显示</span><br><span class="hljs-keyword">SELECT</span> sNo<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> score&gt;<span class="hljs-number">60</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sNo<br><span class="hljs-keyword">HAVING</span> COUNT(*)&gt;<span class="hljs-number">3</span>; <span class="hljs-comment">-- 每个分组中有超过3行</span><br><br><span class="hljs-keyword">SELECT</span> sNo<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> score&gt;<span class="hljs-number">60</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sNo<br><span class="hljs-keyword">HAVING</span> sNo=<span class="hljs-string">&#x27;170102&#x27;</span>; <span class="hljs-comment">-- having后面一般是用聚合函数的，这里可以用sNo是因为sNo是分组依据(GROUP BY sNo)</span><br></code></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*子查询*/</span><br><span class="hljs-keyword">SELECT</span> SNAME<br><span class="hljs-keyword">FROM</span> STUDENT<br><span class="hljs-keyword">WHERE</span> DNO =<br>(<span class="hljs-keyword">SELECT</span> DNO<br><span class="hljs-keyword">FROM</span> STUDENT<br><span class="hljs-keyword">WHERE</span> SNAME = <span class="hljs-string">&#x27;宁灿&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> INDEX sName_index <span class="hljs-keyword">ON</span> Student(sName);<br><span class="hljs-keyword">DROP</span> INDEX sName_index;<br><br></code></pre></td></tr></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> view_1 <br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> s.sName, c.cName, sc.score<br><span class="hljs-keyword">FROM</span> Student s, Course c, sc<br><span class="hljs-keyword">WHERE</span> s.sNo<span class="hljs-operator">=</span>sc.sNo <span class="hljs-keyword">and</span> c.cNo<span class="hljs-operator">=</span>sc.cNo<br><span class="hljs-keyword">and</span> c.cName<span class="hljs-operator">=</span><span class="hljs-string">&#x27;离散数学&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> sName, score<br><span class="hljs-keyword">FROM</span> view_1<br><span class="hljs-keyword">WHERE</span> score<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span>;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> view_1;<br></code></pre></td></tr></table></figure><p>感觉和<code>table</code>差不多</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">BEGIN</span> TRANSACTION;<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> department<br><span class="hljs-keyword">WHERE</span> dno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;03&#x27;</span>;<br><span class="hljs-keyword">UPDATE</span> student<br><span class="hljs-keyword">SET</span> dno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;02&#x27;</span><br><span class="hljs-keyword">WHERE</span> sno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;008&#x27;</span>;<br><span class="hljs-keyword">commit</span>;<br><br></code></pre></td></tr></table></figure><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><h3 id="码"><a href="#码" class="headerlink" title="码"></a>码</h3><p>候选码，简称为码</p><h3 id="主属性"><a href="#主属性" class="headerlink" title="主属性"></a>主属性</h3><p>包含在任何一个码中的属性成为主属性</p><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p>符合1NF的关系中的 每个属性都不可再分</p><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p>2NF在1NF的基础之上，消除了非主属性对于码的部分函数依赖</p><p>如(<strong>SNo,CNo</strong>,Department,score)不满足2NF</p><h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><p>3NF在2NF的基础之上，消除了非主属性对于码的传递函数依赖</p><p>如(<strong>ID</strong>,school,headmaster)不满足3NF</p><h3 id="BCNF"><a href="#BCNF" class="headerlink" title="BCNF"></a>BCNF</h3><p>在 3NF 的基础上消除主属性对于码的部分与传递函数依赖</p><p>如(<strong>ID</strong>,<code>phone</code>,Name)不满足BCNF</p><h2 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h2><p>实体完整性（entity integrity）、参照完整性（referential integrity）和用户定义的完整性（user-defined integrity）</p><p>实体完整性：主属性（可能是一个或者一组属性）是不能取空值的</p><p>参照完整性：若属性（或属性组）F是基本关系R的外码，它与基本关系S的主码Ks相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值必须为S中某个元组的值</p><h2 id="DDL、DML、DCL"><a href="#DDL、DML、DCL" class="headerlink" title="DDL、DML、DCL"></a>DDL、DML、DCL</h2><p>DDL: （data definition language）数据定义语言，主要用于创建数据库对象。<br>DML:  (data manipulation language)数据操纵语言，主要用于操纵数据库对象。<br>DCL：（Data Control Language）数据控制语言，主要用于设置或更改数据库用户或角色权限的语句。<br>示例：</p><p>DDL示例： 如CREATE、ALTER、DROP、TRUNCATE、COMMENT、GRANT、REVOKE<br>DML示例：如SELECT、INSERT、UPDATE、DELETE、CALL、EXPLAIN PLAN、LOCK TABLE<br>DCL示例：如COMMIT、SAVEPOINT、ROLLBACK、SET TRANSACTION</p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源与目标的操作</title>
    <link href="/2023/03/22/yuan-yu-mu-biao-de-cao-zuo/"/>
    <url>/2023/03/22/yuan-yu-mu-biao-de-cao-zuo/</url>
    
    <content type="html"><![CDATA[<p>稍微总结一下一些控制台命令中的输入和输出目标的指定顺序</p><h3 id="shell-cp"><a href="#shell-cp" class="headerlink" title="shell:cp"></a>shell:cp</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@www ~]<span class="hljs-comment"># cp [-adfilprsu] 来源档(source) 目标档(destination)</span><br>[root@www ~]<span class="hljs-comment"># cp [options] source1 source2 source3 .... directory</span><br></code></pre></td></tr></table></figure><h3 id="gcc-o"><a href="#gcc-o" class="headerlink" title="gcc:-o"></a>gcc:-o</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">gcc -o hello.exe hello.c<br>gcc hello.c -o hello.exe<br></code></pre></td></tr></table></figure><p>因为<code>-o</code>的意思是制定目标名称，这里<code>hello.exe</code>就是<code>-o</code>的参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gcc -S hello.c <br></code></pre></td></tr></table></figure><p>像这样的，就是先在命令后面跟选项，然后再跟src</p><p>如果是</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gcc main.c<br></code></pre></td></tr></table></figure><p>会直接生成一个a.exe</p><h3 id="opencv-cvtColor"><a href="#opencv-cvtColor" class="headerlink" title="opencv:cvtColor"></a>opencv:cvtColor</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cvtColor</span><span class="hljs-params">(InputArray src, OutputArray dst, <span class="hljs-type">int</span> code, <span class="hljs-type">int</span> dstCn = <span class="hljs-number">0</span>)</span></span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javaIO笔记</title>
    <link href="/2023/03/22/javaio/"/>
    <url>/2023/03/22/javaio/</url>
    
    <content type="html"><![CDATA[<h1 id="javaI"><a href="#javaI" class="headerlink" title="javaI"></a>javaI</h1><p>参考了网络上的一些示例和java文档中的说明，归纳了比较常见的一些用法</p><h2 id="简单概念"><a href="#简单概念" class="headerlink" title="简单概念"></a>简单概念</h2><ul><li><p>字节流</p></li><li><p>字符流</p></li><li><p>输入流</p></li><li><p>输出流</p></li></ul><p>参考网址:<a href="https://blog.csdn.net/qq_52519008/article/details/127135476">主要看这个网址的第一张图</a></p><h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>FileInputStream(File file)<br>          通过打开一个到实际文件的连接来创建一个 FileInputStream，该文件通过文件系统中的 File 对象 file 指定。<br>FileInputStream(FileDescriptor fdObj)<br>          通过使用文件描述符 fdObj 创建一个 FileInputStream，该文件描述符表示到文件系统中某个实际文件的现有连接。<br>FileInputStream(String name)<br>          通过打开一个到实际文件的连接来创建一个 FileInputStream，该文件通过文件系统中的路径名 name 指定。 </p><h3 id="读取方法"><a href="#读取方法" class="headerlink" title="读取方法"></a>读取方法</h3><p> int read()<br>          从此输入流中读取一个数据字节。<br> int read(byte[] b)<br>          从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。<br> int read(byte[] b, int off, int len)<br>          从此输入流中将最多 len 个字节的数据读入一个 byte 数组中。 </p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>java.io.InputStream:字节输入流,此抽象类是表示字节输入流的所有类的超类。<br>定义了所有子类共性的方法:</p><ul><li><p>public abstract int read()从输入流中读取数据的下一个字节。</p></li><li><p>public int read(byte[] b) 从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。</p></li><li><p>public void close() 关闭此输入流并释放与该流关联的所有系统资源。</p></li></ul><p>InputStream的子类之一FileInputStream（文件字节输入流）,作用是把硬盘文件中的数据,读取到内存中使用。<br>   定义了构造方法:</p><ul><li><p>public FileInputStream(String name)通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。</p></li><li><p>public FileInputStream(File file) 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。<br>使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，建议开发中使用</p></li></ul><p>下面代码中的show1和show2展示了两种不同的初始化和文件读取方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        show1();<br>   &#125;<br>  <span class="hljs-comment">/**show1():从文件中读取单个字节</span><br><span class="hljs-comment">   * 1.创建FileInputStream对象,构造方法中绑定要读取的数据源</span><br><span class="hljs-comment">   * 2.使用FileInputStream对象中的方法read,读取文件</span><br><span class="hljs-comment">   * 3.释放资源</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-comment">//1.</span><br>        <span class="hljs-comment">/* 构造方法的作用:</span><br><span class="hljs-comment">            1.会创建一个FileInputStream对象</span><br><span class="hljs-comment">            2.会把FileInputStream对象指向构造方法中要读取的文件的第一个字节</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;09_IOAndProperties\\c.txt&quot;</span>); <span class="hljs-comment">//文件内容为abc</span><br>        <span class="hljs-comment">//FileInputStream fis = new FileInputStream(new File(&quot;09_IOAndProperties\\c.txt&quot;));</span><br>        <br>        <span class="hljs-comment">//2.int read()通过JVM，再通过OS，读取文件中的指针指向的字节并提升到int返回,连续读取时指针依次向后移，读取到文件的末尾返回-1</span><br>        len = fis.read();<br>        System.out.println(len);<span class="hljs-comment">//97 a</span><br>        len = fis.read();<br>        System.out.println(len);<span class="hljs-comment">// 98 b</span><br>        len = fis.read();<br>        System.out.println(len);<span class="hljs-comment">//99 c</span><br>        len = fis.read();<br>        System.out.println(len);<span class="hljs-comment">//-1</span><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">        int len = 0; //记录读取到的字节</span><br><span class="hljs-comment">        while((len = fis.read())!=-1)&#123;</span><br><span class="hljs-comment">            System.out.print((char)len);//abc</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br> <br>        <span class="hljs-comment">//3.</span><br>        fis.close();<br>    &#125;<br> <br>   <span class="hljs-comment">/**show2():从文件中读取字节数组</span><br><span class="hljs-comment">    *1.创建FileInputStream对象,构造方法中绑定要读取的数据源</span><br><span class="hljs-comment">    *2.使用FileInputStream对象中的方法read读取文件</span><br><span class="hljs-comment">    *3.关闭资源</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//1.</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;09_IOAndProperties\\b.txt&quot;</span>);<span class="hljs-comment">//文件内容为ABCDE</span><br>        <br>        <span class="hljs-comment">//2.</span><br>        <span class="hljs-comment">//int read(byte[] b) 从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span>]; <span class="hljs-comment">// byte[]起到缓冲作用,存储每次读取到的多个字节,数组的长度一把定义为1024(1kb)或者1024的整数倍</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//不同于读取单个字节int len记录每次读取的有效字节个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> fis.read(bytes); <br>        System.out.println(len);<span class="hljs-comment">//2</span><br>        <span class="hljs-comment">//System.out.println(Arrays.toString(bytes));//[65, 66]</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//String(byte[] bytes) :把字节数组转换为字符串</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<span class="hljs-comment">//AB</span><br>        len = fis.read(bytes);<br>        System.out.println(len);<span class="hljs-comment">//2</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<span class="hljs-comment">//CD</span><br>        len = fis.read(bytes);<br>        System.out.println(len);<span class="hljs-comment">//1</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//String(byte[] bytes, int offset, int length) 把字节数组的一部分转换为字符串 offset:数组的开始索引 length:转换的字节个数</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">0</span>,len));<br>        <span class="hljs-comment">//System.out.println(new String(bytes)); ED 错于当数组容量大于剩余字节时，上次读取的数据没有被完全替换而重复读取，所以要通过 len ，获取有效的字节.</span><br>        len = fis.read(bytes);<br>        System.out.println(len);<span class="hljs-comment">//-1       </span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        byte[] bytes = new byte[1024];</span><br><span class="hljs-comment">        int len = 0;</span><br><span class="hljs-comment">        while((len = fis.read(bytes))!=-1)&#123;</span><br><span class="hljs-comment">            //</span><br><span class="hljs-comment">            //当数组容量大于读取内容时，直接转换成字符串会生成大量空格，所以只转换有效字节</span><br><span class="hljs-comment">            System.out.println(new String(bytes,0,len));</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br> <br>        <span class="hljs-comment">//3.</span><br>        fis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="BufferedInputStream（缓冲字节流）"><a href="#BufferedInputStream（缓冲字节流）" class="headerlink" title="BufferedInputStream（缓冲字节流）"></a>BufferedInputStream（缓冲字节流）</h2><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><p>BufferedInputStream(InputStream in)<br>          创建一个 BufferedInputStream 并保存其参数，即输入流 in，以便将来使用。</p><h3 id="读取方法-1"><a href="#读取方法-1" class="headerlink" title="读取方法"></a>读取方法</h3><p> int read()<br>          参见 InputStream 的 read 方法的常规协定。<br> int read(byte[] b, int off, int len)<br>          从此字节输入流中给定偏移量处开始将各字节读取到指定的 byte 数组中。 </p><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>缓冲字节流是为高效率而设计的，真正的读写操作还是靠<code>FileOutputStream</code>和<code>FileInputStream</code>，所以其构造方法入参是这两个类的对象也就不奇怪了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">// 缓冲字节流，提高了效率</span><br><span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file, <span class="hljs-literal">true</span>));<br><br><span class="hljs-comment">// 要写入的字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;松下问童子，言师采药去。只在此山中，云深不知处。&quot;</span>;<br><span class="hljs-comment">// 写入文件</span><br>bis.write(string.getBytes());<br><span class="hljs-comment">// 关闭流</span><br>bis.close();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">read</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file));<br><br><span class="hljs-comment">// 一次性取多少个字节</span><br><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">// 用来接收读取的字节数组</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-comment">// 读取到的字节数组长度，为-1时表示没有数据</span><br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 循环取数据</span><br><span class="hljs-keyword">while</span> ((length = fis.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 将读取的内容转换成字符串</span><br>sb.append(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span>, length));<br>&#125;<br><span class="hljs-comment">// 关闭流</span><br>fis.close();<br><br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h2><p>InputStreamReader 是字节流通向字符流的桥梁</p><h3 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h3><p>InputStreamReader(InputStream in)<br>          创建一个使用默认字符集的 InputStreamReader。<br>InputStreamReader(InputStream in, Charset cs)<br>          创建使用给定字符集的 InputStreamReader。<br>InputStreamReader(InputStream in, CharsetDecoder dec)<br>          创建使用给定字符集解码器的 InputStreamReader。<br>InputStreamReader(InputStream in, String charsetName)<br>          创建使用指定字符集的 InputStreamReader。 </p><h3 id="读取方法-2"><a href="#读取方法-2" class="headerlink" title="读取方法"></a>读取方法</h3><p>int read()<br>          读取单个字符。<br> int read(char[] cbuf, int offset, int length)<br>          将字符读入数组中的某一部分。 </p><h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><p><strong>字符流适用于文本文件的读写</strong>，<code>OutputStreamWriter</code>类其实也是借助<code>FileOutputStream</code>类实现的，故其构造方法是<code>FileOutputStream</code>的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">// OutputStreamWriter可以显示指定字符集，否则使用默认字符集</span><br><span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file, <span class="hljs-literal">true</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br><span class="hljs-comment">// 要写入的字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;松下问童子，言师采药去。只在此山中，云深不知处。&quot;</span>;<br>osw.write(string);<br>osw.close();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">read</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-comment">// 字符数组：一次读取多少个字符</span><br><span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">// 每次读取的字符数组先append到StringBuilder中</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-comment">// 读取到的字符数组长度，为-1时表示没有数据</span><br><span class="hljs-type">int</span> length;<br><span class="hljs-comment">// 循环取数据</span><br><span class="hljs-keyword">while</span> ((length = isr.read(chars)) != -<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 将读取的内容转换成字符串</span><br>sb.append(chars, <span class="hljs-number">0</span>, length);<br>&#125;<br><span class="hljs-comment">// 关闭流</span><br>isr.close();<br><br><span class="hljs-keyword">return</span> sb.toString()<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><p>Java提供了<code>FileWriter</code>和<code>FileReader</code>简化字符流的读写，<code>new FileReader(file)</code>等同于<code>new InputStreamReader(new FileInputStream(file, true))</code></p><h3 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h3><p>FileReader(File file)<br>          在给定从中读取数据的 File 的情况下创建一个新 FileReader。<br>FileReader(String fileName)<br>          在给定从中读取数据的文件名的情况下创建一个新 FileReader。 </p><h3 id="读取方法-3"><a href="#读取方法-3" class="headerlink" title="读取方法"></a>读取方法</h3><p>和InputStreamReader的方法一样，都是从InputStreamReader那里继承的</p><h3 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file, <span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 要写入的字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;松下问童子，言师采药去。只在此山中，云深不知处。&quot;</span>;<br>fw.write(string);<br>fw.close();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">read</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file);<br><span class="hljs-comment">// 一次性取多少个字节</span><br><span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">// 用来接收读取的字节数组</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-comment">// 读取到的字节数组长度，为-1时表示没有数据</span><br><span class="hljs-type">int</span> length;<br><span class="hljs-comment">// 循环取数据</span><br><span class="hljs-keyword">while</span> ((length = fr.read(chars)) != -<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 将读取的内容转换成字符串</span><br>sb.append(chars, <span class="hljs-number">0</span>, length);<br>&#125;<br><span class="hljs-comment">// 关闭流</span><br>fr.close();<br><br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="BufferedReader（字符缓冲流）"><a href="#BufferedReader（字符缓冲流）" class="headerlink" title="BufferedReader（字符缓冲流）"></a>BufferedReader<strong>（字符缓冲流）</strong></h2><h3 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h3><p>BufferedReader(Reader in)<br>          创建一个使用默认大小输入缓冲区的缓冲字符输入流。<br>BufferedReader(Reader in, int sz)<br>          创建一个使用指定大小输入缓冲区的缓冲字符输入流。 </p><h3 id="读取方法-4"><a href="#读取方法-4" class="headerlink" title="读取方法"></a>读取方法</h3><p> int read()<br>          读取单个字符。<br> int read(char[] cbuf, int off, int len)<br>          将字符读入数组的某一部分。<br> String readLine()<br>          读取一个文本行。 </p><h3 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h3><p>整个文档里面只有它是支持readline的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">// BufferedWriter fw = new BufferedWriter(new OutputStreamWriter(new</span><br><span class="hljs-comment">// FileOutputStream(file, true), &quot;UTF-8&quot;));</span><br><span class="hljs-comment">// FileWriter可以大幅度简化代码</span><br><span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file, <span class="hljs-literal">true</span>));<br><br><span class="hljs-comment">// 要写入的字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;松下问童子，言师采药去。只在此山中，云深不知处。&quot;</span>;<br>bw.write(string);<br>bw.close();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">read</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file));<br><span class="hljs-comment">// 用来接收读取的字节数组</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br><span class="hljs-comment">// 按行读数据</span><br>String line;<br><span class="hljs-comment">// 循环取数据</span><br><span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 将读取的内容转换成字符串</span><br>sb.append(line);<br>&#125;<br><span class="hljs-comment">// 关闭流</span><br>br.close();<br><br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="InputStreamReader类与FileReader类关系"><a href="#InputStreamReader类与FileReader类关系" class="headerlink" title="InputStreamReader类与FileReader类关系"></a>InputStreamReader类与FileReader类关系</h2><p>1、FileReader类仅仅是InputStreamReader的简单衍生并未扩展任何功能</p><p>2、FileReader类读取数据实质是InputStreamReader类在读取，而InputStreamReader读取数据实际是StreamDecoder类读取</p><p>3、因此在使用字符输入流的时候实际是StreamDecoder类在发挥作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InputStreamReader</span><br></code></pre></td></tr></table></figure><h2 id="System-in"><a href="#System-in" class="headerlink" title="System.in"></a>System.in</h2><p>static InputStream in<br>          “标准”输入流。 </p><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><p>实现的接口： <code>Iterator&lt;String&gt; </code></p><h3 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h3><p>Scanner(File source)<br>          构造一个新的 Scanner，它生成的值是从指定文件扫描的。<br>Scanner(InputStream source)<br>          构造一个新的 Scanner，它生成的值是从指定的输入流扫描的。<br>Scanner(Readable source)<br>          构造一个新的 Scanner，它生成的值是从指定源扫描的。<br>Scanner(String source)<br>          构造一个新的 Scanner，它生成的值是从指定字符串扫描的。 </p><p>此外还有的构造方法在以上的基础上，可以允许程序员指定字符集</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>boolean hasNextInt()<br>          如果通过使用 nextInt() 方法，此扫描器输入信息中的下一个标记可以解释为默认基数中的一个 int 值，则返回 true。<br>boolean hasNextLine()<br>          如果在此扫描器的输入中存在另一行，则返回 true。<br>int nextInt()<br>          将输入信息的下一个标记扫描为一个 int。<br>String nextLine()<br>          此扫描器执行当前行，并返回跳过的输入信息。 </p><p>此外，还有nextByte nextFloat nextDouble hasNextFloat这种方法</p><h3 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h3><p>一个可以使用正则表达式来解析基本类型和字符串的简单文本扫描器。</p><p>以下代码使用户能够从 <code>System.in</code> 中读取一个数： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt();<br></code></pre></td></tr></table></figure><p>以下代码使 <code>long</code> 类型可以通过 <code>myNumbers</code> 文件中的项分配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;myNumbers&quot;</span>));<br>      <span class="hljs-keyword">while</span> (sc.hasNextLong()) &#123;<br>          <span class="hljs-type">long</span> <span class="hljs-variable">aLong</span> <span class="hljs-operator">=</span> sc.nextLong();<br>      &#125;<br></code></pre></td></tr></table></figure><p>可以看出一般next和hasNext是一起用的</p><p>它可以通过<code>File</code> <code>String</code> <code>inputStream</code>进行构造</p><h1 id="JavaO"><a href="#JavaO" class="headerlink" title="JavaO"></a>JavaO</h1><h2 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h2><h3 id="构造方法-6"><a href="#构造方法-6" class="headerlink" title="构造方法"></a>构造方法</h3><p>FileOutputStream(File file)<br>          创建一个向指定 File 对象表示的文件中写入数据的文件输出流。<br>FileOutputStream(File file, boolean append)<br>          创建一个向指定 File 对象表示的文件中写入数据的文件输出流。<br>FileOutputStream(String name)<br>          创建一个向具有指定名称的文件中写入数据的输出文件流。<br>FileOutputStream(String name, boolean append)<br>          创建一个向具有指定 name 的文件中写入数据的输出文件流。 </p><h3 id="写入方法"><a href="#写入方法" class="headerlink" title="写入方法"></a>写入方法</h3><p>void write(byte[] b)<br>          将 b.length 个字节从指定 byte 数组写入此文件输出流中。<br> void write(byte[] b, int off, int len)<br>          将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此文件输出流。<br> void write(int b)<br>          将指定字节写入此文件输出流。 </p><h2 id="BufferedOutputStream"><a href="#BufferedOutputStream" class="headerlink" title="BufferedOutputStream"></a>BufferedOutputStream</h2><h3 id="构造方法-7"><a href="#构造方法-7" class="headerlink" title="构造方法"></a>构造方法</h3><p>BufferedOutputStream(OutputStream out)<br>          创建一个新的缓冲输出流，以将数据写入指定的底层输出流。<br>BufferedOutputStream(OutputStream out, int size)<br>          创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流。 </p><h3 id="写入方法-1"><a href="#写入方法-1" class="headerlink" title="写入方法"></a>写入方法</h3><p>void flush()<br>          刷新此缓冲的输出流。<br>void write(byte[] b, int off, int len)<br>          将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此缓冲的输出流。<br>void write(int b)<br>          将指定的字节写入此缓冲的输出流。 </p><h2 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h2><p>OutputStreamWriter 是字符流通向字节流的桥梁</p><h3 id="构造方法-8"><a href="#构造方法-8" class="headerlink" title="构造方法"></a>构造方法</h3><p>OutputStreamWriter(OutputStream out)<br>          创建使用默认字符编码的 OutputStreamWriter。<br>OutputStreamWriter(OutputStream out, Charset cs)<br>          创建使用给定字符集的 OutputStreamWriter。<br>OutputStreamWriter(OutputStream out, CharsetEncoder enc)<br>          创建使用给定字符集编码器的 OutputStreamWriter。<br>OutputStreamWriter(OutputStream out, String charsetName)<br>          创建使用指定字符集的 OutputStreamWriter。 </p><h3 id="写入方法-2"><a href="#写入方法-2" class="headerlink" title="写入方法"></a>写入方法</h3><p> void flush()<br>          刷新该流的缓冲。<br> void write(char[] cbuf, int off, int len)<br>          写入字符数组的某一部分。<br> void write(int c)<br>          写入单个字符。<br> void write(String str, int off, int len)<br>          写入字符串的某一部分。 </p><h2 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h2><h3 id="构造方法-9"><a href="#构造方法-9" class="headerlink" title="构造方法"></a>构造方法</h3><p>FileWriter(File file)<br>          根据给定的 File 对象构造一个 FileWriter 对象。<br>FileWriter(File file, boolean append)<br>          根据给定的 File 对象构造一个 FileWriter 对象。<br>FileWriter(String fileName)<br>          根据给定的文件名构造一个 FileWriter 对象。<br>FileWriter(String fileName, boolean append)<br>          根据给定的文件名以及指示是否附加写入数据的 boolean 值来构造 FileWriter 对象。 </p><h3 id="写入方法-3"><a href="#写入方法-3" class="headerlink" title="写入方法"></a>写入方法</h3><p>和OutputStreamWriter一样，继承于OutputStreamWriter</p><h2 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h2><h3 id="构造方法-10"><a href="#构造方法-10" class="headerlink" title="构造方法"></a>构造方法</h3><p>BufferedWriter(Writer out)<br>          创建一个使用默认大小输出缓冲区的缓冲字符输出流。<br>BufferedWriter(Writer out, int sz)<br>          创建一个使用给定大小输出缓冲区的新缓冲字符输出流。 </p><h3 id="写入方法-4"><a href="#写入方法-4" class="headerlink" title="写入方法"></a>写入方法</h3><p> void flush()<br>          刷新该流的缓冲。<br> void newLine()<br>          写入一个行分隔符。<br> void write(char[] cbuf, int off, int len)<br>          写入字符数组的某一部分。<br> void write(int c)<br>          写入单个字符。<br> void write(String s, int off, int len)<br>          写入字符串的某一部分。 </p><h2 id="System-out"><a href="#System-out" class="headerlink" title="System.out"></a>System.out</h2><p>static PrintStream out<br>          “标准”输出流。 </p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java转型</title>
    <link href="/2023/03/22/java-zhuan-xing/"/>
    <url>/2023/03/22/java-zhuan-xing/</url>
    
    <content type="html"><![CDATA[<h1 id="向上转型与向下转型"><a href="#向上转型与向下转型" class="headerlink" title="向上转型与向下转型"></a>向上转型与向下转型</h1><p>类型转换只是转换看待对象的引用的类型，对象本身没有也不可能参与转换</p><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p>父类引用可以自动指向子类对象，但只能访问和调用到来自于父类的属性和行为</p><p>调用属性看父类，调用方法先看子类，子类没有，再看父类，如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;father&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Father fun&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;son&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Son fun&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Father f=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>(); <br>System.out.println(f.name); <span class="hljs-comment">// 输出 &quot;father&quot;</span><br>f.fun();<span class="hljs-comment">// 输出 &quot;Son fun&quot;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h2><p>把父类引用赋给子类引用，语法上必须使用强制类型转换，要想运行也成功还必须保证父类引用指向的对象一定是该子类对象（最好使用instance判断后，再强转）</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>参考网址：<a href="http://c.biancheng.net/view/6503.html">Java对象类型转换：向上转型和向下转型 </a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Animal：动物&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">staticName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Animal：可爱的动物&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal：吃饭&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticEat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal：动物在吃饭&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Cat：猫&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Cat：可爱的小猫&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">staticName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dog：我是喵星人&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat：吃饭&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticEat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat：猫在吃饭&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eatMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat：猫喜欢吃鱼&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//Cat cat = new Animal();// 出错</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) animal; <span class="hljs-comment">// 向下转型</span><br>        System.out.println(animal.name); <span class="hljs-comment">// 输出Animal类的name变量</span><br>        System.out.println(animal.staticName); <span class="hljs-comment">// 输出Animal类的staticName变量</span><br>        animal.eat(); <span class="hljs-comment">// 输出Cat类的eat()方法</span><br>        animal.staticEat(); <span class="hljs-comment">// 输出Animal类的staticEat()方法</span><br>        System.out.println(cat.str); <span class="hljs-comment">// 调用Cat类的str变量</span><br>        cat.eatMethod(); <span class="hljs-comment">// 调用Cat类的eatMethod()方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="强制对象类型转换"><a href="#强制对象类型转换" class="headerlink" title="强制对象类型转换"></a>强制对象类型转换</h2><p>Java 编译器允许在具有直接或间接继承关系的类之间进行类型转换。对于向下转型，必须进行强制类型转换；对于向上转型，不必使用强制类型转换。</p><p>例如，对于一个引用类型的变量，Java 编译器按照它声明的类型来处理。如果使用 animal 调用 str 和 eatMethod() 方法将会出错，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">animal.str = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-comment">// 编译出错，提示Animal类中没有str属性</span><br>animal.eatMethod();    <span class="hljs-comment">// 编译出错，提示Animal类中没有eatMethod()方法</span><br></code></pre></td></tr></table></figure><p>如果要访问 Cat 类的成员，必须通过强制类型转换，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">((Cat)animal).str = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-comment">// 编译成功</span><br>((Cat)animal).eatMethod();    <span class="hljs-comment">// 编译成功</span><br></code></pre></td></tr></table></figure><p>把 Animal 对象类型强制转换为 Cat 对象类型，这时上面两句编译成功。对于如下语句，由于使用了强制类型转换，所以也会编译成功，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat)animal;    <span class="hljs-comment">// 编译成功，将Animal对象类型强制转换为Cat对象类型</span><br></code></pre></td></tr></table></figure><p>类型强制转换时想运行成功就必须保证父类引用指向的对象一定是该子类对象，最好使用 instanceof 运算符判断后，再强转，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Cat) <br>&#123;    <br>    <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) animal; <span class="hljs-comment">// 向下转型    ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>子类的对象可以转换成父类类型，而父类的对象实际上无法转换为子类类型。因为通俗地讲，父类拥有的成员子类肯定也有，而子类拥有的成员，父类不一定有。因此，对于向上转型，不必使用强制类型转换。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> cat;    <span class="hljs-comment">// 向上转型，不必使用强制类型转换</span><br></code></pre></td></tr></table></figure><p>如果两种类型之间没有继承关系，那么将不允许进行类型转换。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat)dog;    <span class="hljs-comment">// 编译出错，不允许把Dog对象类型转换为Cat对象类型</span><br></code></pre></td></tr></table></figure><h1 id="隐式转型与显式转型"><a href="#隐式转型与显式转型" class="headerlink" title="隐式转型与显式转型"></a>隐式转型与显式转型</h1><h2 id="隐式转型"><a href="#隐式转型" class="headerlink" title="隐式转型"></a>隐式转型</h2><p><strong>隐式转换也叫自动类型转换，指的是不需要调用函数，JVM自动将类型转换的一种方式。因为这种类型转换经常使用，Java语言在设计时，为了减轻开发人员的负担，都交给JVM来自动处理。</strong></p><p>1)转换规则从存储范围小的类型到存储范围大的类型(只有前面的数据才能随便转换为后边的)<br>byte—&gt; short,char—&gt; int —&gt; long—&gt; float —&gt; double<br>2)例子：<br>byte b &#x3D; 2; short s &#x3D; b; 首先JVM会将b的值转换为short类型，再将值赋值给s</p><h2 id="显式转型"><a href="#显式转型" class="headerlink" title="显式转型"></a>显式转型</h2><p><strong>显示转换也叫强制类型转换，指的是需要手动去处理才能完成的类型转换。该转换会存在精度损失。</strong><br>1)转换规则从存储范围大的类型到存储范围小的类型<br>double→float→long→int→short(char)→byte<br>2)例子：<br>double d &#x3D; 1.1; int i &#x3D; (int)d;<br>首先将d的值转换成int类型，然后赋值给变量i。需要注意的是小数强制转换为整数，采用的是“去1法”，也就是舍弃小数点后面所有数字，则以上转换出的结果是1。整数强制转换为整数时取数字的低位，例如int类型的变量转换为byte类型时，则只去int类型的低8位(也就是最后一个字节)的值。</p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java复习笔记</title>
    <link href="/2023/03/22/java-review/"/>
    <url>/2023/03/22/java-review/</url>
    
    <content type="html"><![CDATA[<h1 id="java复习"><a href="#java复习" class="headerlink" title="java复习"></a>java复习</h1><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p>示例：<a href="https://www.processon.com/view/link/633bec4ef346fb07dea52d90">UML类图-校园活动管理系统</a></p><p>在关联关系中注意：箭头方向(单向关联&#x2F;双向关联)，对应数量(1..*)，引用名(单向关联&#x2F;双向关联)【书本15页】</p><p>在继承关系中注意：箭头方向【书本18页】</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="形参按值传递"><a href="#形参按值传递" class="headerlink" title="形参按值传递"></a>形参按值传递</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;a++;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>fun(num);<br>System.out.println(num);<span class="hljs-comment">//输出0</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(String s)</span> &#123;s=<span class="hljs-string">&quot;world&quot;</span>;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>String string=<span class="hljs-string">&quot;hello&quot;</span>;<br>fun(string);<br>System.out.println(string);<span class="hljs-comment">//输出 hello</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>方法名相同但是参数列表不同</p><p>xxxxxxxxxx1 1conda create -n new_env –clone exist_envsh</p><h4 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li>方法名必须相同</li><li>参数列表必须不同(参数类型或个数或顺序，至少有一样不同)</li><li>返回类型没有要求</li></ol><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><h3 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h3><p>此变量需在定义时或在类构造函数中初始化</p><h3 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h3><p>此方法可被子类继承，但不能被子类覆写</p><h3 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h3><p>此类不能被继承</p><h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><ul><li><p>public:公开的，整体可见</p></li><li><p>private:只能被类自身访问</p></li><li><p>protected:只能被以下三种之一访问</p><ol><li><p>该类自己</p></li><li><p>同包的其他类</p></li><li><p>其他包中该类的子类</p></li></ol></li><li><p>缺省:可被同包的其他类访问</p></li></ul><h2 id="与equals"><a href="#与equals" class="headerlink" title="==与equals"></a><code>==</code>与<code>equals</code></h2><p>如果是基本数据类型，&#x3D;&#x3D;判断的是值</p><p>如果是对象类型，&#x3D;&#x3D;判断的是对象的地址</p><p>通过直接赋值而不是new的方式给String赋值，如果字符串常量池中有该对象，则不会再创建，此时通过 &#x3D;&#x3D; 判断，返回的是true。如：String str&#x3D;“wo”；String str1&#x3D;“wo”;str &#x3D;&#x3D; str1为true.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>String s1=<span class="hljs-string">&quot;hello&quot;</span>;<br>String s2=<span class="hljs-string">&quot;hello&quot;</span>;<br>String s3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(s1==s2);<span class="hljs-comment">//true</span><br>System.out.println(s1==s3);<span class="hljs-comment">//false</span><br>System.out.println(s1.equals(s3));<span class="hljs-comment">//true</span><br><span class="hljs-type">int</span> num1=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> num2=<span class="hljs-number">1</span>;<br>System.out.println(num1==num2);<span class="hljs-comment">//true</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><h3 id="基本数据类型转字符串"><a href="#基本数据类型转字符串" class="headerlink" title="基本数据类型转字符串"></a>基本数据类型转字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>String str1=String.valueOf(<span class="hljs-number">123</span>);<br>String str2=String.valueOf(<span class="hljs-literal">true</span>);<br>String str3=Integer.toString(<span class="hljs-number">456</span>);<br>System.out.println(str1);<br>System.out.println(str2);<br>System.out.println(str3);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串转基本数据类型"><a href="#字符串转基本数据类型" class="headerlink" title="字符串转基本数据类型"></a>字符串转基本数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> num1=Integer.valueOf(<span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-type">int</span> num2=Integer.parseInt(<span class="hljs-string">&quot;456&quot;</span>);<br>System.out.println(num1);<br>System.out.println(num2);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in)) &#123;<br>            a = scanner.nextInt();<br>            b = scanner.nextInt();<br>            System.out.println(a / b);<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException exception) &#123;<br>        System.out.println(<span class="hljs-string">&quot;除数为0&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;程序结束&quot;</span>);<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="throw-throws"><a href="#throw-throws" class="headerlink" title="throw-throws"></a>throw-throws</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> num1,<span class="hljs-type">int</span> num2)</span> <span class="hljs-keyword">throws</span> ArithmeticException&#123;<br><span class="hljs-keyword">if</span>(num2==<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArithmeticException</span>();<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> num1/num2;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in)) &#123;<br>            a = scanner.nextInt();<br>            b = scanner.nextInt();<br>            System.out.println(div(a,b));<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException exception) &#123;<br>        System.out.println(<span class="hljs-string">&quot;除数为0&quot;</span>);<br>        exception.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;程序结束&quot;</span>);<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="javadoc"><a href="#javadoc" class="headerlink" title="javadoc"></a>javadoc</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 小明</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 求输入两个参数的和</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> m 加数1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> n 加数2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 和</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-keyword">return</span> m + n;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>String id;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;animal : eat&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String id)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.id = id;<br><span class="hljs-comment">// some code</span><br>&#125;<br><br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;dog : eat&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String id)</span> &#123;<br><span class="hljs-built_in">super</span>(id);<br><span class="hljs-comment">// some code</span><br>&#125;<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&quot;animal&quot;</span>);<br>a.eat();<br><span class="hljs-type">Dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;dog&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>子类必须调用父类的构造器，完成父类的初始化。（在子类的构造器中的第一个语句默认有<code>super();</code>它默认去调用父类的无参构造器）。这个父类的构造函数必须写在子类构造函数的第一行</p><h3 id="覆写"><a href="#覆写" class="headerlink" title="覆写"></a>覆写</h3><p>子类写一个方法名，参数列表，返回类型与父类相同的方法</p><p>返回类型也要一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>String id;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;animal : eat&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String id)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.id = id;<br><span class="hljs-comment">// some code</span><br>&#125;<br><br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>String <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//报错:The return type is incompatible with Animal.eat()</span><br>System.out.println(<span class="hljs-string">&quot;dog : eat&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;eat&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String id)</span> &#123;<br><span class="hljs-built_in">super</span>(id);<br><span class="hljs-comment">// some code</span><br>&#125;<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="静态类方法和类属性的继承"><a href="#静态类方法和类属性的继承" class="headerlink" title="静态类方法和类属性的继承"></a>静态类方法和类属性的继承</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Animal : name&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;animal : eat&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;animal : sleep&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dog : name&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;dog : eat&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><span class="hljs-type">Dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><br>Dog.eat();<span class="hljs-comment">// dog : eat</span><br>a.eat();<span class="hljs-comment">// animal : eat</span><br>d.eat();<span class="hljs-comment">// dog : eat</span><br>System.out.println(a.name);<span class="hljs-comment">// Animal : name</span><br>System.out.println(d.name);<span class="hljs-comment">// Dog : name</span><br>System.out.println(Dog.name);<span class="hljs-comment">// Dog : name</span><br>Dog.sleep();<span class="hljs-comment">// 这行可以运行 输出结果是 animal : sleep</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>得出如下结论:父类中的静态成员变量和方法是可以被子类继承的,但是不能被自己重写,无法形成多态.</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p><strong>静态方法绑定类，在类加载时便与该类捆绑，不受其他类影响</strong></p><p><strong>而动态方法绑定实例对象，受子类重写的影响，若被重写即绑定到重写它的那个实例对象上</strong></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*初始化*/</span><br>List&lt;Integer&gt; l = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-comment">/*添加*/</span><br>l.add(<span class="hljs-number">1</span>);<br>l.add(<span class="hljs-number">2</span>);<br>l.add(<span class="hljs-number">3</span>);<br>l.add(<span class="hljs-number">4</span>);<br>        <span class="hljs-comment">/*获取*/</span><br>System.out.println(l.get(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 2</span><br>        <span class="hljs-comment">/*删除*/</span><br>l.remove(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">/*遍历*/</span><br>Iterator&lt;Integer&gt; i=l.iterator();<br><span class="hljs-keyword">while</span>(i.hasNext()) &#123;<br>System.out.println(i.next());<span class="hljs-comment">// 1 3 4</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三种遍历列表的方法"><a href="#三种遍历列表的方法" class="headerlink" title="三种遍历列表的方法"></a>三种遍历列表的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Product&gt; l_Products=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Product&gt;();<br><span class="hljs-comment">//choose one of the three following methods</span><br><span class="hljs-comment">//for-each</span><br><span class="hljs-keyword">for</span>(Product l_Product:l_Products)<br>&#123;<br>System.out.println(l_Product);<br>&#125;<br><br><span class="hljs-comment">//ArrayList&lt;&gt;.get</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;l_Products.size();i++)<br>&#123;<br>System.out.println(l_Products.get(i));<br>&#125;<br><br><br><span class="hljs-comment">//Iterator</span><br>Iterator&lt;Product&gt; iterator_Product=l_Products.iterator();<br><span class="hljs-keyword">while</span>(iterator_Product.hasNext())<br>&#123;<br>System.out.println(iterator_Product.next());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span><br><span class="hljs-comment">//在实例化泛型类时，必须指定T的具体类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic</span>&lt;T&gt; &#123;<br><span class="hljs-comment">// key这个成员变量的类型为T,T的类型由外部指定</span><br><span class="hljs-keyword">private</span> T key;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Generic</span><span class="hljs-params">(T key)</span> &#123; <span class="hljs-comment">// 泛型构造方法形参key的类型也为T，T的类型由外部指定</span><br><span class="hljs-built_in">this</span>.key = key;<br>&#125;<br><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 泛型方法getKey的返回值类型为T，T的类型由外部指定</span><br><span class="hljs-keyword">return</span> key;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 泛型的类型参数只能是类类型（包括自定义类），不能是简单类型</span><br><span class="hljs-comment">// 传入的实参类型需与泛型的类型参数类型相同，即为Integer.</span><br>Generic&lt;Integer&gt; genericInteger = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;Integer&gt;(<span class="hljs-number">2023</span>);<br><span class="hljs-comment">// 也可以这样定义，但是会警告，所以还是尽量避免</span><br><span class="hljs-type">Generic</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;Integer&gt;(<span class="hljs-number">2024</span>);<br><span class="hljs-type">Generic</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>(<span class="hljs-number">2025</span>);<br><br><span class="hljs-comment">// 传入的实参类型需与泛型的类型参数类型相同，即为String.</span><br>Generic&lt;String&gt; genericString = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;String&gt;(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + genericInteger.getKey());<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + genericString.getKey());<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + t1.getKey());<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + t2.getKey());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="初始化问题"><a href="#初始化问题" class="headerlink" title="初始化问题"></a>初始化问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//List l1=new ArrayList&lt;int&gt;();// 无法被正确初始化</span><br>List l2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>ArrayList l3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-comment">//ArrayList&lt;&gt; l4=new ArrayList&lt;String&gt;();// 无法被正确初始化</span><br>ArrayList&lt;String&gt; l5=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>List&lt;String&gt; l6=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>List&lt;String&gt; l7=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//List&lt;&gt; l8=new ArrayList&lt;&gt;();// 无法被正确初始化</span><br>List l9=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结，泛型中不能填基本数据类型，<code>=</code>号前面不能有空的<code>&lt;&gt;</code>，<code>=</code>号后面可以进行一些省略(会被警告)，但是最好还是不要偷懒，要写规范，否则会出一些问题</p><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><p>语法：修饰符 Class 类名称 &lt;泛型类型&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span><br><span class="hljs-comment">//在实例化泛型类时，必须指定T的具体类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic</span>&lt;T&gt; &#123;<br><span class="hljs-comment">// key这个成员变量的类型为T,T的类型由外部指定</span><br><span class="hljs-keyword">private</span> T key;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Generic</span><span class="hljs-params">(T key)</span> &#123; <span class="hljs-comment">// 泛型构造方法形参key的类型也为T，T的类型由外部指定</span><br><span class="hljs-built_in">this</span>.key = key;<br>&#125;<br><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 泛型方法getKey的返回值类型为T，T的类型由外部指定</span><br><span class="hljs-keyword">return</span> key;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 泛型的类型参数只能是类类型（包括自定义类），不能是简单类型</span><br><span class="hljs-comment">// 传入的实参类型需与泛型的类型参数类型相同，即为Integer.</span><br>Generic&lt;Integer&gt; genericInteger = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;Integer&gt;(<span class="hljs-number">2023</span>);<br><span class="hljs-comment">// 传入的实参类型需与泛型的类型参数类型相同，即为String.</span><br>Generic&lt;String&gt; genericString = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;String&gt;(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + genericInteger.getKey());<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + genericString.getKey());<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><p>泛型方法的格式：修饰符 &lt;泛型变量&gt; 方法返回值 方法名称(形参列表){方法体}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(T t)</span> &#123;System.out.println(t);&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>show(<span class="hljs-number">123</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><p>泛型接口的格式：修饰符 interface 接口名称&lt;泛型变量&gt;{}</p><h5 id="实现类也是泛型类"><a href="#实现类也是泛型类" class="headerlink" title="实现类也是泛型类"></a>实现类也是泛型类</h5><p>若实现类也是泛型类，实现类和接口的泛型类型要一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 泛型接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Generator</span>&lt;T&gt; &#123;<br>    T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 泛型接口的实现类，是一个泛型类，</span><br><span class="hljs-comment"> * 那么要保证实现接口的泛型类泛型标识包含泛型接口的泛型标识</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span>&lt;T,E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Generator</span>&lt;T&gt; &#123;<br> <br>    <span class="hljs-keyword">private</span> T key;<br>    <span class="hljs-keyword">private</span> E value;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">(T key, E value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.key = key;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h5 id="实现类不是泛型类"><a href="#实现类不是泛型类" class="headerlink" title="实现类不是泛型类"></a>实现类不是泛型类</h5><p>若实现类不是泛型类，接口要明确数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现泛型接口的类，不是泛型类，需要明确实现泛型接口的数据类型。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Apple</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Generator</span>&lt;String&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello generic&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>初始化及遍历</p><p>注意：给数组分配空间时，必须指定数组能够存储的元素个数来确定数组大小。创建数组之后不能修改数组的大小。可以使用length 属性获取数组的大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">/*初始化*/</span><br><span class="hljs-type">int</span> a[]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span>[] b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>&#125;;<br><span class="hljs-type">int</span>[] c=&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>&#125;;<br><span class="hljs-comment">//注意：给数组分配空间时，必须指定数组能够存储的元素个数来确定数组大小。</span><br>        <span class="hljs-comment">//创建数组之后不能修改数组的大小。可以使用length 属性获取数组的大小。</span><br><span class="hljs-comment">//int d[];d= &#123;1,2,3&#125;;//错误</span><br><span class="hljs-comment">//int e[5]=new int[5];//错误</span><br>        <br><span class="hljs-comment">/*遍历，使用length属性*/</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;b.length;i++) &#123;<br>System.out.println(b[i]);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><ul><li>抽象类不能被<code>new</code>实例化</li><li>任何子类必须重写父类的抽象方法，或者声明自身为抽象类。</li><li>构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法</li><li>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类</li><li>抽象类实现接口，可以不实现接口的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> width; <span class="hljs-comment">// 几何图形的长</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> height; <span class="hljs-comment">// 几何图形的宽</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Shape</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span> &#123;<br>        <span class="hljs-built_in">this</span>.width = width;<br>        <span class="hljs-built_in">this</span>.height = height;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 定义抽象方法，计算面积</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Square</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span> &#123;<br>        <span class="hljs-built_in">super</span>(width, height);<br>    &#125;<br>    <span class="hljs-comment">// 重写父类中的抽象方法，实现计算正方形面积的功能</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> width * height;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br> <span class="hljs-type">Square</span> <span class="hljs-variable">square</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Square</span>(<span class="hljs-number">5</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 创建正方形类对象</span><br>     System.out.println(<span class="hljs-string">&quot;正方形的面积为：&quot;</span> + square.area());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">travel</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MammalInt</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Mammal eats&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">travel</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Mammal travels&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">noOfLegs</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-comment">// 可以用接口来指向实现了的类的示例</span><br><span class="hljs-type">Animal</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MammalInt</span>();<br><span class="hljs-comment">//MammalInt m = new MammalInt();//当然也可以这样定义</span><br>m.eat();<br>m.travel();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="与class的区别"><a href="#与class的区别" class="headerlink" title="与class的区别"></a>与class的区别</h3><ul><li><p><strong>接口不能用于实例化对象。</strong></p></li><li><p><strong>接口没有构造方法。</strong></p></li><li><p><strong>接口中所有的方法必须是抽象方法</strong>，Java 8 之后 接口中可以使用 default 关键字修饰的非抽象方法。</p><p>​(接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 <strong>public abstract</strong>)</p></li><li><p><strong>接口不能包含成员变量</strong>，除了 static 和 final 变量。</p></li><li><p>接口不是被类继承了，而是要被类实现。</p></li><li><p>接口支持多继承。</p></li></ul><h3 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Sports</span><br>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHomeTeam</span><span class="hljs-params">(String name)</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setVisitingTeam</span><span class="hljs-params">(String name)</span>;<br>&#125;<br> <br><span class="hljs-comment">// 文件名: Football.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Football</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sports</span><br>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">homeTeamScored</span><span class="hljs-params">(<span class="hljs-type">int</span> points)</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visitingTeamScored</span><span class="hljs-params">(<span class="hljs-type">int</span> points)</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">endOfQuarter</span><span class="hljs-params">(<span class="hljs-type">int</span> quarter)</span>;<br>&#125;<br><br><span class="hljs-comment">/*接口可以多继承，而类不能</span><br><span class="hljs-comment">public interface Hockey extends Sports, Event</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h2><p>使用String类中的<code>split</code>方法分割</p><p> String[] split(String regex)<br>          根据给定正则表达式的匹配拆分此字符串。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>String sa[]=<span class="hljs-string">&quot;hello_world_!&quot;</span>.split(<span class="hljs-string">&quot;_&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;sa.length;i++) &#123;<br>System.out.println(sa[i]);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>StringTokenizer类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringTokenizer</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(<span class="hljs-string">&quot;this is a test&quot;</span>);<br><span class="hljs-keyword">while</span> (st.hasMoreTokens()) &#123;<br>    System.out.println(st.nextToken());<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>一个接口，需要实现<code>add</code>和<code>remove</code>和<code>size</code>等方法(不要求实现<code>get</code>)，不包含重复元素。正如其名称所暗示的，此接口模仿了数学上的 <em>set</em> 抽象。</p><p>实现了它的主要有<code>HashSet</code>和<code>TreeSet</code>等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>HashSet&lt;String&gt; hs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(); <span class="hljs-comment">// 创建HashSet对象</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> hs.add(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> hs.add(<span class="hljs-string">&quot;a&quot;</span>); <span class="hljs-comment">// 当向set集合中存储重复元素的时候返回为false</span><br><br>hs.add(<span class="hljs-string">&quot;b&quot;</span>);<br>hs.add(<span class="hljs-string">&quot;c&quot;</span>);<br>hs.add(<span class="hljs-string">&quot;d&quot;</span>);<br>System.out.println(hs); <span class="hljs-comment">// [d, b, c, a] 存取无序 并且去掉了重复元素</span><br>System.out.println(b1); <span class="hljs-comment">// true</span><br>System.out.println(b2); <span class="hljs-comment">// false</span><br>hs.remove(<span class="hljs-string">&quot;b&quot;</span>);<br><span class="hljs-keyword">for</span> (String string : hs) &#123; <span class="hljs-comment">// 只要能用迭代器迭代的,就可以使用增强for循环遍历</span><br>System.out.println(string);<span class="hljs-comment">// a c d</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>一个接口，需要实现<code>get</code>和<code>put</code>和<code>size</code>等方法</p><p>实现了它的主要有<code>HashMap</code>和<code>TreeMap</code>等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-comment">//创建Map对象</span><br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,String&gt;();       <span class="hljs-comment">//数据采用的哈希表结构</span><br>        <span class="hljs-comment">//给map中添加元素</span><br>        map.put(<span class="hljs-string">&quot;星期一&quot;</span>, <span class="hljs-string">&quot;Monday&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;星期日&quot;</span>, <span class="hljs-string">&quot;Sunday&quot;</span>);<br>        System.out.println(map); <span class="hljs-comment">// &#123;星期日=Sunday, 星期一=Monday&#125;</span><br> <br>        <span class="hljs-comment">//当给Map中添加元素，会返回key对应的原来的value值，若key没有对应的值，返回null</span><br>        System.out.println(map.put(<span class="hljs-string">&quot;星期一&quot;</span>, <span class="hljs-string">&quot;Mon&quot;</span>)); <span class="hljs-comment">// Monday</span><br>        System.out.println(map); <span class="hljs-comment">// &#123;星期日=Sunday, 星期一=Mon&#125;</span><br> <br>        <span class="hljs-comment">//根据指定的key获取对应的value</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">en</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;星期日&quot;</span>);<br>        System.out.println(en); <span class="hljs-comment">// Sunday</span><br>        <br>        <span class="hljs-comment">//根据key删除元素,会返回key对应的value值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> map.remove(<span class="hljs-string">&quot;星期日&quot;</span>);<br>        System.out.println(value); <span class="hljs-comment">// Sunday</span><br>        System.out.println(map); <span class="hljs-comment">// &#123;星期一=Mon&#125;</span><br>        <br>        <span class="hljs-comment">/* 修改对应的值</span><br><span class="hljs-comment">        使用replace(key,newValue)，查找出HashMap中，指定的key的curValue，</span><br><span class="hljs-comment">        如果replace的入参oldValue和curValue相等，则执行put(key,newValue)，把入参newValue替换掉原来对应的值。</span><br><span class="hljs-comment">        */</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="变量默认值"><a href="#变量默认值" class="headerlink" title="变量默认值"></a>变量默认值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">static</span> String str;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> i;<br><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> b;<br><span class="hljs-keyword">static</span> <span class="hljs-type">char</span> c;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(str);<span class="hljs-comment">// null</span><br>    System.out.println(i);<span class="hljs-comment">// 0</span><br>    System.out.println(b);<span class="hljs-comment">// false</span><br>    System.out.println(c);<span class="hljs-comment">// &#x27;\0&#x27;</span><br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java内存的结构"><a href="#java内存的结构" class="headerlink" title="java内存的结构"></a>java内存的结构</h2><p>Java程序在运行时，需要在内存中的分配空间。为了提高运算效率，就对数据进行了不同空间的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p><p><strong>具体划分为如下5个内存空间：</strong></p><ul><li>栈：存放局部变量</li><li>堆：存放所有new出来的东西</li><li>方法区：被虚拟机加载的类信息、常量、静态常量等。</li><li>程序计数器(和系统相关)</li><li>本地方法栈</li></ul><h2 id="查漏补缺"><a href="#查漏补缺" class="headerlink" title="查漏补缺"></a>查漏补缺</h2><ol><li>char所占空间为2字节，因为unicode</li><li>全局变量可以不赋值，直接使用，因为有默认值，局部变量必须赋值后才能使用，因为没有默认值。</li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>review</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jquery</title>
    <link href="/2023/03/22/jquery/"/>
    <url>/2023/03/22/jquery/</url>
    
    <content type="html"><![CDATA[<h1 id="jquery笔记"><a href="#jquery笔记" class="headerlink" title="jquery笔记"></a>jquery笔记</h1><h2 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h2><p>【尚硅谷最新版JavaWeb全套教程,java web零基础入门完整版】 <a href="https://www.bilibili.com/video/BV1Y7411K7zz/?p=63&share_source=copy_web&vd_source=dd2f1030c390db245979ca6615985682">【尚硅谷最新版JavaWeb全套教程】</a></p><p>这是一篇围绕这个视频教程和jquery文档的笔记</p><h2 id="关于"><a href="#关于" class="headerlink" title="关于$"></a>关于$</h2><p>注意下面这个程序导入了”..&#x2F;script&#x2F;jquery-1.7.2.js”，请确保工作目录下有这个文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// window.onload = function () &#123;</span></span><br><span class="language-javascript"><span class="hljs-comment">// var btnObj = document.getElementById(&quot;btnId&quot;);</span></span><br><span class="language-javascript"><span class="hljs-comment">// // alert(btnObj);//[object HTMLButtonElement]   ====&gt;&gt;&gt;  dom对象</span></span><br><span class="language-javascript"><span class="hljs-comment">// btnObj.onclick = function () &#123;</span></span><br><span class="language-javascript"><span class="hljs-comment">// alert(&quot;js 原生的单击事件&quot;);</span></span><br><span class="language-javascript"><span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"><span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 表示页面加载完成 之后，相当 window.onload = function () &#123;&#125;</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> $btnObj = $(<span class="hljs-string">&quot;#btnId&quot;</span>); <span class="hljs-comment">// 表示按id查询标签对象，返回的是一个jquery对象</span></span><br><span class="language-javascript">$btnObj.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 绑定单击事件</span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;jQuery 的单击事件&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnId&quot;</span>&gt;</span>SayHello<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>$()里面如果放一个函数，意思是这个函数要在window.onload时执行</p><p>四种用法见下面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//核心函数的4个作用</span></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// alert(&quot;页面加载完成之后，自动调用&quot;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;    &lt;div&gt;&quot;</span> +</span><br><span class="language-javascript">            <span class="hljs-string">&quot;        &lt;span&gt;div-span1&lt;/span&gt;&quot;</span> +</span><br><span class="language-javascript">            <span class="hljs-string">&quot;        &lt;span&gt;div-span2&lt;/span&gt;&quot;</span> +</span><br><span class="language-javascript">            <span class="hljs-string">&quot;    &lt;/div&gt;&quot;</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;body&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// alert($(&quot;button&quot;).length);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btnObj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn01&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// alert(btnObj);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// alert( $(btnObj) );</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// alert( $(&quot;&lt;h1&gt;&lt;/h1&gt;&quot;) );</span></span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;button&quot;</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"><span class="hljs-comment">//传入参数为[函数]时：在文档加载完成后执行这个函数</span></span><br><span class="language-javascript"><span class="hljs-comment">//传入参数为[HTML字符串]时：根据这个字符串创建元素节点对象</span></span><br><span class="language-javascript"><span class="hljs-comment">//传入参数为[选择器字符串]时：根据这个字符串查找元素节点对象，和queryselsctorAll类似，注意它返回的是一个Dom对象数组</span></span><br><span class="language-javascript"><span class="hljs-comment">//传入参数为[DOM对象]时：将DOM对象包装为jQuery对象返回</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn01&quot;</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="dom对象与jquery对象"><a href="#dom对象与jquery对象" class="headerlink" title="dom对象与jquery对象"></a>dom对象与jquery对象</h3><p>感觉后者是前者包装后的数组</p><p>互相转化的方法：</p><ul><li>$(dom)&#x3D;&#x3D;&#x3D;&gt;jquery</li><li>jquery[index]&#x3D;&#x3D;&#x3D;&gt;dom</li></ul><h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><ul><li>ancestor descendant 后代选择器 ：在给定的祖先元素下匹配所有的后代元素 </li><li>parent &gt; child 子元素选择器：在给定的父元素下匹配所有的子元素 </li><li>prev + next 相邻元素选择器：匹配所有紧接在 prev 元素后的 next 元素 </li><li>prev ~ sibings 之后的兄弟元素选择器：匹配 prev 元素之后的所有 siblings</li></ul><h2 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h2><p>即在选择到的基础上进行筛选</p><h3 id="基本过滤器"><a href="#基本过滤器" class="headerlink" title="基本过滤器"></a>基本过滤器</h3><ul><li>:first 获取第一个元素</li><li>:last 获取最后个元素 </li><li>:not(selector) 去除所有与给定选择器匹配的元素 </li><li>:even 匹配所有索引值为偶数的元素，从 0 开始计数 </li><li>:odd 匹配所有索引值为奇数的元素，从 0 开始计数 </li><li>:eq(index) 匹配一个给定索引值的元素 </li><li>:gt(index) 匹配所有大于给定索引值的元素 </li><li>:lt(index) 匹配所有小于给定索引值的元素 </li><li>:header 匹配如 h1, h2, h3 之类的标题元素 </li><li>:animated 匹配所有正在执行动画效果的元素</li></ul><h3 id="内容过滤器"><a href="#内容过滤器" class="headerlink" title="内容过滤器"></a>内容过滤器</h3><ul><li>:contains(text) 匹配包含给定文本的元素 </li><li>:empty 匹配所有不包含子元素或者文本的空元素 </li><li>:parent 匹配含有子元素或者文本的元素 </li><li>:has(selector) 匹配含有选择器所匹配的元素的元素</li></ul><h3 id="属性过滤器"><a href="#属性过滤器" class="headerlink" title="属性过滤器"></a>属性过滤器</h3><ul><li>[attribute] 匹配包含给定属性的元素。</li><li>[attribute&#x3D;value] 匹配给定的属性是某个特定值的元素</li><li>[attribute!&#x3D;value] 匹配所有不含有指定的属性，或者属性不等于特定值的元素。</li><li>[attribute^&#x3D;value] 匹配给定的属性是以某些值开始的元素</li><li>[attribute$&#x3D;value] 匹配给定的属性是以某些值结尾的元素</li><li>[attribute*&#x3D;value] 匹配给定的属性是以包含某些值的元素</li></ul><p>HTML 代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Hot Fuzz&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Cold Fusion&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;accept&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Evil Plans&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>jQuery 代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;input[name=&#x27;newsletter&#x27;]&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;checked&quot;</span>, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>结果:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">[ <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Hot Fuzz&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span></span>, <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Cold Fusion&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span></span> ]<br></code></pre></td></tr></table></figure><h3 id="表单过滤器"><a href="#表单过滤器" class="headerlink" title="表单过滤器"></a>表单过滤器</h3><ul><li>:input 匹配所有 input, textarea, select 和 button 元素</li><li>:text 匹配所有 文本输入框</li><li>:password 匹配所有的密码输入框</li><li>:radio 匹配所有的单选框</li><li>:checkbox 匹配所有的复选框</li><li>:submit 匹配所有提交按钮</li><li>:image 匹配所有 img 标签</li><li>:reset 匹配所有重置按钮</li><li>:button 匹配所有 input type&#x3D;button <button>按钮</button></li><li>:file 匹配所有 input type&#x3D;file 文件上传</li><li>:hidden 匹配所有不可见元素 display:none</li></ul><p>这个好像没啥特别的，就是专门用来匹配表单里面的，至于不用它能不能匹配到，这个还不太清楚</p><h3 id="表单对象属性过滤器"><a href="#表单对象属性过滤器" class="headerlink" title="表单对象属性过滤器"></a>表单对象属性过滤器</h3><p>跟之前的过滤器一样</p><ul><li>:enabled 匹配所有可用元素 </li><li>:disabled 匹配所有不可用元素</li></ul><h2 id="元素筛选"><a href="#元素筛选" class="headerlink" title="元素筛选"></a>元素筛选</h2><p>和过滤选择其实差不多，这里略</p><h2 id="一个简单的区分"><a href="#一个简单的区分" class="headerlink" title="一个简单的区分"></a>一个简单的区分</h2><h3 id="selector1-selector2-selectorN"><a href="#selector1-selector2-selectorN" class="headerlink" title="selector1,selector2,selectorN"></a>selector1,selector2,selectorN</h3><blockquote><p>返回值:Array&lt;Element(s)&gt;</p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="HTML-代码"><a href="#HTML-代码" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;myClass&quot;</span>&gt;</span>p class=&quot;myClass&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;notMyClass&quot;</span>&gt;</span>p class=&quot;notMyClass&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码"><a href="#jQuery-代码" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;div,span,p.myClass&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果"><a href="#结果" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;myClass&quot;</span>&gt;</span>p class=&quot;myClass&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="ancestor-descendant"><a href="#ancestor-descendant" class="headerlink" title="ancestor descendant"></a>ancestor descendant</h3><p>返回值:Array&lt;Element(s)&gt;</p><p>在给定的祖先元素下匹配所有的后代元素</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>找到表单中所有的 input 元素</p><h5 id="HTML-代码-1"><a href="#HTML-代码-1" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Newsletter:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-1"><a href="#jQuery-代码-1" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;form input&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果-1"><a href="#结果-1" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="parent-gt-child"><a href="#parent-gt-child" class="headerlink" title="parent &gt; child"></a>parent &gt; child</h3><p>返回值:Array&lt;Element(s)&gt;</p><p>在给定的父元素下匹配所有的子元素</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p>匹配表单中所有的子级input元素。</p><h5 id="HTML-代码-2"><a href="#HTML-代码-2" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Newsletter:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-2"><a href="#jQuery-代码-2" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;form &gt; input&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果-2"><a href="#结果-2" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="prev-next"><a href="#prev-next" class="headerlink" title="prev + next"></a>prev + next</h3><p>返回值:Array&lt;Element(s)&gt;</p><p>匹配所有紧接在 prev 元素后的 next 元素</p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><p>匹配所有跟在 label 后面的 input 元素</p><h5 id="HTML-代码-3"><a href="#HTML-代码-3" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Newsletter:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-3"><a href="#jQuery-代码-3" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;label + input&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果-3"><a href="#结果-3" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="prev-siblings"><a href="#prev-siblings" class="headerlink" title="prev ~ siblings"></a>prev ~ siblings</h3><p>返回值:Array&lt;Element(s)&gt;</p><p>匹配 prev 元素之后的所有 siblings 元素</p><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><p>找到所有与表单同辈的 input 元素</p><h5 id="HTML-代码-4"><a href="#HTML-代码-4" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Newsletter:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-4"><a href="#jQuery-代码-4" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;form ~ input&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果-4"><a href="#结果-4" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="first"><a href="#first" class="headerlink" title=":first"></a>:first</h3><p>返回值:jQuery</p><p>获取第一个元素</p><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><p>获取匹配的第一个元素</p><h5 id="HTML-代码-5"><a href="#HTML-代码-5" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-5"><a href="#jQuery-代码-5" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;li:first&#x27;</span>);<br></code></pre></td></tr></table></figure><h5 id="结果-5"><a href="#结果-5" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="nth-child"><a href="#nth-child" class="headerlink" title=":nth-child"></a>:nth-child</h3><p>返回值:Array&lt;Element(s)&gt;</p><p>匹配其父元素下的第N个子或奇偶元素</p><p>‘:eq(index)’  只匹配一个元素，而这个将为每一个父元素匹配子元素。:nth-child<strong>从1开始的</strong>，而:eq()是从0算起的！可以使用:<br>nth-child(even)<br>:nth-child(odd)<br>:nth-child(3n)<br>:nth-child(2)<br>:nth-child(3n+1)<br>:nth-child(3n+2)</p><h4 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h4><p>在每个 ul 查找第 2 个li</p><h5 id="HTML-代码-6"><a href="#HTML-代码-6" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>John<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Karl<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Brandon<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Glen<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Tane<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Ralph<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-6"><a href="#jQuery-代码-6" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;ul li:nth-child(2)&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果-6"><a href="#结果-6" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Karl<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>,   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Tane<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> ]<br></code></pre></td></tr></table></figure><h2 id="jQuery-的属性操作"><a href="#jQuery-的属性操作" class="headerlink" title="jQuery 的属性操作"></a>jQuery 的属性操作</h2><p>html() 它可以设置和获取起始标签和结束标签中的内容。 跟 dom 属性 innerHTML 一样。<br>text() 它可以设置和获取起始标签和结束标签中的文本。 跟 dom 属性 innerText 一样。<br>val() 它可以设置和获取表单项的 value 属性值。 跟 dom 属性 value 一</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 不传参数，是获取，传递参数是设置</span></span><br><span class="language-javascript">            <span class="hljs-comment">// alert( $(&quot;div&quot;).html() );// 获取</span></span><br><span class="language-javascript">            <span class="hljs-comment">// $(&quot;div&quot;).html(&quot;&lt;h1&gt;我是div中的标题 1&lt;/h1&gt;&quot;);// 设置</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 不传参数，是获取，传递参数是设置</span></span><br><span class="language-javascript">            <span class="hljs-comment">// alert( $(&quot;div&quot;).text() ); // 获取</span></span><br><span class="language-javascript">            <span class="hljs-comment">// $(&quot;div&quot;).text(&quot;&lt;h1&gt;我是div中的标题 1&lt;/h1&gt;&quot;); // 设置</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 不传参数，是获取，传递参数是设置</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>());<span class="hljs-comment">//获取</span></span><br><span class="language-javascript">                $(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;超级程序猿&quot;</span>);<span class="hljs-comment">// 设置</span></span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div标签 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是div中的span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>操作输入框<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>attr() 可以设置和获取属性的值，不推荐操作 checked、readOnly、selected、disabled 等等<br>attr 方法还可以操作非标准的属性。比如自定义属性：abc,bbj<br>prop() 可以设置和获取属性的值,只推荐操作 checked、readOnly、selected、disabled 等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 给全选绑定单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedAllBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-literal">true</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 给全不选绑定单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedNoBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-literal">false</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 反选单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedRevBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 查询全部的球类的复选框</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 在each遍历的function函数中，有一个this对象。这个this对象是当前正在遍历到的dom对象</span></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span>;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 要检查 是否满选</span></span><br><span class="language-javascript"><span class="hljs-comment">// 获取全部的球类个数</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> allCount = $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-property">length</span>;</span><br><span class="language-javascript"><span class="hljs-comment">// 再获取选中的球类个数</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> checkedCount = $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).<span class="hljs-property">length</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// if (allCount == checkedCount) &#123;</span></span><br><span class="language-javascript"><span class="hljs-comment">// $(&quot;#checkedAllBox&quot;).prop(&quot;checked&quot;,true);</span></span><br><span class="language-javascript"><span class="hljs-comment">// &#125; else &#123;</span></span><br><span class="language-javascript"><span class="hljs-comment">// $(&quot;#checkedAllBox&quot;).prop(&quot;checked&quot;,false);</span></span><br><span class="language-javascript"><span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,allCount == checkedCount);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 【提交】按钮单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#sendBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 获取选中的球类的复选框</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 给【全选/全不选】绑定单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 在事件的function函数中，有一个this对象，这个this对象是当前正在响应事件的dom对象</span></span><br><span class="language-javascript"><span class="hljs-comment">// alert(this.checked);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 给全部球类绑定单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 要检查 是否满选</span></span><br><span class="language-javascript"><span class="hljs-comment">// 获取全部的球类个数</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> allCount = $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-property">length</span>;</span><br><span class="language-javascript"><span class="hljs-comment">// 再获取选中的球类个数</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> checkedCount = $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).<span class="hljs-property">length</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,allCount == checkedCount);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><br>你爱好的运动是？<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedAllBox&quot;</span> /&gt;</span>全选/全不选 <br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;足球&quot;</span> /&gt;</span>足球<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;篮球&quot;</span> /&gt;</span>篮球<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;羽毛球&quot;</span> /&gt;</span>羽毛球<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;乒乓球&quot;</span> /&gt;</span>乒乓球<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedAllBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全　选&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedNoBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全不选&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedRevBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;反　选&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sendBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提　交&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="DOM-的增删改"><a href="#DOM-的增删改" class="headerlink" title="DOM 的增删改"></a>DOM 的增删改</h2><p>内部插入：<br>appendTo() a.appendTo(b) 把 a 插入到 b 子元素末尾，成为最后一个子元素<br>prependTo() a.prependTo(b) 把 a 插到 b 所有子元素前面，成为第一个子元素<br>外部插入：<br>insertAfter() a.insertAfter(b) 得到 ba<br>insertBefore() a.insertBefore(b) 得到 ab<br>替换:<br>replaceWith() a.replaceWith(b) 用 b 替换掉 a<br>replaceAll() a.replaceAll(b) 用 a 替换掉所有 b<br>删除：<br>remove() a.remove(); 删除 a 标签<br>empty() a.empty(); 清空 a 标签里的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">select &#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">140px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">130px</span>;</span><br><span class="language-css"><span class="hljs-attribute">float</span>: left;</span><br><span class="language-css"><span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//选中添加到右边</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;button:eq(0)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;select[name=sel01] :selected&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//alert(this);</span></span><br><span class="language-javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;select[name=sel02]&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//全部添加到右边</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;button:eq(1)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;select[name=sel01] option&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//alert(this);</span></span><br><span class="language-javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;select[name=sel02]&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//选中删除到左边</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;button:eq(2)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;select[name=sel02] :selected&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//alert(this);</span></span><br><span class="language-javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;select[name=sel01]&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"><span class="hljs-comment">//全部删除到左边</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;button:eq(3)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;select[name=sel02] option&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//alert(this);</span></span><br><span class="language-javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;select[name=sel01]&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sel01&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt01&quot;</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt02&quot;</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt03&quot;</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt04&quot;</span>&gt;</span>选项4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt05&quot;</span>&gt;</span>选项5<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt06&quot;</span>&gt;</span>选项6<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt07&quot;</span>&gt;</span>选项7<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt08&quot;</span>&gt;</span>选项8<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>选中添加到右边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>全部添加到右边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rigth&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sel02&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>选中删除到左边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>全部删除到左边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="设置css"><a href="#设置css" class="headerlink" title="设置css"></a>设置css</h2><p>就像这样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">$(&quot;p&quot;).css(&#123; color: &quot;#ff0011&quot;, background: &quot;blue&quot; &#125;);<br></code></pre></td></tr></table></figure><h2 id="事件的冒泡"><a href="#事件的冒泡" class="headerlink" title="事件的冒泡"></a>事件的冒泡</h2><p>什么是事件的冒泡？<br>事件的冒泡是指，父子元素同时监听同一个事件。当触发子元素的事件的时候，同一个事件也被传递到了父元素的事件里去<br>响应。<br>那么如何阻止事件冒泡呢？<br>在子元素事件函数体内，return false; 可以阻止事件的冒泡传递。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">*&#123;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>;</span><br><span class="language-css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">130%</span>;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-id">#content</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">220px</span>;</span><br><span class="language-css"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#0050D0</span>;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#96E555</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#666666</span>;</span><br><span class="language-css"><span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: white;</span><br><span class="language-css"><span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#888</span>;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: white;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//冒泡就是事件的向上传导，子元素的事件被触发，父元素的响应事件也会触发</span></span><br><span class="language-javascript"><span class="hljs-comment">//解决冒泡问题：return false;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//给span绑定一个单击响应函数</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我是span的单击响应函数&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//给id为content的div绑定一个单击响应函数</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#content&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我是div的单击响应函数&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//给body绑定一个单击响应函数</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//alert(&quot;我是body的单击响应函数&quot;);</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//取消默认行为</span></span><br><span class="language-javascript"><span class="hljs-comment">/* $(&quot;a&quot;).click(function()&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">return false;</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;) */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>外层div元素<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>内层span元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>外层div元素<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.hao123.com&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;return false;&quot;</span>&gt;</span>WWW.HAO123.COM<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><h3 id="1-原生-javascript-获取事件对象"><a href="#1-原生-javascript-获取事件对象" class="headerlink" title="1.原生 javascript 获取事件对象"></a>1.原生 javascript 获取事件对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;areaDiv&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-jQuery-代码获取事件对象"><a href="#2-jQuery-代码获取事件对象" class="headerlink" title="2.jQuery 代码获取事件对象"></a>2.jQuery 代码获取事件对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>$(<span class="hljs-string">&quot;#areaDiv&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="3-使用-bind-同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。"><a href="#3-使用-bind-同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。" class="headerlink" title="3.使用 bind 同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。"></a>3.使用 bind 同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#areaDiv&quot;</span>).<span class="hljs-title function_">bind</span>(<span class="hljs-string">&quot;mouseover mouseout&quot;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><span class="hljs-keyword">if</span> (event.<span class="hljs-property">type</span> == <span class="hljs-string">&quot;mouseover&quot;</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;鼠标移入&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.<span class="hljs-property">type</span> == <span class="hljs-string">&quot;mouseout&quot;</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;鼠标移出&quot;</span>);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python类型注解</title>
    <link href="/2023/03/22/python-lei-xing-zhu-jie/"/>
    <url>/2023/03/22/python-lei-xing-zhu-jie/</url>
    
    <content type="html"><![CDATA[<h1 id="Python类型注解"><a href="#Python类型注解" class="headerlink" title="Python类型注解"></a>Python类型注解</h1><h2 id="学习网址"><a href="#学习网址" class="headerlink" title="学习网址"></a>学习网址</h2><p>第1个是详细版，第2个是简单版</p><ul><li><a href="https://zhuanlan.zhihu.com/p/419955374">Python类型注解，你需要知道的都在这里了 - 知乎</a></li><li><a href="https://blog.csdn.net/mahoon411/article/details/125657457">Python类型注解-CSDN</a></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h3><p>类型注解<strong>仅仅</strong>是提供给编辑器进行类型检查的机会，也就是起提示的作用，对 Python 程序的运行不会产生任何影响。也就是说，Python 跟以前一样自由，即使你进行了错误的类型赋值，只要不直接引发错误，程序依旧可以运行。</p><p>要有报错的话，需要装一些插件，如vscode的<strong>Pylance</strong></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">age: <span class="hljs-built_in">int</span> = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>其实就是在变量的后面加<code>:type</code>，其他照旧</p><p>在指定之后，此变量不应该被赋值为其他类型（不过解释器不会报错），在 <strong>VS Code</strong>中，安装好类型注解插件 <strong>Pylance</strong> 后，如果写出下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">age: <span class="hljs-built_in">int</span> = <span class="hljs-number">20</span><br>age = <span class="hljs-string">&#x27;20&#x27;</span><br></code></pre></td></tr></table></figure><p>那么编辑器会用<strong>醒目</strong>的方式告诉你：孙子，你这里的类型写错了！</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hi</span>(<span class="hljs-params">name: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Hello <span class="hljs-subst">&#123;name&#125;</span>!&#x27;</span><br></code></pre></td></tr></table></figure><p>在形参上还是如上文一样，<code>-&gt;type</code>写括号后面代表返回值，如果没有返回值，可以写<code>-&gt;None</code></p><h4 id="带默认值的函数"><a href="#带默认值的函数" class="headerlink" title="带默认值的函数"></a>带默认值的函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">first: <span class="hljs-built_in">int</span> = <span class="hljs-number">10</span>, second: <span class="hljs-built_in">float</span> = <span class="hljs-number">5.5</span></span>) -&gt; <span class="hljs-built_in">float</span>:<br>    <span class="hljs-keyword">return</span> first + second<br></code></pre></td></tr></table></figure><p>道理是一样的</p><h3 id="列表、字典、元组"><a href="#列表、字典、元组" class="headerlink" title="列表、字典、元组"></a>列表、字典、元组</h3><p>列表、字典、元组等包含元素的复合类型，用简单的 list，dict，tuple 不能够明确说明内部元素的具体类型。</p><p>因此要用到 <code>typing</code> 模块提供的<strong>复合注解</strong>功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span>, <span class="hljs-type">Dict</span>, <span class="hljs-type">Tuple</span><br><br><span class="hljs-comment"># 参数1: 元素为 int 的列表</span><br><span class="hljs-comment"># 参数2: 键为字符串，值为 int 的字典</span><br><span class="hljs-comment"># 返回值: 包含两个元素的元组</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mix</span>(<span class="hljs-params">scores: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], ages: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">Tuple</span>[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>]:<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>如果你用的是 Python 3.9+ 版本，甚至连 <code>typing</code> 模块都不需要了，内置的容器类型就支持了复合注解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">mix</span>(<span class="hljs-params">scores: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>], ages: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">tuple</span>[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>]:<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>在某些情况下，不需要严格区分参数到底是列表还是元组（这种情况还蛮多的）。这时候就可以将它们的特征抽象为更泛化的类型（泛型），比如 Sequence（序列）。</p><p>下面是例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Python 3.8 之前的版本</span><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Sequence</span> <span class="hljs-keyword">as</span> Seq1<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">seq: Seq1[<span class="hljs-built_in">str</span>]</span>):<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> seq:<br>        <span class="hljs-built_in">print</span>(item)<br><br><br><span class="hljs-comment"># Python 3.9+ 也可以这么写</span><br><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> <span class="hljs-type">Sequence</span> <span class="hljs-keyword">as</span> Seq2<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">seq: Seq2[<span class="hljs-built_in">str</span>]</span>):<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> seq:<br>        <span class="hljs-built_in">print</span>(item)<br></code></pre></td></tr></table></figure><p>例子中函数的参数不对容器的类型做具体要求，只要它是个序列（比如列表和元组）就可以。</p><h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><p>如果你实在不知道某个类型注解应该怎么写时，这里还有个最后的逃生通道：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>() -&gt; <span class="hljs-type">Any</span>:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>任何类型都与 <code>Any</code> 兼容。当然如果你把所有的类型都注解为 <code>Any</code> 将毫无意义，因此 <code>Any</code> 应当尽量少使用。</p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Regex</title>
    <link href="/2023/03/22/regex/"/>
    <url>/2023/03/22/regex/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="学习网址"><a href="#学习网址" class="headerlink" title="学习网址"></a>学习网址</h2><ol><li><a href="https://www.bilibili.com/video/BV1da4y1p7iZ/?share_source=copy_web&vd_source=dd2f1030c390db245979ca6615985682">【10分钟快速掌握正则表达式】</a></li><li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md">learn-regex</a></li></ol><h2 id="在线测试工具"><a href="#在线测试工具" class="headerlink" title="在线测试工具"></a>在线测试工具</h2><p><a href="https://regex101.com/">https://regex101.com/</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><ul><li><code>a*</code>:a出现0次或多次</li><li><code>a+</code>:a出现1次或多次</li><li><code>a?</code>:a出现0次或1次</li><li><code>a&#123;6&#125;</code>:a出现6次</li><li><code>a&#123;2,6&#125;</code>:a出现2-6次</li><li><code>a&#123;2,&#125;</code>:a出现2次及以上</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li><code>(a|b)</code>:匹配a或者b</li><li><code>(ab)|(cd)</code>:匹配ab或者cd</li></ul><p><em>小括号代表括号内的内容应视为一个整体</em></p><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><ul><li><code>[abc]</code>:匹配a或b或c</li><li><code>[a-c]</code>:同上</li><li><code>[a-zA-Z0-9]</code>:匹配小写+大写英文字符及数字</li><li><code>[^0-9]</code>:匹配非数字字符</li></ul><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><ul><li><code>\d</code>:匹配数字字符</li><li><code>\D</code>:匹配非数字字符</li><li><code>\w</code>:匹配单词字符(英文、数字、下划线)</li><li><code>\W</code>:匹配非单词字符</li><li><code>\s</code>:匹配空白符(包括换行符、Tab)</li><li><code>\S</code>:匹配非空白符</li><li><code>.</code>:匹配任意字符(除换行符)</li><li><code>\b</code>:标注字符边界，\bword\b，只标注位置，不匹配任何字符(包括空白)</li><li><code>^</code>:匹配行首</li><li><code>$</code>:匹配行尾</li></ul><h3 id="贪婪-x2F-懒惰匹配"><a href="#贪婪-x2F-懒惰匹配" class="headerlink" title="贪婪&#x2F;懒惰匹配"></a>贪婪&#x2F;懒惰匹配</h3><p>一般正则表达式会匹配尽可能多的字符</p><p>如<code>&lt;.+&gt;</code>去匹配<code>&lt;div&gt;&lt;a&gt;&lt;a/&gt;&lt;/div&gt;</code>会默认把全部匹配完，若使用<code>&lt;.+?&gt;</code>则尽可能少的匹配，如只匹配<code>&lt;div&gt;</code>、<code>&lt;a&gt;</code>及其结束标签</p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>regex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个关于冒号的bug</title>
    <link href="/2023/03/19/yi-ge-guan-yu-mou-hao-de-bug/"/>
    <url>/2023/03/19/yi-ge-guan-yu-mou-hao-de-bug/</url>
    
    <content type="html"><![CDATA[<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p><code>npx hexo server</code>遇到报错：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs fortran">ERROR &#123;<br>  err: YAMLException: can not read a <span class="hljs-keyword">block</span> mapping <span class="hljs-built_in">entry</span>; a multiline key may not be an <span class="hljs-keyword">implicit</span> key at line <span class="hljs-number">4</span>, column <span class="hljs-number">1</span>:<br>......<br>    reason: <span class="hljs-string">&#x27;can not read a block mapping entry; a multiline key may not be an implicit key&#x27;</span>,<br>    mark: Mark &#123;<br>      <span class="hljs-keyword">name</span>: null,<br>      buffer: <span class="hljs-string">&#x27;title: 第一篇博客\ndate: 2023-03-19 19:33:41\ntags:博客相关\n\x00&#x27;</span>,<br>      <span class="hljs-keyword">position</span>: <span class="hljs-number">49</span>,<br>      line: <span class="hljs-number">3</span>,<br>      column: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br>&#125; Process failed: %s _posts/第一篇博客.md<br></code></pre></td></tr></table></figure><p>使用<code>hexo clean</code>也无法解决</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>title: 第一篇博客<br>date: 2023-03-19 19:33:41<br>tags: 博客相关</p></blockquote><p>这是对应博客的开头，tags冒号后面缺少一个空格，加上就好了，如图：</p><p><img src="/2023/03/19/yi-ge-guan-yu-mou-hao-de-bug/bug_of_colon.png" alt="bug截图"></p><h2 id="如何在博客中插入图片"><a href="#如何在博客中插入图片" class="headerlink" title="如何在博客中插入图片"></a>如何在博客中插入图片</h2><p>发现在md文档同目录下新建img文件夹再引用没有用，查到了这篇</p><p><a href="https://blog.csdn.net/weixin_42030522/article/details/123075824"> 解决Hexo无法显示图片的几种方案-CSDN博客</a></p><p>将<code>post_asset_folder</code>赋值为true，并将图片放入md文件同名文件夹</p>]]></content>
    
    
    <categories>
      
      <category>bug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2023/03/19/di-yi-pian-bo-ke/"/>
    <url>/2023/03/19/di-yi-pian-bo-ke/</url>
    
    <content type="html"><![CDATA[<h2 id="小小感悟"><a href="#小小感悟" class="headerlink" title="小小感悟"></a>小小感悟</h2><p>第一次使用<code>github</code>和<code>hexo</code>创建了这个博客，踩了一些小坑，但还是做出来了。算是有点了解<code>hexo</code>的用法和<code>npm</code>的用法了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&#x27;文章名&#x27;</span> <span class="hljs-comment"># 创建文章 相当于hexo n</span><br><br>$ hexo generate <span class="hljs-comment"># 创建静态文件 相当于hexo g</span><br>$ hexo deploy <span class="hljs-comment"># 部署网站 相当于hexo d</span><br>$ hexo server <span class="hljs-comment"># 本地预览 相当于hexo s</span><br><span class="hljs-comment"># 以上命令有问题时，是因为hexo不在环境变量里面，可在命令前加上npx解决</span><br>$ hexo clean <span class="hljs-comment"># 当出了玄学的报错的时候，然后重新用以上三条</span><br></code></pre></td></tr></table></figure><p>点击<a href="https://hexo.io/zh-cn/docs/index.html">这里</a>，查看<code>hexo</code>的官方中文文档</p><p>但是目前还是有些不是很明白的地方</p><ol><li>缺少更换主题的实践</li><li>如何从github上面拉下已经有的这个项目仓库(此仓库只有hexo文件夹的public文件夹里面的内容)，并进行修改</li><li>其他实用步骤</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><p>这会在根文件夹下的<code>themes</code>文件夹下建立一个<code>next</code>文件夹，并导入这个项目。</p><p>然后只需要改一下根文件夹下的<code>_config.yml</code>文件中的<code>theme</code>的值为<code>next</code>就可以了。</p><p>此外，<code>next</code>文件夹下也有一个<code>_config.yml</code>文件，可以修改一些配置，如<code>scheme</code>的值有4种选择，每种选择都会导致主题不一样。</p><h3 id="上传Github"><a href="#上传Github" class="headerlink" title="上传Github"></a>上传Github</h3><p>把项目仓库上传到github上，但需要设置好<code>.gitignore</code>这个文件</p>]]></content>
    
    
    
    <tags>
      
      <tag>博客相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
