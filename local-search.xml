<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>gpu版torch安装</title>
    <link href="/2024/10/13/torch-gpu-install/"/>
    <url>/2024/10/13/torch-gpu-install/</url>
    
    <content type="html"><![CDATA[<h1 id="gpu版torch安装"><a href="#gpu版torch安装" class="headerlink" title="gpu版torch安装"></a>gpu版torch安装</h1><h2 id="一般的教程"><a href="#一般的教程" class="headerlink" title="一般的教程"></a>一般的教程</h2><p>去<a href="https://pytorch.org/">PyTorch</a>安装</p><h2 id="一般的结果"><a href="#一般的结果" class="headerlink" title="一般的结果"></a>一般的结果</h2><p>只能装上cpu版的</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p><a href="https://blog.csdn.net/u013468614/article/details/125910538">为什么conda安装pytorch版本不对-CSDN博客</a></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><a href="https://blog.csdn.net/gls_nuaa/article/details/142766618">torch和torchvision 版本对应_torch 2.4 对应的torchvision-CSDN博客</a></p><p>比如我的电脑的安装命令是</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda install pytorch==2.4.0 torchvision==0.19.0 torchaudio==2.4.0 pytorch-cuda=12.4 -c pytorch -c nvidia<br></code></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li>现在装pytorch不需要专门去装cudnn和tooltik了</li></ul><p><a href="https://blog.csdn.net/qq_54499870/article/details/127548163">记录 coda装pytorch并不需要单独装cuda和cudnn|李沐评论_torch需要提前装cuda吗-CSDN博客</a></p><ul><li>cuda向前兼容，如12.4的<code>CUDA Version: 12.4</code>可以装11.6的<code>torch.version.cuda</code></li></ul><p><img src="/2024/10/13/torch-gpu-install/image-20241013203611774.png" alt="向前兼容"></p><h2 id="查看已经安装的软件包列表"><a href="#查看已经安装的软件包列表" class="headerlink" title="查看已经安装的软件包列表"></a>查看已经安装的软件包列表</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda list<br>pip list<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>torch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ai4cet6</title>
    <link href="/2024/10/10/gpt4cet6/"/>
    <url>/2024/10/10/gpt4cet6/</url>
    
    <content type="html"><![CDATA[<h1 id="用ai生成6级单词本"><a href="#用ai生成6级单词本" class="headerlink" title="用ai生成6级单词本"></a>用ai生成6级单词本</h1><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>最近看到了<a href="https://github.com/Ceelog/DictionaryByGPT4">Ceelog&#x2F;DictionaryByGPT4: 一本 GPT4 生成的单词书 (github.com)</a></p><p>就想着能不能自己搞个6级词汇本，正好<a href="https://open.bigmodel.cn/finance/resourcepack">智谱AI开放平台 (bigmodel.cn)</a>这边还有很多白嫖的token没有用</p><p>数据来源：<a href="https://github.com/mahavivo/english-wordlists/tree/master">mahavivo&#x2F;english-wordlists: 常用英语词汇表 (github.com)</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rich <span class="hljs-keyword">import</span> <span class="hljs-built_in">print</span><br><span class="hljs-keyword">from</span> zhipuai <span class="hljs-keyword">import</span> ZhipuAI<br><span class="hljs-keyword">import</span> zhipuai<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>client = ZhipuAI(api_key=<span class="hljs-string">&quot;&quot;</span>)  <span class="hljs-comment"># 请填写您自己的APIKey</span><br><br>propmt=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># 角色</span><br><span class="hljs-string"></span><br><span class="hljs-string">你是一名中英文双语教育专家，拥有帮助将中文视为母语的用户理解和记忆英语单词的专长，请根据用户提供的英语单词完成下列任务。</span><br><span class="hljs-string"></span><br><span class="hljs-string">## 任务</span><br><span class="hljs-string"></span><br><span class="hljs-string">### 分析词义</span><br><span class="hljs-string"></span><br><span class="hljs-string">- 系统地分析用户提供的英文单词，并用中文以简单易懂的方式解答；</span><br><span class="hljs-string"></span><br><span class="hljs-string">### 列举例句</span><br><span class="hljs-string"></span><br><span class="hljs-string">- 根据所需，为该单词提供至少 3 个不同场景下的使用方法和例句。并且附上中文翻译，以帮助用户更深入地理解单词意义。</span><br><span class="hljs-string"></span><br><span class="hljs-string">### 词根分析</span><br><span class="hljs-string"></span><br><span class="hljs-string">- 用中文分析并展示单词的词根；</span><br><span class="hljs-string">- 列出由词根衍生出来的其他单词；</span><br><span class="hljs-string"></span><br><span class="hljs-string">### 词缀分析</span><br><span class="hljs-string"></span><br><span class="hljs-string">- 用中文分析并展示单词的词缀，例如：单词 individual，前缀 in- 表示否定，-divid- 是词根，-u- 是中缀，用于连接和辅助发音，-al 是后缀，表示形容词；</span><br><span class="hljs-string">- 列出相同词缀的的其他单词；</span><br><span class="hljs-string"></span><br><span class="hljs-string">### 发展历史和文化背景</span><br><span class="hljs-string"></span><br><span class="hljs-string">- 用中文详细介绍单词的造词来源和发展历史，以及在欧美文化中的内涵</span><br><span class="hljs-string"></span><br><span class="hljs-string">### 单词变形</span><br><span class="hljs-string"></span><br><span class="hljs-string">- 列出单词对应的名词、单复数、动词、不同时态、形容词、副词等的变形以及对应的中文翻译。</span><br><span class="hljs-string">- 列出单词对应的固定搭配、组词以及对应的中文翻译。</span><br><span class="hljs-string"></span><br><span class="hljs-string">### 记忆辅助</span><br><span class="hljs-string"></span><br><span class="hljs-string">- 用中文提供一些高效的记忆技巧和窍门，以更好地记住英文单词。</span><br><span class="hljs-string"></span><br><span class="hljs-string">### 小故事</span><br><span class="hljs-string"></span><br><span class="hljs-string">- 用英文撰写一个有画面感的场景故事，包含用户提供的单词。</span><br><span class="hljs-string">- 要求使用简单的词汇，100 个单词以内。</span><br><span class="hljs-string">- 英文故事后面附带对应的中文翻译。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">try</span>:<br>    df = pd.read_excel(<span class="hljs-string">&#x27;wordlist.xlsx&#x27;</span>)<br>    <span class="hljs-comment"># 提取第一列的内容</span><br>    first_column = df.iloc[:, <span class="hljs-number">0</span>]  <span class="hljs-comment"># iloc[:, 0] 表示选择所有行的第一列</span><br>    <span class="hljs-comment"># 打印第一列的内容</span><br>    lines=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> first_column:<br>        lines+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> lines&lt;<span class="hljs-number">206</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;处理第<span class="hljs-subst">&#123;lines&#125;</span>行:<span class="hljs-subst">&#123;item&#125;</span>&quot;</span>)<br>        response = client.chat.completions.create(<br>        model=<span class="hljs-string">&quot;glm-4&quot;</span>,  <span class="hljs-comment"># 请填写您要调用的模型名称</span><br>        messages=[<br>            &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: propmt&#125;,<br>            &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: item&#125;<br>        ],<br>        )<br>        result=response.choices[<span class="hljs-number">0</span>].message.content<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;result.md&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(<span class="hljs-string">&#x27;---------------\n&#x27;</span>)<br>            f.write(<span class="hljs-string">f&#x27;## <span class="hljs-subst">&#123;item&#125;</span>\n&#x27;</span>)<br>            f.write(result+<span class="hljs-string">&#x27;\n\n&#x27;</span>)<br>    <br><span class="hljs-keyword">except</span> zhipuai.core._errors.APIRequestFailedError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;敏感词&#x27;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;未知的异常:&#x27;</span>,e)<br><br></code></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>以<strong>abandon</strong>为例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">### 分析词义</span><br><br><span class="hljs-strong">**abandon**</span> 是一个动词，意为“放弃、抛弃、遗弃”。它通常用于描述某人或某物被完全放弃，不再关心或维护。<br><br><span class="hljs-section">### 列举例句</span><br><br><span class="hljs-bullet">1.</span> <span class="hljs-strong">**场景：学业**</span><br><span class="hljs-bullet">   -</span> <span class="hljs-strong">**英文**</span>：He decided to <span class="hljs-strong">**abandon**</span> his studies to pursue a career in music.<br><span class="hljs-bullet">   -</span> <span class="hljs-strong">**中文**</span>：他决定放弃学业，去追求音乐事业。<br><br><span class="hljs-bullet">2.</span> <span class="hljs-strong">**场景：感情**</span><br><span class="hljs-bullet">   -</span> <span class="hljs-strong">**英文**</span>：She felt heartbroken when her boyfriend <span class="hljs-strong">**abandoned**</span> her.<br><span class="hljs-bullet">   -</span> <span class="hljs-strong">**中文**</span>：当她的男朋友抛弃她时，她感到心碎。<br><br><span class="hljs-bullet">3.</span> <span class="hljs-strong">**场景：物品**</span><br><span class="hljs-bullet">   -</span> <span class="hljs-strong">**英文**</span>：The old house was <span class="hljs-strong">**abandoned**</span> and left to decay.<br><span class="hljs-bullet">   -</span> <span class="hljs-strong">**中文**</span>：那座老房子被遗弃了，任其腐朽。<br><br><span class="hljs-section">### 词根分析</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**词根**</span>：<span class="hljs-strong">**band-**</span>，意为“绑、束缚”。<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**衍生单词**</span>：<br><span class="hljs-bullet">  -</span> <span class="hljs-strong">**band**</span>（乐队、带子）<br><span class="hljs-bullet">  -</span> <span class="hljs-strong">**bond**</span>（债券、纽带）<br><span class="hljs-bullet">  -</span> <span class="hljs-strong">**rebind**</span>（重新绑定）<br><br><span class="hljs-section">### 词缀分析</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**前缀**</span>：<span class="hljs-strong">**a-**</span>，表示“加强语气”或“分离”。<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**词根**</span>：<span class="hljs-strong">**band-**</span>，意为“绑、束缚”。<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**后缀**</span>：<span class="hljs-strong">**-on**</span>，用于构成动词。<br><br><span class="hljs-strong">**相同词缀的单词**</span>：<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**a-**</span>：<span class="hljs-strong">**abate**</span>（减轻）、<span class="hljs-strong">**abduct**</span>（绑架）<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**-on**</span>：<span class="hljs-strong">**andon**</span>（日本的一种生产管理工具）、<span class="hljs-strong">**pandon**</span>（一种鱼类）<br><br><span class="hljs-section">### 发展历史和文化背景</span><br><br><span class="hljs-strong">**abandon**</span> 这个词源自古法语 <span class="hljs-strong">**abandonner**</span>，进一步追溯到拉丁语<br><span class="hljs-strong">**abandonare**</span>，意为“完全放弃”。在中世纪英语中，这个词逐渐演变为现在的形式。在欧美文化中，<span class="hljs-strong">**abandon**</span><br>常用于描述一种彻底的、不留余地的放弃行为，带有强烈的情感色彩，如放弃信仰、抛弃亲人等。<br><br><span class="hljs-section">### 单词变形</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**名词**</span>：<span class="hljs-strong">**abandonment**</span>（放弃、遗弃）<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**形容词**</span>：<span class="hljs-strong">**abandoned**</span>（被遗弃的）<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**副词**</span>：<span class="hljs-strong">**abandonedly**</span>（放任地）<br><br><span class="hljs-strong">**固定搭配和组词**</span>：<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**abandon oneself to**</span>（沉溺于）<br><span class="hljs-bullet">  -</span> <span class="hljs-strong">**英文**</span>：He <span class="hljs-strong">**abandoned himself to**</span> despair.<br><span class="hljs-bullet">  -</span> <span class="hljs-strong">**中文**</span>：他沉溺于绝望之中。<br><br><span class="hljs-section">### 记忆辅助</span><br><br><span class="hljs-strong">**记忆技巧**</span>：<br><span class="hljs-bullet">1.</span> <span class="hljs-strong">**联想记忆**</span>：将 <span class="hljs-strong">**abandon**</span> 与 “a band on”（一个带子在）联想，想象一个带子被解开，象征“放弃”。<br><span class="hljs-bullet">2.</span> <span class="hljs-strong">**谐音记忆**</span>：<span class="hljs-strong">**abandon**</span> 听起来像 “阿爸ndon”，可以想象一个父亲（阿爸）放弃某事。<br><br><span class="hljs-section">### 小故事</span><br><br><span class="hljs-strong">**英文**</span>：<br>In the quiet forest, an old car lay <span class="hljs-strong">**abandoned**</span>. Its rusted body told stories of forgotten dreams. One day, a curious boy discovered it   <br>and imagined adventures it once had.<br><br><span class="hljs-strong">**中文**</span>：<br>在寂静的森林里，一辆旧车被遗弃在那里。它生锈的车身讲述着被遗忘的梦想。有一天，一个好奇的男孩发现了它，并想象它曾经的冒险故事。<br></code></pre></td></tr></table></figure><h2 id="完整结果"><a href="#完整结果" class="headerlink" title="完整结果"></a>完整结果</h2><p>见仓库<a href="https://github.com/IamLihua/ai4cet6">IamLihua&#x2F;ai4cet6: 使用ai生成6级单词本 (github.com)</a></p><p><a href="https://iamlihua.github.io/ai4cet6/">在线网站</a></p><h1 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h1><p>单词表所有内容均由人工智能生成，不代表本人的观点和立场，请注意分辨其中的错误，若有侵权或者违反法律的地方，请联系我们，我们将在第一时间删除。</p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习常见领域记录</title>
    <link href="/2024/10/07/ml-algorithm/"/>
    <url>/2024/10/07/ml-algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="机器学习记录"><a href="#机器学习记录" class="headerlink" title="机器学习记录"></a>机器学习记录</h1><p>之前做过一篇偏课内的笔记 <a href="https://iamlihua.github.io/2024/06/09/ml-learn/">机器学习复习 - I am LiHua</a></p><h2 id="半监督学习-amp-自监督学习"><a href="#半监督学习-amp-自监督学习" class="headerlink" title="半监督学习&amp;自监督学习"></a>半监督学习&amp;自监督学习</h2><p><a href="https://blog.csdn.net/qq_44015059/article/details/106448533">一文看懂半监督学习(Semi-supervised Learning)和自监督学习(Self-Supervised Learning)</a></p><blockquote><p>将大量的无类标签的样例加入到有限的有类标签的样本中一起训练来进行学习，期望能对学习性能起到改进的作用</p></blockquote><p>自监督学习是一种无监督学习的方法</p><h2 id="对比学习"><a href="#对比学习" class="headerlink" title="对比学习"></a>对比学习</h2><p><a href="https://blog.csdn.net/jcfszxc/article/details/135381129">【深度学习：（Contrastive Learning） 对比学习】深入浅出讲解对比学习</a></p><blockquote><p>在学习到的嵌入空间中，相似的实例应靠得更近，而不相似的实例应离得更远</p></blockquote><p>对比学习是自监督学习的一个子集</p><h2 id="元学习"><a href="#元学习" class="headerlink" title="元学习"></a>元学习</h2><p><a href="https://zhuanlan.zhihu.com/p/136975128">一文入门元学习（Meta-Learning）（附代码）</a></p><img src="https://pic4.zhimg.com/v2-2155d09e7227f572140b5e01c420daf7.webp" alt="img" style="zoom:50%;"><blockquote><p>二者的目的都是找一个Function，只是两个Function的功能不同，要做的事情不一样。机器学习中的Function直接作用于特征和标签，去寻找特征与标签之间的关联；而元学习中的Function是用于寻找新的f，新的f才会应用于具体的任务。</p></blockquote><p>有点像 普通方程和微分方程的区别</p><h2 id="小样本学习"><a href="#小样本学习" class="headerlink" title="小样本学习"></a>小样本学习</h2><p><a href="https://blog.csdn.net/zhaohongfei_358/article/details/124057980">【学习笔记】小样本学习（Few-shot Learning）_小样本训练</a></p><p><a href="https://zhuanlan.zhihu.com/p/61215293">小样本学习（Few-shot Learning）</a></p><blockquote><p>可以学习一个相似度函数sim(x,x’) 来判定样本x和x’的相似度，相似度越高，表示这两个样本越可能是同一个类别。例如，可以通过一个很大的数据集学习出一个相似度函数，然后用该函数进行预测。</p></blockquote><p>元学习可以用于小样本学习</p><h2 id="迁移学习"><a href="#迁移学习" class="headerlink" title="迁移学习"></a>迁移学习</h2><p><a href="https://blog.csdn.net/dakenz/article/details/85954548">迁移学习概述（Transfer Learning）</a></p><blockquote><p>将某个领域或任务上学习到的知识或模式应用到不同但相关的领域或问题中。</p></blockquote><p>会看源数据和目标数据的分布差别&#x2F;使用共享参数这样的方法</p><h2 id="大模型的微调"><a href="#大模型的微调" class="headerlink" title="大模型的微调"></a>大模型的微调</h2><p><a href="https://community.modelscope.cn/66f907112db35d1195f223b8.html">【大模型微调】一文掌握7种大模型微调的方法</a></p><blockquote><p>文章探讨了大型模型微调的技术手段，包括全面微调和参数高效微调（PEFT），并详细介绍了PEFT中的各种方法，如LoRA、QLoRA、适配器调整、前缀调整、提示调整、P-Tuning及P-Tuning v2等。</p></blockquote><p>大模型的微调是迁移学习的一种形式</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MTkwMTQ4NA==&mid=2247484100&idx=1&sn=9a16611524c7953361717769284e7802&chksm=cf5fa807f8282111d1c8912ce305072f3e5558506d45b4d634d8e315cb84bdb7b5d92a7747c6&scene=21#wechat_redirect">大模型微调实践——Prompt tuning</a></p><p><a href="https://zhuanlan.zhihu.com/p/639685912">深入理解Prefix Tuning</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MTkwMTQ4NA==&mid=2247484109&idx=1&sn=5757e1179c610e69e777b555b60787b0&chksm=cf5fa80ef82821189852897cee5741ea0cdc637ceb3b7e91bdd85715d37d74417814cec55071&scene=21#wechat_redirect">大模型微调实践——P-tuning的原理</a></p><h2 id="增量学习"><a href="#增量学习" class="headerlink" title="增量学习"></a>增量学习</h2><p><a href="https://zhuanlan.zhihu.com/p/672241066">大模型增量学习</a></p><p><img src="https://pic1.zhimg.com/v2-e4d04563c43786d81438ccd495638f7e.webp" alt="img"></p><p><a href="https://blog.csdn.net/CV_Autobot/article/details/129036208">最新综述 | 万字长文带你入门增量学习</a></p><h2 id="他"><a href="#他" class="headerlink" title="他"></a>他</h2><h3 id="多模态学习"><a href="#多模态学习" class="headerlink" title="多模态学习"></a>多模态学习</h3><p><a href="https://zhuanlan.zhihu.com/p/582878508">多模态学习综述(MultiModal Learning) </a></p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zst文件解压</title>
    <link href="/2024/09/05/zst-wen-jian-jie-ya/"/>
    <url>/2024/09/05/zst-wen-jian-jie-ya/</url>
    
    <content type="html"><![CDATA[<h1 id="zst文件解压-windows"><a href="#zst文件解压-windows" class="headerlink" title="zst文件解压-windows"></a>zst文件解压-windows</h1><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>在linux下可以用tar命令解压zst文件</p><p><a href="https://blog.csdn.net/sevendays_7/article/details/111282640">tar.zst 文件格式解压-CSDN博客</a></p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>在windows下：</p><ol><li><p><a href="https://github.com/facebook/zstd/releases">Releases · facebook&#x2F;zstd (github.com)</a></p></li><li><p><code>zstd -d filename.zst</code></p></li></ol><p>linux应该也可以用这个方法</p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强化学习入门</title>
    <link href="/2024/07/23/rl-learn/"/>
    <url>/2024/07/23/rl-learn/</url>
    
    <content type="html"><![CDATA[<h1 id="强化学习入门"><a href="#强化学习入门" class="headerlink" title="强化学习入门"></a>强化学习入门</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/datawhalechina/easy-rl">datawhalechina&#x2F;easy-rl: 强化学习中文教程（蘑菇书🍄）</a></p><p><a href="https://hrl.boyuai.com/">动手学强化学习 (boyuai.com)</a></p><h2 id="关于DQN"><a href="#关于DQN" class="headerlink" title="关于DQN"></a>关于DQN</h2><h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/qq_74722169/article/details/137471413">https://blog.csdn.net/qq_74722169/article/details/137471413</a></p><p><a href="https://hrl.boyuai.com/chapter/2/dqn%E7%AE%97%E6%B3%95">DQN 算法 (boyuai.com)</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> gym<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> collections<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReplayBuffer</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27; 经验回放池 &#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, capacity</span>):<br>        self.buffer = collections.deque(maxlen=capacity)  <span class="hljs-comment"># 队列,先进先出</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, state, action, reward, next_state, done</span>):  <span class="hljs-comment"># 将数据加入buffer</span><br>        self.buffer.append((state, action, reward, next_state, done))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sample</span>(<span class="hljs-params">self, batch_size</span>):  <span class="hljs-comment"># 从buffer中采样数据,数量为batch_size</span><br>        transitions = random.sample(self.buffer, batch_size)<br>        state, action, reward, next_state, done = <span class="hljs-built_in">zip</span>(*transitions)<br>        <span class="hljs-keyword">return</span> np.array(state), action, reward, np.array(next_state), done<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">size</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 目前buffer中数据的数量</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.buffer)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Qnet</span>(torch.nn.Module):<br>    <span class="hljs-string">&#x27;&#x27;&#x27; 只有一层隐藏层的Q网络 &#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, state_dim, hidden_dim, action_dim</span>):<br>        <span class="hljs-built_in">super</span>(Qnet, self).__init__()<br>        self.fc1 = torch.nn.Linear(state_dim, hidden_dim)<br>        self.fc2 = torch.nn.Linear(hidden_dim, action_dim)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = F.relu(self.fc1(x))  <span class="hljs-comment"># 隐藏层使用ReLU激活函数</span><br>        <span class="hljs-keyword">return</span> self.fc2(x)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DQN</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27; DQN算法 &#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, state_dim, hidden_dim, action_dim, learning_rate, gamma,</span><br><span class="hljs-params">                 epsilon, target_update, device</span>):<br>        self.action_dim = action_dim<br>        self.q_net = Qnet(state_dim, hidden_dim,<br>                          self.action_dim).to(device)  <span class="hljs-comment"># Q网络</span><br>        <span class="hljs-comment"># 目标网络</span><br>        self.target_q_net = Qnet(state_dim, hidden_dim,<br>                                 self.action_dim).to(device)<br>        <span class="hljs-comment"># 使用Adam优化器</span><br>        self.optimizer = torch.optim.Adam(self.q_net.parameters(),<br>                                          lr=learning_rate)<br>        self.gamma = gamma  <span class="hljs-comment"># 折扣因子</span><br>        self.epsilon = epsilon  <span class="hljs-comment"># epsilon-贪婪策略</span><br>        self.target_update = target_update  <span class="hljs-comment"># 目标网络更新频率</span><br>        self.count = <span class="hljs-number">0</span>  <span class="hljs-comment"># 计数器,记录更新次数</span><br>        self.device = device<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">take_action</span>(<span class="hljs-params">self, state</span>):  <span class="hljs-comment"># epsilon-贪婪策略采取动作</span><br>        <span class="hljs-keyword">if</span> np.random.random() &lt; self.epsilon:<br>            action = np.random.randint(self.action_dim)<br>        <span class="hljs-keyword">else</span>:<br>            state = torch.tensor([state], dtype=torch.<span class="hljs-built_in">float</span>).to(self.device)<br>            action = self.q_net(state).argmax().item()<br>        <span class="hljs-keyword">return</span> action<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, transition_dict</span>):<br>        states = torch.tensor(transition_dict[<span class="hljs-string">&#x27;states&#x27;</span>],<br>                              dtype=torch.<span class="hljs-built_in">float</span>).to(self.device)<br>        actions = torch.tensor(transition_dict[<span class="hljs-string">&#x27;actions&#x27;</span>]).view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>).to(self.device)<br>        rewards = torch.tensor(transition_dict[<span class="hljs-string">&#x27;rewards&#x27;</span>],<br>                               dtype=torch.<span class="hljs-built_in">float</span>).view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>).to(self.device)<br>        next_states = torch.tensor(transition_dict[<span class="hljs-string">&#x27;next_states&#x27;</span>],<br>                                   dtype=torch.<span class="hljs-built_in">float</span>).to(self.device)<br>        dones = torch.tensor(transition_dict[<span class="hljs-string">&#x27;dones&#x27;</span>],<br>                             dtype=torch.<span class="hljs-built_in">float</span>).view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>).to(self.device)<br><br>        q_values = self.q_net(states).gather(<span class="hljs-number">1</span>, actions)  <span class="hljs-comment"># Q值</span><br>        <span class="hljs-comment"># 下个状态的最大Q值</span><br>        max_next_q_values = self.target_q_net(next_states).<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>].view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>        q_targets = rewards + self.gamma * max_next_q_values * (<span class="hljs-number">1</span> - dones)  <span class="hljs-comment"># TD误差目标</span><br>        dqn_loss = torch.mean(F.mse_loss(q_values, q_targets))  <span class="hljs-comment"># 均方误差损失函数</span><br>        self.optimizer.zero_grad()  <span class="hljs-comment"># PyTorch中默认梯度会累积,这里需要显式将梯度置为0</span><br>        dqn_loss.backward()  <span class="hljs-comment"># 反向传播更新参数</span><br>        self.optimizer.step()<br><br>        <span class="hljs-keyword">if</span> self.count % self.target_update == <span class="hljs-number">0</span>:<br>            self.target_q_net.load_state_dict(<br>                self.q_net.state_dict())  <span class="hljs-comment"># 更新目标网络</span><br>        self.count += <span class="hljs-number">1</span><br><br><br>lr = <span class="hljs-number">2e-3</span><br>num_episodes = <span class="hljs-number">500</span><br>hidden_dim = <span class="hljs-number">128</span><br>gamma = <span class="hljs-number">0.98</span><br>epsilon = <span class="hljs-number">0.01</span><br>target_update = <span class="hljs-number">10</span><br>buffer_size = <span class="hljs-number">10000</span><br>minimal_size = <span class="hljs-number">500</span><br>batch_size = <span class="hljs-number">64</span><br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>) <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> torch.device(<span class="hljs-string">&quot;cpu&quot;</span>)<br><br>env_name = <span class="hljs-string">&#x27;CartPole-v0&#x27;</span><br>env = gym.make(env_name)<br>random.seed(<span class="hljs-number">0</span>)<br>np.random.seed(<span class="hljs-number">0</span>)<br>env.seed(<span class="hljs-number">0</span>)<br>torch.manual_seed(<span class="hljs-number">0</span>)<br>replay_buffer = ReplayBuffer(buffer_size)<br>state_dim = env.observation_space.shape[<span class="hljs-number">0</span>]<br>action_dim = env.action_space.n<br>agent = DQN(state_dim, hidden_dim, action_dim, lr, gamma, epsilon,<br>            target_update, device)<br><br>return_list = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">with</span> tqdm(total=<span class="hljs-built_in">int</span>(num_episodes / <span class="hljs-number">10</span>), desc=<span class="hljs-string">&#x27;Iteration %d&#x27;</span> % i) <span class="hljs-keyword">as</span> pbar:<br>        <span class="hljs-keyword">for</span> i_episode <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(num_episodes / <span class="hljs-number">10</span>)):<br>            episode_return = <span class="hljs-number">0</span><br>            state = env.reset()<br>            done = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> done:<br>                action = agent.take_action(state)<br>                next_state, reward, done, _ = env.step(action)<br>                replay_buffer.add(state, action, reward, next_state, done)<br>                state = next_state<br>                episode_return += reward<br>                <span class="hljs-comment"># 当buffer数据的数量超过一定值后,才进行Q网络训练</span><br>                <span class="hljs-keyword">if</span> replay_buffer.size() &gt; minimal_size:<br>                    b_s, b_a, b_r, b_ns, b_d = replay_buffer.sample(batch_size)<br>                    transition_dict = &#123;<br>                        <span class="hljs-string">&#x27;states&#x27;</span>: b_s,<br>                        <span class="hljs-string">&#x27;actions&#x27;</span>: b_a,<br>                        <span class="hljs-string">&#x27;next_states&#x27;</span>: b_ns,<br>                        <span class="hljs-string">&#x27;rewards&#x27;</span>: b_r,<br>                        <span class="hljs-string">&#x27;dones&#x27;</span>: b_d<br>                    &#125;<br>                    agent.update(transition_dict)<br>            return_list.append(episode_return)<br>            <span class="hljs-keyword">if</span> (i_episode + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>                pbar.set_postfix(&#123;<br>                    <span class="hljs-string">&#x27;episode&#x27;</span>:<br>                        <span class="hljs-string">&#x27;%d&#x27;</span> % (num_episodes / <span class="hljs-number">10</span> * i + i_episode + <span class="hljs-number">1</span>),<br>                    <span class="hljs-string">&#x27;return&#x27;</span>:<br>                        <span class="hljs-string">&#x27;%.3f&#x27;</span> % np.mean(return_list[-<span class="hljs-number">10</span>:])<br>                &#125;)<br>            pbar.update(<span class="hljs-number">1</span>)<br><br>episodes_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(return_list)))<br>plt.plot(episodes_list, return_list)<br>plt.xlabel(<span class="hljs-string">&#x27;Episodes&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Returns&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;DQN on &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(env_name))<br>plt.show()<br><br></code></pre></td></tr></table></figure><p>注意<code>gym</code>版本，不能过高</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip install gym==0.25.2<br></code></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/2024/07/23/rl-learn/image-20240723173046070.png" alt="运行结果"></p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习复习</title>
    <link href="/2024/06/09/ml-learn/"/>
    <url>/2024/06/09/ml-learn/</url>
    
    <content type="html"><![CDATA[<h1 id="机器学习复习"><a href="#机器学习复习" class="headerlink" title="机器学习复习"></a>机器学习复习</h1><p><em>这是一篇非常不完整的学习笔记，只会记录一些我觉得需要记录的东西</em></p><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="归纳偏置"><a href="#归纳偏置" class="headerlink" title="归纳偏置"></a>归纳偏置</h3><p>在机器学习中，<em><strong>归纳偏置</strong></em>（Inductive bias）指的是学习算法在学习过程中对特定解决方案的偏好或倾向。它描述了学习算法在面对有限数据和不确定性时，如何做出合理的预测和泛化。</p><p>更直白地说，归纳偏置可以理解为学习算法对世界的“假设”。这些假设可以帮助算法更好地理解训练数据，并做出更准确的预测。</p><p>举个例子，假设我们正在训练一个用于图像识别的机器学习模型。该模型需要学习如何将图像中的对象分类为不同的类别，例如猫、狗或汽车。为了做到这一点，模型需要对图像中的物体可能是什么以及它们可能如何出现做出一些假设。</p><p>例如，模型可以假设猫通常有四条腿和胡须，而狗通常有四条腿和耷拉着的耳朵。这些假设可以帮助模型更好地理解训练数据，并做出更准确的预测。</p><p>归纳偏置在机器学习中起着重要作用。它可以帮助算法：</p><ul><li><strong>提高泛化能力：</strong>泛化能力是指算法在遇到新数据时做出准确预测的能力。归纳偏置可以帮助算法学习更一般的模式，从而提高泛化能力。</li><li><strong>减少过拟合：</strong>过拟合是指算法在训练数据上表现非常好，但在新数据上表现很差。归纳偏置可以帮助算法避免过拟合，从而提高泛化能力。</li><li><strong>提高学习效率：</strong>归纳偏置可以帮助算法更快地学习，因为它可以减少需要考虑的假设数量。</li></ul><p>常用的归纳偏置包括：</p><ul><li><strong>奥卡姆剃刀（Occam’s razor）：</strong>奥卡姆剃刀是一种原则，认为在解释现象时，应尽量选择简单而有效的假设。在机器学习中，奥卡姆剃刀可以用来选择具有较少参数的模型。</li><li><strong>正则化（Regularization）：</strong>正则化是一种技术，用于惩罚模型的复杂度。通过正则化，可以避免模型过拟合训练数据。</li><li><strong>先验知识（Prior knowledge）：</strong>先验知识是指在学习之前已知的关于世界的信息。先验知识可以用来约束模型的假设，从而提高泛化能力。</li></ul><p>归纳偏置是机器学习中一个重要概念。它可以帮助算法更好地学习和泛化，从而提高机器学习模型的性能。</p><h4 id="CNN"><a href="#CNN" class="headerlink" title="CNN"></a>CNN</h4><p>卷积神经网络（CNN）具有以下两个重要的归纳偏置：</p><ul><li><strong>局部性（Locality）：</strong>CNN假设图像中的相邻像素点是相关的。这意味着局部区域内的像素点比相距较远的像素点更相关。这种归纳偏置反映了自然图像的统计特性，即相邻像素点往往具有相同的颜色或纹理。</li><li><strong>平移不变性（Translation invariance）：</strong>CNN假设图像内容的平移不会改变其类别。这意味着图像在空间上平移后，CNN应该输出相同的类别预测。这种归纳偏置反映了自然图像的另一个统计特性，即物体的类别与其在图像中的位置无关。</li></ul><p>这两个归纳偏置使得 CNN 能够很好地学习图像特征，并应用于图像分类、目标检测等任务。</p><p>具体来说，CNN 中的卷积操作可以实现局部性，而权重共享机制则可以实现平移不变性。</p><ul><li><strong>卷积操作：</strong>卷积操作可以提取图像局部区域的特征。在卷积操作中，一个滤波器会被应用于图像的局部区域，以提取该区域的特征。由于相邻像素点是相关的，因此卷积操作可以有效地提取图像的局部特征。</li><li><strong>权重共享机制：</strong>CNN 中的权重共享机制是指同一层中的所有滤波器共享相同的权重。这意味着不同位置的局部区域会被用相同的权重来提取特征。由于平移不变性，因此权重共享机制可以确保图像内容的平移不会改变 CNN 的输出。</li></ul><p>由于 CNN 具有局部性和平移不变性这两个归纳偏置，因此它能够很好地学习图像特征，并应用于图像分类、目标检测等任务。</p><p>此外，CNN 还具有以下一些其他归纳偏置：</p><ul><li><strong>尺度不变性（Scale invariance）：</strong>CNN 假设图像内容的缩放不会改变其类别。</li><li><strong>旋转不变性（Rotation invariance）：</strong>CNN 假设图像内容的旋转不会改变其类别。</li><li><strong>不变性组合（Composition of invariances）：</strong>CNN 可以组合多个不变性，例如尺度不变性和旋转不变性，以学习更复杂的特征。</li></ul><p>这些归纳偏置使得 CNN 能够更加有效地学习图像特征，并应用于更广泛的任务。</p><p>总而言之，CNN 具有多种归纳偏置，这些偏置使得 CNN 能够很好地学习图像特征，并应用于图像分类、目标检测等任务。</p><h4 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h4><p>循环神经网络（RNN）具有以下两个重要的归纳偏置：</p><ul><li><strong>序列性（Sequentiality）：</strong>RNN 假设序列中的元素是相互依赖的。这意味着序列中前一个元素的信息可以帮助理解后一个元素。这种归纳偏置反映了自然语言和时间序列数据的统计特性，即序列中的元素往往存在顺序关系。</li><li><strong>时间不变性（Time invariance）：</strong>RNN 假设模型在处理序列的不同时间步时具有相同的行为。这意味着模型的参数在不同的时间步之间共享。这种归纳偏置可以提高模型的效率，并减少模型的参数数量。</li></ul><p>这两个归纳偏置使得 RNN 能够很好地学习序列数据中的依赖关系，并应用于自然语言处理、时间序列预测等任务。</p><p>具体来说，RNN 中的循环连接可以实现序列性，而权重共享机制则可以实现时间不变性。</p><ul><li><strong>循环连接：</strong>RNN 中的每个神经元都与它自己在上一个时间步的状态相连接。这意味着 RNN 可以利用序列中前一个元素的信息来理解后一个元素。</li><li><strong>权重共享机制：</strong>RNN 中的不同时间步共享相同的参数。这意味着 RNN 在处理序列的不同时间步时具有相同的行为。</li></ul><p>由于 RNN 具有序列性和时间不变性这两个归纳偏置，因此它能够很好地学习序列数据中的依赖关系，并应用于自然语言处理、时间序列预测等任务。</p><p>此外，RNN 还具有以下一些其他归纳偏置：</p><ul><li><strong>平滑性（Smoothness）：</strong>RNN 假设序列中的元素是平滑变化的。这意味着相邻时间步之间的元素差异较小。</li><li><strong>局部依赖性（Local dependency）：</strong>RNN 假设序列中元素之间的依赖关系是局部的。这意味着只有相邻的元素之间存在依赖关系。</li></ul><p>这些归纳偏置使得 RNN 能够更加有效地学习序列数据中的依赖关系，并应用于更广泛的任务。</p><p>总而言之，RNN 具有多种归纳偏置，这些偏置使得 RNN 能够很好地学习序列数据中的依赖关系，并应用于自然语言处理、时间序列预测等任务。</p><h2 id="模型评估与选择"><a href="#模型评估与选择" class="headerlink" title="模型评估与选择"></a>模型评估与选择</h2><h3 id="精确率-amp-召回率"><a href="#精确率-amp-召回率" class="headerlink" title="精确率&amp;召回率"></a>精确率&amp;召回率</h3><p>精确率：查准率</p><p>召回率：查准率</p><p>精确率和召回率是两个常用的分类模型评价指标，用于衡量模型的性能。</p><p><strong>精确率</strong>（Precision）是指模型预测为正例的样本中，实际为正例的样本的比例。换句话说，就是预测正确的结果占所有预测结果的比例。</p><p><strong>公式</strong>：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">精确率 = TP / (TP + <span class="hljs-built_in">FP</span>)<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li>TP：真正例（True Positive），指模型预测为正例且实际为正例的样本数。</li><li>FP：假正例（False Positive），指模型预测为正例但实际为负例的样本数。</li></ul><p><strong>举个例子</strong>：假设我们训练了一个用于垃圾邮件过滤的机器学习模型。该模型需要学习如何将电子邮件分类为垃圾邮件或非垃圾邮件。</p><p>如果该模型将 100 封电子邮件标记为垃圾邮件，其中 80 封确实是垃圾邮件，那么该模型的精确率为 80%。这意味着该模型预测为垃圾邮件的邮件中，有 80% 是真正的垃圾邮件。</p><p><strong>召回率</strong>（Recall）是指实际为正例的样本中，被模型预测为正例的样本的比例。换句话说，就是实际存在的正例中有多少被正确识别出来了。</p><p><strong>公式</strong>：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm">召回率 = TP / (TP + <span class="hljs-meta">FN</span>)<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li>FN：假反例（False Negative），指模型预测为负例但实际为正例的样本数。</li></ul><p><strong>使用相同的例子</strong>：如果实际有 100 封垃圾邮件，该模型将 80 封标记为垃圾邮件，那么该模型的召回率为 80%。这意味着实际存在的垃圾邮件中有 80% 被该模型正确识别出来了。</p><p><strong>精确率和召回率</strong>是两个相互矛盾的指标。通常情况下，提高一个指标会降低另一个指标。例如，如果我们提高模型的精确率，这意味着模型会更加谨慎地将邮件标记为垃圾邮件，从而降低召回率，即可能会漏掉一些真正的垃圾邮件。</p><p><strong>在实际应用中</strong>，需要根据具体情况来选择合适的指标或权衡两者之间的关系。例如，对于垃圾邮件过滤系统，如果更重要是尽量减少误报（即提高精确率），那么可以适当降低召回率；如果更重要是尽量不放过任何垃圾邮件（即提高召回率），那么可以适当降低精确率。</p><p>除了精确率和召回率之外，还有一些其他的分类模型评价指标，例如准确率（Accuracy）、F1 值（F1 Score）等。</p><ul><li><strong>准确率</strong>（Accuracy）是指所有样本中预测正确的样本数占总样本数的比例。它是衡量模型总体性能的指标，但对于数据类别分布不均衡的情况可能给出误导性的结果。</li><li><strong>F1 值</strong>（F1 Score）是精确率和召回率的调和平均值，可以综合衡量模型的准确性和召回能力。</li></ul><p><strong>总结</strong>：</p><ul><li>精确率和召回率是两个常用的分类模型评价指标，用于衡量模型的性能。</li><li>精确率是指模型预测为正例的样本中，实际为正例的样本的比例。</li><li>召回率是指实际为正例的样本中，被模型预测为正例的样本的比例。</li><li>精确率和召回率是两个相互矛盾的指标，需要根据具体情况来选择合适的指标或权衡两者之间的关系。</li></ul><h3 id="P-R曲线"><a href="#P-R曲线" class="headerlink" title="P-R曲线"></a>P-R曲线</h3><p><strong>P-R曲线</strong>（Precision-Recall Curve），又称为<strong>精度-召回率曲线</strong>，是用于评估信息检索系统、文本分类系统等性能的一种常用方法。它以<strong>召回率</strong>（Recall）为横轴，以<strong>精确率</strong>（Precision）为纵轴，绘制出一条曲线。</p><p><strong>P-R曲线</strong>可以直观地反映出模型在不同召回率下的精确率水平。曲线越靠近右上角，说明模型的性能越好。</p><p><strong>P-R曲线</strong>的&#x3D;&#x3D;绘制方法&#x3D;&#x3D;如下：</p><ol><li>将样本按照模型预测的概率排序，从高到低排列。</li><li>计算每个排序位置的召回率和精确率。</li><li>将召回率和精确率作为坐标，绘制出一条曲线。</li></ol><p><strong>P-R曲线</strong>的分析方法如下：</p><ol><li>观察曲线的位置：曲线越靠近右上角，说明模型的性能越好。</li><li>观察曲线的形状：曲线越陡峭，说明模型在不同召回率下的精确率变化越快。</li><li>计算曲线下面积：曲线下面积越大，说明模型的整体性能越好。</li></ol><p><strong>P-R曲线</strong>在以下场景中具有广泛的应用：</p><ul><li><strong>信息检索系统</strong>：评估搜索引擎的性能，例如召回率和精确率。</li><li><strong>文本分类系统</strong>：评估垃圾邮件过滤器的性能，例如召回率和精确率。</li><li><strong>推荐系统</strong>：评估推荐算法的性能，例如召回率和精确率。</li><li><strong>自然语言处理</strong>：评估机器翻译系统的性能，例如召回率和精确率。</li></ul><p><strong>P-R曲线</strong>与<strong>ROC曲线</strong>（Receiver Operating Characteristic Curve）是两种常用的分类模型评价指标。<strong>ROC曲线</strong>以<strong>假阳率</strong>（False Positive Rate）为横轴，以<strong>真阳率</strong>（True Positive Rate）为纵轴，绘制出一条曲线。</p><p><strong>P-R曲线</strong>和<strong>ROC曲线</strong>的区别在于：</p><ul><li><strong>P-R曲线</strong>更关注正例的识别情况，而<strong>ROC曲线</strong>则同时关注正例和负例的识别情况。</li><li><strong>P-R曲线</strong>适用于数据类别分布不均衡的情况，而<strong>ROC曲线</strong>则对数据类别分布的均衡性没有要求。</li></ul><p><strong>在实际应用中</strong>，可以根据具体情况来选择合适的指标或权衡两者之间的关系。</p><h3 id="偏差-amp-方差-amp-噪声"><a href="#偏差-amp-方差-amp-噪声" class="headerlink" title="偏差&amp;方差&amp;噪声"></a>偏差&amp;方差&amp;噪声</h3><p>在机器学习中，<strong>偏差</strong>（Bias）、<strong>方差</strong>（Variance）和<strong>噪声</strong>（Noise）是三个重要的概念，它们用来衡量机器学习模型的性能。</p><p><strong>偏差</strong>是指模型的预测值与真实值之间的差异。偏差越小，说明模型越准确。偏差通常是由模型的假设引起的。例如，如果我们假设线性回归模型，那么对于非线性的数据，该模型就会产生偏差。</p><p><strong>方差</strong>是指模型每一次输出结果与模型输出期望之间的误差的平方的期望。方差越小，说明模型越稳定。方差通常是由数据的波动引起的。例如，如果训练数据量不足，或者数据本身存在噪声，那么模型的方差就会比较大。</p><p><strong>噪声</strong>是指真实标记与数据集中的实际标记间的偏差。噪声是不可控的，它是由数据本身的随机性引起的。</p><p>偏差、方差和噪声的关系可以表示如下：</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">均方误差 </span>=<span class="hljs-string"> 偏差^2 + 方差 + 噪声</span><br></code></pre></td></tr></table></figure><p><strong>也就是说，模型的总误差是由偏差、方差和噪声三部分共同决定的。</strong></p><p>为了提高模型的性能，我们需要降低偏差和方差。然而，偏差和方差通常是此消彼长的。例如，如果我们通过增加模型的复杂度来降低偏差，那么模型的方差就会增加。</p><p><strong>在实际应用中</strong>，我们需要根据具体情况来权衡偏差和方差之间的关系。例如，对于一些对准确性要求很高的任务，我们可以降低模型的偏差，即使这会导致模型的方差增加。而对于一些对鲁棒性要求很高的任务，我们可以降低模型的方差，即使这会导致模型的偏差增加。</p><p>以下是一些降低偏差和方差的方法：</p><ul><li><strong>降低偏差</strong><ul><li>使用更复杂的模型</li><li>使用更多的训练数据</li><li>进行特征工程</li></ul></li><li><strong>降低方差</strong><ul><li>使用正则化技术</li><li>进行早期停止</li><li>使用集成学习方法</li></ul></li></ul><h2 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h2><h3 id="最小二乘"><a href="#最小二乘" class="headerlink" title="最小二乘"></a>最小二乘</h3><p>为什么使偏导数为0的值是使RSS最小的值而不是最大的值？</p><blockquote><p>使偏导数为0的值是使RSS（残差平方和）最小的值而不是最大的值，这是因为我们是在寻找一个函数的极值点，而根据微积分中的极值定理，当一个函数在某点处的一阶偏导数为0时，该点可能是函数的极大值点、极小值点或鞍点（既不是极大值也不是极小值的临界点）。然而，在最小二乘估计的情况下，我们可以进一步分析来确定这个点确实是极小值点。</p><p>首先，RSS是一个关于参数（在这里是<em>a</em>和<em>b</em>）的非负函数，因为平方项总是非负的。因此，RSS没有上界，但理论上有一个下界（即当模型完美拟合数据时，RSS为0）。我们的目标是找到使RSS尽可能小的参数值。</p><p>其次，通过求解偏导数为0的方程组，我们找到的是RSS函数的驻点（即一阶偏导数为0的点）。由于RSS是一个二次函数（在<em>a</em>和<em>b</em>上是线性的线性组合的平方），它的图形是一个向上开口的抛物面（在多维空间中）。这种抛物面只有一个极小值点，没有极大值点。因此，当我们找到使偏导数为0的点时，这个点必然是RSS的极小值点。</p><p>…</p></blockquote><h3 id="logistic函数"><a href="#logistic函数" class="headerlink" title="logistic函数"></a>logistic函数</h3><p>$y&#x3D;1&#x2F;(1+e^{-z})$，一个单增函数</p><p>Logistic函数在机器学习中被广泛使用，主要有以下几个原因：</p><p><strong>1. 能够将输入值映射到0到1之间</strong></p><p>Logistic函数的输出值介于0到1之间，这使得它非常适合用于二分类任务。例如，在垃圾邮件过滤中，我们可以使用Logistic函数将电子邮件分类为垃圾邮件或非垃圾邮件。Logistic函数的输出值可以解释为某个事件发生的概率。例如，在医学诊断中，我们可以使用Logistic函数预测患者患某种疾病的概率。</p><p><strong>2. 简单易于理解</strong></p><p>Logistic函数的公式非常简单，易于理解和实现。这使得它成为机器学习初学者入门的好选择。即使是复杂的机器学习模型，也可能包含Logistic函数作为其中的一个组件。</p><p><strong>3. 非线性</strong></p><p>Logistic函数是非线性的，这意味着它可以用于拟合非线性的数据。这使得它比线性回归更强大，更灵活。在许多现实世界中，数据都是非线性的，因此Logistic函数可以更好地拟合这些数据。</p><p><strong>4. 具有良好的数学性质</strong></p><p>Logistic函数具有良好的数学性质，这使得它易于优化。例如，Logistic函数的梯度始终存在且有界，这使得它可以用于梯度下降算法。</p><p><strong>5. 计算效率高</strong></p><p>Logistic函数的计算效率很高，这使得它可以在大型数据集上进行训练。</p><p><strong>总而言之，Logistic函数在机器学习中被广泛使用，因为它具有简单易懂、非线性、具有良好的数学性质和计算效率高等优点。</strong></p><p>以下是一些Logistic函数在机器学习中的具体应用：</p><ul><li><strong>二分类任务</strong>：例如，垃圾邮件过滤、医学诊断、欺诈检测等。</li><li><strong>多分类任务</strong>：例如，手写数字识别、图像分类、自然语言处理等。</li><li><strong>回归任务</strong>：例如，预测房价、股票价格、客户行为等。</li></ul><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><h3 id="信息熵-amp-信息增益-amp-基尼指数"><a href="#信息熵-amp-信息增益-amp-基尼指数" class="headerlink" title="信息熵&amp;信息增益&amp;基尼指数"></a>信息熵&amp;信息增益&amp;基尼指数</h3><p><a href="https://xiaosheng.blog/2018/04/07/decision-tree#%E5%88%92%E5%88%86%E9%80%89%E6%8B%A9">决策树：信息增益、增益率和基尼指数 - 小昇的博客)</a></p><p>信息熵越小，样本集的纯度越高</p><p>信息增益(或者信息增益率)越大，使用该属性进行划分的纯度提升越大(所以要选信息增益大的)</p><p>属性的可能取值越多，属性的固有值越大，最好取信息增益率高的</p><p>基尼越小，数据集的纯度越高；划分属性时选择划分后进制数最小的属性</p><h2 id="其他的一些问题-x2F-概念"><a href="#其他的一些问题-x2F-概念" class="headerlink" title="其他的一些问题&#x2F;概念"></a>其他的一些问题&#x2F;概念</h2><p>可能是深度学习里面的问题，暂时先放在这里了</p><h3 id="few-shot-problem"><a href="#few-shot-problem" class="headerlink" title="few-shot problem"></a>few-shot problem</h3><p>Few-shot problem（小样本问题）通常出现在机器学习和人工智能领域，特别是在机器学习模型的训练过程中。它指的是在只有少量训练样本的情况下，如何有效地训练一个模型以使其能够泛化到新的、未见过的数据上的问题。</p><p>在许多实际应用中，获取大量的标注数据可能非常困难或成本高昂。例如，在医学图像分析中，某些罕见疾病的图像可能很少；在自然语言处理中，某些小语种的语言数据也可能不足。在这些情况下，传统的机器学习方法可能无法有效工作，因为它们通常需要大量的数据来学习复杂的模式和特征。</p><p>为了解决few-shot问题，研究人员开发了一些方法，包括但不限于：</p><ol><li><strong>迁移学习（Transfer Learning）</strong>：利用在一个大型数据集上预训练的模型，并将其应用到一个小样本问题上，通过微调（fine-tuning）来适应新任务。</li><li><strong>元学习（Meta-Learning）</strong>：设计模型以学习如何快速适应新任务，即使只有少量的样本。</li><li><strong>数据增强（Data Augmentation）</strong>：通过对现有数据进行变换来增加数据的多样性，从而提高模型的泛化能力。</li><li><strong>多任务学习（Multi-task Learning）</strong>：同时学习多个相关任务，以共享知识并提高模型在每个任务上的性能。</li><li><strong>模型蒸馏（Model Distillation）</strong>：将一个大模型的知识压缩到一个小模型中，以便于在资源受限的情况下使用。</li></ol><p>Few-shot问题是一个活跃的研究领域，因为解决这一问题对于许多实际应用来说都是至关重要的。</p><h3 id="long-tail-effect"><a href="#long-tail-effect" class="headerlink" title="long-tail effect"></a>long-tail effect</h3><p>在推荐系统中，long-tail effect（长尾效应）指的是用户对商品或内容的偏好分布呈现出不均匀性，即少数热门商品或内容会得到大量用户的关注和推荐，而大量的长尾商品或内容则只被少数用户所偏好。</p><p>这种现象在推荐系统中有以下几个特点：</p><ol><li><p><strong>不均衡的流行度分布</strong>：在推荐系统中，一小部分商品或内容（头部）会获得极高的流行度，而大多数商品或内容（长尾）的流行度相对较低。</p></li><li><p><strong>用户偏好的多样性</strong>：用户的偏好是多样化的，有些用户可能对热门商品感兴趣，而另一些用户则可能偏好那些不那么流行的长尾商品。</p></li><li><p><strong>推荐系统挑战</strong>：长尾效应给推荐系统带来了挑战，因为系统需要在推荐热门商品和发现用户对长尾商品的偏好之间找到平衡。</p></li><li><p><strong>多样性和新颖性</strong>：为了应对长尾效应，推荐系统可能需要引入多样性和新颖性的概念，以确保长尾商品也能得到推荐机会。</p></li><li><p><strong>个性化推荐</strong>：推荐系统需要更好地理解用户的个性化需求，以便能够推荐那些符合用户独特口味的长尾商品。</p></li><li><p><strong>冷启动问题</strong>：长尾效应还加剧了推荐系统中的冷启动问题，即对于新用户或新商品，系统可能缺乏足够的数据来进行有效的推荐。</p></li><li><p><strong>数据稀疏性</strong>：长尾商品由于交互数据较少，导致数据稀疏性问题，这使得模型学习用户偏好变得更加困难。</p></li></ol><p>为了解决长尾效应带来的问题，推荐系统研究者和工程师可能会采用多种策略，如利用内容基推荐、协同过滤、混合推荐方法、深度学习技术等，以提高对长尾商品的推荐效果。</p><h3 id="Cold-start-problem"><a href="#Cold-start-problem" class="headerlink" title="Cold-start problem"></a>Cold-start problem</h3><p>Cold-start problem（冷启动问题）是推荐系统中的一个常见问题，特别是在系统初次启动或面对新用户、新物品时。这个问题描述了在缺乏足够用户行为数据的情况下，如何提供准确的个性化推荐。</p><p>在推荐系统中，冷启动问题主要分为以下几种类型：</p><ol><li><p><strong>新用户冷启动</strong>：当系统遇到一个全新的用户时，由于没有该用户的历史行为数据，系统难以了解其偏好并提供个性化推荐。</p></li><li><p><strong>新物品冷启动</strong>：当系统中引入了新的商品或内容时，由于缺乏用户与这些新物品的交互数据，系统难以评估这些新物品的受欢迎程度或推荐给合适的用户。</p></li><li><p><strong>系统冷启动</strong>：在推荐系统刚开始运行时，由于缺乏用户和物品的交互数据，系统需要在没有用户行为信息的情况下进行推荐。</p></li><li><p><strong>隐式冷启动</strong>：即使用户或物品不是全新的，但如果它们在系统中的交互数据非常有限，也可能面临类似冷启动的问题。</p></li></ol><p>解决冷启动问题的一些常见策略包括：</p><ul><li><strong>基于内容的推荐</strong>：通过分析物品的属性或内容来推荐与用户过去喜欢的物品相似的新物品。</li><li><strong>基于人口统计学的推荐</strong>：根据用户的性别、年龄、地理位置等人口统计信息来推荐物品。</li><li><strong>混合推荐系统</strong>：结合多种推荐技术，如协同过滤、基于内容的推荐和人口统计学信息，以提高推荐的准确性。</li><li><strong>利用用户反馈</strong>：在用户注册或使用过程中收集用户的偏好信息，如通过问卷调查或初始评分来获取用户的兴趣。</li><li><strong>转移学习</strong>：利用在其他领域或任务上预训练的模型，将其应用到推荐系统中，以减少对大量用户行为数据的依赖。</li><li><strong>元学习</strong>：使模型能够快速适应新任务，即使在数据有限的情况下也能提供有效的推荐。</li><li><strong>主动学习</strong>：系统主动请求用户对推荐的物品进行评分或反馈，以收集更多数据并改进推荐。</li></ul><p>冷启动问题是推荐系统领域的一个重要研究方向，解决这一问题对于提高用户满意度和系统性能至关重要。</p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL笔记</title>
    <link href="/2024/04/09/stl/"/>
    <url>/2024/04/09/stl/</url>
    
    <content type="html"><![CDATA[<h1 id="STL笔记"><a href="#STL笔记" class="headerlink" title="STL笔记"></a>STL笔记</h1><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; map_test;<br>    map_test[<span class="hljs-number">1</span>]=<span class="hljs-number">100</span>;<br>    map_test[<span class="hljs-number">2</span>]=<span class="hljs-number">200</span>;<br>    <span class="hljs-comment">// 返回键的迭代器</span><br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;::iterator i=map_test.<span class="hljs-built_in">find</span>(<span class="hljs-number">1</span>);<br>    cout&lt;&lt;i-&gt;second&lt;&lt;endl;<span class="hljs-comment">//100</span><br>    <br>    <span class="hljs-comment">// 如果没有就是返回尾指针</span><br>    i=map_test.<span class="hljs-built_in">find</span>(<span class="hljs-number">-1</span>);<br>    cout&lt;&lt;(i == map_test.<span class="hljs-built_in">end</span>())&lt;&lt;endl; <span class="hljs-comment">// 1</span><br><br>    <span class="hljs-comment">// 遍历</span><br>    <span class="hljs-keyword">for</span>(map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;::iterator i=map_test.<span class="hljs-built_in">begin</span>();i!=map_test.<span class="hljs-built_in">end</span>();i++)&#123;<br>        cout&lt;&lt;i-&gt;first&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;i-&gt;second&lt;&lt;endl;<br>    &#125;<br><br>    <span class="hljs-comment">// 删除一个元素</span><br>    map_test.<span class="hljs-built_in">erase</span>(map_test.<span class="hljs-built_in">find</span>(<span class="hljs-number">2</span>));<br>    <span class="hljs-comment">// 字典大小</span><br>    cout&lt;&lt;map_test.<span class="hljs-built_in">size</span>()&lt;&lt;endl; <span class="hljs-comment">// 1</span><br><br>    <span class="hljs-comment">// 清除字典</span><br>    map_test.<span class="hljs-built_in">clear</span>();<br>    cout&lt;&lt;map_test.<span class="hljs-built_in">empty</span>()&lt;&lt;endl; <span class="hljs-comment">// 1</span><br>       <br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; vector_test &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><br>    <span class="hljs-comment">// 在尾部加入</span><br>    vector_test.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:vector_test)&#123;<br>        cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>; <span class="hljs-comment">// 1 2 3 4</span><br>    &#125;cout&lt;&lt;endl;<br>    <br>    <span class="hljs-comment">// 在尾部弹出</span><br>    vector_test.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i=vector_test.<span class="hljs-built_in">begin</span>();i!=vector_test.<span class="hljs-built_in">end</span>();i++)&#123;<br>        cout&lt;&lt;*i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<span class="hljs-comment">//1 2 3</span><br>    &#125;cout&lt;&lt;endl;<br><br>    <span class="hljs-comment">// 删除指定</span><br>    vector_test.<span class="hljs-built_in">erase</span>(vector_test.<span class="hljs-built_in">begin</span>());<br>    cout&lt;&lt;vector_test.<span class="hljs-built_in">size</span>()&lt;&lt;endl;<span class="hljs-comment">//2</span><br><br>    <span class="hljs-comment">// 清除</span><br>    vector_test.<span class="hljs-built_in">clear</span>();<br>    cout&lt;&lt;vector_test.<span class="hljs-built_in">empty</span>()&lt;&lt;endl;<span class="hljs-comment">//1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>排序方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp_greater</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br><span class="hljs-keyword">return</span> x &gt; y;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; vector_test &#123;<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v1</span><span class="hljs-params">(vector_test)</span></span>;<span class="hljs-comment">//注意:对于vector这两个都是深拷贝</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; v2=vector_test;<span class="hljs-comment">//注意:对于vector这两个都是深拷贝</span><br><br>    <span class="hljs-built_in">sort</span>(vector_test.<span class="hljs-built_in">begin</span>(),vector_test.<span class="hljs-built_in">end</span>(),<span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;()); <span class="hljs-comment">// 从大到小</span><br>    <span class="hljs-built_in">sort</span>(v1.<span class="hljs-built_in">begin</span>(),v1.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 默认从小到大</span><br>    <span class="hljs-built_in">sort</span>(v2.<span class="hljs-built_in">begin</span>(),v2.<span class="hljs-built_in">end</span>(),cmp_greater);<span class="hljs-comment">// 从大到小</span><br><br>    vector&lt;<span class="hljs-type">int</span>&gt; v3=vector_test;<span class="hljs-comment">//深拷贝</span><br>    <span class="hljs-comment">// 逆序</span><br>    <span class="hljs-built_in">reverse</span>(v3.<span class="hljs-built_in">begin</span>(),v3.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//从小到大</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;v1.<span class="hljs-built_in">size</span>();i++)&#123;<br>        cout&lt;&lt;vector_test[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;v1[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;v2[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;v3[i]&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    5 1 5 1</span><br><span class="hljs-comment">    4 2 4 2</span><br><span class="hljs-comment">    3 3 3 3</span><br><span class="hljs-comment">    2 4 2 4</span><br><span class="hljs-comment">    1 5 1 5</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><p>和vector差不多</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;list&gt;</span></span><br><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    list&lt;<span class="hljs-type">int</span>&gt; list_test &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><br>    list_test.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:list_test)&#123;<br>        cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>; <span class="hljs-comment">// 1 2 3 4</span><br>    &#125;cout&lt;&lt;endl;<br>    <br>    list_test.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i=list_test.<span class="hljs-built_in">begin</span>();i!=list_test.<span class="hljs-built_in">end</span>();i++)&#123;<br>        cout&lt;&lt;*i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<span class="hljs-comment">//1 2 3</span><br>    &#125;cout&lt;&lt;endl;<br><br>    list_test.<span class="hljs-built_in">erase</span>(list_test.<span class="hljs-built_in">begin</span>());<br>    cout&lt;&lt;list_test.<span class="hljs-built_in">size</span>()&lt;&lt;endl;<span class="hljs-comment">//2</span><br><br>    list_test.<span class="hljs-built_in">clear</span>();<br>    cout&lt;&lt;list_test.<span class="hljs-built_in">empty</span>()&lt;&lt;endl;<span class="hljs-comment">//1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>和vector的区别：<a href="https://www.cnblogs.com/shijingjing07/p/5587719.html">C++ vector和list的区别 - 迪米特 - 博客园 (cnblogs.com)</a></p><blockquote><p>list&lt;int&gt;::iterator不支持“+”、“+&#x3D;”、“&lt;”等</p><p>vector&lt;int&gt;::iterator和list&lt;int&gt;::iterator都重载了“++”运算符。</p><p>总之，如果需要高效的随机存取，而不在乎插入和删除的效率，使用vector;</p><p>如果需要大量的插入和删除，而不关心随机存取，则应使用list。</p></blockquote><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-function">string <span class="hljs-title">s1</span><span class="hljs-params">(<span class="hljs-string">&quot;hello&quot;</span>)</span></span>;<br>    <span class="hljs-function">string <span class="hljs-title">s2</span><span class="hljs-params">(<span class="hljs-string">&quot;world&quot;</span>)</span></span>;<br><br>    cout&lt;&lt;(s1&gt;s2)&lt;&lt;endl;<span class="hljs-comment">//0 按字典序</span><br><br>    s1.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;,&#x27;</span>); <span class="hljs-comment">//只能插字符</span><br>    s1.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;world&quot;</span>); <span class="hljs-comment">// 或者直接+=</span><br>    s2+=<span class="hljs-string">&quot;!&quot;</span>;<br>    cout&lt;&lt;s1&lt;&lt;endl;<span class="hljs-comment">//hello,world</span><br>    cout&lt;&lt;s2&lt;&lt;endl;<span class="hljs-comment">//world!</span><br><br>    <span class="hljs-comment">// 可以用vector的方法遍历</span><br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// 字符串查找 替换</span><br>    <br>    <span class="hljs-function">string <span class="hljs-title">s3</span><span class="hljs-params">(<span class="hljs-string">&quot;hello world&quot;</span>)</span></span>;<br>    <span class="hljs-type">int</span> pos=s3.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;world&quot;</span>);<br>    <span class="hljs-keyword">if</span>(pos!=string::npos)&#123;<span class="hljs-comment">//string::npos是一个特殊的值，表示没有找到</span><br>        s3.<span class="hljs-built_in">replace</span>(pos,<span class="hljs-number">5</span>,<span class="hljs-string">&quot;C++&quot;</span>);<span class="hljs-comment">// 替换5个字符</span><br>    &#125;<br>    cout&lt;&lt;s3&lt;&lt;endl;<span class="hljs-comment">//hello C++</span><br><br>    <span class="hljs-comment">//提取子串</span><br>    string s6=s3.<span class="hljs-built_in">substr</span>(<span class="hljs-number">6</span>,<span class="hljs-number">5</span>);<span class="hljs-comment">// 6到10</span><br>    cout&lt;&lt;s6&lt;&lt;endl;<span class="hljs-comment">//C++</span><br>    <br>    <span class="hljs-built_in">reverse</span>(s1.<span class="hljs-built_in">begin</span>(),s1.<span class="hljs-built_in">end</span>());<br>    cout&lt;&lt;s1&lt;&lt;endl;<span class="hljs-comment">//dlrow,olleh</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C++ string 成员函数 <code>length()</code> 等同于 <code>size()</code></p><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>在C++中，<code>std::set</code> 是一个关联容器，它包含唯一元素。<code>std::set</code> 底层使用红黑树实现，其中的元素默认按键值<strong>自动升序排序</strong>，并且每个元素的值都是唯一的。下面列出了 <code>std::set</code> 的一些常见操作：</p><ol><li><strong>插入元素</strong>：</li></ol><ul><li><code>insert()</code>: 向集合中插入一个或多个元素。如果元素已存在，则插入操作不会进行。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;<span class="hljs-type">int</span>&gt; s;<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">20</span>);<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">30</span>);<br></code></pre></td></tr></table></figure><p>或者使用初始化列表进行批量插入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;<span class="hljs-type">int</span>&gt; s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>删除元素</strong>：</li></ol><ul><li><code>erase()</code>: 从集合中删除一个元素或一个元素范围。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;<span class="hljs-type">int</span>&gt; s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br>s.<span class="hljs-built_in">erase</span>(<span class="hljs-number">20</span>); <span class="hljs-comment">// 删除元素20</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>查找元素</strong>：</li></ol><ul><li><code>find()</code>: 在集合中查找一个元素，并返回一个迭代器指向它。如果元素不存在，则返回 <code>end()</code> 迭代器。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;<span class="hljs-type">int</span>&gt; s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br><span class="hljs-keyword">auto</span> it = s.<span class="hljs-built_in">find</span>(<span class="hljs-number">20</span>);<br><span class="hljs-keyword">if</span> (it != s.<span class="hljs-built_in">end</span>()) &#123;<br>    <span class="hljs-comment">// 元素存在</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li><strong>判断集合是否为空</strong>：</li></ol><ul><li><code>empty()</code>: 检查集合是否为空。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;<span class="hljs-type">int</span>&gt; s;<br><span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">empty</span>()) &#123;<br>    <span class="hljs-comment">// 集合为空</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li><strong>获取集合大小</strong>：</li></ol><ul><li><code>size()</code>: 返回集合中元素的数量。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;<span class="hljs-type">int</span>&gt; s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Set size: &quot;</span> &lt;&lt; s.<span class="hljs-built_in">size</span>() &lt;&lt; std::endl; <span class="hljs-comment">// 输出：Set size: 3</span><br></code></pre></td></tr></table></figure><ol start="6"><li><strong>遍历集合</strong>：<br>使用迭代器或基于范围的for循环来遍历集合。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;<span class="hljs-type">int</span>&gt; s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = s.<span class="hljs-built_in">begin</span>(); it != s.<span class="hljs-built_in">end</span>(); ++it) &#123;<br>    std::cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>std::cout &lt;&lt; std::endl; <span class="hljs-comment">// 输出：10 20 30</span><br></code></pre></td></tr></table></figure><p>或者使用基于范围的for循环：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; elem : s) &#123;<br>    std::cout &lt;&lt; elem &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>std::cout &lt;&lt; std::endl; <span class="hljs-comment">// 输出：10 20 30</span><br></code></pre></td></tr></table></figure><ol start="7"><li><strong>获取集合中的最大和最小元素</strong>：<br>由于 <code>std::set</code> 是有序的，因此可以通过 <code>begin()</code> 和 <code>rbegin()</code> 直接获取最小和最大元素。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;<span class="hljs-type">int</span>&gt; s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br><span class="hljs-type">int</span> min_elem = *s.<span class="hljs-built_in">begin</span>(); <span class="hljs-comment">// 获取最小元素</span><br><span class="hljs-type">int</span> max_elem = *s.<span class="hljs-built_in">rbegin</span>(); <span class="hljs-comment">// 获取最大元素</span><br></code></pre></td></tr></table></figure><ol start="8"><li><strong>其他操作</strong>：<ul><li><code>clear()</code>: 清空集合中的所有元素。</li><li><code>count()</code>: 返回集合中某个元素的数量（对于 <code>std::set</code>，结果要么是0要么是1，因为元素是唯一的）。</li></ul></li></ol><p>这些是 <code>std::set</code> 的一些基本操作。当然，<code>std::set</code> 还提供了其他成员函数和操作符，但这些是最常用和基本的操作。</p><p>示例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    set&lt;<span class="hljs-type">int</span>&gt; s;<br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<br>    s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">3</span>);<br>    cout&lt;&lt;s.<span class="hljs-built_in">size</span>()&lt;&lt;endl;<span class="hljs-comment">//2</span><br><br>    set&lt;<span class="hljs-type">int</span>&gt;::iterator it =s.<span class="hljs-built_in">find</span>(<span class="hljs-number">3</span>);<br>    cout&lt;&lt;*it&lt;&lt;endl;<span class="hljs-comment">//3</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i=s.<span class="hljs-built_in">begin</span>();i!=s.<span class="hljs-built_in">end</span>();i++)&#123;<br>        cout&lt;&lt;*i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<span class="hljs-comment">//1 3</span><br>    &#125;cout&lt;&lt;endl;<br><br>    s.<span class="hljs-built_in">clear</span>();<br>    cout&lt;&lt;s.<span class="hljs-built_in">empty</span>();<span class="hljs-comment">//1</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>感觉和list差不多，就是不能重复，如果希望元素能重复的话，可以用<code>multiset</code></p><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>C++的<code>stack</code>是一个容器适配器，它给予程序员栈的功能，即后进先出（LIFO）的数据结构。<code>stack</code>不是一个完整的容器，它只是一个封装了另一个容器的对象，通常这个被封装的容器是<code>deque</code>，但也可以是其他任何提供了必要操作的容器。</p><p>以下是一些C++ <code>stack</code>的常用操作：</p><ol><li><strong>push()</strong>: 将一个元素压入栈顶。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::stack&lt;<span class="hljs-type">int</span>&gt; myStack;  <br>myStack.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <span class="hljs-comment">// 将5压入栈顶</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>pop()</strong>: 移除栈顶的元素。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::stack&lt;<span class="hljs-type">int</span>&gt; myStack;  <br>myStack.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br>myStack.<span class="hljs-built_in">pop</span>();  <span class="hljs-comment">// 移除栈顶的元素，即5</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>top()</strong>: 返回栈顶的元素，但不移除它。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::stack&lt;<span class="hljs-type">int</span>&gt; myStack;  <br>myStack.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br><span class="hljs-type">int</span> topElement = myStack.<span class="hljs-built_in">top</span>();  <span class="hljs-comment">// topElement现在是5，但5仍然在栈中</span><br></code></pre></td></tr></table></figure><ol start="4"><li><strong>size()</strong>: 返回栈中的元素数量。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::stack&lt;<span class="hljs-type">int</span>&gt; myStack;  <br>myStack.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br>myStack.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);  <br><span class="hljs-type">size_t</span> stackSize = myStack.<span class="hljs-built_in">size</span>();  <span class="hljs-comment">// stackSize现在是2</span><br></code></pre></td></tr></table></figure><ol start="5"><li><strong>empty()</strong>: 检查栈是否为空，如果为空则返回<code>true</code>，否则返回<code>false</code>。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::stack&lt;<span class="hljs-type">int</span>&gt; myStack;  <br><span class="hljs-type">bool</span> isEmpty = myStack.<span class="hljs-built_in">empty</span>();  <span class="hljs-comment">// isEmpty现在是true，因为栈是空的  </span><br>myStack.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br>isEmpty = myStack.<span class="hljs-built_in">empty</span>();  <span class="hljs-comment">// isEmpty现在是false，因为栈中有一个元素</span><br></code></pre></td></tr></table></figure><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><p>C++的<code>queue</code>也是一个容器适配器，它提供了队列的功能，即先进先出（FIFO）的数据结构。与<code>stack</code>类似，<code>queue</code>也不是一个完整的容器，而是封装了另一个容器（通常是<code>deque</code>）的对象。</p><p>在队列（Queue）数据结构中，”队头”（Front）和”队尾”（Rear）是两个重要的概念。</p><ol><li><strong>队头（Front）</strong>：<br>队头是指队列中第一个元素的位置。在先进先出（FIFO）的队列中，队头元素是最早进入队列的元素，也将是第一个被移除的元素。当你调用队列的出队操作（如<code>pop</code>或<code>dequeue</code>）时，位于队头的元素会被移除。</li><li><strong>队尾（Rear）</strong>：<br>队尾是指队列中最后一个元素的位置。在队列中，新元素总是被添加到队尾。当你调用队列的入队操作（如<code>push</code>或<code>enqueue</code>）时，新元素会被添加到队尾。</li></ol><p>以下是一些C++ <code>queue</code>的常用操作：</p><ol><li><strong>push()</strong>: 向队列尾部添加一个元素。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::queue&lt;<span class="hljs-type">int</span>&gt; myQueue;  <br>myQueue.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <span class="hljs-comment">// 将5添加到队列尾部</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>pop()</strong>: 移除队列的第一个元素。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::queue&lt;<span class="hljs-type">int</span>&gt; myQueue;  <br>myQueue.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br>myQueue.<span class="hljs-built_in">pop</span>();  <span class="hljs-comment">// 移除队列的第一个元素，即5</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>front()</strong>: 返回队列的第一个元素，但不移除它。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::queue&lt;<span class="hljs-type">int</span>&gt; myQueue;  <br>myQueue.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br><span class="hljs-type">int</span> frontElement = myQueue.<span class="hljs-built_in">front</span>();  <span class="hljs-comment">// frontElement现在是5，但5仍然在队列中</span><br></code></pre></td></tr></table></figure><ol start="4"><li><strong>back()</strong>: 返回队列的最后一个元素，但不移除它（C++11及以后版本）。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::queue&lt;<span class="hljs-type">int</span>&gt; myQueue;  <br>myQueue.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br><span class="hljs-type">int</span> backElement = myQueue.<span class="hljs-built_in">back</span>();  <span class="hljs-comment">// backElement现在是5，且5仍然在队列中</span><br></code></pre></td></tr></table></figure><ol start="5"><li><strong>size()</strong>: 返回队列中的元素数量。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::queue&lt;<span class="hljs-type">int</span>&gt; myQueue;  <br>myQueue.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br>myQueue.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);  <br><span class="hljs-type">size_t</span> queueSize = myQueue.<span class="hljs-built_in">size</span>();  <span class="hljs-comment">// queueSize现在是2</span><br></code></pre></td></tr></table></figure><ol start="6"><li><strong>empty()</strong>: 检查队列是否为空，如果为空则返回<code>true</code>，否则返回<code>false</code>。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::queue&lt;<span class="hljs-type">int</span>&gt; myQueue;  <br><span class="hljs-type">bool</span> isEmpty = myQueue.<span class="hljs-built_in">empty</span>();  <span class="hljs-comment">// isEmpty现在是true，因为队列是空的  </span><br>myQueue.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);  <br>isEmpty = myQueue.<span class="hljs-built_in">empty</span>();  <span class="hljs-comment">// isEmpty现在是false，因为队列中有一个元素</span><br></code></pre></td></tr></table></figure><p>与<code>stack</code>类似，虽然队列容器适配器提供了对其底层容器的一些访问，但通常最好坚持使用队列自己的成员函数来保持其FIFO特性。在实际编程中，最常用的操作通常是<code>push()</code>, <code>pop()</code>, <code>front()</code>, 和<code>back()</code>（如果使用C++11或更新版本）。这些操作直接对应于队列的基本概念和行为。</p><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><p><code>deque</code>（双端队列）提供了一系列常用操作，这些操作允许你在队列的两端添加或删除元素，以及进行其他相关操作。以下是一些<code>deque</code>的常用操作：</p><ol><li><p><strong>push_front(element)</strong>: 在<code>deque</code>的前端插入一个元素。</p></li><li><p><strong>push_back(element)</strong>: 在<code>deque</code>的后端插入一个元素。</p></li><li><p><strong>pop_front()</strong>: 移除<code>deque</code>前端的元素。</p></li><li><p><strong>pop_back()</strong>: 移除<code>deque</code>后端的元素。</p></li><li><p><strong>front()</strong>: 返回对<code>deque</code>第一个元素的引用，但不移除该元素。</p></li><li><p><strong>back()</strong>: 返回对<code>deque</code>最后一个元素的引用，但不移除该元素。</p></li><li><p><strong>size()</strong>: 返回<code>deque</code>中元素的数量。</p></li><li><p><strong>empty()</strong>: 检查<code>deque</code>是否为空，如果为空则返回<code>true</code>，否则返回<code>false</code>。</p></li><li><p><strong>clear()</strong>: 移除<code>deque</code>中的所有元素，使其变为空队列。</p></li><li><p><strong>begin() &#x2F; end()</strong>: 返回指向<code>deque</code>第一个元素和尾后元素的迭代器。</p></li><li><p><strong>rbegin() &#x2F; rend()</strong>: 返回指向<code>deque</code>最后一个元素和首前元素的逆向迭代器。</p></li><li><p><strong>insert(position, element)</strong>: 在指定位置插入一个或多个元素。</p></li><li><p><strong>erase(position)</strong>: 移除指定位置的元素。</p></li><li><p><strong>at(index)</strong>: 返回指定索引位置的元素引用。</p></li><li><p><strong>[]</strong>: 通过索引访问元素，类似于数组的下标操作。</p></li></ol><p>这些操作提供了对<code>deque</code>的基本控制和访问功能。需要注意的是，具体的方法和函数名称可能会根据你所使用的编程语言和库有所不同。例如，在C++的STL（Standard Template Library）中，<code>deque</code>是一个模板类，提供了上述的方法。在其他语言或库中，可能会有类似的功能，但名称和实现可能略有不同。</p><p>下面是一个简单的C++示例，展示了如何使用<code>deque</code>的一些基本操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::deque&lt;<span class="hljs-type">int</span>&gt; myDeque;<br><br>    <span class="hljs-comment">// 添加元素到队尾</span><br>    myDeque.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>    myDeque.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>    myDeque.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br><br>    <span class="hljs-comment">// 添加元素到队首</span><br>    myDeque.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">5</span>);<br>    myDeque.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 输出deque的内容</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : myDeque) &#123;<br>        std::cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    std::cout &lt;&lt; std::endl; <span class="hljs-comment">// 输出: 0 5 10 20 30</span><br><br>    <span class="hljs-comment">// 移除队首和队尾的元素</span><br>    myDeque.<span class="hljs-built_in">pop_front</span>();<br>    myDeque.<span class="hljs-built_in">pop_back</span>();<br><br>    <span class="hljs-comment">// 再次输出deque的内容</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : myDeque) &#123;<br>        std::cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    std::cout &lt;&lt; std::endl; <span class="hljs-comment">// 输出: 5 10 20</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><p>在C++中，可以使用 <code>std::priority_queue</code> 来实现优先队列。优先队列是一个容器，其中的元素按照一定的优先级顺序进行排列，具有较高优先级的元素会在队列的前面。</p><p>以下是一个简单的示例，展示了如何使用 <code>std::priority_queue</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建一个整数优先队列，默认是最大堆</span><br>    std::priority_queue&lt;<span class="hljs-type">int</span>&gt; maxHeap;<br><br>    <span class="hljs-comment">// 插入一些元素</span><br>    maxHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">30</span>);<br>    maxHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);<br>    maxHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">50</span>);<br>    maxHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">20</span>);<br><br>    <span class="hljs-comment">// 访问队列顶部元素</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Top element of max heap: &quot;</span> &lt;&lt; maxHeap.<span class="hljs-built_in">top</span>() &lt;&lt; std::endl;<br><br>    <span class="hljs-comment">// 弹出队列顶部元素</span><br>    maxHeap.<span class="hljs-built_in">pop</span>();<br><br>    <span class="hljs-comment">// 输出剩余元素</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Elements in max heap after popping: &quot;</span>;<br>    <span class="hljs-keyword">while</span> (!maxHeap.<span class="hljs-built_in">empty</span>()) &#123;<br>        std::cout &lt;&lt; maxHeap.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        maxHeap.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码首先创建了一个整数优先队列 <code>maxHeap</code>，并将一些整数元素插入其中。然后，它访问并输出了队列中的顶部元素，接着弹出了顶部元素，并输出了弹出后队列中剩余的元素。 </p><p>需要注意的是，默认情况下，<code>std::priority_queue</code> 是使用 <code>std::less</code> 来实现的，因此默认是最大堆。如果要使用最小堆，需要指定比较函数，可以通过传递第三个参数来实现，例如 <code>std::priority_queue&lt;int, std::vector&lt;int&gt;, std::greater&lt;int&gt;&gt; minHeap;</code> 就是创建一个最小堆。</p><p>要自定义比较函数，你需要提供一个函数或者函数对象，该函数或对象用于定义元素之间的比较规则。在C++中，可以使用函数或者函数对象作为比较函数。以下是两种方式的示例：</p><p><strong>方式一：使用函数</strong>(建议不要用 有点看不懂decltype这个推断关键字)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-comment">// 自定义比较函数，用于最小堆</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">customCompare</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b; <span class="hljs-comment">// 降序排列</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建一个整数优先队列，使用自定义比较函数</span><br>    std::priority_queue&lt;<span class="hljs-type">int</span>, std::vector&lt;<span class="hljs-type">int</span>&gt;, <span class="hljs-keyword">decltype</span>(&amp;customCompare)&gt; <span class="hljs-built_in">minHeap</span>(customCompare);<br><br>    <span class="hljs-comment">// 插入一些元素</span><br>    minHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">30</span>);<br>    minHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);<br>    minHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">50</span>);<br>    minHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">20</span>);<br><br>    <span class="hljs-comment">// 输出最小堆中的元素</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Elements in min heap: &quot;</span>;<br>    <span class="hljs-keyword">while</span> (!minHeap.<span class="hljs-built_in">empty</span>()) &#123;<br>        std::cout &lt;&lt; minHeap.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        minHeap.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方式二：使用函数对象（仿函数）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-comment">// 自定义比较仿函数，用于最小堆</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">CustomCompare</span> &#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a &gt; b; <span class="hljs-comment">// 降序排列</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建一个整数优先队列，使用自定义比较仿函数</span><br>    std::priority_queue&lt;<span class="hljs-type">int</span>, std::vector&lt;<span class="hljs-type">int</span>&gt;, CustomCompare&gt; minHeap;<br><br>    <span class="hljs-comment">// 插入一些元素</span><br>    minHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">30</span>);<br>    minHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);<br>    minHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">50</span>);<br>    minHeap.<span class="hljs-built_in">push</span>(<span class="hljs-number">20</span>);<br><br>    <span class="hljs-comment">// 输出最小堆中的元素</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Elements in min heap: &quot;</span>;<br>    <span class="hljs-keyword">while</span> (!minHeap.<span class="hljs-built_in">empty</span>()) &#123;<br>        std::cout &lt;&lt; minHeap.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        minHeap.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    std::cout &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>优先的大小和比较是反着的，如最大优先用的是less函数比较，最小优先使用的是greater函数进行比较</strong></p><p>后来发现还能这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<span class="hljs-comment">//堆里存储距离和节点编号</span><br>priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<span class="hljs-comment">//小根堆</span><br></code></pre></td></tr></table></figure><p>在C++中，<code>std::greater&lt;pair&lt;int, int&gt;&gt;</code> 是一个功能对象（也称为仿函数），它定义了一个“大于”关系，用于比较两个 <code>std::pair&lt;int, int&gt;</code> 对象。</p><p>具体来说，<code>std::greater&lt;T&gt;</code> 是一个模板类，它提供了一个函数调用操作符 <code>operator()</code>，该操作符接受两个类型为 <code>T</code> 的参数，并返回一个布尔值，表示第一个参数是否大于第二个参数。</p><p>当 <code>T</code> 是 <code>std::pair&lt;int, int&gt;</code> 时，<code>std::greater&lt;pair&lt;int, int&gt;&gt;</code> 就可以用来比较两个 <code>std::pair&lt;int, int&gt;</code> 对象。比较的方式是首先比较 <code>pair</code> 的第一个元素，如果第一个元素相等，则比较第二个元素。</p><p>举个例子，假设你有两个 <code>pair&lt;int, int&gt;</code> 对象：<code>p1 = &#123;3, 2&#125;</code> 和 <code>p2 = &#123;2, 5&#125;</code>。使用 <code>std::greater&lt;pair&lt;int, int&gt;&gt;</code> 来比较它们时，会先比较第一个元素。因为 <code>p1</code> 的第一个元素（3）大于 <code>p2</code> 的第一个元素（2），所以 <code>std::greater&lt;pair&lt;int, int&gt;&gt;()(p1, p2)</code> 会返回 <code>true</code>。</p><h2 id="关于深拷贝"><a href="#关于深拷贝" class="headerlink" title="关于深拷贝"></a>关于深拷贝</h2><p>在构造函数和赋值的时候都是深拷贝</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;list&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-function">string <span class="hljs-title">s1</span><span class="hljs-params">(<span class="hljs-string">&quot;hello&quot;</span>)</span></span>;<br>    <span class="hljs-function">string <span class="hljs-title">s2</span><span class="hljs-params">(s1)</span></span>;<br>    <span class="hljs-built_in">reverse</span>(s2.<span class="hljs-built_in">begin</span>(),s2.<span class="hljs-built_in">end</span>());<br>    cout&lt;&lt;s1&lt;&lt;<span class="hljs-string">&quot;---&quot;</span>&lt;&lt;s2;<span class="hljs-comment">//hello---olleh</span><br>    cout&lt;&lt;endl;<br><br>    list&lt;<span class="hljs-type">int</span>&gt; l1&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>    list&lt;<span class="hljs-type">int</span>&gt; l2=l1;<br>    <span class="hljs-built_in">reverse</span>(l2.<span class="hljs-built_in">begin</span>(),l2.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:l1)&#123;<br>        cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<span class="hljs-comment">// 1 2 3</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关于去重"><a href="#关于去重" class="headerlink" title="关于去重"></a>关于去重</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span>  </span><br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    std::vector&lt;<span class="hljs-type">int</span>&gt; myVector = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">33</span>, <span class="hljs-number">55</span>&#125;;  <br>      <br>    <span class="hljs-comment">// 排序  </span><br>    std::<span class="hljs-built_in">sort</span>(myVector.<span class="hljs-built_in">begin</span>(), myVector.<span class="hljs-built_in">end</span>());  <br>      <br>    <span class="hljs-comment">// 去重  </span><br>    std::vector&lt;<span class="hljs-type">int</span>&gt;::iterator dupilcated = std::<span class="hljs-built_in">unique</span>(myVector.<span class="hljs-built_in">begin</span>(), myVector.<span class="hljs-built_in">end</span>());  <br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:myVector)&#123;<br>        std::cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&#x27;*&#x27;</span>;<span class="hljs-comment">//3*4*5*6*33*55*6*33*55</span><br>    &#125;<br>      <br>    <span class="hljs-comment">// 擦除重复元素  </span><br>    myVector.<span class="hljs-built_in">erase</span>(dupilcated, myVector.<span class="hljs-built_in">end</span>());  <br>      <br>    <span class="hljs-comment">// 输出结果  </span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; num : myVector) &#123;  <br>        std::cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">//3 4 5 6 33 55</span><br>    &#125;  <br>      <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>为什么这种方法可以把所有重复的元素都去除了，而不是只去除一个？</p></blockquote><blockquote><p>这种方法能够去除所有重复的元素，而不仅仅是去除一个，是因为它结合了排序和去重的操作。让我们详细分析一下这个过程：</p><ol><li><strong>排序</strong>：首先，<code>std::sort</code>函数对<code>vector</code>中的所有元素进行排序。排序是一个关键的步骤，因为它确保了所有重复的元素都相邻排列在一起。如果没有排序，那么重复的元素可能会分布在<code>vector</code>的不同位置，这使得去重变得更加复杂。</li><li><strong>去重</strong>：接下来，<code>std::unique</code>函数被用来去重。<code>std::unique</code>函数的工作原理是，它遍历排序后的<code>vector</code>，并将每个不重复的元素移动到它应该在的位置（即它首次出现的位置）。同时，它将所有重复的元素移动到<code>vector</code>的末尾，但并不从容器中删除它们。<code>std::unique</code>返回一个迭代器，指向最后一个不重复元素之后的位置。</li></ol><p>由于<code>vector</code>已经被排序，<code>std::unique</code>能够确保每个不重复的元素只出现一次，并且所有重复的元素都被移动到<code>vector</code>的末尾。</p><ol><li><strong>擦除</strong>：最后，使用<code>vector</code>的<code>erase</code>成员函数来删除从<code>std::unique</code>返回的迭代器位置到<code>vector</code>末尾的所有元素。这些元素就是所有重复的元素，因为<code>std::unique</code>已经将它们移动到了<code>vector</code>的末尾。</li></ol><p>通过这种方式，所有重复的元素都被有效地从<code>vector</code>中删除了，只剩下不重复的元素。</p><p>需要注意的是，<code>std::unique</code>函数仅适用于已排序的范围。如果<code>vector</code>没有事先排序，那么<code>std::unique</code>将不能正确地去除所有重复的元素。因此，在使用<code>std::unique</code>之前进行排序是至关重要的一步。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法笔记</title>
    <link href="/2024/04/09/algorithm/"/>
    <url>/2024/04/09/algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="算法笔记"><a href="#算法笔记" class="headerlink" title="算法笔记"></a>算法笔记</h1><p>跟着<a href="https://www.acwing.com/activity/content/11/">活动 - AcWing</a>来</p><h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>理解：<a href="https://zhuanlan.zhihu.com/p/350934702">快速排序（图解+C代码） - 知乎 (zhihu.com)</a></p><p>自己手搓的c语言实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">q_sort</span><span class="hljs-params">(<span class="hljs-type">int</span>*nums,<span class="hljs-type">int</span> begin,<span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-keyword">if</span> (begin &gt;= end) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> base = nums[begin];<br>    <span class="hljs-type">int</span> orgin_begin = begin;<br>    <span class="hljs-type">int</span> orgin_end = end;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (end&gt;begin)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (flag) &#123;<br>            <span class="hljs-keyword">if</span> (nums[end] &lt; base) &#123;<br>                flag = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            end--;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <br><br>            <span class="hljs-keyword">if</span> (nums[begin] &gt; base) &#123;<br>                flag = <span class="hljs-number">1</span>;<br>                <span class="hljs-type">int</span> tmp = nums[begin];<br>                nums[begin] = nums[end];<br>                nums[end] = tmp;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            begin++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> tmp = nums[begin];<br>    nums[begin] = base;<br>    nums[orgin_begin] = tmp;<br>    q_sort(nums, orgin_begin, begin - <span class="hljs-number">1</span>);<br>    q_sort(nums, begin + <span class="hljs-number">1</span>, orgin_end);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-type">int</span> *num = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*n); <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, num + i);<br>    &#125;<br><br>    q_sort(num,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<span class="hljs-comment">//注意这里要是n-1</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, num[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>人工智能写的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> begin, <span class="hljs-type">int</span> end)</span> </span>&#123;  <br>    <span class="hljs-type">int</span> pivot = nums[begin]; <span class="hljs-comment">// 选择第一个元素作为基准  </span><br>    <span class="hljs-type">int</span> i = begin + <span class="hljs-number">1</span>, j = end;  <br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;  <br>        <span class="hljs-keyword">while</span> (i &lt;= j &amp;&amp; nums[i] &lt; pivot) i++;  <br>        <span class="hljs-keyword">while</span> (i &lt;= j &amp;&amp; nums[j] &gt; pivot) j--;  <br>        <span class="hljs-keyword">if</span> (i &gt;= j) <span class="hljs-keyword">break</span>;  <br>        <span class="hljs-built_in">swap</span>(nums[i++], nums[j--]);  <br>    &#125;  <br>    <span class="hljs-built_in">swap</span>(nums[begin], nums[j]); <span class="hljs-comment">// 将基准值放到正确的位置  </span><br>    <span class="hljs-keyword">return</span> j; <span class="hljs-comment">// 返回基准值的索引  </span><br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">q_sort</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> begin, <span class="hljs-type">int</span> end)</span> </span>&#123;  <br>    <span class="hljs-keyword">if</span> (begin &lt; end) &#123;  <br>        <span class="hljs-type">int</span> pivot_index = <span class="hljs-built_in">partition</span>(nums, begin, end); <span class="hljs-comment">// 获取基准值的索引  </span><br>        <span class="hljs-built_in">q_sort</span>(nums, begin, pivot_index - <span class="hljs-number">1</span>); <span class="hljs-comment">// 对基准值左边的部分进行递归排序  </span><br>        <span class="hljs-built_in">q_sort</span>(nums, pivot_index + <span class="hljs-number">1</span>, end); <span class="hljs-comment">// 对基准值右边的部分进行递归排序  </span><br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-comment">// main 函数保持不变...</span><br></code></pre></td></tr></table></figure><p><img src="/2024/04/09/algorithm/image-20240409160922094.png" alt="全部超时，乐"></p><h3 id="第K小的数"><a href="#第K小的数" class="headerlink" title="第K小的数"></a>第K小的数</h3><p>这老哥的方法无敌</p><p><a href="https://www.acwing.com/solution/content/4502/">AcWing 786. 写一个和yxc大佬不同但差不多思想的方法，代码更简单 - AcWing</a></p><p><img src="/2024/04/09/algorithm/image-20240409162204857.png" alt="image-20240409162204857"></p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>看这个 <a href="https://www.acwing.com/solution/content/138050/">AcWing 787- AcWing</a></p><p>感觉非常清楚了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> a[N],tmp[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span> <span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> mid,<span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>,i = l,j = mid+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] &lt;= a[j]) tmp[k++] = a[i++];<br>        <span class="hljs-keyword">else</span> tmp[k++] = a[j++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k++] = a[i++];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) tmp[k++] = a[j++];<br>    <span class="hljs-keyword">for</span> (i = l,j = <span class="hljs-number">1</span>;i &lt;= r;i++,j++) a[i] = tmp[j];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mergeSort</span> <span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">mergeSort</span> (a,l,mid);<br>    <span class="hljs-built_in">mergeSort</span> (a,mid + <span class="hljs-number">1</span>,r);<br>    <span class="hljs-built_in">merge</span> (a,l,mid,r);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++) cin &gt;&gt; a[i];<br>    <span class="hljs-built_in">mergeSort</span> (a,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++) cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="逆序对的数量"><a href="#逆序对的数量" class="headerlink" title="逆序对的数量"></a>逆序对的数量</h3><p><a href="https://www.acwing.com/problem/content/790/">788. 逆序对的数量 - AcWing题库</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span>  cnt = <span class="hljs-number">0</span>;<br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator it;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> be, <span class="hljs-type">int</span> end)</span> </span>&#123;<br>    <span class="hljs-comment">// 处理范围:[be,end-1]</span><br>    <span class="hljs-keyword">if</span> (be &gt;= end<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 分解为子问题</span><br>    <span class="hljs-type">int</span> mid = (be+end) / <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">// 解决子问题</span><br>    <span class="hljs-built_in">func</span>(nums, be, mid);<br>    <span class="hljs-built_in">func</span>(nums, mid, end);<br>    <span class="hljs-comment">// 合并解</span><br>    <span class="hljs-type">int</span> i = be, j = mid;<br>    <span class="hljs-keyword">while</span> (i &lt; mid &amp;&amp; j &lt; end) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] &lt;= nums[j]) &#123;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 逆序情况</span><br>            j++;<br>            cnt = cnt + mid - i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(it + be, it + end);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nums</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; nums[i];<br>    &#125;<br>    it = nums.<span class="hljs-built_in">begin</span>();<br><br>    <span class="hljs-built_in">func</span>(nums, <span class="hljs-number">0</span>, n);<br><br>    cout &lt;&lt; cnt;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里要注意的是把一个列表传给函数，要注意是要传引用而不是传赋值。</p><p>还有就是<code>cnt</code>这种东西还是用<code>long long</code>的好</p><h3 id="数的范围"><a href="#数的范围" class="headerlink" title="数的范围"></a>数的范围</h3><p><a href="https://www.acwing.com/activity/content/problem/content/823/">https://www.acwing.com/activity/content/problem/content/823/</a></p><p>算是自己写出来了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,q;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;n,&amp;q);<br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; map_begin;<br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; map_end;<br>    <span class="hljs-type">int</span> last=<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> now =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;now);<br>        <span class="hljs-keyword">if</span>(!i)&#123;<br>            last=now;<br>            map_begin[now]=i;<br>            <br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(last == now)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            map_end[last]=i<span class="hljs-number">-1</span>;<br>            last=now;<br>            map_begin[now]=i;<span class="hljs-comment">//map_begin.insert(now,i);</span><br>        &#125;<br><br>    &#125;<br>    map_end[last]=n<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span>* query=(<span class="hljs-type">int</span>* )<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>)*q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;query[i]);<br>        <br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q;i++)&#123;<br>        <span class="hljs-keyword">auto</span> it_begin=map_begin.<span class="hljs-built_in">find</span>(query[i]);<br>        <span class="hljs-keyword">if</span>(it_begin==map_begin.<span class="hljs-built_in">end</span>())&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1 -1\n&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,map_begin[query[i]],map_end[query[i]]);<br>    &#125;<br>    <br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><p>我是天才</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;list&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    string s1;<br>    string s2;<br><br>    cin &gt;&gt; s1;<br>    cin&gt;&gt;s2;<br>    <span class="hljs-keyword">if</span>(s1.<span class="hljs-built_in">length</span>()&gt;s2.<span class="hljs-built_in">length</span>()) <span class="hljs-built_in">swap</span>(s1,s2);<br>    <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br>    string s3;<br>    <span class="hljs-built_in">reverse</span>(s1.<span class="hljs-built_in">begin</span>(),s1.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">reverse</span>(s2.<span class="hljs-built_in">begin</span>(),s2.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s1.<span class="hljs-built_in">length</span>();i++)&#123;<br>        <span class="hljs-type">char</span> c1=s1[i];<br>        <span class="hljs-type">char</span> c2=s2[i];<br>        <span class="hljs-type">int</span> i1=<span class="hljs-built_in">int</span>(c1)-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-type">int</span> i2=<span class="hljs-built_in">int</span>(c2)-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-type">int</span> i3=(i1+i2+flag)%<span class="hljs-number">10</span>;<br>        flag=(i1+i2+flag)/<span class="hljs-number">10</span>;<br>        <span class="hljs-type">char</span> c3=<span class="hljs-built_in">char</span>(i3+<span class="hljs-string">&#x27;0&#x27;</span>);<br>        s3.<span class="hljs-built_in">push_back</span>(c3);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=s1.<span class="hljs-built_in">length</span>();i&lt;s2.<span class="hljs-built_in">length</span>();i++)&#123;<br>        <span class="hljs-type">int</span> i1=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">char</span> c2=s2[i];<br>        <span class="hljs-type">int</span> i2=<span class="hljs-built_in">int</span>(c2)-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-type">int</span> i3=(i1+i2+flag)%<span class="hljs-number">10</span>;<br>        flag=(i1+i2+flag)/<span class="hljs-number">10</span>;<br>        <span class="hljs-type">char</span> c3=<span class="hljs-built_in">char</span>(i3+<span class="hljs-string">&#x27;0&#x27;</span>);<br>        s3.<span class="hljs-built_in">push_back</span>(c3);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(flag) s3.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&#x27;1&#x27;</span>);<br>    <span class="hljs-built_in">reverse</span>(s3.<span class="hljs-built_in">begin</span>(),s3.<span class="hljs-built_in">end</span>());<br>    cout&lt;&lt;s3;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>就是这个’0’的加减有点没适应过来</p><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><p><a href="https://www.acwing.com/solution/content/27238/">AcWing 795. 前缀和 【c++详细题解】 - AcWing</a></p><h3 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;list&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> num[<span class="hljs-number">100000</span>];<br><span class="hljs-type">int</span> res[<span class="hljs-number">100000</span>];<span class="hljs-comment">//res[i]=num[i]-num[i-1]</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;num[i]);<br>        res[i]=num[i]-num[i<span class="hljs-number">-1</span>];<br>        <br>    &#125;<br>    <span class="hljs-type">int</span> l,r,c;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,&amp;l,&amp;r,&amp;c);<br>        res[l]+=c;<br>        res[r+<span class="hljs-number">1</span>]-=c;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        num[i]=res[i]+num[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,num[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>i从1开始这点挺妙的</p><h3 id="差分矩阵"><a href="#差分矩阵" class="headerlink" title="差分矩阵"></a>差分矩阵</h3><p><a href="https://www.acwing.com/solution/content/27325/">AcWing 798. 差分矩阵 【 c++详细题解 】 - AcWing</a></p><p>这个解答的图示做的非常好</p><h3 id="最长不重复子序列"><a href="#最长不重复子序列" class="headerlink" title="最长不重复子序列"></a>最长不重复子序列</h3><p><a href="https://www.acwing.com/solution/content/13491/">AcWing 799. 画个简图辅助理解 - AcWing</a></p><p><img src="/2024/04/09/algorithm/image-20240410100654396.png" alt="关于循环"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-type">int</span> v[<span class="hljs-number">100002</span>];<br><span class="hljs-type">int</span> f[<span class="hljs-number">100002</span>];<span class="hljs-comment">//频率记录</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    std::cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; v[i];<br>        f[v[i]]++;<span class="hljs-comment">//频率+1</span><br>        <span class="hljs-keyword">while</span> (f[v[i]] &gt; <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//有重复</span><br>            f[v[j]]--;<span class="hljs-comment">//前面的指针向后移动 直到排除这个重复元素</span><br>            j++;<br>        &#125;<br>        ans = <span class="hljs-built_in">max</span>(ans, i - j + <span class="hljs-number">1</span>);<br>    &#125;<br>    cout &lt;&lt; ans;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里要注意的是f这个东西的大小必须大于v[i]的大小，而不是大于n的大小</p><h3 id="数组元素的目标和"><a href="#数组元素的目标和" class="headerlink" title="数组元素的目标和"></a>数组元素的目标和</h3><p><a href="https://www.acwing.com/problem/content/802/">800. 数组元素的目标和 - AcWing题库</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m, x;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">A</span><span class="hljs-params">(n)</span>, <span class="hljs-title">B</span><span class="hljs-params">(m)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; A[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>        cin &gt;&gt; B[j];<br>    &#125;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = m<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span> (A[i] + B[j] != x) &#123;<br>        <span class="hljs-keyword">if</span> (A[i] + B[j] &gt; x) j--;<br>        <span class="hljs-keyword">if</span> (A[i] + B[j] &lt; x) i++;<br>    &#125;<br>    cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; j;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>双指针算法，不难</p><h3 id="计算二进制中1的数量"><a href="#计算二进制中1的数量" class="headerlink" title="计算二进制中1的数量"></a>计算二进制中1的数量</h3><p><a href="https://www.acwing.com/solution/content/2370/">https://www.acwing.com/solution/content/2370/</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;list&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbits</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span>&#123;<br>    <span class="hljs-comment">// 找出最后一个1及其后面的数</span><br>    <span class="hljs-keyword">return</span> num&amp;(-num);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,t;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;t;<br>        <span class="hljs-type">int</span> cnt_1=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(t) &#123;t-=<span class="hljs-built_in">lowbits</span>(t);cnt_1++;&#125;<br>        cout&lt;&lt;cnt_1&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h3><p><a href="https://www.acwing.com/problem/content/805/">803. 区间合并 - AcWing题库</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>priority_queue &lt; pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&gt; pqii;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> l, r;<br>        cin &gt;&gt; l &gt;&gt; r;<br>        pqii.<span class="hljs-built_in">push</span>(&#123;l, r&#125;);<br>    &#125;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> last_r = <span class="hljs-number">-1e9</span> - <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span> (!pqii.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> l=pqii.<span class="hljs-built_in">top</span>().first;<br>        <span class="hljs-type">int</span> r = pqii.<span class="hljs-built_in">top</span>().second;<br>        pqii.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (last_r &lt; l) &#123;<br>            cnt += <span class="hljs-number">1</span>;<br>            last_r = r;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            last_r = <span class="hljs-built_in">max</span>(last_r, r);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; cnt;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><p><a href="https://www.acwing.com/problem/content/832/">830. 单调栈 - AcWing题库</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 这题的关键是建立一个上大下小的栈</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n; <br>cin &gt;&gt; n;<br>stack&lt;<span class="hljs-type">int</span>&gt; stk;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">int</span> j = <span class="hljs-number">-1</span>;<br>cin &gt;&gt; j;<br><span class="hljs-keyword">while</span> (!stk.<span class="hljs-built_in">empty</span>()) &#123;<br><span class="hljs-keyword">if</span> (j &gt; stk.<span class="hljs-built_in">top</span>()) &#123;<br><span class="hljs-comment">// 比栈顶更大则加入</span><br>cout &lt;&lt; stk.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>stk.<span class="hljs-built_in">push</span>(j);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 比栈顶更小则出栈保证栈顶大于栈底</span><br>stk.<span class="hljs-built_in">pop</span>();<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (stk.<span class="hljs-built_in">empty</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>stk.<span class="hljs-built_in">push</span>(j);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><p><a href="https://www.acwing.com/solution/content/97229/">AcWing 154. 滑动窗口—海绵宝宝来喽 - AcWing</a></p><p>这里用队列的原因是为了某个元素被滑动窗口滑出后，还能找到下一个候选元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n,k; <br>cin &gt;&gt; n &gt;&gt; k;<br>deque&lt;<span class="hljs-type">int</span>&gt; qmax, qmin;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">1</span>) &#123;<br>cin &gt;&gt; v[i];<br>&#125;<br><span class="hljs-comment">// 处理最小值</span><br><span class="hljs-comment">// 初始化为一个单调递增的队列 即队头小于队尾</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br><span class="hljs-keyword">while</span> (!qmin.<span class="hljs-built_in">empty</span>() &amp;&amp; v[i] &lt; qmin.<span class="hljs-built_in">back</span>()) &#123;<br>qmin.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><span class="hljs-comment">// 此时新元素小于队尾或者队列为空</span><br>qmin.<span class="hljs-built_in">push_back</span>(v[i]);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = k; i &lt; n; i += <span class="hljs-number">1</span>) &#123;<br>cout &lt;&lt; qmin.<span class="hljs-built_in">front</span>() &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">if</span> (qmin.<span class="hljs-built_in">front</span>() == v[i - k]) qmin.<span class="hljs-built_in">pop_front</span>();<span class="hljs-comment">//该移出了</span><br><br><span class="hljs-keyword">while</span> (!qmin.<span class="hljs-built_in">empty</span>() &amp;&amp; v[i] &lt; qmin.<span class="hljs-built_in">back</span>()) &#123;<br>qmin.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><span class="hljs-comment">// 此时新元素小于队尾或者队列为空</span><br>qmin.<span class="hljs-built_in">push_back</span>(v[i]);<br>&#125;<br><span class="hljs-comment">// 输出最后一个</span><br>cout &lt;&lt; qmin.<span class="hljs-built_in">front</span>() &lt;&lt; endl;<br><br><br><span class="hljs-comment">// 处理最大值</span><br><span class="hljs-comment">// 初始化为一个单调递减的队列 即队头大于队尾</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br><span class="hljs-keyword">while</span> (!qmax.<span class="hljs-built_in">empty</span>() &amp;&amp; v[i] &gt; qmax.<span class="hljs-built_in">back</span>()) &#123;<br>qmax.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><span class="hljs-comment">// 此时新元素大于队尾或者队列为空</span><br>qmax.<span class="hljs-built_in">push_back</span>(v[i]);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = k; i &lt; n; i += <span class="hljs-number">1</span>) &#123;<br>cout &lt;&lt; qmax.<span class="hljs-built_in">front</span>() &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">if</span>(qmax.<span class="hljs-built_in">front</span>() == v[i-k]) qmax.<span class="hljs-built_in">pop_front</span>();<span class="hljs-comment">//该移出了</span><br><br><span class="hljs-keyword">while</span> (!qmax.<span class="hljs-built_in">empty</span>() &amp;&amp; v[i] &gt; qmax.<span class="hljs-built_in">back</span>()) &#123;<br>qmax.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><span class="hljs-comment">// 此时新元素大于队尾或者队列为空</span><br>qmax.<span class="hljs-built_in">push_back</span>(v[i]);<br>&#125;<br><span class="hljs-comment">// 输出最后一个</span><br>cout &lt;&lt; qmax.<span class="hljs-built_in">front</span>() &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Trie字符串统计"><a href="#Trie字符串统计" class="headerlink" title="Trie字符串统计"></a>Trie字符串统计</h3><p><a href="https://www.acwing.com/problem/content/837/">835. Trie字符串统计 - AcWing题库</a></p><p>就当学习一下unordered_map的使用了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> N;<br>    cin &gt;&gt; N;<br><br>    unordered_map&lt;string, <span class="hljs-type">int</span>&gt; string_count;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) &#123;<br>        string operation, str;<br>        cin &gt;&gt; operation &gt;&gt; str;<br><br>        <span class="hljs-keyword">if</span> (operation == <span class="hljs-string">&quot;I&quot;</span>) &#123;<br>            string_count[str]++;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (operation == <span class="hljs-string">&quot;Q&quot;</span>) &#123;<br>            cout &lt;&lt; string_count[str] &lt;&lt; endl;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="最大异或对"><a href="#最大异或对" class="headerlink" title="最大异或对"></a>最大异或对</h3><p><a href="https://www.acwing.com/problem/content/145/">143. 最大异或对 - AcWing题库</a></p><p>为了得到两个整数的异或结果最大值，我们可以使用一种基于字典树（Trie）的算法。具体步骤如下：</p><ol><li>初始化一个空的字典树（Trie），每个节点可以有两个子节点，分别代表下一位是0或者1。</li><li>遍历所有给定的整数，将它们转换成二进制形式，并将每个整数的二进制表示插入到字典树中。插入的时候，从最高位（二进制的最左边）开始，依次向下创建或遍历节点。</li><li>再次遍历所有给定的整数，对于每个整数，在字典树中查找一个路径，使得该路径上每一位尽可能与该整数的对应位不同（因为异或运算中，相同位异或结果为0，不同位异或结果为1，所以为了得到最大值，我们希望尽可能找到不同的位）。这样我们就能得到该整数与字典树中某个数异或的最大值。</li><li>在遍历所有整数并计算每个整数可能得到的最大异或值之后，选择其中的最大值作为答案。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieNode</span> &#123;  <br><span class="hljs-keyword">public</span>:  <br>    TrieNode* children[<span class="hljs-number">2</span>];  <br>  <br>    <span class="hljs-built_in">TrieNode</span>() &#123;  <br>        children[<span class="hljs-number">0</span>] = <span class="hljs-literal">NULL</span>;  <br>        children[<span class="hljs-number">1</span>] = <span class="hljs-literal">NULL</span>;  <br>    &#125;  <br>&#125;;  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;  <br><span class="hljs-keyword">private</span>:  <br>    TrieNode* root;  <br>  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(TrieNode* root, <span class="hljs-type">int</span> num)</span> </span>&#123;  <br>        TrieNode* node = root;  <br>  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">31</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;  <br>            <span class="hljs-type">int</span> bit = (num &gt;&gt; i) &amp; <span class="hljs-number">1</span>;  <br>            <span class="hljs-keyword">if</span> (node-&gt;children[bit] == <span class="hljs-literal">NULL</span>) &#123;  <br>                node-&gt;children[bit] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TrieNode</span>();  <br>            &#125;  <br>            node = node-&gt;children[bit];  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMaximumXOR</span><span class="hljs-params">(TrieNode* root, <span class="hljs-type">int</span> num)</span> </span>&#123;  <br>        TrieNode* node = root;  <br>        <span class="hljs-type">int</span> xorResult = <span class="hljs-number">0</span>;  <br>  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">31</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;  <br>            <span class="hljs-type">int</span> bit = (num &gt;&gt; i) &amp; <span class="hljs-number">1</span>;  <br>            <span class="hljs-type">int</span> oppositeBit = <span class="hljs-number">1</span> - bit;  <br>  <br>            <span class="hljs-keyword">if</span> (node-&gt;children[oppositeBit] != <span class="hljs-literal">NULL</span>) &#123;  <br>                xorResult |= (<span class="hljs-number">1</span> &lt;&lt; i);  <br>                node = node-&gt;children[oppositeBit];  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                node = node-&gt;children[bit];  <br>            &#125;  <br>        &#125;  <br>  <br>        <span class="hljs-keyword">return</span> xorResult;  <br>    &#125;  <br>  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Trie</span>() &#123;  <br>        root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TrieNode</span>();  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;  <br>        <span class="hljs-built_in">insert</span>(root, num);  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMaximumXORHelper</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;  <br>        <span class="hljs-type">int</span> maxXOR = <span class="hljs-number">0</span>;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;  <br>            <span class="hljs-built_in">insert</span>(num);  <br>            <span class="hljs-type">int</span> currentXOR = <span class="hljs-built_in">findMaximumXOR</span>(root, num);  <br>            maxXOR = <span class="hljs-built_in">max</span>(maxXOR, currentXOR);  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> maxXOR;  <br>    &#125;  <br>&#125;;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMaximumXOR</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;  <br>    Trie trie;  <br>    <span class="hljs-keyword">return</span> trie.<span class="hljs-built_in">findMaximumXORHelper</span>(nums);  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-type">int</span> N;  <br>    cin &gt;&gt; N;  <br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nums</span><span class="hljs-params">(N)</span></span>;  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) &#123;  <br>        cin &gt;&gt; nums[i];  <br>    &#125;  <br>  <br>    cout &lt;&lt; <span class="hljs-built_in">findMaximumXOR</span>(nums) &lt;&lt; endl;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="合并集合"><a href="#合并集合" class="headerlink" title="合并集合"></a>合并集合</h3><p>并查集</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> num[<span class="hljs-number">100002</span>];<span class="hljs-comment">//0这个节点保留不用 故当num[i]==0 i节点为根</span><br><br><span class="hljs-comment">// 找到对应节点的根</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>    <span class="hljs-type">int</span> j=i;<br>    <span class="hljs-keyword">while</span> (num[j]) &#123;<br>        j = num[j];<br>    &#125;<br>    <span class="hljs-comment">// 找到根节点后进行路径优化</span><br>    <span class="hljs-keyword">while</span> (num[i]&amp;&amp;num[i]!=j) &#123;<span class="hljs-comment">//num[i]为0就不用优化了</span><br>        <span class="hljs-type">int</span> next = num[i];<br>        num[i] = j;<br>        i = next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> j;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-type">char</span> oper;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        cin &gt;&gt; oper &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-type">int</span> root_a = <span class="hljs-built_in">find</span>(a);<br>        <span class="hljs-type">int</span> root_b = <span class="hljs-built_in">find</span>(b);<br>        <span class="hljs-keyword">if</span> (oper == <span class="hljs-string">&#x27;M&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (root_b != root_a) &#123;<br>                num[root_b] = root_a;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (root_a != root_b) cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/solution/content/20690/">AcWing 836. 并查集(保姆级讲解) - AcWing</a></p><p>这是另外一种设计方法，当<code>num[id]==id</code>时代表该节点为根，它的优化方法比我的妙一点，用了递归</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100010</span>;<br><span class="hljs-type">int</span> p[N];<span class="hljs-comment">//定义多个集合</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(p[x]!=x) p[x]=<span class="hljs-built_in">find</span>(p[x]);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    经上述可以发现,每个集合中只有祖宗节点的p[x]值等于他自己,即:</span><br><span class="hljs-comment">    p[x]=x;</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">return</span> p[x];<br>    <span class="hljs-comment">//找到了便返回祖宗节点的值</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) p[i]=i;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">char</span> op[<span class="hljs-number">2</span>];<br>        <span class="hljs-type">int</span> a,b;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d%d&quot;</span>,op,&amp;a,&amp;b);<br>        <span class="hljs-keyword">if</span>(*op==<span class="hljs-string">&#x27;M&#x27;</span>) p[<span class="hljs-built_in">find</span>(a)]=<span class="hljs-built_in">find</span>(b);<span class="hljs-comment">//集合合并操作</span><br>        <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(a)==<span class="hljs-built_in">find</span>(b))<br>        <span class="hljs-comment">//如果祖宗节点一样,就输出yes</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="连通块中点的数量"><a href="#连通块中点的数量" class="headerlink" title="连通块中点的数量"></a>连通块中点的数量</h3><p><a href="https://www.acwing.com/problem/content/839/">837. 连通块中点的数量 - AcWing题库</a></p><p>和上面题目类似，就是可以选择将根节点的<code>num[id]</code>设置为<code>size</code></p><h3 id="食物链"><a href="#食物链" class="headerlink" title="食物链"></a>食物链</h3><p>带权并查集</p><p><a href="https://www.acwing.com/solution/content/1007/">AcWing 240. 食物链 - AcWing</a></p><p>需要按下面的评论改一下：</p><img src="/2024/04/09/algorithm/image-20240525120810894.png" alt="image-20240525120810894" style="zoom: 67%;"><h3 id="模拟散列表"><a href="#模拟散列表" class="headerlink" title="模拟散列表"></a>模拟散列表</h3><p><a href="https://www.acwing.com/problem/content/842/">840. 模拟散列表 - AcWing题库</a></p><p>就当是练练stl了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> N;<br>    cin &gt;&gt; N;<br>    unordered_set&lt;<span class="hljs-type">int</span>&gt; us;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-type">char</span> o;<br>        cin &gt;&gt; o &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-string">&#x27;I&#x27;</span>) &#123;<br>            us.<span class="hljs-built_in">insert</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (us.<span class="hljs-built_in">find</span>(x) != us.<span class="hljs-built_in">end</span>()) &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; endl;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><p><a href="https://www.acwing.com/solution/content/24738/">AcWing 841. 字符串哈希 【公式助理解】 - AcWing</a></p><p>设计hash函数，通过将字符串中的每个字符转成数字来将整个字符串转成p进制</p><p>再用$mod\ 2^{64}$的方法，如果超过了<code>unsigned long long</code>的范围，相当于取模了，非常巧妙</p><p>也用了前缀和的方法来计算子串和</p><h2 id="搜索与图论"><a href="#搜索与图论" class="headerlink" title="搜索与图论"></a>搜索与图论</h2><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><p><a href="https://www.acwing.com/problem/content/844/">842. 排列数字 - AcWing题库</a></p><p>这是一个排列树问题，是通过交换实现的遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; vi, <span class="hljs-type">int</span> l)</span> </span>&#123;<span class="hljs-comment">//l:已经确定l位</span><br>    <span class="hljs-keyword">if</span> (l == vi.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i += <span class="hljs-number">1</span>) &#123;<br>            cout &lt;&lt; vi[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;cout &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt; vi.<span class="hljs-built_in">size</span>(); i += <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">swap</span>(vi[l],vi[i]);<br>        <span class="hljs-built_in">backtrack</span>(vi, l + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//swap(vi[l], vi[i]);//这里交换了就不是字典序了</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vi</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">1</span>) &#123;<br>        vi[i] = i+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">backtrack</span>(vi, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>说实话，我也不是很懂为什么回溯的结束交换一下就不是字典序了，不交换就正确了，<strong>所以最好不要用</strong></p><p>但是可以看下面这种解法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">path, visited, n</span>):  <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(path) == n:  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, path)))  <br>        <span class="hljs-keyword">return</span>  <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):  <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> visited[i]:  <br>            visited[i] = <span class="hljs-literal">True</span>  <br>            path.append(i)  <br>            dfs(path, visited, n)  <br>            path.pop()  <br>            visited[i] = <span class="hljs-literal">False</span>  <br>  <br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())  <br>visited = [<span class="hljs-literal">False</span>] * (n + <span class="hljs-number">1</span>)  <br>dfs([], visited, n)<br></code></pre></td></tr></table></figure><p>可以用一个标志位来实现正确的遍历</p><h3 id="n皇后问题"><a href="#n皇后问题" class="headerlink" title="n皇后问题"></a>n皇后问题</h3><p><a href="https://www.acwing.com/problem/content/description/845/">843. n-皇后问题 - AcWing题库</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> vi[<span class="hljs-number">100002</span>];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> now)</span> </span>&#123;<span class="hljs-comment">//now is new to the solution</span><br>    <span class="hljs-comment">//任意两个皇后都不能处于同一行、同一列或同一斜线上</span><br>    <span class="hljs-type">int</span> r=now, c=vi[now];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; now; i++) &#123;<br>        <span class="hljs-keyword">if</span> (vi[i] == c) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(i - r) == <span class="hljs-built_in">abs</span>(c - vi[i])) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> vi[], <span class="hljs-type">int</span> l)</span> </span>&#123;<span class="hljs-comment">//0-&gt;l-1 is selected</span><br>    <span class="hljs-keyword">if</span> (l == n) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i += <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; l; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j == vi[i]) cout &lt;&lt; <span class="hljs-string">&quot;Q&quot;</span>;<br>                <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;.&quot;</span>;<br>            &#125;cout &lt;&lt; endl;<br>        &#125;cout &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt; n; i += <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">swap</span>(vi[l],vi[i]);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(l)) <span class="hljs-built_in">backtrack</span>(vi, l + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">swap</span>(vi[l], vi[i]);<span class="hljs-comment">//这里一定要恢复现场</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">1</span>) &#123;<br>        vi[i] = i;<br>    &#125;<br>    <span class="hljs-built_in">backtrack</span>(vi, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>总结：尽量用恢复现场的方法，如果dfs要求字典序，则要用一个标志数组来记录有没有遍历对应的位置</p><h3 id="走迷宫"><a href="#走迷宫" class="headerlink" title="走迷宫"></a>走迷宫</h3><p><a href="https://www.acwing.com/solution/content/36520/">AcWing 844. 走迷宫：图解+代码注释 - AcWing</a></p><p>这个解法对于四个走的方向的处理还是很妙的，使用了dx和dy两个4维数组存储四个方向的移动值来方便查询4个移动方向</p><p>最先走到终点的一定是最短路径，当然这题在记录层数的时候可以放一个-1在队列里面</p><h3 id="八数码"><a href="#八数码" class="headerlink" title="八数码"></a>八数码</h3><p><a href="https://www.acwing.com/solution/content/15149/">AcWing 845. 八数码 - AcWing</a></p><p>这个存状态有没有走过使用了字符串，感觉是比较妙的点</p><h3 id="树的重心"><a href="#树的重心" class="headerlink" title="树的重心"></a>树的重心</h3><p>这个感觉非常搞</p><p>大致思路：<a href="https://www.acwing.com/solution/content/4917/">AcWing 846. 树的重心 - AcWing</a></p><p>关于代码中的sum&#x2F;res&#x2F;ans的意义：<a href="https://www.acwing.com/solution/content/117855/">AcWing 846. 树的重心(把这道题研究成灰的题解) - AcWing</a></p><p>本题使用了树的邻接表表示方法，但不是用链表实现的</p><p>插入（头插法）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>; <span class="hljs-comment">//数据范围是10的5次方</span><br><span class="hljs-comment">//邻接表</span><br><span class="hljs-type">int</span> h[N], e[N * <span class="hljs-number">2</span>], ne[N * <span class="hljs-number">2</span>], idx;<span class="hljs-comment">//h数组的大小是节点数 e/ne的大小是边数</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    e[idx] = b;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h); <span class="hljs-comment">//初始化h数组 -1表示尾节点</span><br>    cin &gt;&gt; n; <span class="hljs-comment">//表示树的结点数</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-built_in">add</span>(a, b), <span class="hljs-built_in">add</span>(b, a); <span class="hljs-comment">//无向图</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.acwing.com/solution/content/104791/">遍历</a>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)  <br>&#123;<br>    cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;:&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=h[i];j!=<span class="hljs-number">-1</span>;j=ne[j])<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;-&gt;&quot;</span>&lt;&lt;e[j]; <br>    &#125;<br>    cout&lt;&lt;endl;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1:-&gt;4-&gt;7-&gt;2</span><br><span class="hljs-comment">2:-&gt;5-&gt;8-&gt;1</span><br><span class="hljs-comment">3:-&gt;9-&gt;4</span><br><span class="hljs-comment">4:-&gt;6-&gt;3-&gt;1</span><br><span class="hljs-comment">5:-&gt;2</span><br><span class="hljs-comment">6:-&gt;4</span><br><span class="hljs-comment">7:-&gt;1</span><br><span class="hljs-comment">8:-&gt;2</span><br><span class="hljs-comment">9:-&gt;3</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>关于h,e,ne讲的还算清楚的一个：</p><p><img src="/2024/04/09/algorithm/image-20240526102649875.png" alt="image-20240526102649875"></p><h3 id="有向图的拓扑序列"><a href="#有向图的拓扑序列" class="headerlink" title="有向图的拓扑序列"></a>有向图的拓扑序列</h3><p>超时了，所以说不要自己手搓类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">point</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> cout;<br>    <span class="hljs-type">static</span> set&lt;<span class="hljs-type">int</span>&gt; zero_in;<br>    <span class="hljs-type">int</span> id;<br>    set&lt;<span class="hljs-type">int</span>&gt; in;<br>    set&lt;<span class="hljs-type">int</span>&gt; out;<br>    <span class="hljs-built_in">point</span>() &#123;<br>        id = cout++;<br>        <span class="hljs-keyword">if</span>(id)zero_in.<span class="hljs-built_in">insert</span>(id);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>        in.<span class="hljs-built_in">erase</span>(id);<br>        <span class="hljs-keyword">if</span> (in.<span class="hljs-built_in">empty</span>()) &#123;<br>            zero_in.<span class="hljs-built_in">insert</span>(<span class="hljs-keyword">this</span>-&gt;id);<br>        &#125;<br>    &#125;<br>&#125;; <span class="hljs-type">int</span> point::cout = <span class="hljs-number">0</span>;<br>set&lt;<span class="hljs-type">int</span>&gt; point:: zero_in=<span class="hljs-built_in">set</span>&lt;<span class="hljs-type">int</span>&gt;();<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    string result;<br>    <span class="hljs-comment">//point* p = new point[n];</span><br>    <span class="hljs-function">vector&lt;point&gt; <span class="hljs-title">p</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>    set&lt;<span class="hljs-type">int</span>&gt; res;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        res.<span class="hljs-built_in">insert</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        p[a].out.<span class="hljs-built_in">insert</span>(b);<br>        point::zero_in.<span class="hljs-built_in">erase</span>(b);<br>        p[b].in.<span class="hljs-built_in">insert</span>(a);<br>    &#125;<br>    <span class="hljs-keyword">while</span> (point::zero_in.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-type">int</span> pi = *(point::zero_in.<span class="hljs-built_in">begin</span>());<br>        point::zero_in.<span class="hljs-built_in">erase</span>(pi);<br>        res.<span class="hljs-built_in">erase</span>(pi);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = p[pi].out.<span class="hljs-built_in">begin</span>(); i != p[pi].out.<span class="hljs-built_in">end</span>(); i++) &#123;<br>            p[*i].<span class="hljs-built_in">remove</span>(pi);<br>        &#125;<br>        result = result + <span class="hljs-built_in">to_string</span>(pi)+<span class="hljs-string">&#x27; &#x27;</span>;<br><br>    &#125;<br>    <span class="hljs-keyword">if</span> (res.<span class="hljs-built_in">size</span>()) cout &lt;&lt; <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; result;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="有边数限制的最短路-Bellman-ford"><a href="#有边数限制的最短路-Bellman-ford" class="headerlink" title="有边数限制的最短路(Bellman_ford)"></a>有边数限制的最短路(Bellman_ford)</h3><p><a href="https://www.acwing.com/solution/content/6320/">AcWing 853. 有边数限制的最短路 - AcWing</a></p><p>Dijkstra算法不能用在有负权重的边中</p><h3 id="SPFA算法"><a href="#SPFA算法" class="headerlink" title="SPFA算法"></a>SPFA算法</h3><p>在Bellman_ford的基础上只选择一部分点进行更新</p><p><a href="https://www.acwing.com/solution/content/9306/">AcWing 851. SPFA算法 - AcWing</a></p><blockquote><p>Bellman-ford可以处理任意带负权边和负权环的图，SPFA可以处理带负权边的图，Dijkstra只能处理带正权边的图；当然，从时间复杂度的效率来讲，是反过来的</p></blockquote><h3 id="spfa判断负环"><a href="#spfa判断负环" class="headerlink" title="spfa判断负环"></a>spfa判断负环</h3><p><a href="https://www.acwing.com/solution/content/6336/">AcWing 852. spfa判断负环 - AcWing</a></p><h3 id="floyd算法"><a href="#floyd算法" class="headerlink" title="floyd算法"></a>floyd算法</h3><p><a href="https://www.acwing.com/solution/content/6976/">AcWing 854. Floyd求最短路 - AcWing</a>：这个链接还有各种求最短路径方法的总结</p><p>其中代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">210</span>, M = <span class="hljs-number">2e+10</span>, INF = <span class="hljs-number">1e9</span>;<br><br><span class="hljs-type">int</span> n, m, k, x, y, z;<br><span class="hljs-type">int</span> d[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">floyd</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>                d[i][j] = <span class="hljs-built_in">min</span>(d[i][j], d[i][k] + d[k][j]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>            <span class="hljs-keyword">if</span>(i == j) d[i][j] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> d[i][j] = INF;<br>    <span class="hljs-keyword">while</span>(m--) &#123;<br>        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;<br>        d[x][y] = <span class="hljs-built_in">min</span>(d[x][y], z);<br>        <span class="hljs-comment">//注意保存最小的边</span><br>    &#125;<br>    <span class="hljs-built_in">floyd</span>();<br>    <span class="hljs-keyword">while</span>(k--) &#123;<br>        cin &gt;&gt; x &gt;&gt; y;<br>        <span class="hljs-keyword">if</span>(d[x][y] &gt; INF/<span class="hljs-number">2</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>        <span class="hljs-comment">//由于有负权边存在所以约大过INF/2也很合理</span><br>        <span class="hljs-keyword">else</span> cout &lt;&lt; d[x][y] &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>if(d[x][y] &gt; INF/2) puts(&quot;impossible&quot;);</code>：个人理解这行是因为有负权重才设置为这样的条件的，如果不是负权重则<code>d[x][y] == INF</code>就行</p><h3 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h3><p><a href="https://www.acwing.com/solution/content/8022/">AcWing 858. Prim算法求最小生成树(堆优化写法) - AcWing</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">502</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">2</span> * <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> flag[N];<br><span class="hljs-type">int</span> e[M],ne[M], h[M],w[M],idx;<br><span class="hljs-type">int</span> ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    e[idx] = b;<br>    w[idx] = x;<br>    ne[idx] = h[a];<br>    h[a] = idx++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h); <span class="hljs-comment">//初始化h数组 -1表示尾节点</span><br>    <span class="hljs-built_in">memset</span>(flag, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> flag); <span class="hljs-comment">//初始化h数组 -1表示尾节点</span><br>    <span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<span class="hljs-comment">//堆里存储距离和节点编号</span><br>    priority_queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&gt; heap;<span class="hljs-comment">//小根堆</span><br><br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-type">int</span> u, v, x;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (u == v)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">add</span>(u, v, x);<br>        <span class="hljs-built_in">add</span>(v, u, x);<br>    &#125;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    heap.<span class="hljs-built_in">push</span>(&#123; <span class="hljs-number">0</span>,<span class="hljs-number">1</span> &#125;);<br>    <br>    <span class="hljs-keyword">while</span> (heap.<span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-type">int</span> x = heap.<span class="hljs-built_in">top</span>().first;<br>        <span class="hljs-type">int</span> p = heap.<span class="hljs-built_in">top</span>().second;<br>        heap.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (flag[p]) <span class="hljs-keyword">continue</span>;<br>        flag[p] = <span class="hljs-literal">true</span>;<br>        ans += x;<br>        cnt++;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[p]; i != <span class="hljs-number">-1</span>; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (!flag[j]) heap.<span class="hljs-built_in">push</span>(&#123; w[i], j &#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cnt == n) cout &lt;&lt; ans;<br>    <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;impossible&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>他说的对，上面这种写法确实有点重复：</p><p><img src="/2024/04/09/algorithm/image-20240527102036172.png" alt="image-20240527102036172"></p><h3 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h3><p><a href="https://www.acwing.com/solution/content/104383/">AcWing 859. Kruskal算法求最小生成树—海绵宝宝来喽 - AcWing</a></p><p>使用并查集实现</p><h3 id="染色法判定二分图"><a href="#染色法判定二分图" class="headerlink" title="染色法判定二分图"></a>染色法判定二分图</h3><p><a href="https://www.acwing.com/solution/content/105874/">AcWing 860. 染色法判定二分图—详细代码注释+图解 - AcWing</a></p><p>这个比较妙的一个点是它把点的颜色和是否遍历过这个点放在同一个数组进行存储</p><h3 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h3><p><a href="https://www.acwing.com/solution/content/5334/">AcWing 861. 二分图的最大匹配 - AcWing</a></p><h2 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h2><h3 id="分解质因数"><a href="#分解质因数" class="headerlink" title="分解质因数"></a>分解质因数</h3><p>这个需要把重复的子问题存起来：如将已经判定是质数的数字存到一个数组，等这个数组不够大了再扩充</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//  判断是否为质数</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> m)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (m == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">int</span> t = <span class="hljs-built_in">sqrt</span>(m)+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; t; i++) &#123;<br>        <span class="hljs-keyword">if</span> ((!(m % i))&amp;&amp;m!=i) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; ps = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//质数数组</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; m;<br>        <span class="hljs-comment">// 当前已经遍历到质数数组的第j个</span><br>        <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (m != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (j == ps.<span class="hljs-built_in">size</span>()) &#123;<br>                <span class="hljs-comment">// 遍历到最后一个了 需要扩充</span><br>                <span class="hljs-type">int</span> k = ps[ps.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>]+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isPrime</span>(k)) &#123;<br>                    k++;<br>                &#125;<br>                ps.<span class="hljs-built_in">push_back</span>(k);<br>                <span class="hljs-comment">//cout &lt;&lt; &quot;扩充质数队列&quot; &lt;&lt; k &lt;&lt; endl;</span><br>                <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-built_in">sqrt</span>(m) + <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-comment">// 这个后面说</span><br>                    cout &lt;&lt; m &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-number">1</span>&lt;&lt; endl;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(!(m % ps[j])) &#123;<br>                <span class="hljs-comment">// 约分</span><br>                <span class="hljs-keyword">if</span> (!cnt) &#123;<br>                    cout &lt;&lt; ps[j] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>                &#125;<br>                cnt++;<br>                <span class="hljs-comment">//cout &lt;&lt; &quot;除以一次&quot; &lt;&lt; ps[j] &lt;&lt; endl;</span><br>                m /= ps[j];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cnt) &#123;<br>                <span class="hljs-comment">// 该质数已经分析完毕 需要开始分析下一个质数</span><br>                cout &lt;&lt; cnt &lt;&lt; endl;<br>            &#125;<br>            <span class="hljs-comment">// 下一个</span><br>            j++;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>关于这一步的添加：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (k &gt; <span class="hljs-built_in">sqrt</span>(m) + <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 这个后面说</span><br>    cout &lt;&lt; m &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-number">1</span>&lt;&lt; endl;<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>遇到1389338897&#x3D;23*60406039这种</p><p>我的算法需要一直扩充到60406039才能确定60406039是一个质数，然后再输出</p><p>事实上只要扩充到sqrt(60406039)就可以确定60406039是一个质数了，直接输出就行了，注意此时的m不需要加入质数队列</p><h3 id="筛质数"><a href="#筛质数" class="headerlink" title="筛质数"></a>筛质数</h3><p><a href="https://www.acwing.com/solution/content/2559/">AcWing 868. 筛质数 - AcWing</a></p><p>我的代码(应该不是最快的)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>vector&lt;<span class="hljs-type">int</span>&gt; ps = &#123;&#125;;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> m)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(ps.<span class="hljs-built_in">empty</span>())&#123;<br>        <span class="hljs-comment">// 需要初始化质数队列</span><br>        <span class="hljs-keyword">if</span> (m == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> t = <span class="hljs-built_in">sqrt</span>(m)+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; t; i++) &#123;<br>            <span class="hljs-keyword">if</span> ((!(m % i))&amp;&amp;m!=i) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 迭代质数队列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ps.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-type">int</span> t = ps[i];<br>            <span class="hljs-keyword">if</span> (t &gt; <span class="hljs-built_in">sqrt</span>(m) + <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">// 已知的质数无法整除m 说明m是质数</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (m % t == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// m是合数</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isPrime</span>(i)) &#123;<br>            cnt++;<br>            ps.<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; cnt;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="试除法求约数"><a href="#试除法求约数" class="headerlink" title="试除法求约数"></a>试除法求约数</h3><p><a href="https://www.acwing.com/solution/content/148960/">AcWing 869. 试除法求约数–海绵宝宝来喽 - AcWing</a></p><p>set用多了，看啥都想用set来排序，事实上也可以先搞一个vector再最后排序(理论上这两种方法的复杂度是一样的)</p><h3 id="约数个数"><a href="#约数个数" class="headerlink" title="约数个数"></a>约数个数</h3><p><a href="https://www.acwing.com/solution/content/148964/">AcWing 870. 约数个数—海绵宝宝来喽 - AcWing</a></p><p>是基于质因数分解的解题，它的算法在分解因数的过程中保证了因数一定是一个质数，不用专门判定这个数是不是质数</p><h3 id="约数之和"><a href="#约数之和" class="headerlink" title="约数之和"></a>约数之和</h3><p><a href="https://www.acwing.com/solution/content/145781/">AcWing 871. \Huge\color{gold}{约数之和} - AcWing</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>map&lt;<span class="hljs-type">long</span>, <span class="hljs-type">long</span>&gt;mii;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> n,m;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> mod1 = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-comment">// 寻找所有数的质因数</span><br>        cin &gt;&gt; m;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> j = <span class="hljs-number">2</span>; j &lt;= m / j; j++) &#123;<br>            <span class="hljs-keyword">while</span> (m % j == <span class="hljs-number">0</span>) &#123;<br>                mii[j]++;<br>                m /= j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (m &gt; <span class="hljs-number">1</span>) &#123;<br>            mii[m]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = mii.<span class="hljs-built_in">begin</span>(); i != mii.<span class="hljs-built_in">end</span>(); i++) &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> a = i-&gt;first;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> b = i-&gt;second;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (b--) &#123;<br>            <span class="hljs-comment">// 这里不用等比数列求和的原因是怕临时和太大</span><br>            t = (t * a + <span class="hljs-number">1</span>) % mod1;<br>        &#125;<br>        res = res * t % mod1;<br>    &#125;<br>    cout &lt;&lt; res;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>有时候还得是long long而不是int</p><p>犯了个错：$10e2$和$1e2$不是一回事，前者是$10<em>\ 10^2$后者是$1</em>\ 10^2$</p><p>类似的，$2e2$是$200$</p><h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3><p>即辗转相除法</p><p><a href="https://www.acwing.com/solution/content/145791/">AcWing 872. 最大公约数–海绵宝宝来喽 - AcWing</a></p><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><p><a href="https://www.acwing.com/solution/content/15293/">AcWing 875. 快速幂-数论-C++(递归、迭代、暴力) - AcWing</a></p><p>化为二进制求解</p><h3 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h3><p>这个推导结合辗转相除法，不是很难</p><p>就是要记住0和非零数的$gcd$是这个非零数</p><p><a href="https://www.acwing.com/solution/content/1393/">AcWing 877. 扩展欧几里得算法 - AcWing</a></p><h3 id="线性同余方程"><a href="#线性同余方程" class="headerlink" title="线性同余方程"></a>线性同余方程</h3><p>换了一个皮的扩展欧几里得算法</p><p><a href="https://www.acwing.com/solution/content/5937/">AcWing 878. 线性同余方程 - AcWing</a></p><p>其他数论题涉及证明的题太多了，先跳了</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h3><p><a href="https://www.acwing.com/solution/content/1374/">AcWing 2. 01背包问题（状态转移方程讲解） - AcWing</a></p><p>二维的比较容易理解</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">1005</span>;<br><span class="hljs-type">int</span> v[MAXN];    <span class="hljs-comment">// 体积</span><br><span class="hljs-type">int</span> w[MAXN];    <span class="hljs-comment">// 价值 </span><br><span class="hljs-type">int</span> f[MAXN][MAXN];  <span class="hljs-comment">// f[i][j], j体积下前i个物品的最大价值 </span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;   <br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <br>        cin &gt;&gt; v[i] &gt;&gt; w[i];<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            <span class="hljs-comment">//  当前背包容量装不进第i个物品，则价值等于前i-1个物品</span><br>            <span class="hljs-keyword">if</span>(j &lt; v[i]) <br>                f[i][j] = f[i - <span class="hljs-number">1</span>][j];<br>            <span class="hljs-comment">// 能装，需进行决策是否选择第i个物品</span><br>            <span class="hljs-keyword">else</span>    <br>                f[i][j] = <span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][j], f[i - <span class="hljs-number">1</span>][j - v[i]] + w[i]);<br>        &#125;           <br><br>    cout &lt;&lt; f[n][m] &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>大概拓展方式是下面这样：</p><table><thead><tr><th>物品\容积</th><th>0</th><th>1</th><th>2</th></tr></thead><tbody><tr><td>0</td><td>-&gt;</td><td>-&gt;</td><td>-&gt;</td></tr><tr><td>1</td><td>-&gt;</td><td>-&gt;</td><td>-&gt;</td></tr><tr><td>2</td><td>-&gt;</td><td>-&gt;</td><td>-&gt;</td></tr></tbody></table><h3 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h3><p><a href="https://www.acwing.com/problem/content/description/3/">3. 完全背包问题 - AcWing题库</a></p><p>这个有了上面的题解，只要改一点就好了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//f[i][j] = max(f[i - 1][j], f[i - 1][j - v[i]] + w[i]);</span><br><span class="hljs-comment">//改成</span><br>f[i][j] = <span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][j], f[i][j - v[i]] + w[i]);<span class="hljs-comment">//因为装了以后可以继续装</span><br></code></pre></td></tr></table></figure><h3 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h3><p><a href="https://www.acwing.com/problem/content/4/">4. 多重背包问题 I - AcWing题库</a></p><p>文心一言它真有，这种算法在一直重置$f[i][j]$的值，保证最后它的值是最大的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">105</span>;<br><span class="hljs-type">int</span> v[MAXN];    <span class="hljs-comment">// 体积</span><br><span class="hljs-type">int</span> w[MAXN];    <span class="hljs-comment">// 价值 </span><br><span class="hljs-type">int</span> s[MAXN];    <span class="hljs-comment">// 件数</span><br><span class="hljs-type">int</span> f[MAXN][MAXN];  <span class="hljs-comment">// f[i][j], j体积下前i个物品的最大价值 </span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            <span class="hljs-comment">// 初始化当前状态为不选择第i个物品的情况  </span><br>            f[i][j] = f[i - <span class="hljs-number">1</span>][j];<br>            <span class="hljs-comment">// 尝试放入第i个物品，考虑数量限制  </span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= s[i] &amp;&amp; k * v[i] &lt;= j; k++) &#123;<br>                f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i - <span class="hljs-number">1</span>][j - k * v[i]] + k * w[i]);<br>            &#125;<br>        &#125;<br><br>    cout &lt;&lt; f[n][m] &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们看文心一言怎么说：</p><blockquote><p>这是一个典型的背包问题，具体来说，它属于多重背包问题的范畴。在多重背包问题中，每种物品有一个固定的数量限制，而不是像01背包或完全背包问题中那样只能取一个或无限制。</p><p>为了求解这个问题，我们可以使用动态规划的方法。我们定义一个二维数组<code>dp[i][j]</code>，表示考虑前<code>i</code>个物品，当前背包容量为<code>j</code>时的最大价值。状态转移方程可以表示为：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = max(dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>, dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-k*v<span class="hljs-comment">[i]</span>]</span> + k*w<span class="hljs-comment">[i]</span>) for all k from 0 to min(s<span class="hljs-comment">[i]</span>, j/v<span class="hljs-comment">[i]</span>)<br></code></pre></td></tr></table></figure><p>其中<code>k</code>代表第<code>i</code>种物品选择的数量，<code>v[i]</code>、<code>w[i]</code>和<code>s[i]</code>分别代表第<code>i</code>种物品的体积、价值和数量限制。</p><p>但是，上述方法的时间复杂度较高，为<code>O(NV*S)</code>，其中<code>S</code>是<code>s[i]</code>中的最大值。为了优化这个问题，我们可以采用二进制优化的方法，将多重背包转化为01背包进行处理，以降低时间复杂度。</p><p>二进制优化的基本思想是将每种物品的数量<code>s[i]</code>拆分成若干个“新的物品”，这些新物品的价值和体积是原物品的1倍、2倍、4倍…直到不能再拆分（即超过原数量<code>s[i]</code>）。这样可以将原问题转化为01背包问题，并大大减少需要考虑的物品数量，从而降低时间复杂度。</p><p>具体实现时，我们可以先对每种物品进行二进制拆分，然后使用01背包的方法求解。</p><p>然而，在这个问题中，由于数据范围较小（N, V, v[i], w[i], s[i] 均不超过100），我们甚至可以直接使用未优化的多重背包方法来解决。</p><p>下面是一个使用未优化的多重背包方法来解决这个问题的Python代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">N, V = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>items = []<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>    v, w, s = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>    items.append((v, w, s))<br><br><span class="hljs-comment"># 初始化dp数组</span><br>dp = [<span class="hljs-number">0</span>] * (V + <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 多重背包求解</span><br><span class="hljs-keyword">for</span> v, w, s <span class="hljs-keyword">in</span> items:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(V, v - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">min</span>(s, j // v) + <span class="hljs-number">1</span>):<br>            dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - k * v] + k * w)<br><br><span class="hljs-built_in">print</span>(dp[V])<br></code></pre></td></tr></table></figure><p>注意：这个解法在数据范围较大时可能不够高效，但对于本题的数据范围是足够的。如果需要处理更大的数据范围，建议使用二进制优化或其他更高效的算法。</p></blockquote><p>来看看二进制优化是怎么样的：</p><p><a href="https://www.acwing.com/solution/content/20115/">AcWing 5. 二进制优化，它为什么正确，为什么合理，凭什么可以这样分？？ - AcWing</a></p><h3 id="分组背包问题"><a href="#分组背包问题" class="headerlink" title="分组背包问题"></a>分组背包问题</h3><p>这个也不难，就是把i理解成第i组而不是第i个，然后进行迭代求解</p><p><a href="https://www.acwing.com/solution/content/3483/">AcWing 9. 分组背包问题 - AcWing</a></p><h3 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h3><p>这个只看了一个简单方法，二分的还没看</p><p><a href="https://www.acwing.com/solution/content/182361/">AcWing 895. 最长上升子序列-小白专享 - AcWing</a></p><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><p><a href="https://www.acwing.com/solution/content/179443/">AcWing 897. 一图全解最长公共子序列问题~（算法基础课） - AcWing</a></p><p>这个也不难</p><h3 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h3><p><a href="https://www.acwing.com/solution/content/13945/">AcWing 282. 石子合并（区间 DP 模版题详解分析） - AcWing</a></p><img src="/2024/04/09/algorithm/image-20240601155522346.png" alt="image-20240601155522346" style="zoom: 67%;"><p>按这个解答所示，就是将第一个下标和第二个下标表示为从一个开始到结束的代价</p><p>其中s数组是前缀和，$s[j]−s[i−1]$表示将这两堆石子合并的代价</p><h3 id="整数划分"><a href="#整数划分" class="headerlink" title="整数划分"></a>整数划分</h3><p>这个比较特别，$f[0][0]$需要被初始化为1</p><p>$f[i][j]&#x3D;f[i−1][j]+f[i][j−i]$</p><p><a href="https://www.acwing.com/solution/content/2954/">AcWing 900. 整数划分 （求方案数、朴素做法 、等价变形 ） - AcWing</a></p><h3 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h3><p>这个我是真看懂了：<a href="https://www.acwing.com/solution/content/105019/">AcWing 285. 没有上司的舞会 - AcWing</a></p><p>感觉多数DP问题的关键在于如何构造$f[i][j]$这个数组的含义</p><h3 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h3><p>使用一个数组来存储状态，如果这个数组中的数值变化了，则说明已经是最优，否则需要更新</p><p><a href="https://www.acwing.com/solution/content/131293/">AcWing 901. $\color{blue}{滑雪—-记忆化搜索（超详细讲解）}$ - AcWing</a></p><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><h3 id="区间选点"><a href="#区间选点" class="headerlink" title="区间选点"></a>区间选点</h3><p><a href="https://www.acwing.com/solution/content/16905/">AcWing 905. 区间选点 - AcWing</a></p><p>这种题肯定需要关注左右端点</p><h3 id="最大不相交区间数量"><a href="#最大不相交区间数量" class="headerlink" title="最大不相交区间数量"></a>最大不相交区间数量</h3><p>最早结束时间，看右端点</p><p><a href="https://www.acwing.com/solution/content/200374/">AcWing 908. 最大不相交区间数量-最易懂的证明 - AcWing</a></p><h3 id="区间分组"><a href="#区间分组" class="headerlink" title="区间分组"></a>区间分组</h3><p>最小厚度问题，看左端点</p><p><a href="https://www.acwing.com/solution/content/200493/">AcWing 906. 区间分组-最易懂的证明 - AcWing</a></p><h3 id="区间覆盖"><a href="#区间覆盖" class="headerlink" title="区间覆盖"></a>区间覆盖</h3><p>这个有点难想到</p><p><a href="https://www.acwing.com/solution/content/16980/">AcWing 907. 区间覆盖 - AcWing</a></p><h3 id="合并果子"><a href="#合并果子" class="headerlink" title="合并果子"></a>合并果子</h3><p>就是哈夫曼树</p><p><a href="https://www.acwing.com/solution/content/3258/">AcWing 148. 合并果子 - AcWing</a></p><h3 id="排队打水"><a href="#排队打水" class="headerlink" title="排队打水"></a>排队打水</h3><p>短作业优先</p><p><a href="https://www.acwing.com/solution/content/126928/">AcWing 913. 排队打水 —— 经典贪心 - AcWing</a></p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读笔记</title>
    <link href="/2024/03/08/paper-reading/"/>
    <url>/2024/03/08/paper-reading/</url>
    
    <content type="html"><![CDATA[<h1 id="深度学习论文阅读笔记"><a href="#深度学习论文阅读笔记" class="headerlink" title="深度学习论文阅读笔记"></a>深度学习论文阅读笔记</h1><p>跟着 <a href="https://github.com/mli/paper-reading">mli&#x2F;paper-reading: 深度学习经典、新论文逐段精</a> 这个系列视频进行学习，这里做一个简单的笔记</p><h2 id="如何读论文"><a href="#如何读论文" class="headerlink" title="如何读论文"></a>如何读论文</h2><p><a href="https://www.bilibili.com/video/BV1H44y1t75x/">https://www.bilibili.com/video/BV1H44y1t75x/</a></p><p>这个收获比较大的地方是第一次看论文的abstract和conclusion</p><p>第二次看图表</p><h2 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a>AlexNet</h2><p><a href="https://www.bilibili.com/video/BV1ih411J7Kz">https://www.bilibili.com/video/BV1ih411J7Kz</a></p><p>深度和宽度都重要</p><p>AlexNet之前人们认为无监督学习更好，AlexNet证明了数据量够好和够深的网络也能打赢无监督学习</p><p>预处理：简单裁剪</p><p>end to end</p><p>并行训练：现在NLP领域又兴起了</p><p>dropout在现行模型上等价于一个L2正则项</p><p>降lr的方法：人工手工降（现在用cos函数慢慢降低</p><h2 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h2><p><a href="https://www.bilibili.com/video/BV1Fb4y1h73E">https://www.bilibili.com/video/BV1Fb4y1h73E</a></p><p>可以用ResNet来让更深的模型更容易训练</p><p>和AlexNet一样的降lr方法</p><p>ResNet训练比较快的原因：梯度保持的好</p><h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><p><a href="https://www.bilibili.com/video/BV1pu411o7BE">https://www.bilibili.com/video/BV1pu411o7BE</a></p><p>编码器-解码器架构，解决机器翻译问题</p><p>RNN 特点（缺点）：难以并行，丢失很早的历史信息</p><p>encoder 一次性看全整个句子，decoder 的输出词是一个一个生成的</p><p><img src="/2024/03/08/paper-reading/image-20240620172604329.png" alt="Transformer"></p><p>简单设计：只需调 2 个参数 dmodel 每层维度有多大 和 N 多少层，影响后续一系列网络的设计，BERT、GPT。</p><p>LayerNorm而不是BatchNorm</p><p>做Mask的方法：把 t 时刻以后 Qt 和 Kt 的值换成一个很大的负数</p><p>Positional Encoding：简单相加</p><h2 id="GNN"><a href="#GNN" class="headerlink" title="GNN"></a>GNN</h2><p><a href="https://www.bilibili.com/video/BV1iT4y1d7zP/">https://www.bilibili.com/video/BV1iT4y1d7zP/</a></p><p>图信息：点，边，图整体（虚构，来连接很远的点），连接情况</p><p>问题：矩阵很大（难以存储），边通常是稀疏的（难以并行），邻接矩阵的 行、列顺序交换，不会影响图（异构）</p><p>方法：存一个邻接列表</p><p>可以做几个MLP来研究4种图信息的关系，可以分开做，也可以一起做（GCN）</p><p>GNN 对超参数比较敏感</p><h2 id="GAN"><a href="#GAN" class="headerlink" title="GAN"></a>GAN</h2><p><a href="https://www.bilibili.com/video/BV1rb4y187vD">https://www.bilibili.com/video/BV1rb4y187vD</a></p><p>每次迭代，先更新 D 再更新 G，但是双方最好实力相当</p><p>无监督学习，无需标注数据</p><h2 id="BERT"><a href="#BERT" class="headerlink" title="BERT"></a>BERT</h2><p><a href="https://www.bilibili.com/video/BV1PL411M7eQ">https://www.bilibili.com/video/BV1PL411M7eQ</a></p><p>pre-training: 在一个大的数据集上训练好一个模型 pre-training，模型的主要任务是用在其它任务 training 上。</p><p>BERT: 用深的、双向的、transformer 来做预训练，用来做语言理解的任务。</p><p>GPT unidirectional，使用左边的上下文信息 预测未来</p><p>NLP任务分两类：句子关系，完形填空</p><p>BERT 通过 MLM 带掩码的语言模型 作为预训练的目标，来减轻 语言模型的单向约束。</p><p>在无标号的大量数据集上训练的模型效果 &gt; 有标号、但数据量少一些的数据集上训练效果不好</p><p>在大量无标号的图片上训练的模型，可能比 有标号的 ImageNet 百万图片 效果更好。</p><h2 id="ViT"><a href="#ViT" class="headerlink" title="ViT"></a>ViT</h2><p><a href="https://www.bilibili.com/video/BV15P4y137jb">https://www.bilibili.com/video/BV15P4y137jb</a></p><p>原本cv中的注意力：attention + CNN ，轴attention</p><p>对图片块进行自注意力</p><p>CNN的归纳偏置：先卷积还是先平移没有影响</p><p>CNN 有 很多先验信息 –&gt; 需要较少的数据去学好一个模型</p><p>引入一维位置编码</p><h2 id="InstructGPT"><a href="#InstructGPT" class="headerlink" title="InstructGPT"></a>InstructGPT</h2><p><a href="https://www.bilibili.com/video/BV1hd4y187CR/?vd_source=737ee62e1c886f11b0be14090dbafc9e">InstructGPT 论文精读【论文精读·48】</a></p><p>感觉比较有意思的地方是用了强化学习，专门做了一个RL模型(奖励)来给原来模型的微调模型(策略)给分，因为微调参数变了，分布参数也会变。然后RL是个排序模型，可以节省大量的标注。</p><h2 id="GPT-1-2-3"><a href="#GPT-1-2-3" class="headerlink" title="GPT-1-2-3"></a>GPT-1-2-3</h2><p><a href="https://www.bilibili.com/video/BV1AF411b7xQ/?vd_source=737ee62e1c886f11b0be14090dbafc9e">GPT，GPT-2，GPT-3 论文精读【论文精读】</a></p><p>Bert是完形填空，GPT是预测未来(更难但是上限更高)</p><p>GPT是预训练模型，是Transformer的解码器。(BERT:编码器)</p><p>GPT在训练过程中加入了分隔符这种辅助的符号</p><p>GPT2主打zero-shot，相对没特别多的创新</p><p>GPT3是few-shot，训练完了不更新模型参数</p><h2 id="多模态"><a href="#多模态" class="headerlink" title="多模态"></a>多模态</h2><p><a href="https://www.bilibili.com/video/BV1Vd4y1v77v/">https://www.bilibili.com/video/BV1Vd4y1v77v/</a></p><p><a href="https://blog.csdn.net/qq_42030496/article/details/136051417">https://blog.csdn.net/qq_42030496/article/details/136051417</a></p><p>多模态看来真的很吃资源</p><p><strong>CLIP</strong>:使用对比学习，将不相关的图像和文本之间的距离拉大，相关的图像和文本之间的距离拉小，最后只要做一个点乘就好了</p><h3 id="ALBEF"><a href="#ALBEF" class="headerlink" title="ALBEF"></a><strong>ALBEF</strong></h3><p>在多模态学习中，视觉特征编码器要大于文本特征编码器，引入<strong>ITC loss</strong></p><p>ITM loss:</p><blockquote><p>那我们就先来说一下这个 ITM loss，也就是 image text matching，<strong>其实很简单，就是说你给定一个图片，给定一个文本，而这个图像文本通过这个 ALBEF的模型之后，就会出来一个特征，那在这个特征之后加一个分类头，也就是一个 FC 层。然后我去判断到底这个 i 和 t 是不是一个对，那说白了这个 ITM 就是一个二分类任务。</strong>那这个 loss 虽然听起来很合理，我们确实应该用它，<strong>但是实际操作的时候你会发现这个 loss 太简单了</strong>。因为判断正样本可能还有点难度，但是判断谁和谁是负样本，这个就太简单了。因为如果你不对这个负样本做什么要求，那基本上很多很多的这个图片&#x2F;文本，它都可以当成是现在图像&#x2F;文本内的负样本，所以这个分类任务很快它的准确度就提升了很高很高。那在预训练的时候，训练再久其实也没有任何意义了。那这个时候一个常见的做法，就是说我在选这个负样本的时候，我给它一些constrain。那在 ALBEF这篇论文里，它就是采取了最常用的一个方法，就是通过某种方式去选择最难的那个负样本，也就是最接近于正样本的那个负样本。具体来说。那在 ALBEF这篇论文里，它的这个 batch size 是512，那对于 ITM 这个 loss 来说，它的这个正样本对就是 512 个。那对于这个 Mini batch 里的每一张图像，我去哪儿找它的这个 hard negative 的文本，这个时候 ITM 还依赖于之前的这个ITC，他就把这张图片和同一个 batch 里所有的这个文本都算一遍这个 cosine similarity，然后他在这里选择一个除了他自己之外相似度最高的那个文本当做这个negative。也就是说其实这个文本和这个图像已经非常相似了，它基本都可以拿来当正样本用，但是我非说它是一个负样本，也就是 hard negative 的定义。那这个时候 ITM loss 就变得非常 challenging 了，然后让这个模型更好的去判断谁到底是一个图像文本对，也就是他这里说的 image text matching。</p></blockquote><p>MLM loss</p><blockquote><p>​    那最后一个目标函数就是我们耳熟能详的 mask language modeling Bert 里用的<strong>完形填空</strong>，那其实就是把<strong>原来完整的句子</strong>这个 text t 变成一个 t’，也就是说<strong>有些单词被musk 掉</strong>。<strong>然后他把这个缺失的句子和这个图片一起，通过这个 ALBEF的模型，然后最后去把之前的这个完整的句子给预测出来。</strong>那在这里其实<strong>它不是像 NLP 那边单纯的一个 MLM 了，它其实也借助了图像这边的信息去帮助它更好的恢复这个哪个单词被 mask 掉。</strong></p><p>​    <strong>但这里有一个小细节很值得关注，就是说在我们算这个 i t c loss 和这个 i t m loss 的时候，其实我们的输入都是原始的 i 和t，但是当我们算这个 m l m loss 的时候，它的输入是原始的i，但是mask过 的t。</strong>这意味着什么呢？<strong>这说明 ALBEF这个模型每一个训练的iteration，其实它做了两次模型的forward。一次模型的forward 是用了这个原始的 i 和t，另一次模型的 forward 是用了原始的 i 和mask过 的t。</strong>当然了，不光是 ALBEF这篇论文会有这种多次前向的这个过程，其实 vilt 包括之前的很多模型，它都会做好几次前向，甚至做三次前向过程。这也是其中一个原因。就是**为什么多模态学习普遍的方法，它的训练时间都比较长，**因为它为了算好几个不同的loss，它还得做好几次不同的 forward 去满足各种各样的条件。****那到这儿三点儿一和三点儿 2 节就讲完了，最后我们可以看到在文章的这个公式5，这个 ALBEF的所有在训练时候用的这个目标函数就都在这里了，就是 ITC MLM 和 ITM 的这个合体。</p></blockquote><p>动量蒸馏:将独热标签变成多热标签，算Softmax score，可以利于在noise中学习</p><h3 id="VLMo"><a href="#VLMo" class="headerlink" title="VLMo"></a>VLMo</h3><p>将两个模态分开训练，看下图，transformer的参数共享，但是最后不同模态的FFN层不同，在执行不同任务时使用不同的结构</p><p><img src="/2024/03/08/paper-reading/image-20240606212030126.png" alt="VLMo结构"></p><p>这个训练顺序还挺有意思的：</p><p><img src="/2024/03/08/paper-reading/image-20240606212715433.png" alt="先训练视觉再文本"></p><p>注意第二步：拿视觉上训练好的自注意力层参数去建模文本</p><h2 id="Neural-Corpus-Indexer"><a href="#Neural-Corpus-Indexer" class="headerlink" title="Neural Corpus Indexer"></a>Neural Corpus Indexer</h2><p>文档检索是一件很贵的事(因为文档可能很多)</p><p>输入查询，输出id，但是我们的数据是&lt;doc和doc-id&gt;，可以将doc拆成很多查询</p><p><img src="/2024/03/08/paper-reading/image-20240606224708041.png" alt="模型输入输出"></p><p>层次化K-means</p><p><img src="/2024/03/08/paper-reading/image-20240606225215073.png" alt="层次化K-means"></p><p>得到的decodes前缀类似说明这两个类比较接近</p><h2 id="Parameter-Server"><a href="#Parameter-Server" class="headerlink" title="Parameter Server"></a>Parameter Server</h2><p>沐神自己的论文，系统+ai方向，是比较有机的融合而不是简单的a+b</p><p><a href="http://www.bilibili.com/video/BV1YA4y197G8">www.bilibili.com/video/BV1YA4y197G8</a></p><p>和分布式有关，写了一段给不搞机器学习的学者看的机器学习科普</p><h2 id="OpenAI-Whisper"><a href="#OpenAI-Whisper" class="headerlink" title="OpenAI Whisper"></a>OpenAI Whisper</h2><p><a href="http://www.bilibili.com/video/BV1VG4y1t74x/">www.bilibili.com/video/BV1VG4y1t74x/</a></p><p>数据集足够大，模型的选择关系不是很大，效果都差不多</p><p>它的输入是一个时间为横坐标，频率为纵坐标的数据结构(值为能量)</p><p><strong>弱监督学习</strong>：弱监督学习中，训练样本的标签可能是不可靠的，这包括标签不正确、多种标记、标记不充分或局部标记等情况。与强监督学习相比，弱监督学习中的标签可能并不总是准确地表示样本的真实类别或属性。</p><p>弱监督学习（Weakly Supervised Learning）是一种机器学习范式，它介于完全监督学习和完全无监督学习之间。在这种学习方式中，模型使用的标签信息是部分正确、不完整或不确定的。弱监督学习通常用于以下情况：</p><ol><li><strong>标签噪声</strong>：训练数据的标签可能包含错误或不一致性。</li><li><strong>标签不完整</strong>：只有部分数据有标签，其他数据没有标签。</li><li><strong>标签模糊</strong>：标签可能不够精确，例如，对于图像分类任务，标签可能只是“动物”，而不是具体的“猫”或“狗”。</li><li><strong>标签成本高</strong>：获取精确标签的成本很高，因此只能提供低成本的、质量较低的标签。</li></ol><p>弱监督学习的目标是利用这些不完美的标签来训练模型，同时尽可能地减少标签错误对学习过程的影响。这通常涉及到一些特殊的算法或技术，例如：</p><ul><li><strong>数据清洗</strong>：在训练前尝试识别和纠正标签中的错误。</li><li><strong>集成学习</strong>：结合多个模型的预测来提高整体的准确性。</li><li><strong>主动学习</strong>：模型主动选择最不确定的样本请求标注，以减少对不准确标签的依赖。</li><li><strong>多任务学习</strong>：同时学习多个相关任务，以利用任务之间的相关性来提高学习效果。</li></ul><p>弱监督学习在实际应用中非常有价值，因为在很多情况下获取大量精确标注的数据是不现实的。通过弱监督学习，可以更有效地利用现有的数据资源，提高模型的泛化能力和实用性。</p><hr><p><strong>自监督学习</strong>：</p><p><strong>自监督学习是一种从无标签数据中挖掘监督信息，以训练机器学习模型的方法</strong>。</p><p>在机器学习领域，自监督学习是介于监督学习和无监督学习之间的一种范式。它利用辅助任务（或称为假托任务）从未标记的数据中生成隐式标签，以此来训练模型。这种方法的核心在于，通过构造某种形式的监督信息，使模型能够在没有人工标注的情况下进行训练。这种学习方式在计算机视觉和自然语言处理等领域尤为有用，因为这些领域通常需要大量标注数据来训练先进的AI模型，而获取这些标注数据既耗时又昂贵。</p><p>自监督学习的主要方法可以分为基于上下文、基于时序和基于对比三种类别。例如，在NLP领域中，Word2vec算法通过预测句子中词的顺序来学习单词的表征，而在图像处理中，研究人员通过调整图像块的位置并让模型预测其相对位置来学习图像的特征。这些方法都旨在通过自动构建的预测任务来学习数据的有用表征，从而对下游任务产生积极影响。</p><p>自监督学习的发展不仅解决了监督学习依赖手工标注数据的问题，还为模型提供了更丰富的语义表征。这种学习方式使得模型能够在没有明确人工标注的情况下，通过数据本身的内在结构和相关性获得有效信息。因此，自监督学习在减少人工标注成本和提升模型泛化能力方面具有显著优势。</p><p>总的来说，自监督学习通过创新地从数据自身提取监督信号，实现了在无需外部标注的情况下训练高效机器学习模型的目标。这一方法不仅节省了数据标注的成本和时间，还在某些情况下提高了模型的泛化能力和性能表现，成为人工智能领域的重要研究方向。</p><p><strong>自监督和无监督学习有什么区别？</strong></p><p>自监督学习和无监督学习在机器学习中都是重要的概念，它们之间的区别主要体现在以下几个方面：</p><ol><li>学习目标和方式<ul><li>自监督学习：自监督学习可以看作是特殊的无监督学习的一个子类别，但它并非完全等同于无监督学习。自监督学习的关键思想是让模型无需手动标签即可学习数据表示。在自监督学习中，模型会利用输入数据的某些特性，自动生成目标标签，最终通过这些标签来训练模型。例如，模型可能会假设图像中相邻的像素存在相互关系，或者音频信号中连续的时间片段具有类似的特征等。</li><li>无监督学习：无监督学习则是在没有明确标签或指令的情况下，根据数据本身的潜在关联，从数据集中提取特征、模式和关系的机器学习方法。它的主要目的是通过模型的自学习期来发掘数据的内在结构和模式，更好地理解数据背后的潜在规律，并将其扩展到新的情境中。</li></ul></li><li>目标函数的选择<ul><li>自监督学习：在自监督学习中，模型会自动生成目标标签，并在这些自动生成的目标上进行学习。常见的自监督学习算法包括自动编码器（Autoencoder）和对比性预训练（Contrastive Pretraining）等。</li><li>无监督学习：无监督学习则是在数据集的自然结构上学习，而不是在自动生成的目标上。无监督学习的方法包括聚类、异常检测、数据降维等。</li></ul></li></ol><hr><p><strong>半监督学习</strong>：</p><p><strong>半监督学习</strong>（Semi-supervised learning）是一种机器学习方法，它利用少量标记数据和大量未标记数据来训练模型。与监督学习和无监督学习相比，半监督学习具有以下特点：</p><ul><li><strong>利用了标记数据和未标记数据的优势</strong>：标记数据可以为模型提供学习方向，而未标记数据可以丰富模型的训练集，提高模型的泛化能力。</li><li><strong>降低了对标记数据的需求</strong>：在许多实际应用中，标记数据的获取成本很高，而未标记数据的获取成本相对较低。因此，半监督学习可以帮助我们降低对标记数据的需求。</li><li><strong>提高了模型的性能</strong>：在许多情况下，半监督学习可以比监督学习和无监督学习取得更高的性能。</li></ul><p><strong>半监督学习</strong>的<strong>工作原理</strong>可以概括如下：</p><ol><li>收集大量未标记数据和少量标记数据。</li><li>利用标记数据训练一个初始模型。</li><li>使用初始模型对未标记数据进行预测，并根据预测结果为未标记数据分配伪标签。</li><li>将伪标签数据与原始标记数据一起用于训练最终模型。</li></ol><p><strong>半监督学习</strong>的<strong>常见算法</strong>包括：</p><ul><li><strong>自我训练</strong>（Self-training）：这是最简单的半监督学习算法之一。它使用初始模型对未标记数据进行预测，并根据预测结果为未标记数据分配伪标签。然后，将伪标签数据与原始标记数据一起用于训练最终模型。</li><li><strong>期望最大化</strong>（Expectation-maximization，EM）：EM算法是一种迭代算法，它通过交替估计模型参数和隐变量来最大化模型的似然函数。在半监督学习中，EM算法可以用于估计模型参数和未标记数据的伪标签。</li><li><strong>图半监督学习</strong>（Graph semi-supervised learning）：图半监督学习利用图结构来辅助半监督学习。在图半监督学习中，未标记数据之间的关系可以用图来表示，而图结构可以为模型提供额外的信息，从而提高模型的性能。</li></ul><p><strong>半监督学习</strong>在<strong>许多领域</strong>都有应用，例如：</p><ul><li><strong>自然语言处理</strong>：例如，文本分类、情感分析、机器翻译等。</li><li><strong>计算机视觉</strong>：例如，图像分类、目标检测、图像分割等。</li><li><strong>推荐系统</strong>：例如，推荐电影、音乐、商品等。</li></ul><p><strong>半监督学习</strong>是一个<strong>活跃的研究领域</strong>，新的算法和应用不断涌现。随着研究的深入，半监督学习将在机器学习中发挥越来越重要的作用。</p><h2 id="DALL·E-2"><a href="#DALL·E-2" class="headerlink" title="DALL·E 2"></a>DALL·E 2</h2><p>两阶段模型 prior 和 decoder</p><ul><li>prior ：text embedding &#x3D;&gt; image embedding</li><li>decoder：image embedding &#x3D;&gt; 图像</li></ul><p><img src="/2024/03/08/paper-reading/image-20240621214645824.png" alt="上面是CLIP"></p><p>CLIP：输入文本对和图像对进行对比学习，这个对是正样本，其他都是负样本</p><p>扩散模型：<a href="https://blog.csdn.net/DFCED/article/details/132394895">扩散模型 (Diffusion Model) 之最全详解图解-CSDN博客</a></p><p>自监督学习，在原图像的基础上逐步加入噪声，然后再逐步重建（马尔科夫链）</p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>torch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio sync 失败</title>
    <link href="/2024/01/27/android-studio-sync-shi-bai/"/>
    <url>/2024/01/27/android-studio-sync-shi-bai/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-sync-失败解决方案"><a href="#Android-Studio-sync-失败解决方案" class="headerlink" title="Android Studio sync 失败解决方案"></a>Android Studio sync 失败解决方案</h1><p>Android Studio新建项目的时候，会报一个<code>Gradle project sync failed.Basic functionality (e.g. editing, debugging) will not work properly.</code>这样的错误。如下图所示：</p><p><img src="/2024/01/27/android-studio-sync-shi-bai/image-20240127092121869.png" alt="Gradle project sync failed"></p><p>解决方案是对gradle换源</p><p>打开<code>gradle/wrapper/gradle-wrapper.properties</code>这个文件</p><p>把其中的<code>distributionUrl</code>这个字段换成镜像地址:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">https://mirrors.cloud.tencent.com/gradle/gradle-8.0-bin.zip<br></code></pre></td></tr></table></figure><p><img src="/2024/01/27/android-studio-sync-shi-bai/image-20240127092542449.png" alt="换源"></p><p>然后try again就可以了，可以发现在正常下载</p><p><img src="/2024/01/27/android-studio-sync-shi-bai/image-20240127092806401.png" alt="sync in progress"></p>]]></content>
    
    
    <categories>
      
      <category>config</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注册表笔记</title>
    <link href="/2023/12/14/zhu-ce-biao-bi-ji/"/>
    <url>/2023/12/14/zhu-ce-biao-bi-ji/</url>
    
    <content type="html"><![CDATA[<h1 id="注册表笔记"><a href="#注册表笔记" class="headerlink" title="注册表笔记"></a>注册表笔记</h1><p>有时候在文件上的右键菜单和在文件夹上的右键菜单不是很美观(刚从Eclipse转了IDEA，发现IDEA的右键菜单有点长)，想自定义一下，就有了这篇笔记</p><h2 id="注册表编辑器"><a href="#注册表编辑器" class="headerlink" title="注册表编辑器"></a>注册表编辑器</h2><p><code>Win+r</code>输入<code>regedit</code>打开注册表编辑器，接下来的操作要从这上面改</p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214184441793.png" alt="注册表编辑器"></p><h2 id="右键文件"><a href="#右键文件" class="headerlink" title="右键文件"></a>右键文件</h2><p>到<code>计算机\HKEY_CLASSES_ROOT\*\shell</code>这个路径下</p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214184423141.png" alt="计算机\HKEY_CLASSES_ROOT\*\shell"></p><p>点击<strong>Open with IntelliJ IDEA Community Edition</strong></p><p>它的键值对如右边所示，第一个是它的名称，第二个是它的图标路径，都可以改</p><p>然后是它下面的<strong>command</strong></p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214184733894.png" alt="计算机\HKEY_CLASSES_ROOT\*\shell\command"></p><p>我们查看它的完整命令：</p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214184816177.png" alt="注意%1"></p><p>是用<strong>idea64.exe</strong>来打开输入的第一个参数<code>%1</code>(这里指的是点击的文件)，注意要用引号包围</p><h2 id="右键文件夹背景"><a href="#右键文件夹背景" class="headerlink" title="右键文件夹背景"></a>右键文件夹背景</h2><p>到路径<code>计算机\HKEY_CLASSES_ROOT\Directory\Background\shell</code>下</p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214185612106.png" alt="计算机\HKEY_CLASSES_ROOT\Directory\Background\shell"></p><p>这里还是到<strong>IntelliJ IDEA Community Edition</strong>这里来</p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214185637649.png" alt="老地方"></p><p>这两项和上面一样</p><p>看下面的<strong>command</strong>，发现参数变成了<code>%V</code></p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214185832214.png" alt="注意%V"></p><p>注意这里修改的是右击文件夹背景的菜单，而不是直接右键文件夹的菜单</p><h2 id="右键文件夹"><a href="#右键文件夹" class="headerlink" title="右键文件夹"></a>右键文件夹</h2><p>直接右键文件夹的菜单的修改要到路径<code>计算机\HKEY_CLASSES_ROOT\Directory\shell</code>下，和上面的对比发现少一个<strong>background</strong></p><p>还是老样子，基本都是类似的，不过注意到这里的命令参数变成了<code>%1</code>，因为这里是直接右键选中的文件夹</p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214190134586.png" alt="计算机\HKEY_CLASSES_ROOT\Directory\shell"></p><h2 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h2><p>通过<code>.reg</code>文件的新建文件可以参考<a href="https://www.cnblogs.com/zhoujiayingvana/p/12357812.html">Typora添加右键新建Markdown文件 - 墨莲玦 - 博客园 (cnblogs.com)</a></p><p>使用这样的<code>.reg</code>文件：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#">Windows Registry Editor Version <span class="hljs-number">5.00</span><br><br>[<span class="hljs-meta">HKEY_CLASSES_ROOT\.md</span>]<br>@=<span class="hljs-string">&quot;Typora.md&quot;</span><br><span class="hljs-string">&quot;Content Type&quot;</span>=<span class="hljs-string">&quot;text/markdown&quot;</span><br><span class="hljs-string">&quot;PerceivedType&quot;</span>=<span class="hljs-string">&quot;text&quot;</span><br><br>[<span class="hljs-meta">HKEY_CLASSES_ROOT\.md\ShellNew</span>]<br><span class="hljs-string">&quot;NullFile&quot;</span>=<span class="hljs-string">&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><p>打开注册表后发现这一项比其他的多一个<code>ShellNew</code></p><p><img src="/2023/12/14/zhu-ce-biao-bi-ji/image-20231214191154310.png" alt="和上面的.markdown项对比一下"></p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>注册表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker学习</title>
    <link href="/2023/12/08/docker-learn/"/>
    <url>/2023/12/08/docker-learn/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker学习笔记"><a href="#Docker学习笔记" class="headerlink" title="Docker学习笔记"></a>Docker学习笔记</h1><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>去<a href="https://www.docker.com/">Docker: Accelerated Container Application Development</a>安装docker</p><h2 id="验证-Docker-安装"><a href="#验证-Docker-安装" class="headerlink" title="验证 Docker 安装"></a>验证 Docker 安装</h2><p>安装完成后，通过运行以下命令来验证 Docker 是否正确安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker --version<br>docker run hello-world<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/docker-learn/image-20231208145856984.png" alt="hello-world"></p><h2 id="用一个C语言的猜数字程序为例学习"><a href="#用一个C语言的猜数字程序为例学习" class="headerlink" title="用一个C语言的猜数字程序为例学习"></a>用一个C语言的猜数字程序为例学习</h2><h3 id="创建-C-语言程序"><a href="#创建-C-语言程序" class="headerlink" title="创建 C 语言程序"></a>创建 C 语言程序</h3><p>创建一个简单的猜数字的 C 语言程序，比如 <code>guess_number.c</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    srand(time(<span class="hljs-number">0</span>));<br>    <span class="hljs-type">int</span> number_to_guess = rand() % <span class="hljs-number">100</span>;<br>    <span class="hljs-type">int</span> guess, attempts = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome to the Number Guessing Game!\n&quot;</span>);<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter your guess: &quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;guess);<br>        attempts++;<br><br>        <span class="hljs-keyword">if</span> (guess &gt; number_to_guess) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Too high! Try again.\n&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (guess &lt; number_to_guess) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Too low! Try again.\n&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Congratulations! You guessed the number in %d attempts.\n&quot;</span>, attempts);<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (guess != number_to_guess);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="创建-Dockerfile"><a href="#创建-Dockerfile" class="headerlink" title="创建 Dockerfile"></a>创建 Dockerfile</h3><p>在 C 语言程序的目录下创建一个名为 <code>Dockerfile</code> 的文件：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># Dockerfile</span><br><span class="hljs-keyword">FROM</span> gcc:latest<br><br><span class="hljs-comment"># 这一行的作用是将当前目录（Docker 上下文中的当前目录，即包含 Dockerfile 的目录）中的所有文件和文件夹复制到容器中的 /app 目录中。</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . /app</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> gcc guess_number.c -o guess_number</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;./guess_number&quot;</span>]</span><br><br></code></pre></td></tr></table></figure><p>这个 Dockerfile 使用了 <code>gcc:latest</code> 镜像，将C 语言程序复制到容器中，并编译成可执行文件。最后，定义了容器启动时运行的命令。</p><h3 id="构建-Docker-镜像"><a href="#构建-Docker-镜像" class="headerlink" title="构建 Docker 镜像"></a>构建 Docker 镜像</h3><p>在包含 Dockerfile 的目录下运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t guess_number_image .<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/docker-learn/image-20231208150355046.png" alt="docker build"></p><p>构建后当前文件夹下没有多出任何文件，应该是把镜像构建在<strong>docker</strong>指定的位置了</p><h3 id="运行-Docker-容器"><a href="#运行-Docker-容器" class="headerlink" title="运行 Docker 容器"></a>运行 Docker 容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it --<span class="hljs-built_in">rm</span> guess_number_image<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/docker-learn/image-20231208150412144.png" alt="docker run"></p><p>其中 <code>-it</code> 选项表示使用交互模式，并分配一个终端，<code>--rm</code> 选项表示容器停止后自动删除。</p><h3 id="查看Docker-Desktop"><a href="#查看Docker-Desktop" class="headerlink" title="查看Docker Desktop"></a>查看Docker Desktop</h3><p>此时猜数字程序已经退出</p><p><img src="/2023/12/08/docker-learn/image-20231208150542490.png" alt="Docker Desktop"></p><h3 id="查看运行中的容器"><a href="#查看运行中的容器" class="headerlink" title="查看运行中的容器"></a>查看运行中的容器</h3><p>再次打开猜数字程序，然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/docker-learn/image-20231208150852414.png" alt="docker ps"></p><h3 id="停止和删除容器"><a href="#停止和删除容器" class="headerlink" title="停止和删除容器"></a>停止和删除容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker stop container_id<br>docker <span class="hljs-built_in">rm</span> container_id<br></code></pre></td></tr></table></figure><p><img src="/2023/12/08/docker-learn/image-20231208151005279.png" alt="docker stop"></p><h2 id="镜像与容器的区别"><a href="#镜像与容器的区别" class="headerlink" title="镜像与容器的区别"></a>镜像与容器的区别</h2><p>镜像是一个静态的、不可变的软件包，而容器是一个动态的、可变的运行实例。</p><p>镜像用于定义应用程序的静态结构，而容器用于在运行时执行和修改应用程序。</p><p>在实际应用中，通常通过镜像来创建容器，以便启动和运行应用程序。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="问题1：error-during-connect"><a href="#问题1：error-during-connect" class="headerlink" title="问题1：error during connect"></a>问题1：error during connect</h3><p>在build时遇到</p><blockquote><p>error during connect: In the default daemon configuration on Windows, the docker client must be run with elevated privileges to connect</p></blockquote><p><img src="/2023/12/08/docker-learn/image-20231208151800769.png" alt="error during connect"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>打开<strong>docker desktop</strong></p><p>此时问题可以解决</p><h3 id="问题2：请启用虚拟机平台-Windows-功能并确保在-BIOS-中启用虚拟化"><a href="#问题2：请启用虚拟机平台-Windows-功能并确保在-BIOS-中启用虚拟化" class="headerlink" title="问题2：请启用虚拟机平台 Windows 功能并确保在 BIOS 中启用虚拟化"></a>问题2：请启用虚拟机平台 Windows 功能并确保在 BIOS 中启用虚拟化</h3><p>使用<strong>wsl</strong>的时候遇到</p><p>在如下系统设置中勾中虚拟机平台，其实在<strong>Windows</strong>下用<strong>docker</strong>的比较少</p><p><img src="/2023/12/08/docker-learn/image-20231208152222011.png" alt="虚拟机平台"></p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python实用函数</title>
    <link href="/2023/12/03/python-shi-yong-han-shu/"/>
    <url>/2023/12/03/python-shi-yong-han-shu/</url>
    
    <content type="html"><![CDATA[<h1 id="python实用函数"><a href="#python实用函数" class="headerlink" title="python实用函数"></a>python实用函数</h1><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><blockquote><p>合并两个列表</p></blockquote><p>返回值为一个<code>zip</code>对象</p><p><code>zip</code>中的每个元素都是一个元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># zip是将两个列表合在一起</span><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>b = [<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>]<br><span class="hljs-comment"># print(zip(a,b)) # &lt;zip object at 0x00000234EA475140&gt;</span><br><span class="hljs-keyword">for</span> (i, j) <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b):<br>    <span class="hljs-built_in">print</span>(i, j)  <span class="hljs-comment"># 1 4 - 2 5 - 3 6</span><br><br></code></pre></td></tr></table></figure><h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h2><blockquote><p>enumerate会给列表加上序号 从0开始</p></blockquote><p>返回值为一个<code>enumerate</code>对象</p><p><code>enumerate</code>中的每个元素都是一个元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># enumerate会给列表加上序号 从0开始</span><br>c = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-comment"># print(enumerate(c)) # &lt;enumerate object at 0x0000027817E216C0&gt;</span><br><span class="hljs-keyword">for</span> (i, j) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(c):<br>    <span class="hljs-built_in">print</span>(i, j)  <span class="hljs-comment"># 0 a - 1 b - 2 c</span><br></code></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>格式: lambda &lt;args&gt; : &lt;expression&gt;</p><p>参考: <a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017451447842528">匿名函数 - 廖雪峰的官方网站</a></p><blockquote><p>关键字<code>lambda</code>表示匿名函数，冒号前面的<code>x</code>表示函数参数。</p><p>匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。</p><p>用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">d=<span class="hljs-keyword">lambda</span> x,y,z:x*y*z<br><span class="hljs-built_in">print</span>(d(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>((<span class="hljs-keyword">lambda</span> x:x**<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><h3 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h3><blockquote><p>map()是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">map</span>(function, iterable, ...)<br></code></pre></td></tr></table></figure><p>事实上<code>map</code>函数返回的是一个<code>map</code>对象</p><p><code>map</code>的第一个参数可以写一个已知的函数，也可以写一个<strong>lambda</strong>表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">d</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x + <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">map</span>(d, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]):<br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x ** <span class="hljs-number">2</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]):<br>    <span class="hljs-built_in">print</span>(j)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python rich库</title>
    <link href="/2023/11/09/python-rich/"/>
    <url>/2023/11/09/python-rich/</url>
    
    <content type="html"><![CDATA[<h1 id="python-rich库笔记"><a href="#python-rich库笔记" class="headerlink" title="python rich库笔记"></a>python <code>rich</code>库笔记</h1><p><a href="https://github.com/textualize/rich/blob/master/README.cn.md">官网中文文档</a></p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>在命令行输入以下命令进行预览</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python -m rich<br></code></pre></td></tr></table></figure><h2 id="rich-print"><a href="#rich-print" class="headerlink" title="rich.print"></a>rich.print</h2><p>这是一个导入即用的函数，它的参数与<code>python</code>自带的<code>print</code>函数一致</p><p>以下是一个示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rich <span class="hljs-keyword">import</span> <span class="hljs-built_in">print</span><br><br><span class="hljs-comment"># rich的print会根据数据类型给打印的对象加上不同的颜色</span><br><span class="hljs-built_in">print</span>(&#123;<span class="hljs-number">1</span>:[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]&#125;)<br><span class="hljs-comment"># 标签语法 输出红色的hello和斜体+下划线的world</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[red]hello[/red] [i u]world[/i u]&quot;</span>)<br><br></code></pre></td></tr></table></figure><p><img src="/2023/11/09/python-rich/fig1.png"></p><h2 id="rich-console-Console"><a href="#rich-console-Console" class="headerlink" title="rich.console.Console"></a>rich.console.Console</h2><p>这个比刚刚的<code>print</code>更高级一些</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rich.console <span class="hljs-keyword">import</span> Console<br><br>console = Console()<br>console.<span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>) <span class="hljs-comment"># 和之前的rich.print一样</span><br><span class="hljs-comment"># log会打印时间和所在行数</span><br>console.log(<span class="hljs-string">&#x27;[blue]world[/blue]&#x27;</span>) <span class="hljs-comment"># [16:34:39] world     t.py:4</span><br>console.log(<span class="hljs-string">&#x27;log_locals选项可以用来打印局部变量的值&#x27;</span>,log_locals=<span class="hljs-literal">True</span>) <span class="hljs-comment"># 不过还是觉得需要看什么变量就直接打印就行了</span><br></code></pre></td></tr></table></figure><p><img src="/2023/11/09/python-rich/fig2.png"></p><p><em>图的右侧还有代码的行数，这里没有截到右边</em></p><h2 id="rich-inspect"><a href="#rich-inspect" class="headerlink" title="rich.inspect"></a>rich.inspect</h2><p>可以用来检查对应对象或者实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rich <span class="hljs-keyword">import</span> inspect<br><br>my_list = [<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>]<br><span class="hljs-comment"># methods参数决定是否显示对应方法</span><br>inspect(my_list, methods=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 当然你也可以查看它自己</span><br>inspect(inspect)<br></code></pre></td></tr></table></figure><p><img src="/2023/11/09/python-rich/fig3.png"></p><h2 id="rich-progress-track"><a href="#rich-progress-track" class="headerlink" title="rich.progress.track"></a>rich.progress.track</h2><p>打印无闪烁的进度条</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rich.progress <span class="hljs-keyword">import</span> track<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">do_step</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-comment"># print(arg)</span><br>    <span class="hljs-comment"># 如果有打印的话 可以发现那个进度条永远是在最后的</span><br>    time.sleep(<span class="hljs-number">0.1</span>)<br><br><span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> track(<span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>)):<br>    do_step(step)<br></code></pre></td></tr></table></figure><p><img src="/2023/11/09/python-rich/fig4.png"></p><p><em>进度条右侧的剩余时间是它自己估计的</em></p><h2 id="rich-console-Console-status"><a href="#rich-console-Console-status" class="headerlink" title="rich.console.Console.status"></a>rich.console.Console.status</h2><p>对于那些很难计算进度的情况，你可以使用 status 方法，它会展示一个“环形旋转”的动画和文字信息。这个动画并不会妨碍你正常使用控制台。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> rich.console <span class="hljs-keyword">import</span> Console<br><br>console = Console()<br>tasks = [<span class="hljs-string">f&quot;task <span class="hljs-subst">&#123;n&#125;</span>&quot;</span> <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)]<br><br><span class="hljs-keyword">with</span> console.status(<span class="hljs-string">&quot;[bold green]Working on tasks...&quot;</span>) <span class="hljs-keyword">as</span> status:<br>    <span class="hljs-keyword">while</span> tasks:<br>        task = tasks.pop(<span class="hljs-number">0</span>)<br>        sleep(<span class="hljs-number">1</span>)<br>        console.log(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;task&#125;</span> complete&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/11/09/python-rich/fig5.png"></p><p><em>这个小动画和前面的进度条不同，进度条结束了也会保留，而这个小动画结束之后会消失。</em></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>还有一些类似显示$Markdown$和语法高亮的功能，感觉挺实用的，以后要用的时候可以学一下</p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python装饰器</title>
    <link href="/2023/11/09/python-decorator/"/>
    <url>/2023/11/09/python-decorator/</url>
    
    <content type="html"><![CDATA[<h1 id="python装饰器"><a href="#python装饰器" class="headerlink" title="python装饰器"></a>python装饰器</h1><h2 id="函数内的函数定义"><a href="#函数内的函数定义" class="headerlink" title="函数内的函数定义"></a>函数内的函数定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">b</span>):<br>        <span class="hljs-keyword">return</span> a + b<br>    <span class="hljs-keyword">return</span> f2<br><br><span class="hljs-comment"># 计算3+4=7</span><br>t = f1(<span class="hljs-number">3</span>) <span class="hljs-comment"># 这里返回的是一个函数</span><br><span class="hljs-built_in">print</span>(t(<span class="hljs-number">4</span>)) <span class="hljs-comment"># 7</span><br></code></pre></td></tr></table></figure><h2 id="一个简单的装饰器"><a href="#一个简单的装饰器" class="headerlink" title="一个简单的装饰器"></a>一个简单的装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fun_to_run</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    输入参数是一个函数</span><br><span class="hljs-string">    返回值也是一个函数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        t_begin = time.time()<br>        fun_to_run()<br>        t_end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@timer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>():<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>):<br>        r+=i<br>    <span class="hljs-built_in">print</span>(r)<br><br>my_func() <span class="hljs-comment"># 函数my_func的运行时间为: 0.04650068283081055 s</span><br></code></pre></td></tr></table></figure><p>相当于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fun_to_run</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    输入参数是一个函数</span><br><span class="hljs-string">    返回值也是一个函数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        t_begin = time.time()<br>        fun_to_run()<br>        t_end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>():<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>):<br>        r+=i<br>    <span class="hljs-built_in">print</span>(r)<br><br>t=timer(my_func)<br>t() <span class="hljs-comment"># 函数my_func的运行时间为: 0.04343557357788086 s</span><br></code></pre></td></tr></table></figure><h2 id="在装饰器中使用函数参数"><a href="#在装饰器中使用函数参数" class="headerlink" title="在装饰器中使用函数参数"></a>在装饰器中使用函数参数</h2><p>按照一定的顺序进行定义，如下面的代码所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fun_to_run</span>):<br>    <span class="hljs-comment"># 第一个参数是要装饰的函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args,**kargs</span>):<br>        <span class="hljs-comment"># 第二个参数是要装饰的函数的参数</span><br>        t_begin = time.time()<br>        fun_to_run(*args,**kargs)<br>        t_end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@timer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">num</span>):<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        r+=i<br>    <span class="hljs-built_in">print</span>(r)<br><br>my_func(<span class="hljs-number">5555</span>) <span class="hljs-comment"># 函数my_func的运行时间为: 0.04650068283081055 s</span><br></code></pre></td></tr></table></figure><h2 id="带参数的函数装饰器"><a href="#带参数的函数装饰器" class="headerlink" title="带参数的函数装饰器"></a>带参数的函数装饰器</h2><p>按照一定的顺序进行定义，如下面的代码所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">unit</span>):<br>    <span class="hljs-comment"># 第一个参数是装饰器参数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">middle</span>(<span class="hljs-params">fun_to_run</span>):<br>        <span class="hljs-comment"># 第二个参数是要装饰的函数</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            <span class="hljs-comment"># 第三个参数是要装饰的函数的参数</span><br>            t_begin = time.time()<br>            fun_to_run(*args, **kwargs)<br>            t_end = time.time()<br>            <span class="hljs-keyword">if</span> unit == <span class="hljs-string">&quot;ms&quot;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;(t_end - t_begin)*<span class="hljs-number">1000</span>&#125;</span> ms&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> unit == <span class="hljs-string">&quot;s&quot;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> middle<br><br><span class="hljs-meta">@timer(<span class="hljs-params"><span class="hljs-string">&quot;ms&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">num</span>):<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        r+=i<br>    <span class="hljs-built_in">print</span>(r)<br><br>my_func(<span class="hljs-number">500000</span>) <span class="hljs-comment"># 函数my_func的运行时间为: 0.0 ms</span><br></code></pre></td></tr></table></figure><h2 id="使用被装饰的函数的返回值"><a href="#使用被装饰的函数的返回值" class="headerlink" title="使用被装饰的函数的返回值"></a>使用被装饰的函数的返回值</h2><p>这样装饰器就不是返回一个函数了，而是返回对应的返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fun_to_run</span>):<br>    <span class="hljs-comment"># 第一个参数是要装饰的函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args,**kargs</span>):<br>        <span class="hljs-comment"># 第二个参数是要装饰的函数的参数</span><br>        t_begin = time.time()<br>        result =fun_to_run(*args,**kargs)<br>        t_end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>        <span class="hljs-comment"># 要在wrapper函数设定返回值</span><br>        <span class="hljs-keyword">return</span> result<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@timer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">num</span>):<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        r+=i<br>    <span class="hljs-keyword">return</span> r<br><br>res = my_func(<span class="hljs-number">5555</span>) <span class="hljs-comment"># 函数my_func的运行时间为: 0.0 s</span><br><span class="hljs-built_in">print</span>(res) <span class="hljs-comment"># 15426235</span><br></code></pre></td></tr></table></figure><p>如果按老样子，不改的话，就会输出以下内容，这是因为<code>wrapper</code>函数没有返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fun_to_run</span>):<br>    <span class="hljs-comment"># 第一个参数是要装饰的函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args,**kargs</span>):<br>        <span class="hljs-comment"># 第二个参数是要装饰的函数的参数</span><br>        t_begin = time.time()<br>        result = fun_to_run(*args,**kargs)<br>        t_end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@timer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">num</span>):<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        r+=i<br>    <span class="hljs-keyword">return</span> r<br><br>res = my_func(<span class="hljs-number">5555</span>) <span class="hljs-comment"># 函数my_func的运行时间为: 0.0 s</span><br><span class="hljs-built_in">print</span>(res) <span class="hljs-comment"># None</span><br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>此外也有类装饰器等，可以以后有需要了再学。</p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python传参机制</title>
    <link href="/2023/08/08/python-chuan-can-ji-zhi/"/>
    <url>/2023/08/08/python-chuan-can-ji-zhi/</url>
    
    <content type="html"><![CDATA[<p><em>这篇笔记只是个人拙见，可能有不对的地方，还请海涵</em></p><h1 id="Python传参机制"><a href="#Python传参机制" class="headerlink" title="Python传参机制"></a>Python传参机制</h1><blockquote><p>Python 中一切皆为对象，数字是对象，列表是对象，函数也是对象，任何东西都是对象。而变量只是对象的一个引用，对象的操作都是通过引用来完成的</p></blockquote><p>个人认为，python函数内重新赋值时，不会改变函数外的值，但在函数内修改成员变量的值时，会改变函数外的值</p><h2 id="python内存分配机制"><a href="#python内存分配机制" class="headerlink" title="python内存分配机制"></a>python内存分配机制</h2><p>这个机制让我想起了Java的字符串分配内存的情形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>String s1=<span class="hljs-string">&quot;hello&quot;</span>;<br>String s2=<span class="hljs-string">&quot;hello&quot;</span>;<br>String s3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(s1==s2);<span class="hljs-comment">//true</span><br>System.out.println(s1==s3);<span class="hljs-comment">//false</span><br>System.out.println(s1.equals(s3));<span class="hljs-comment">//true</span><br><span class="hljs-type">int</span> num1=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> num2=<span class="hljs-number">1</span>;<br>System.out.println(num1==num2);<span class="hljs-comment">//true</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>放一段代码以做对照</p><h3 id="对于不可变对象"><a href="#对于不可变对象" class="headerlink" title="对于不可变对象"></a>对于不可变对象</h3><p>关于不可变对象（数字、字符或元组），来看一个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">1</span><br>b=<span class="hljs-number">1</span><br>c=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a),<span class="hljs-built_in">id</span>(b),<span class="hljs-built_in">id</span>(c))  <span class="hljs-comment"># 140706301014824 140706301014824 140706301014824</span><br>b=<span class="hljs-number">2</span><br>c+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a),<span class="hljs-built_in">id</span>(b),<span class="hljs-built_in">id</span>(c))  <span class="hljs-comment"># 140706301014824 140706301014856 140706301014856</span><br><br></code></pre></td></tr></table></figure><p>可以看出，值相同，就是指向一样的内存地址</p><h3 id="对于可变对象"><a href="#对于可变对象" class="headerlink" title="对于可变对象"></a>对于可变对象</h3><p>关于可变对象（字典、列表），来看一个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>b=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>c=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a),<span class="hljs-built_in">id</span>(b),<span class="hljs-built_in">id</span>(c))  <span class="hljs-comment"># 140706301014824 140706301014824 140706301014824</span><br>b.append(<span class="hljs-number">3</span>) <span class="hljs-comment"># [1, 2, 3]</span><br>c.append(<span class="hljs-number">3</span>) <span class="hljs-comment"># [1, 2, 3]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a),<span class="hljs-built_in">id</span>(b),<span class="hljs-built_in">id</span>(c))  <span class="hljs-comment"># 140706301014824 140706301014856 140706301014856</span><br><br></code></pre></td></tr></table></figure><p>修改其中的值后，会指向新的对象</p><h2 id="对于赋值"><a href="#对于赋值" class="headerlink" title="对于赋值"></a>对于赋值</h2><p>赋值会为新的值开辟新的空间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值前x的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(x))) <span class="hljs-comment"># 140706301014824 x和a指向的位置一样</span><br>    x=<span class="hljs-number">2</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值后x的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(x))) <span class="hljs-comment"># 140706301014856 x的指向改变，不再指向1</span><br><br><br>a=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值前a的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(a))) <span class="hljs-comment"># 140706301014824</span><br>fun(a)<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><p>即使是实参是列表也是一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值前x的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(x))) <span class="hljs-comment"># 140706301014824</span><br>    x=<span class="hljs-number">2</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值后x的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(x))) <span class="hljs-comment"># 140706301014856</span><br><br><br>a=[<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值前a的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(a))) <span class="hljs-comment"># 140706301014824</span><br>fun(a)<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><h2 id="对于修改值"><a href="#对于修改值" class="headerlink" title="对于修改值"></a>对于修改值</h2><p>修改值会影响函数外面的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x</span>):<br>    x[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-number">1</span><br>    x[<span class="hljs-string">&#x27;b&#x27;</span>] = <span class="hljs-number">2</span>      <br>    <span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span><br>    x = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">4</span>&#125;<br>    <span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># &#123;&#x27;a&#x27;: 3, &#x27;b&#x27;: 4&#125;</span><br><br><br>t = &#123;&#125;<br>func(t)<br><span class="hljs-built_in">print</span>(t)  <span class="hljs-comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span><br><br></code></pre></td></tr></table></figure><p>看一个类的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        x=<span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">t:Test</span>):<br>    t.x=<span class="hljs-number">2</span><br>    t()<br><br>a=Test()<br>fun(a)  <span class="hljs-comment"># 2</span><br><br></code></pre></td></tr></table></figure><p>也是一样的</p><h1 id="修改全局变量"><a href="#修改全局变量" class="headerlink" title="修改全局变量"></a>修改全局变量</h1><p>顺便说一下怎么修改全局变量</p><p>直接修改是修改不了的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>():<br>    a=<span class="hljs-number">2</span><br><br>a=<span class="hljs-number">1</span><br>fun()<br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><p>事实上，修改不了的原因应该在于函数内部是无法直接访问全局变量的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">1</span>  <span class="hljs-comment"># 可以看到，即使把a提到最前面也会报错</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>():<br>    <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># UnboundLocalError: cannot access local variable &#x27;a&#x27; where it is not associated with a value</span><br>    a=<span class="hljs-number">2</span><br><br>fun()<br></code></pre></td></tr></table></figure><p>想要修改的话，可以使用<code>global</code>这个关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>():<br>    <span class="hljs-comment"># 下面这种写法是错误的</span><br>    <span class="hljs-keyword">global</span> a=<span class="hljs-number">2</span>  <span class="hljs-comment"># SyntaxError: invalid syntax</span><br><br>a=<span class="hljs-number">1</span><br>fun()<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><p>像这样就修改成功了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>():<br>    <span class="hljs-keyword">global</span> a<br>    a=<span class="hljs-number">2</span><br><br>a=<span class="hljs-number">1</span><br>fun()<br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 2</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于python -m visdom.server缓慢</title>
    <link href="/2023/07/15/guan-yu-python-m-visdom-server-huan-man/"/>
    <url>/2023/07/15/guan-yu-python-m-visdom-server-huan-man/</url>
    
    <content type="html"><![CDATA[<h1 id="解决python-m-visdom-server缓慢的问题"><a href="#解决python-m-visdom-server缓慢的问题" class="headerlink" title="解决python -m visdom.server缓慢的问题"></a>解决<code>python -m visdom.server</code>缓慢的问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>使用<code>python -m visdom.server</code>后没反应</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta">E:\pprogram\test&gt;python -m visdom.<span class="hljs-keyword">server</span><br>Checking <span class="hljs-keyword">for</span> scripts.<br>Downloading scripts, <span class="hljs-keyword">this</span> may take a little <span class="hljs-keyword">while</span><br></code></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>下载这个文件夹中的所有文件<a href="https://github.com/fossasia/visdom/tree/master/py/visdom/static">visdom&#x2F;py&#x2F;visdom&#x2F;static at master · fossasia&#x2F;visdom (github.com)</a></p><p>去替换conda库环境下的文件夹，如我这里是<code>D:\Anaconda3\envs\torch\Lib\site-packages\visdom\static</code></p><p>对于版本为<code>0.2.4</code> 可以去找<code>D:\Anaconda3\envs\torch\Lib\site-packages\visdom\server\run_server.py</code>这个文件</p><p>靠前一些的版本如果没有这个文件，可以去找找看有没有叫<code>server.py</code>的文件</p><p>找到这里，如我这里是在235行，将其注释掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_scripts_and_run</span>():<br>  <span class="hljs-comment"># download_scripts()</span><br>  main()<br></code></pre></td></tr></table></figure><p>然后就重新开始就好了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">(torch) E:\pprogram\test&gt;python -m visdom.server<br>It&#x27;s Alive!<br>INFO:root:Application Started<br>INFO:root:Working directory: C:\Users\Administrator\.visdom<br>You can navigate to http://localhost:8097<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>bug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>torch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>torch笔记</title>
    <link href="/2023/07/12/torch-learn/"/>
    <url>/2023/07/12/torch-learn/</url>
    
    <content type="html"><![CDATA[<h1 id="torch笔记"><a href="#torch笔记" class="headerlink" title="torch笔记"></a>torch笔记</h1><h2 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h2><p><a href="http://www.bilibili.com/video/BV1hE411t7RN">www.bilibili.com/video/BV1hE411t7RN</a></p><h2 id="基本类的使用"><a href="#基本类的使用" class="headerlink" title="基本类的使用"></a>基本类的使用</h2><h3 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h3><p>作用：数据导入</p><p>模块位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Dataset需要重写下面这三个函数</span><br><span class="hljs-string">__init__:写初始化的准备工作，当然可以空着</span><br><span class="hljs-string">__getitem__:如何获取指定元素</span><br><span class="hljs-string">__len__:数据集有多大</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image <span class="hljs-comment"># python image lib, py自带的库</span><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root_dir, image_dir, label_dir</span>): <span class="hljs-comment"># 参数的个数和名字随意，只要有__init__这个函数就行</span><br>        self.root_dir = root_dir<br>        self.image_dir = image_dir<br>        self.label_dir = label_dir<br>        self.label_path = os.path.join(self.root_dir, self.label_dir)<br>        self.image_path = os.path.join(self.root_dir, self.image_dir)<br>        self.image_list = os.listdir(self.image_path)<br>        self.label_list = os.listdir(self.label_path)<br>        <span class="hljs-comment"># 因为label 和 Image文件名相同，进行一样的排序，可以保证取出的数据和label是一一对应的</span><br>        self.image_list.sort()<br>        self.label_list.sort()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>): <span class="hljs-comment"># idx是序号</span><br>        img_name = self.image_list[idx]<br>        label_name = self.label_list[idx]<br>        img_item_path = os.path.join(self.root_dir, self.image_dir, img_name)<br>        label_item_path = os.path.join(self.root_dir, self.label_dir, label_name)<br>        img = Image.<span class="hljs-built_in">open</span>(img_item_path)<br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(label_item_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            label = f.readline()<br><br>        <span class="hljs-comment"># img = np.array(img)</span><br>        sample = &#123;<span class="hljs-string">&#x27;img&#x27;</span>: img, <span class="hljs-string">&#x27;label&#x27;</span>: label&#125;<br>        <span class="hljs-keyword">return</span> sample<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(self.image_list) == <span class="hljs-built_in">len</span>(self.label_list)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.image_list)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    root_dir = <span class="hljs-string">&quot;F:\\test\\pytorch-tutorial-master\\dataset\\train&quot;</span><br>    image_ants = <span class="hljs-string">&quot;ants_image&quot;</span><br>    label_ants = <span class="hljs-string">&quot;ants_label&quot;</span><br>    ants_dataset = MyData(root_dir, image_ants, label_ants)<br>    ants_dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;img&#x27;</span>].show() <span class="hljs-comment"># 获得第一张图片</span><br></code></pre></td></tr></table></figure><h3 id="tensorboard-SummaryWriter"><a href="#tensorboard-SummaryWriter" class="headerlink" title="tensorboard.SummaryWriter"></a>tensorboard.SummaryWriter</h3><p>日志记录，可以记录标量或者图片的变化</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br>image_path = <span class="hljs-string">&quot;F:\\test\\pytorch-tutorial-master\\dataset\\train\\ants_image\\6240329_72c01e663e.jpg&quot;</span><br>img_PIL = Image.<span class="hljs-built_in">open</span>(image_path)<br>img_array = np.array(img_PIL)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img_array))<br><span class="hljs-built_in">print</span>(img_array.shape)<br><br>writer.add_image(<span class="hljs-string">&quot;train&quot;</span>, img_array, <span class="hljs-number">1</span>, dataformats=<span class="hljs-string">&#x27;HWC&#x27;</span>) <span class="hljs-comment"># dataformats这个参数用来指明数组中通道的意义(长宽高顺序),1是第一张,后面还可以加第2张第3张等</span><br><span class="hljs-comment"># 如果是加入图片数组的话是使用add_images()方法 显示时是一堆图片拼接在一起</span><br><span class="hljs-comment"># y = 2x</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    writer.add_scalar(<span class="hljs-string">&quot;y=2x&quot;</span>, <span class="hljs-number">3</span>*i, i) <span class="hljs-comment"># 加入标量</span><br><br>writer.close()  <span class="hljs-comment"># 别忘了关</span><br></code></pre></td></tr></table></figure><p>查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda activate torch<br>tensorboard --logdir=E:\pprogram\<span class="hljs-built_in">test</span>\logs <span class="hljs-comment"># 这个是代码中指定的路径</span><br></code></pre></td></tr></table></figure><h3 id="transforms"><a href="#transforms" class="headerlink" title="transforms"></a>transforms</h3><p>图片处理类</p><p>导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset, DataLoader<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root_dir, image_dir, label_dir, transform=<span class="hljs-literal">None</span></span>):<br>        self.root_dir = root_dir<br>        self.image_dir = image_dir<br>        self.label_dir = label_dir<br>        self.label_path = os.path.join(self.root_dir, self.label_dir)<br>        self.image_path = os.path.join(self.root_dir, self.image_dir)<br>        self.image_list = os.listdir(self.image_path)<br>        self.label_list = os.listdir(self.label_path)<br>        self.transform = transform<br>        <span class="hljs-comment"># 因为label 和 Image文件名相同，进行一样的排序，可以保证取出的数据和label是一一对应的</span><br>        self.image_list.sort()<br>        self.label_list.sort()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        img_name = self.image_list[idx]<br>        label_name = self.label_list[idx]<br>        img_item_path = os.path.join(self.root_dir, self.image_dir, img_name)<br>        label_item_path = os.path.join(self.root_dir, self.label_dir, label_name)<br>        img = Image.<span class="hljs-built_in">open</span>(img_item_path)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(label_item_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            label = f.readline()<br><br>        <span class="hljs-keyword">if</span> self.transform:<br>            img = transform(img)<br>            <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            python里面有一个魔法函数叫__call__()</span><br><span class="hljs-string">            在实现它后 类的实例可以发挥出类似函数的功能</span><br><span class="hljs-string">            e.g.</span><br><span class="hljs-string">            p=new Person(&quot;lihua&quot;) # 这里调用构造函数__init__(str)</span><br><span class="hljs-string">            age=p(18) # 这里调用魔法函数__call__(int)</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br><br>        <span class="hljs-keyword">return</span> img, label<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(self.image_list) == <span class="hljs-built_in">len</span>(self.label_list)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.image_list)<br><br>transform = transforms.Compose([transforms.Resize(<span class="hljs-number">400</span>), transforms.ToTensor()])<br>root_dir = <span class="hljs-string">&quot;dataset/train&quot;</span><br>image_ants = <span class="hljs-string">&quot;ants_image&quot;</span><br>label_ants = <span class="hljs-string">&quot;ants_label&quot;</span><br>ants_dataset = MyData(root_dir, image_ants, label_ants, transform=transform)<br>image_bees = <span class="hljs-string">&quot;bees_image&quot;</span><br>label_bees = <span class="hljs-string">&quot;bees_label&quot;</span><br>bees_dataset = MyData(root_dir, image_bees, label_bees, transform=transform)<br></code></pre></td></tr></table></figure><p><code>transform = transforms.ToTensor()</code>使所有数据转换为<code>Tensor</code>，如果不进行转换则返回的是PIL图片。<code>transforms.ToTensor()</code>将尺寸为 (H x W x C) 且数据位于[0, 255]的PIL图片或者数据类型为<code>np.uint8</code>的NumPy数组转换为尺寸为(C x H x W)且数据类型为<code>torch.float32</code>且位于[0.0, 1.0]的<code>Tensor</code>。</p><h3 id="dataloader"><a href="#dataloader" class="headerlink" title="dataloader"></a>dataloader</h3><p>数据分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><br><span class="hljs-comment"># 准备的测试数据集</span><br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>test_data = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor())<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">batch_size:一组有多少的数据</span><br><span class="hljs-string">shuffle:是否打乱</span><br><span class="hljs-string">num_workers:多线程装载,windows下最好写0</span><br><span class="hljs-string">drop_last:是否丢弃最后一组不满一组的</span><br><span class="hljs-string">它的装载方式是这样的:</span><br><span class="hljs-string">例如如果dataset中的每一项是x,y;batch_size=4</span><br><span class="hljs-string">那test_loader中的每一项是(Xs,Ys),其中Xs和Ys都是4元组</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>test_loader = DataLoader(dataset=test_data, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">0</span>, drop_last=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 测试数据集中第一张图片及target</span><br>img, target = test_data[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(img.shape)<br><span class="hljs-built_in">print</span>(target)<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;dataloader&quot;</span>)<br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    step = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader:<br>        <span class="hljs-comment"># 由于shuffle=True,所以两次for循环中test_loader返回的东西不一样</span><br>        imgs, targets = data<br>        <span class="hljs-comment"># print(imgs.shape)</span><br>        <span class="hljs-comment"># print(targets)</span><br>        writer.add_images(<span class="hljs-string">&quot;Epoch: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch), imgs, step)<br>        step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="一些注意"><a href="#一些注意" class="headerlink" title="一些注意"></a>一些注意</h3><p>需要多看看官方文档，一方面要看看输入输出的数据类型是什么，另一方面不清楚返回值的话要试试<code>print(type(x))</code>或者关注一下<code>print(x.shape)</code>的值</p><h2 id="使用torch自带的数据集"><a href="#使用torch自带的数据集" class="headerlink" title="使用torch自带的数据集"></a>使用torch自带的数据集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset_transform = torchvision.transforms.Compose([<br>    torchvision.transforms.ToTensor()<br>])<br><br>train_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=dataset_transform, download=<span class="hljs-literal">True</span>) <span class="hljs-comment"># 用CIFAR10数据集,download=True代表要从网上在线下载,如果已经有的话,就不会再下载了</span><br>test_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=dataset_transform, download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># print(test_set[0])</span><br><span class="hljs-comment"># print(test_set.classes)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># img, target = test_set[0]</span><br><span class="hljs-comment"># print(img)</span><br><span class="hljs-comment"># print(target)</span><br><span class="hljs-comment"># print(test_set.classes[target])</span><br><span class="hljs-comment"># img.show()</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># print(test_set[0])</span><br><br>writer = SummaryWriter(<span class="hljs-string">&quot;p10&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    img, target = test_set[i]<br>    writer.add_image(<span class="hljs-string">&quot;test_set&quot;</span>, img, i)<br><br>writer.close()<br></code></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="nn-module"><a href="#nn-module" class="headerlink" title="nn.module"></a>nn.module</h3><p>torch.nn.Module is Base class for all neural network modules.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        <span class="hljs-comment"># 前趋,需要实现</span><br>        output = <span class="hljs-built_in">input</span> + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br>x = torch.tensor(<span class="hljs-number">1.0</span>)<br>output = tudui(x) <span class="hljs-comment"># 感觉这里有点像魔法函数__call__</span><br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><h3 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h3><p>F.conv2d</p><p>导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">torch.nn.functional.conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1) → Tensor</span><br><span class="hljs-string">input:(minibatch , in_channels , iH , iW) 最小批量 通道数 高 宽</span><br><span class="hljs-string">weight:(&#123;out_channels&#125; , \frac&#123;\text&#123;in\_channels&#125;&#125;&#123;\text&#123;groups&#125;&#125; , kH , kW) 卷积核</span><br><span class="hljs-string">bias: 偏置量 默认没有</span><br><span class="hljs-string">stride:每步长度 默认为1</span><br><span class="hljs-string">padding:外侧空白填充的行或者列数 默认为0</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>                      [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]])<br><br>kernel = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>],<br>                       [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>],<br>                       [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]])<br><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>))<br>kernel = torch.reshape(kernel, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><span class="hljs-built_in">print</span>(kernel.shape)<br><br>output = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output)<br><br>output2 = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(output2)<br><br>output3 = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output3)<br></code></pre></td></tr></table></figure><h3 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h3><p>Conv2d</p><p>用于选取特征</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        <span class="hljs-comment"># 和之前的代码不同，这里的只需要指定输入输出通道数，卷积核大小，卷积核内的权重是会自己随机初始化的</span><br>        self.conv1 = Conv2d(in_channels=<span class="hljs-number">3</span>, out_channels=<span class="hljs-number">6</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;./logs&quot;</span>)<br><br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    output = tudui(imgs)<br>    <span class="hljs-built_in">print</span>(imgs.shape)<br>    <span class="hljs-built_in">print</span>(output.shape)<br>    <span class="hljs-comment"># torch.Size([64, 3, 32, 32])</span><br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>    <span class="hljs-comment"># torch.Size([64, 6, 30, 30])  -&gt; [xxx, 3, 30, 30]</span><br><br>    output = torch.reshape(output, (-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>))  <span class="hljs-comment"># 6通道无法正常显示 所以reshape</span><br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br><br>    step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h3><p>用于减少数据量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, download=<span class="hljs-literal">True</span>,<br>                                       transform=torchvision.transforms.ToTensor())<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.maxpool1 = MaxPool2d(kernel_size=<span class="hljs-number">3</span>, ceil_mode=<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 多出来的部分的处理方式 为False为不保留</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.maxpool1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_maxpool&quot;</span>)<br>step = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>    output = tudui(imgs)<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="非线性激活"><a href="#非线性激活" class="headerlink" title="非线性激活"></a>非线性激活</h3><p>拟合特征</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> ReLU, Sigmoid<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>, -<span class="hljs-number">0.5</span>],<br>                      [-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>]])<br><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, download=<span class="hljs-literal">True</span>,<br>                                       transform=torchvision.transforms.ToTensor())<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.relu1 = ReLU()<br>        self.sigmoid1 = Sigmoid()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.sigmoid1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_relu&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, global_step=step)<br>    output = tudui(imgs)<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step += <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="线性层"><a href="#线性层" class="headerlink" title="线性层"></a>线性层</h3><p><img src="https://img-blog.csdnimg.cn/b7bc507721f3420f9ae5202676331b80.png" alt="img"></p><p>图中每个箭头都是一个线性计算 $$y&#x3D;ax+b$$ 具体是矩阵乘法</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>, drop_last=<span class="hljs-literal">True</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.linear1 = Linear(<span class="hljs-number">196608</span>, <span class="hljs-number">10</span>)  <span class="hljs-comment"># 将196608维输入变为10层的输出</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.linear1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    <span class="hljs-built_in">print</span>(imgs.shape)<br>    output = torch.flatten(imgs)  <span class="hljs-comment"># torch.flatten可以将Tenor展开成一行(1,1,1,...,n)这种形式</span><br>    <span class="hljs-built_in">print</span>(output.shape)<br>    output = tudui(output)<br>    <span class="hljs-built_in">print</span>(output.shape)<br></code></pre></td></tr></table></figure><h3 id="seq"><a href="#seq" class="headerlink" title="seq"></a>seq</h3><p>用于简化表达</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br><span class="hljs-built_in">print</span>(tudui)<br><span class="hljs-built_in">input</span> = torch.ones((<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))  <span class="hljs-comment"># 用来检验网络参数是否正确</span><br>output = tudui(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output.shape)<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_seq&quot;</span>)<br>writer.add_graph(tudui, <span class="hljs-built_in">input</span>)  <span class="hljs-comment"># 画流程图</span><br>writer.close()<br><br></code></pre></td></tr></table></figure><p><code>net[0]</code>这样根据下标访问子模块的写法只有当<code>net</code>是个<code>ModuleList</code>或者<code>Sequential</code>实例时才可以</p><h3 id="损失"><a href="#损失" class="headerlink" title="损失"></a>损失</h3><h4 id="loss"><a href="#loss" class="headerlink" title="loss"></a>loss</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> L1Loss<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>inputs = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], dtype=torch.float32)<br>targets = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>], dtype=torch.float32)<br><br>inputs = torch.reshape(inputs, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br>targets = torch.reshape(targets, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br><br>loss = L1Loss(reduction=<span class="hljs-string">&#x27;sum&#x27;</span>)  <span class="hljs-comment"># 作差然后绝对值</span><br>result = loss(inputs, targets)<br><br>loss_mse = nn.MSELoss()  <span class="hljs-comment"># 平方差</span><br>result_mse = loss_mse(inputs, targets)<br><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-built_in">print</span>(result_mse)<br><br><br>x = torch.tensor([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>])<br>y = torch.tensor([<span class="hljs-number">1</span>])<br>x = torch.reshape(x, (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br>loss_cross = nn.CrossEntropyLoss()<br>result_cross = loss_cross(x, y)<br><span class="hljs-built_in">print</span>(result_cross)<br></code></pre></td></tr></table></figure><h4 id="backward"><a href="#backward" class="headerlink" title="backward"></a>backward</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>loss = nn.CrossEntropyLoss()<br>tudui = Tudui()<br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    outputs = tudui(imgs)<br>    result_loss = loss(outputs, targets)<br>    result_loss.backward()  <span class="hljs-comment"># 和forward对应</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ok&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>loss = nn.CrossEntropyLoss()<br>tudui = Tudui()<br>optim = torch.optim.SGD(tudui.parameters(), lr=<span class="hljs-number">0.01</span>)  <span class="hljs-comment"># 用指定的网络初始化它的参数</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    <span class="hljs-comment"># 训练20次</span><br>    running_loss = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>        imgs, targets = data<br>        outputs = tudui(imgs)  <span class="hljs-comment"># 前向计算</span><br>        result_loss = loss(outputs, targets)  <span class="hljs-comment"># 损失计算</span><br>        optim.zero_grad()  <span class="hljs-comment"># 梯度置0</span><br>        result_loss.backward()  <span class="hljs-comment"># 反向传播</span><br>        optim.step()  <span class="hljs-comment"># 优化</span><br>        running_loss = running_loss + result_loss<br>    <span class="hljs-built_in">print</span>(running_loss)  <span class="hljs-comment"># 看每次的loss总和</span><br><br></code></pre></td></tr></table></figure><h3 id="打印参数及初始化参数"><a href="#打印参数及初始化参数" class="headerlink" title="打印参数及初始化参数"></a>打印参数及初始化参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> init<br><br>net = nn.Sequential(nn.Linear(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>), nn.ReLU(), nn.Linear(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># pytorch已进行默认初始化</span><br><span class="hljs-built_in">print</span>(net)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(net.named_parameters()))<br><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> net.named_parameters():<br>    <span class="hljs-comment"># 返回的名字自动加上了层数的索引作为前缀。 </span><br>    <span class="hljs-built_in">print</span>(name, param.size())<br><span class="hljs-comment"># 我们再来访问net中单层的参数。对于使用Sequential类构造的神经网络，我们可以通过方括号[]来访问网络的任一层。索引0表示隐藏层为Sequential实例最先添加的层。</span><br><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> net[<span class="hljs-number">0</span>].named_parameters():<br>    <span class="hljs-built_in">print</span>(name, param.size(), <span class="hljs-built_in">type</span>(param))<br><br><span class="hljs-comment"># 将权重参数初始化成均值为0、标准差为0.01的正态分布随机数，并依然将偏差参数清零</span><br><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> net.named_parameters():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;weight&#x27;</span> <span class="hljs-keyword">in</span> name:<br>        init.normal_(param, mean=<span class="hljs-number">0</span>, std=<span class="hljs-number">0.01</span>)<br>        <span class="hljs-built_in">print</span>(name, param.data)<br>        <br><span class="hljs-comment"># 使用常数来初始化权重参数</span><br><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> net.named_parameters():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;bias&#x27;</span> <span class="hljs-keyword">in</span> name:<br>        init.constant_(param, val=<span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">print</span>(name, param.data)<br></code></pre></td></tr></table></figure><h2 id="使用预下载好的模型"><a href="#使用预下载好的模型" class="headerlink" title="使用预下载好的模型"></a>使用预下载好的模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><br><span class="hljs-comment"># train_data = torchvision.datasets.ImageNet(&quot;data_image_net&quot;, split=&#x27;train&#x27;, download=True,</span><br><span class="hljs-comment">#                                            transform=torchvision.transforms.ToTensor())  # 这个数据集太大了</span><br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>vgg16_false = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 只是初始化 没有训练好参数</span><br>vgg16_true = torchvision.models.vgg16(pretrained=<span class="hljs-literal">True</span>) <span class="hljs-comment"># 已经预训练好参数</span><br><br><span class="hljs-built_in">print</span>(vgg16_true)<br><br>train_data = torchvision.datasets.CIFAR10(<span class="hljs-string">&#x27;dataset&#x27;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 训练集</span><br><br><span class="hljs-comment"># 由于vgg16的最后一层会输出1000维 也就是1000类的分类 有时候我们只需要10分类 所以可以修改为10维的输出</span><br>vgg16_true.classifier.add_module(<span class="hljs-string">&#x27;add_linear&#x27;</span>, nn.Linear(<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>))  <span class="hljs-comment"># 在网络中的classifier层的最后加一层</span><br><span class="hljs-built_in">print</span>(vgg16_true)<br><br><span class="hljs-built_in">print</span>(vgg16_false)<br>vgg16_false.classifier[-<span class="hljs-number">1</span>] = nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">10</span>)  <span class="hljs-comment"># 修改网络中的classifier层的最后层</span><br><span class="hljs-built_in">print</span>(vgg16_false)<br></code></pre></td></tr></table></figure><h2 id="测试网络参数是否正确"><a href="#测试网络参数是否正确" class="headerlink" title="测试网络参数是否正确"></a>测试网络参数是否正确</h2><p>使用<code>torch.zeros</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">import</span> torch<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(nn.Module):<br>    <span class="hljs-comment"># 自定义网络</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 调用Net的父类的构造函数，初始化神经网络对象</span><br>        <span class="hljs-built_in">super</span>(Net, self).__init__()<br>        self.conv1 = nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, kernel_size=<span class="hljs-number">5</span>)<br>        self.conv2 = nn.Conv2d(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, kernel_size=<span class="hljs-number">5</span>)<br>        <span class="hljs-comment"># 对卷积层的输出进行dropout操作，随机丢弃一些神经元，防止过拟合</span><br>        self.conv2_drop = nn.Dropout2d()<br>        self.fc1 = nn.Linear(<span class="hljs-number">320</span>, <span class="hljs-number">50</span>)<br>        self.fc2 = nn.Linear(<span class="hljs-number">50</span>, <span class="hljs-number">10</span>)<br><br>    <span class="hljs-comment"># 定义了给定的层之间的连接方式</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-comment"># 卷积，池化核大小为2的最大池化操作，对池化结果进行激活操作，池化核大小是一个超参数，常取2/3</span><br>        x = F.relu(F.max_pool2d(self.conv1(x), <span class="hljs-number">2</span>))<br>        <span class="hljs-comment"># x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))</span><br>        x = F.relu(F.max_pool2d(self.conv2(x), <span class="hljs-number">2</span>))<br>        <span class="hljs-comment"># 重塑张量x，-1表示根据其他维度推断（行数），320列数</span><br>        x = x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">320</span>)<br>        x = F.relu(self.fc1(x))<br>        <span class="hljs-comment"># dropout函数用于全连接层，Dropout2d用于卷积层</span><br>        <span class="hljs-comment"># x = F.dropout(x, training=self.training)</span><br>        x = self.fc2(x)<br>        <span class="hljs-keyword">return</span> F.log_softmax(x, dim=-<span class="hljs-number">1</span>)<br><br><br>net = Net()<br><span class="hljs-built_in">print</span>(net)<br><span class="hljs-comment"># 这是1张图,但直接用会</span><br><span class="hljs-comment"># RuntimeError: Expected 3D (unbatched) or 4D (batched) input to conv2d, but got input of size: [28, 28]</span><br>test_in_1 = torch.zeros([<span class="hljs-number">28</span>, <span class="hljs-number">28</span>], dtype=torch.float32)  <span class="hljs-comment"># 需要用float32,否则报错</span><br>test_in_2 = torch.zeros([<span class="hljs-number">28</span>, <span class="hljs-number">28</span>], dtype=torch.float32)  <span class="hljs-comment"># 需要用float32,否则报错</span><br><span class="hljs-comment"># test_in_2 = torch.zeros([2, 1, 28, 28], dtype=torch.float32)  # 也可以直接这样</span><br>test_in_1 = test_in_1.view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>)  <span class="hljs-comment"># 要加等号,这里的conv1需要单通道的输入</span><br>test_in_2 = torch.reshape(test_in_2, (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>))  <span class="hljs-comment"># 要加等号,这里的conv1需要单通道的输入</span><br>test_out_1 = net(test_in_1)<br>test_out_2 = net(test_in_2)<br><span class="hljs-built_in">print</span>(test_out_1)<br><span class="hljs-built_in">print</span>(test_out_2)<br></code></pre></td></tr></table></figure><h2 id="保存和使用已有模型的参数"><a href="#保存和使用已有模型的参数" class="headerlink" title="保存和使用已有模型的参数"></a>保存和使用已有模型的参数</h2><p>保存参数 两种方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>vgg16 = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># 保存方式1,模型结构+模型参数</span><br>torch.save(vgg16, <span class="hljs-string">&quot;vgg16_method1.pth&quot;</span>)<br><br><span class="hljs-comment"># 保存方式2，模型参数（官方推荐）</span><br>torch.save(vgg16.state_dict(), <span class="hljs-string">&quot;vgg16_method2.pth&quot;</span>)<br><br><span class="hljs-comment"># 陷阱</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.conv1 = nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">64</span>, kernel_size=<span class="hljs-number">3</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br>torch.save(tudui, <span class="hljs-string">&quot;tudui_method1.pth&quot;</span>)<br></code></pre></td></tr></table></figure><p>读取参数 与之对应的两种方法，这两种方法就相当于加载好了实例了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-comment"># from model_save import *</span><br><span class="hljs-comment"># 方式1-》保存方式1，加载模型</span><br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>model = torch.load(<span class="hljs-string">&quot;vgg16_method1.pth&quot;</span>)<br><span class="hljs-comment"># print(model)</span><br><br><span class="hljs-comment"># 方式2，加载模型</span><br>vgg16 = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br>vgg16.load_state_dict(torch.load(<span class="hljs-string">&quot;vgg16_method2.pth&quot;</span>))<br><span class="hljs-comment"># model = torch.load(&quot;vgg16_method2.pth&quot;)</span><br><span class="hljs-comment"># print(vgg16)</span><br><br><span class="hljs-comment"># 陷阱1 需要导入其中所有的包</span><br><span class="hljs-comment"># class Tudui(nn.Module):</span><br><span class="hljs-comment">#     def __init__(self):</span><br><span class="hljs-comment">#         super(Tudui, self).__init__()</span><br><span class="hljs-comment">#         self.conv1 = nn.Conv2d(3, 64, kernel_size=3)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     def forward(self, x):</span><br><span class="hljs-comment">#         x = self.conv1(x)</span><br><span class="hljs-comment">#         return x</span><br><br>model = torch.load(<span class="hljs-string">&#x27;tudui_method1.pth&#x27;</span>)<br><span class="hljs-built_in">print</span>(model)<br></code></pre></td></tr></table></figure><h2 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-keyword">from</span> model <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># 准备数据集</span><br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>train_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                         download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># length 长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><span class="hljs-comment"># 如果train_data_size=10, 训练数据集的长度为：10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><br><span class="hljs-comment"># 利用 DataLoader 来加载数据集</span><br>train_dataloader = DataLoader(train_data, batch_size=<span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br>tudui = Tudui()<br><br><span class="hljs-comment"># 损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br><br><span class="hljs-comment"># 优化器</span><br><span class="hljs-comment"># learning_rate = 0.01</span><br><span class="hljs-comment"># 1e-2=1 x (10)^(-2) = 1 /100 = 0.01</span><br>learning_rate = <span class="hljs-number">1e-2</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 设置训练网络的一些参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;../logs_train&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------第 &#123;&#125; 轮训练开始-------&quot;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))<br><br>    <span class="hljs-comment"># 训练步骤开始</span><br>    tudui.train()  <span class="hljs-comment"># 这步在一般情况下可以没有 训练状态</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        outputs = tudui(imgs)<br>        loss = loss_fn(outputs, targets)<br><br>        <span class="hljs-comment"># 优化器优化模型</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数：&#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    tudui.<span class="hljs-built_in">eval</span>()  <span class="hljs-comment"># 这步在一般情况下可以没有 评估状态</span><br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():  <span class="hljs-comment"># 评估的时候不用梯度</span><br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            <span class="hljs-comment"># argmax显示最大的参数是第几个 argmax(1)代表看每行的 argmax(0)代表看每列的</span><br>            <span class="hljs-comment"># 列表==列表 会返回一个列表 其中的每一项都是对应项比较后的True或者False</span><br>            <span class="hljs-comment"># 列表.sum()会计算列表中True的数量</span><br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br><br>    torch.save(tudui, <span class="hljs-string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br></code></pre></td></tr></table></figure><h2 id="GPU加速"><a href="#GPU加速" class="headerlink" title="GPU加速"></a>GPU加速</h2><p>需要在三个地方进行设置</p><ol><li>网络</li><li>数据集</li><li>损失函数</li></ol><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>用.cuda()的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>train_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                         download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># length 长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><span class="hljs-comment"># 如果train_data_size=10, 训练数据集的长度为：10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><br><span class="hljs-comment"># 利用 DataLoader 来加载数据集</span><br>train_dataloader = DataLoader(train_data, batch_size=<span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span>*<span class="hljs-number">4</span>*<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>tudui = Tudui()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    tudui = tudui.cuda()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在使用gpu&#x27;</span>)<br><br><span class="hljs-comment"># 损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    loss_fn = loss_fn.cuda()<br><span class="hljs-comment"># 优化器</span><br><span class="hljs-comment"># learning_rate = 0.01</span><br><span class="hljs-comment"># 1e-2=1 x (10)^(-2) = 1 /100 = 0.01</span><br>learning_rate = <span class="hljs-number">1e-2</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 设置训练网络的一些参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_train&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------第 &#123;&#125; 轮训练开始-------&quot;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))<br><br>    <span class="hljs-comment"># 训练步骤开始</span><br>    tudui.train()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        <span class="hljs-keyword">if</span> torch.cuda.is_available():<br>            imgs = imgs.cuda()<br>            targets = targets.cuda()<br>        outputs = tudui(imgs)<br>        loss = loss_fn(outputs, targets)<br><br>        <span class="hljs-comment"># 优化器优化模型</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数：&#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    tudui.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            <span class="hljs-keyword">if</span> torch.cuda.is_available():<br>                imgs = imgs.cuda()<br>                targets = targets.cuda()<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br><br>    torch.save(tudui, <span class="hljs-string">&quot;pth/tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>用to(device)的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br><span class="hljs-comment"># 定义训练的设备</span><br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>)  <span class="hljs-comment"># 也可以写成&quot;cuda:0&quot;表示第1块gpu,如果是cpu的话就直接写&#x27;cpu&#x27;</span><br><br>train_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                         download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># length 长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><span class="hljs-comment"># 如果train_data_size=10, 训练数据集的长度为：10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><br><span class="hljs-comment"># 利用 DataLoader 来加载数据集</span><br>train_dataloader = DataLoader(train_data, batch_size=<span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span>*<span class="hljs-number">4</span>*<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model(x)<br>        <span class="hljs-keyword">return</span> x<br>tudui = Tudui()<br>tudui = tudui.to(device)  <span class="hljs-comment"># 模型网络和损失函数这里可以直接.to(device),不用赋值,但是在后面数据那里还是需要赋值的</span><br><br><span class="hljs-comment"># 损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br>loss_fn = loss_fn.to(device)  <span class="hljs-comment"># 模型网络和损失函数这里可以直接.to(device),不用赋值,但是在后面数据那里还是需要赋值的</span><br><span class="hljs-comment"># 优化器</span><br><span class="hljs-comment"># learning_rate = 0.01</span><br><span class="hljs-comment"># 1e-2=1 x (10)^(-2) = 1 /100 = 0.01</span><br>learning_rate = <span class="hljs-number">1e-2</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 设置训练网络的一些参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_train&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------第 &#123;&#125; 轮训练开始-------&quot;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))<br><br>    <span class="hljs-comment"># 训练步骤开始</span><br>    tudui.train()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        imgs = imgs.to(device)<br>        targets = targets.to(device)<br>        outputs = tudui(imgs)<br>        loss = loss_fn(outputs, targets)<br><br>        <span class="hljs-comment"># 优化器优化模型</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数：&#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    tudui.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            imgs = imgs.to(device)<br>            targets = targets.to(device)<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br><br>    torch.save(tudui, <span class="hljs-string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>torch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>conda配置</title>
    <link href="/2023/04/10/conda-pei-zhi/"/>
    <url>/2023/04/10/conda-pei-zhi/</url>
    
    <content type="html"><![CDATA[<h2 id="Windows系统下"><a href="#Windows系统下" class="headerlink" title="Windows系统下"></a>Windows系统下</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">conda config --<span class="hljs-built_in">set</span> show_channel_urls yes<br></code></pre></td></tr></table></figure><p>用这段命令在用户文件夹下生成<code>.condarc</code>文件</p><h2 id="其他系统下"><a href="#其他系统下" class="headerlink" title="其他系统下"></a>其他系统下</h2><p>直接就有<code>.condarc</code>文件，可以直接修改</p><h2 id="修改-condarc文件"><a href="#修改-condarc文件" class="headerlink" title="修改.condarc文件"></a>修改<code>.condarc</code>文件</h2><p>根据<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">镜像站使用帮助 | 清华大学开源软件镜像站</a></p><p>复制以下内容进去,<code>CtrlA</code>+<code>CtrlV</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs condarc">channels:<br>  - defaults<br>show_channel_urls: true<br>default_channels:<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2<br>custom_channels:<br>  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  deepmodeling: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/<br></code></pre></td></tr></table></figure><p>运行 <code>conda clean -i</code> 清除索引缓存，保证用的是镜像站提供的索引。</p><p>亲测不会卡进度。</p><h2 id="复制已有环境"><a href="#复制已有环境" class="headerlink" title="复制已有环境"></a>复制已有环境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda create -n new_env --<span class="hljs-built_in">clone</span> exist_env<br></code></pre></td></tr></table></figure><h2 id="安装miniconda命令"><a href="#安装miniconda命令" class="headerlink" title="安装miniconda命令"></a>安装miniconda命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-latest-Linux-x86_64.sh<br>bash Miniconda3-latest-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><p>然后<code>yes -&gt; enter -&gt; yes</code></p><p>如果不想直接进入<code>base</code>环境，就输入以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda config --<span class="hljs-built_in">set</span> auto_activate_base <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="apt换源命令"><a href="#apt换源命令" class="headerlink" title="apt换源命令"></a>apt换源命令</h2><p>再补一个apt换源方法：<a href="https://blog.csdn.net/WU2629409421perfect/article/details/110881141">Ubuntu 20.04 &amp;&amp; Ubuntu 18.04 修改 apt 源_ubuntu 20.04 &amp;&amp; ubuntu18.04 xiu gai-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>config</category>
      
    </categories>
    
    
    <tags>
      
      <tag>conda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL note</title>
    <link href="/2023/04/07/sql-note/"/>
    <url>/2023/04/07/sql-note/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL笔记"><a href="#SQL笔记" class="headerlink" title="SQL笔记"></a>SQL笔记</h1><h2 id="PSQL操作"><a href="#PSQL操作" class="headerlink" title="PSQL操作"></a>PSQL操作</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs psql">\?   帮助<br>\l   列举数据库<br>\c DBNAME  连接到新数据库<br>\d         描述表，视图，序列，或索引<br>\dt        列出表<br>\q   退出psgl<br></code></pre></td></tr></table></figure><h3 id="打开PSQL"><a href="#打开PSQL" class="headerlink" title="打开PSQL"></a>打开PSQL</h3><p>如下，一路enter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs psql">Server [localhost]:<br>Database [postgres]:<br>Port [5432]:<br>Username [postgres]: # 在这里输密码就可以了<br>用户 postgres 的口令：<br>psql (15.2)<br>输入 &quot;help&quot; 来获取帮助信息.<br></code></pre></td></tr></table></figure><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs psql">postgres=# \l<br><br># 看下面的截图<br>(4 行记录)<br><br><br>postgres=# drop database learndb<br>postgres-# ;<br>DROP DATABASE<br>postgres=# create database learndb<br>postgres-# ;<br>CREATE DATABASE<br>postgres=# \l<br><br># 看下面的截图<br>(4 行记录)<br><br><br>postgres=# \c learndb<br>您现在已经连接到数据库 &quot;learndb&quot;,用户 &quot;postgres&quot;.<br>learndb=# \d<br>没有找到任何关系<br></code></pre></td></tr></table></figure><p>这个时候其实已经是可以在里面输入数据库查询语句了，不过这个是空数据库，查不到任何东西。</p><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p><img src="/2023/04/07/sql-note/PSQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.png" alt="截图"></p><h3 id="关于postgres"><a href="#关于postgres" class="headerlink" title="关于postgres=#"></a>关于<code>postgres=#</code></h3><ul><li>postgres:当前的数据库名</li><li>&#x3D;:当前是新语句</li><li>-:如果不是<code>=</code>而是<code>-</code>的话，说明PSQL没有读到<code>;</code>，认为上一句还没有结束</li><li>(:在图形化界面不是<code>-</code>而是<code>(</code></li></ul><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs postgresql">learndb=# <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> department(<br>learndb(#   dNo           <span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>)        <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br>learndb(#   dName         <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>learndb(#   officeRoom    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>),<br>learndb(#   homePage      <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">80</span>),<br>learndb(#   <span class="hljs-keyword">PRIMARY KEY</span>(dNo)<br>learndb(# );<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span><br></code></pre></td></tr></table></figure><p>也可以不在psql里面做这个事情，可以在postgreSQL专门的查询界面干这事</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> department(<br>  dNo           <span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>)        <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br>  dName         <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>  officeRoom    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>),<br>  homePage      <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">80</span>),<br>  <span class="hljs-keyword">PRIMARY KEY</span>(dNo)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student(<br>  sNo <span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>)        <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br>  sName<span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)    <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  sex<span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>)        <span class="hljs-keyword">CHECK</span> (sex <span class="hljs-keyword">IN</span>(<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>)),      <br>  age<span class="hljs-type">INT</span>,<br>  email         <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>  dNo<span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>),<br>  <span class="hljs-keyword">PRIMARY KEY</span>(sNo),<br>  <span class="hljs-keyword">FOREIGN KEY</span> (dNo) <span class="hljs-keyword">REFERENCES</span>  department(dNo)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> course(<br>  cNo<span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>)       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br>  cName<span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)    <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  cPNo<span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>),<br>  credit<span class="hljs-type">INT</span>,<br>  dNo           <span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>),<br>  <span class="hljs-keyword">PRIMARY KEY</span>(cNo),<br>  <span class="hljs-keyword">FOREIGN KEY</span> (cPNo) <span class="hljs-keyword">REFERENCES</span>  course(cNo),<br>  <span class="hljs-keyword">FOREIGN KEY</span> (dNo)  <span class="hljs-keyword">REFERENCES</span>  department(dNo)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> sc(<br>  sNo<span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>)       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  cNo<span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>)       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  score<span class="hljs-type">INT</span>,<br>  recordDate    <span class="hljs-type">date</span>           <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">current_date</span>,<br>  <span class="hljs-keyword">PRIMARY KEY</span>(sNo,cNo),<br>  <span class="hljs-keyword">FOREIGN KEY</span> (sNo) <span class="hljs-keyword">REFERENCES</span>  student(sNo),<br>  <span class="hljs-keyword">FOREIGN KEY</span> (cNo) <span class="hljs-keyword">REFERENCES</span>  course(cNo)<br>);<br></code></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;01&#x27;</span>,<span class="hljs-string">&#x27;信息学院&#x27;</span>,<span class="hljs-string">&#x27;行政楼409&#x27;</span>,<span class="hljs-string">&#x27;www.xxx.edu.cn&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;02&#x27;</span>,<span class="hljs-string">&#x27;软件学院&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;03&#x27;</span>,<span class="hljs-string">&#x27;理学院&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;04&#x27;</span>,<span class="hljs-string">&#x27;文学院&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;05&#x27;</span>,<span class="hljs-string">&#x27;外国语学院&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">......</span><br><span class="hljs-comment">下面省略不写</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> SC <br><span class="hljs-keyword">SET</span> score<span class="hljs-operator">=</span><span class="hljs-number">60</span><br><span class="hljs-keyword">WHERE</span> sNo<span class="hljs-operator">=</span><span class="hljs-number">123</span>;<br><br></code></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> sNo<span class="hljs-operator">=</span><span class="hljs-string">&#x27;070122&#x27;</span>;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> STUDENT;<br></code></pre></td></tr></table></figure><h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> [<span class="hljs-keyword">DISTINCT</span><span class="hljs-operator">|</span><span class="hljs-keyword">ALL</span>]&#123;<span class="hljs-operator">*</span><span class="hljs-operator">|</span>[columnExpression[<span class="hljs-keyword">AS</span> <br>newName]][,…]&#125;<br><span class="hljs-keyword">FROM</span> TableName[alias][,…]<br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>]<br>[<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> columnList][<span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">condition</span>]<br>[<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> columnList]<br></code></pre></td></tr></table></figure><h3 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">这是多行注释</span><br><span class="hljs-comment">pgAdmin4的常用快捷键:</span><br><span class="hljs-comment">  - Ctrl+Shift+K:格式化</span><br><span class="hljs-comment">  - F5:运行</span><br><span class="hljs-comment">  - Alt+S:保存</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> STUDENT;<span class="hljs-comment">-- 这是单行注释，注意双减号后面要有空格</span><br><br><br><span class="hljs-keyword">SELECT</span> SNO,<br>SNAME<br><span class="hljs-keyword">FROM</span> STUDENT;<span class="hljs-comment">-- 查询两个字段</span><br><br><br><span class="hljs-keyword">SELECT</span> SNAME,<br><span class="hljs-number">2023</span> - AGE <span class="hljs-keyword">AS</span> X <span class="hljs-comment">-- 用AS进行重命名</span><br><span class="hljs-keyword">FROM</span> STUDENT;<br><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> SNO <span class="hljs-comment">-- DISTINCT代表多个重复结果只保留一个</span><br><span class="hljs-keyword">FROM</span> SC;<br><br><br><span class="hljs-keyword">SELECT</span> SNO<br><span class="hljs-keyword">FROM</span> STUDENT<br><span class="hljs-keyword">WHERE</span> AGE <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">20</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">23</span>; <span class="hljs-comment">-- 这里AGE后面可以用类似 &lt;= 17 / IN(18,19,20)之类的筛选条件，sql中用`=`而不是`==`表示相等</span><br></code></pre></td></tr></table></figure><h3 id="LIKE语句"><a href="#LIKE语句" class="headerlink" title="LIKE语句"></a>LIKE语句</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*LIKE*/</span><br><span class="hljs-keyword">SELECT</span> sNo,sName<br><span class="hljs-keyword">FROM</span> Student <br><span class="hljs-keyword">WHERE</span> sName <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;张%&#x27;</span>; <span class="hljs-comment">-- `%`可以指代一个及以上的字符</span><br><br><span class="hljs-keyword">SELECT</span> sNo,sName<br><span class="hljs-keyword">FROM</span> Student <br><span class="hljs-keyword">WHERE</span> sName <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;张_&#x27;</span>; <span class="hljs-comment">-- `_`可以指代一个字符</span><br><br><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> Course<br><span class="hljs-keyword">WHERE</span> cName <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;DB\_%i__&#x27;</span> <span class="hljs-keyword">ESCAPE</span> <span class="hljs-string">&#x27;\&#x27;</span>; <span class="hljs-comment">-- `ESCAPE`指出`\`是转义字符</span><br><br><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> Student <br><span class="hljs-keyword">WHERE</span> sName ~ <span class="hljs-string">&#x27;^[\u4E00-\u9FA5]&#123;3,4&#125;$&#x27;</span>; <span class="hljs-comment">-- `~`指出正则表达式</span><br></code></pre></td></tr></table></figure><h3 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h3><p><code>null</code>代表未知</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*NULL</span><br><span class="hljs-comment">NULL代表未知(注意不是&quot;&quot;空字符串),意思是所有可能都存在</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">以下是SQL中WHERE语句可能返回的三种结果及其原因</span><br><span class="hljs-comment">- true:有返回数据</span><br><span class="hljs-comment">- false:无返回数据</span><br><span class="hljs-comment">- NULL(未知):此时也无返回数据</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span>; <span class="hljs-comment">-- 有结果，因为1=1返回true</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span>=<span class="hljs-number">0</span>; <span class="hljs-comment">-- 无结果，因为1=0返回false</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span>=<span class="hljs-keyword">NULL</span>; <span class="hljs-comment">-- 无结果，因为SQL也不知道1是不是等于NULL(1=NULL返回NULL)</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NULL</span>=<span class="hljs-keyword">NULL</span>; <span class="hljs-comment">-- 无结果</span><br><br><span class="hljs-comment">-- NOT语句:false和null的区别</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span>(<span class="hljs-number">1</span>=<span class="hljs-number">0</span>); <span class="hljs-comment">-- 有结果，因为SQL知道NOT false就是true</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>; <span class="hljs-comment">-- 无结果， 而NOT(NULL)还是未知，说句题外话，NOT后面的东西只能是boolean值</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span>(<span class="hljs-number">1</span>=<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 无结果，因为SQL也不知道1是不是等于NULL(true和false都有可能)</span><br><br><span class="hljs-comment">-- IS语句判断NULL</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> STUDENT <span class="hljs-keyword">WHERE</span> AGE = <span class="hljs-keyword">NULL</span>; <span class="hljs-comment">-- 无结果</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> STUDENT <span class="hljs-keyword">WHERE</span> AGE <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>; <span class="hljs-comment">-- 有结果</span><br><br><span class="hljs-comment">-- IN语句</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 有结果，因为1确实在元组里面</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">2</span>,<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 无结果，因为1在不在元组里面是未知的</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 无结果，因为两个NULL虽然都是未知，但是是不同的</span><br><span class="hljs-comment">-- NOT IN</span><br><span class="hljs-comment">-- 一旦NOT IN后面的括号里面有null,NOT IN表达式返回的只能是false或null</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 无结果，因为1确实在元组里面</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">2</span>,<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 无结果，因为1在不在元组里面是未知的</span><br><br><span class="hljs-comment">-- 比较</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> STUDENT <span class="hljs-keyword">WHERE</span> AGE &lt;&gt; <span class="hljs-number">18</span>; <span class="hljs-comment">-- AGE为null的人不被计入</span><br></code></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*排序*/</span><br><span class="hljs-keyword">SELECT</span> SNO,<br>SCORE<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> CNO = <span class="hljs-string">&#x27;010101&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> SCORE <span class="hljs-keyword">DESC</span>; <span class="hljs-comment">-- DESC代表降序排列  ASC代表升序排列(默认ASC)</span><br><br><span class="hljs-keyword">SELECT</span> * <br><span class="hljs-keyword">FROM</span> Student <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> dNo, age <span class="hljs-keyword">DESC</span>; <span class="hljs-comment">-- dNo为第一关键字，升序；age为第二关键字，降序</span><br><span class="hljs-comment">-- 另外，null在升序排序结果中在最后，而在降序排序中在最前，所以可以将null视为最大值</span><br></code></pre></td></tr></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>聚合函数输入的是一组数据的集合，输出的是单个值</p><p><strong>注意</strong>:聚合函数一般无视<code>null</code></p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs postgresql">COUNT([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] *)<br>COUNT([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] &lt;columnName&gt;) <br>SUM([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] &lt;columnName&gt;) <br>AVG([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] &lt; columnName &gt;)<br>MAX([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] &lt; columnName &gt;) <br>MIN([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] &lt; columnName &gt;)<br></code></pre></td></tr></table></figure><h3 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*聚合函数*/</span><br><span class="hljs-comment">-- COUNT</span><br><span class="hljs-comment">-- 你会发现COUNT可以对多维数组进行处理，但是其他很多聚合函数只能对一列进行处理</span><br><span class="hljs-keyword">SELECT</span> COUNT(*) <span class="hljs-comment">-- 返回Student的列数</span><br><span class="hljs-keyword">FROM</span> Student;<br><br><span class="hljs-keyword">SELECT</span> COUNT(age) <span class="hljs-comment">-- 返回Student中age的列数</span><br><span class="hljs-keyword">FROM</span> Student; <span class="hljs-comment">-- 注意，由于聚合函数无视null，所以这个命令和上面那个命令的返回结果可能不同</span><br><br><span class="hljs-keyword">SELECT</span> COUNT(*) <span class="hljs-keyword">AS</span> countOf <span class="hljs-comment">-- 可以重命名结果</span><br><span class="hljs-keyword">FROM</span> Course<br><span class="hljs-keyword">WHERE</span> credit &gt;= <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">SELECT</span> COUNT(<span class="hljs-keyword">DISTINCT</span> sNo) <span class="hljs-comment">-- 重复的不管</span><br><span class="hljs-keyword">FROM</span> SC;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/07/sql-note/COUNT.png" alt="COUNT示例"></p><h3 id="AVG"><a href="#AVG" class="headerlink" title="AVG"></a>AVG</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">SELECT</span> AVG(score) <br><span class="hljs-keyword">FROM</span> SC <br><span class="hljs-keyword">WHERE</span> cNo=<span class="hljs-string">&#x27;010101&#x27;</span>; <span class="hljs-comment">-- 可以先进行筛选再聚合</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/07/sql-note/AVG.png" alt="AVG示例"></p><p>其他<code>MIN</code> <code>MAX</code> <code>SUM</code>什么的都是类似的</p><h3 id="GROUP"><a href="#GROUP" class="headerlink" title="GROUP"></a>GROUP</h3><p>类似合并单元格</p><p>先分组后聚合(null也会被分成一组)</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">-- HAVING</span><br><span class="hljs-comment">-- 满足HAVING 子句中条件的分组将被显示</span><br><span class="hljs-keyword">SELECT</span> sNo<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> score&gt;<span class="hljs-number">60</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sNo<br><span class="hljs-keyword">HAVING</span> COUNT(*)&gt;<span class="hljs-number">3</span>; <span class="hljs-comment">-- 每个分组中有超过3行</span><br><br><span class="hljs-keyword">SELECT</span> sNo<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> score&gt;<span class="hljs-number">60</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sNo<br><span class="hljs-keyword">HAVING</span> sNo=<span class="hljs-string">&#x27;170102&#x27;</span>; <span class="hljs-comment">-- having后面一般是用聚合函数的，这里可以用sNo是因为sNo是分组依据(GROUP BY sNo)</span><br></code></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*子查询*/</span><br><span class="hljs-keyword">SELECT</span> SNAME<br><span class="hljs-keyword">FROM</span> STUDENT<br><span class="hljs-keyword">WHERE</span> DNO =<br>(<span class="hljs-keyword">SELECT</span> DNO<br><span class="hljs-keyword">FROM</span> STUDENT<br><span class="hljs-keyword">WHERE</span> SNAME = <span class="hljs-string">&#x27;宁灿&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> INDEX sName_index <span class="hljs-keyword">ON</span> Student(sName);<br><span class="hljs-keyword">DROP</span> INDEX sName_index;<br><br></code></pre></td></tr></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> view_1 <br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> s.sName, c.cName, sc.score<br><span class="hljs-keyword">FROM</span> Student s, Course c, sc<br><span class="hljs-keyword">WHERE</span> s.sNo<span class="hljs-operator">=</span>sc.sNo <span class="hljs-keyword">and</span> c.cNo<span class="hljs-operator">=</span>sc.cNo<br><span class="hljs-keyword">and</span> c.cName<span class="hljs-operator">=</span><span class="hljs-string">&#x27;离散数学&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> sName, score<br><span class="hljs-keyword">FROM</span> view_1<br><span class="hljs-keyword">WHERE</span> score<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span>;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> view_1;<br></code></pre></td></tr></table></figure><p>感觉和<code>table</code>差不多</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">BEGIN</span> TRANSACTION;<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> department<br><span class="hljs-keyword">WHERE</span> dno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;03&#x27;</span>;<br><span class="hljs-keyword">UPDATE</span> student<br><span class="hljs-keyword">SET</span> dno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;02&#x27;</span><br><span class="hljs-keyword">WHERE</span> sno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;008&#x27;</span>;<br><span class="hljs-keyword">commit</span>;<br><br></code></pre></td></tr></table></figure><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><h3 id="码"><a href="#码" class="headerlink" title="码"></a>码</h3><p>候选码，简称为码</p><h3 id="主属性"><a href="#主属性" class="headerlink" title="主属性"></a>主属性</h3><p>包含在任何一个码中的属性成为主属性</p><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p>符合1NF的关系中的 每个属性都不可再分</p><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p>2NF在1NF的基础之上，消除了非主属性对于码的部分函数依赖</p><p>如(<strong>SNo,CNo</strong>,Department,score)不满足2NF</p><h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><p>3NF在2NF的基础之上，消除了非主属性对于码的传递函数依赖</p><p>如(<strong>ID</strong>,school,headmaster)不满足3NF</p><h3 id="BCNF"><a href="#BCNF" class="headerlink" title="BCNF"></a>BCNF</h3><p>在 3NF 的基础上消除主属性对于码的部分与传递函数依赖</p><p>如(<strong>ID</strong>,<code>phone</code>,Name)不满足BCNF</p><h2 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h2><p>实体完整性（entity integrity）、参照完整性（referential integrity）和用户定义的完整性（user-defined integrity）</p><p>实体完整性：主属性（可能是一个或者一组属性）是不能取空值的</p><p>参照完整性：若属性（或属性组）F是基本关系R的外码，它与基本关系S的主码Ks相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值必须为S中某个元组的值</p><h2 id="DDL、DML、DCL"><a href="#DDL、DML、DCL" class="headerlink" title="DDL、DML、DCL"></a>DDL、DML、DCL</h2><p>DDL: （data definition language）数据定义语言，主要用于创建数据库对象。<br>DML:  (data manipulation language)数据操纵语言，主要用于操纵数据库对象。<br>DCL：（Data Control Language）数据控制语言，主要用于设置或更改数据库用户或角色权限的语句。<br>示例：</p><p>DDL示例： 如CREATE、ALTER、DROP、TRUNCATE、COMMENT、GRANT、REVOKE<br>DML示例：如SELECT、INSERT、UPDATE、DELETE、CALL、EXPLAIN PLAN、LOCK TABLE<br>DCL示例：如COMMIT、SAVEPOINT、ROLLBACK、SET TRANSACTION</p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源与目标的操作</title>
    <link href="/2023/03/22/yuan-yu-mu-biao-de-cao-zuo/"/>
    <url>/2023/03/22/yuan-yu-mu-biao-de-cao-zuo/</url>
    
    <content type="html"><![CDATA[<p>稍微总结一下一些控制台命令中的输入和输出目标的指定顺序</p><h3 id="shell-cp"><a href="#shell-cp" class="headerlink" title="shell:cp"></a>shell:cp</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@www ~]<span class="hljs-comment"># cp [-adfilprsu] 来源档(source) 目标档(destination)</span><br>[root@www ~]<span class="hljs-comment"># cp [options] source1 source2 source3 .... directory</span><br></code></pre></td></tr></table></figure><h3 id="gcc-o"><a href="#gcc-o" class="headerlink" title="gcc:-o"></a>gcc:-o</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">gcc -o hello.exe hello.c<br>gcc hello.c -o hello.exe<br></code></pre></td></tr></table></figure><p>因为<code>-o</code>的意思是制定目标名称，这里<code>hello.exe</code>就是<code>-o</code>的参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gcc -S hello.c <br></code></pre></td></tr></table></figure><p>像这样的，就是先在命令后面跟选项，然后再跟src</p><p>如果是</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gcc main.c<br></code></pre></td></tr></table></figure><p>会直接生成一个a.exe</p><h3 id="opencv-cvtColor"><a href="#opencv-cvtColor" class="headerlink" title="opencv:cvtColor"></a>opencv:cvtColor</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cvtColor</span><span class="hljs-params">(InputArray src, OutputArray dst, <span class="hljs-type">int</span> code, <span class="hljs-type">int</span> dstCn = <span class="hljs-number">0</span>)</span></span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javaIO笔记</title>
    <link href="/2023/03/22/javaio/"/>
    <url>/2023/03/22/javaio/</url>
    
    <content type="html"><![CDATA[<h1 id="javaI"><a href="#javaI" class="headerlink" title="javaI"></a>javaI</h1><p>参考了网络上的一些示例和java文档中的说明，归纳了比较常见的一些用法</p><h2 id="简单概念"><a href="#简单概念" class="headerlink" title="简单概念"></a>简单概念</h2><ul><li><p>字节流</p></li><li><p>字符流</p></li><li><p>输入流</p></li><li><p>输出流</p></li></ul><p>参考网址:<a href="https://blog.csdn.net/qq_52519008/article/details/127135476">主要看这个网址的第一张图</a></p><h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>FileInputStream(File file)<br>          通过打开一个到实际文件的连接来创建一个 FileInputStream，该文件通过文件系统中的 File 对象 file 指定。<br>FileInputStream(FileDescriptor fdObj)<br>          通过使用文件描述符 fdObj 创建一个 FileInputStream，该文件描述符表示到文件系统中某个实际文件的现有连接。<br>FileInputStream(String name)<br>          通过打开一个到实际文件的连接来创建一个 FileInputStream，该文件通过文件系统中的路径名 name 指定。 </p><h3 id="读取方法"><a href="#读取方法" class="headerlink" title="读取方法"></a>读取方法</h3><p> int read()<br>          从此输入流中读取一个数据字节。<br> int read(byte[] b)<br>          从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。<br> int read(byte[] b, int off, int len)<br>          从此输入流中将最多 len 个字节的数据读入一个 byte 数组中。 </p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>java.io.InputStream:字节输入流,此抽象类是表示字节输入流的所有类的超类。<br>定义了所有子类共性的方法:</p><ul><li><p>public abstract int read()从输入流中读取数据的下一个字节。</p></li><li><p>public int read(byte[] b) 从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。</p></li><li><p>public void close() 关闭此输入流并释放与该流关联的所有系统资源。</p></li></ul><p>InputStream的子类之一FileInputStream（文件字节输入流）,作用是把硬盘文件中的数据,读取到内存中使用。<br>   定义了构造方法:</p><ul><li><p>public FileInputStream(String name)通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。</p></li><li><p>public FileInputStream(File file) 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。<br>使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，建议开发中使用</p></li></ul><p>下面代码中的show1和show2展示了两种不同的初始化和文件读取方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        show1();<br>   &#125;<br>  <span class="hljs-comment">/**show1():从文件中读取单个字节</span><br><span class="hljs-comment">   * 1.创建FileInputStream对象,构造方法中绑定要读取的数据源</span><br><span class="hljs-comment">   * 2.使用FileInputStream对象中的方法read,读取文件</span><br><span class="hljs-comment">   * 3.释放资源</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-comment">//1.</span><br>        <span class="hljs-comment">/* 构造方法的作用:</span><br><span class="hljs-comment">            1.会创建一个FileInputStream对象</span><br><span class="hljs-comment">            2.会把FileInputStream对象指向构造方法中要读取的文件的第一个字节</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;09_IOAndProperties\\c.txt&quot;</span>); <span class="hljs-comment">//文件内容为abc</span><br>        <span class="hljs-comment">//FileInputStream fis = new FileInputStream(new File(&quot;09_IOAndProperties\\c.txt&quot;));</span><br>        <br>        <span class="hljs-comment">//2.int read()通过JVM，再通过OS，读取文件中的指针指向的字节并提升到int返回,连续读取时指针依次向后移，读取到文件的末尾返回-1</span><br>        len = fis.read();<br>        System.out.println(len);<span class="hljs-comment">//97 a</span><br>        len = fis.read();<br>        System.out.println(len);<span class="hljs-comment">// 98 b</span><br>        len = fis.read();<br>        System.out.println(len);<span class="hljs-comment">//99 c</span><br>        len = fis.read();<br>        System.out.println(len);<span class="hljs-comment">//-1</span><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">        int len = 0; //记录读取到的字节</span><br><span class="hljs-comment">        while((len = fis.read())!=-1)&#123;</span><br><span class="hljs-comment">            System.out.print((char)len);//abc</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br> <br>        <span class="hljs-comment">//3.</span><br>        fis.close();<br>    &#125;<br> <br>   <span class="hljs-comment">/**show2():从文件中读取字节数组</span><br><span class="hljs-comment">    *1.创建FileInputStream对象,构造方法中绑定要读取的数据源</span><br><span class="hljs-comment">    *2.使用FileInputStream对象中的方法read读取文件</span><br><span class="hljs-comment">    *3.关闭资源</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//1.</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;09_IOAndProperties\\b.txt&quot;</span>);<span class="hljs-comment">//文件内容为ABCDE</span><br>        <br>        <span class="hljs-comment">//2.</span><br>        <span class="hljs-comment">//int read(byte[] b) 从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span>]; <span class="hljs-comment">// byte[]起到缓冲作用,存储每次读取到的多个字节,数组的长度一把定义为1024(1kb)或者1024的整数倍</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//不同于读取单个字节int len记录每次读取的有效字节个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> fis.read(bytes); <br>        System.out.println(len);<span class="hljs-comment">//2</span><br>        <span class="hljs-comment">//System.out.println(Arrays.toString(bytes));//[65, 66]</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//String(byte[] bytes) :把字节数组转换为字符串</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<span class="hljs-comment">//AB</span><br>        len = fis.read(bytes);<br>        System.out.println(len);<span class="hljs-comment">//2</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<span class="hljs-comment">//CD</span><br>        len = fis.read(bytes);<br>        System.out.println(len);<span class="hljs-comment">//1</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//String(byte[] bytes, int offset, int length) 把字节数组的一部分转换为字符串 offset:数组的开始索引 length:转换的字节个数</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">0</span>,len));<br>        <span class="hljs-comment">//System.out.println(new String(bytes)); ED 错于当数组容量大于剩余字节时，上次读取的数据没有被完全替换而重复读取，所以要通过 len ，获取有效的字节.</span><br>        len = fis.read(bytes);<br>        System.out.println(len);<span class="hljs-comment">//-1       </span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        byte[] bytes = new byte[1024];</span><br><span class="hljs-comment">        int len = 0;</span><br><span class="hljs-comment">        while((len = fis.read(bytes))!=-1)&#123;</span><br><span class="hljs-comment">            //</span><br><span class="hljs-comment">            //当数组容量大于读取内容时，直接转换成字符串会生成大量空格，所以只转换有效字节</span><br><span class="hljs-comment">            System.out.println(new String(bytes,0,len));</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br> <br>        <span class="hljs-comment">//3.</span><br>        fis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="BufferedInputStream（缓冲字节流）"><a href="#BufferedInputStream（缓冲字节流）" class="headerlink" title="BufferedInputStream（缓冲字节流）"></a>BufferedInputStream（缓冲字节流）</h2><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><p>BufferedInputStream(InputStream in)<br>          创建一个 BufferedInputStream 并保存其参数，即输入流 in，以便将来使用。</p><h3 id="读取方法-1"><a href="#读取方法-1" class="headerlink" title="读取方法"></a>读取方法</h3><p> int read()<br>          参见 InputStream 的 read 方法的常规协定。<br> int read(byte[] b, int off, int len)<br>          从此字节输入流中给定偏移量处开始将各字节读取到指定的 byte 数组中。 </p><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>缓冲字节流是为高效率而设计的，真正的读写操作还是靠<code>FileOutputStream</code>和<code>FileInputStream</code>，所以其构造方法入参是这两个类的对象也就不奇怪了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">// 缓冲字节流，提高了效率</span><br><span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file, <span class="hljs-literal">true</span>));<br><br><span class="hljs-comment">// 要写入的字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;松下问童子，言师采药去。只在此山中，云深不知处。&quot;</span>;<br><span class="hljs-comment">// 写入文件</span><br>bis.write(string.getBytes());<br><span class="hljs-comment">// 关闭流</span><br>bis.close();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">read</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file));<br><br><span class="hljs-comment">// 一次性取多少个字节</span><br><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">// 用来接收读取的字节数组</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-comment">// 读取到的字节数组长度，为-1时表示没有数据</span><br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 循环取数据</span><br><span class="hljs-keyword">while</span> ((length = fis.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 将读取的内容转换成字符串</span><br>sb.append(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span>, length));<br>&#125;<br><span class="hljs-comment">// 关闭流</span><br>fis.close();<br><br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h2><p>InputStreamReader 是字节流通向字符流的桥梁</p><h3 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h3><p>InputStreamReader(InputStream in)<br>          创建一个使用默认字符集的 InputStreamReader。<br>InputStreamReader(InputStream in, Charset cs)<br>          创建使用给定字符集的 InputStreamReader。<br>InputStreamReader(InputStream in, CharsetDecoder dec)<br>          创建使用给定字符集解码器的 InputStreamReader。<br>InputStreamReader(InputStream in, String charsetName)<br>          创建使用指定字符集的 InputStreamReader。 </p><h3 id="读取方法-2"><a href="#读取方法-2" class="headerlink" title="读取方法"></a>读取方法</h3><p>int read()<br>          读取单个字符。<br> int read(char[] cbuf, int offset, int length)<br>          将字符读入数组中的某一部分。 </p><h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><p><strong>字符流适用于文本文件的读写</strong>，<code>OutputStreamWriter</code>类其实也是借助<code>FileOutputStream</code>类实现的，故其构造方法是<code>FileOutputStream</code>的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">// OutputStreamWriter可以显示指定字符集，否则使用默认字符集</span><br><span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file, <span class="hljs-literal">true</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br><span class="hljs-comment">// 要写入的字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;松下问童子，言师采药去。只在此山中，云深不知处。&quot;</span>;<br>osw.write(string);<br>osw.close();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">read</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-comment">// 字符数组：一次读取多少个字符</span><br><span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">// 每次读取的字符数组先append到StringBuilder中</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-comment">// 读取到的字符数组长度，为-1时表示没有数据</span><br><span class="hljs-type">int</span> length;<br><span class="hljs-comment">// 循环取数据</span><br><span class="hljs-keyword">while</span> ((length = isr.read(chars)) != -<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 将读取的内容转换成字符串</span><br>sb.append(chars, <span class="hljs-number">0</span>, length);<br>&#125;<br><span class="hljs-comment">// 关闭流</span><br>isr.close();<br><br><span class="hljs-keyword">return</span> sb.toString()<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><p>Java提供了<code>FileWriter</code>和<code>FileReader</code>简化字符流的读写，<code>new FileReader(file)</code>等同于<code>new InputStreamReader(new FileInputStream(file, true))</code></p><h3 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h3><p>FileReader(File file)<br>          在给定从中读取数据的 File 的情况下创建一个新 FileReader。<br>FileReader(String fileName)<br>          在给定从中读取数据的文件名的情况下创建一个新 FileReader。 </p><h3 id="读取方法-3"><a href="#读取方法-3" class="headerlink" title="读取方法"></a>读取方法</h3><p>和InputStreamReader的方法一样，都是从InputStreamReader那里继承的</p><h3 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file, <span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 要写入的字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;松下问童子，言师采药去。只在此山中，云深不知处。&quot;</span>;<br>fw.write(string);<br>fw.close();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">read</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file);<br><span class="hljs-comment">// 一次性取多少个字节</span><br><span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">// 用来接收读取的字节数组</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-comment">// 读取到的字节数组长度，为-1时表示没有数据</span><br><span class="hljs-type">int</span> length;<br><span class="hljs-comment">// 循环取数据</span><br><span class="hljs-keyword">while</span> ((length = fr.read(chars)) != -<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 将读取的内容转换成字符串</span><br>sb.append(chars, <span class="hljs-number">0</span>, length);<br>&#125;<br><span class="hljs-comment">// 关闭流</span><br>fr.close();<br><br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="BufferedReader（字符缓冲流）"><a href="#BufferedReader（字符缓冲流）" class="headerlink" title="BufferedReader（字符缓冲流）"></a>BufferedReader<strong>（字符缓冲流）</strong></h2><h3 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h3><p>BufferedReader(Reader in)<br>          创建一个使用默认大小输入缓冲区的缓冲字符输入流。<br>BufferedReader(Reader in, int sz)<br>          创建一个使用指定大小输入缓冲区的缓冲字符输入流。 </p><h3 id="读取方法-4"><a href="#读取方法-4" class="headerlink" title="读取方法"></a>读取方法</h3><p> int read()<br>          读取单个字符。<br> int read(char[] cbuf, int off, int len)<br>          将字符读入数组的某一部分。<br> String readLine()<br>          读取一个文本行。 </p><h3 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h3><p>整个文档里面只有它是支持readline的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">// BufferedWriter fw = new BufferedWriter(new OutputStreamWriter(new</span><br><span class="hljs-comment">// FileOutputStream(file, true), &quot;UTF-8&quot;));</span><br><span class="hljs-comment">// FileWriter可以大幅度简化代码</span><br><span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file, <span class="hljs-literal">true</span>));<br><br><span class="hljs-comment">// 要写入的字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;松下问童子，言师采药去。只在此山中，云深不知处。&quot;</span>;<br>bw.write(string);<br>bw.close();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">read</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file));<br><span class="hljs-comment">// 用来接收读取的字节数组</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br><span class="hljs-comment">// 按行读数据</span><br>String line;<br><span class="hljs-comment">// 循环取数据</span><br><span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 将读取的内容转换成字符串</span><br>sb.append(line);<br>&#125;<br><span class="hljs-comment">// 关闭流</span><br>br.close();<br><br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="InputStreamReader类与FileReader类关系"><a href="#InputStreamReader类与FileReader类关系" class="headerlink" title="InputStreamReader类与FileReader类关系"></a>InputStreamReader类与FileReader类关系</h2><p>1、FileReader类仅仅是InputStreamReader的简单衍生并未扩展任何功能</p><p>2、FileReader类读取数据实质是InputStreamReader类在读取，而InputStreamReader读取数据实际是StreamDecoder类读取</p><p>3、因此在使用字符输入流的时候实际是StreamDecoder类在发挥作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InputStreamReader</span><br></code></pre></td></tr></table></figure><h2 id="System-in"><a href="#System-in" class="headerlink" title="System.in"></a>System.in</h2><p>static InputStream in<br>          “标准”输入流。 </p><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><p>实现的接口： <code>Iterator&lt;String&gt; </code></p><h3 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h3><p>Scanner(File source)<br>          构造一个新的 Scanner，它生成的值是从指定文件扫描的。<br>Scanner(InputStream source)<br>          构造一个新的 Scanner，它生成的值是从指定的输入流扫描的。<br>Scanner(Readable source)<br>          构造一个新的 Scanner，它生成的值是从指定源扫描的。<br>Scanner(String source)<br>          构造一个新的 Scanner，它生成的值是从指定字符串扫描的。 </p><p>此外还有的构造方法在以上的基础上，可以允许程序员指定字符集</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>boolean hasNextInt()<br>          如果通过使用 nextInt() 方法，此扫描器输入信息中的下一个标记可以解释为默认基数中的一个 int 值，则返回 true。<br>boolean hasNextLine()<br>          如果在此扫描器的输入中存在另一行，则返回 true。<br>int nextInt()<br>          将输入信息的下一个标记扫描为一个 int。<br>String nextLine()<br>          此扫描器执行当前行，并返回跳过的输入信息。 </p><p>此外，还有nextByte nextFloat nextDouble hasNextFloat这种方法</p><h3 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h3><p>一个可以使用正则表达式来解析基本类型和字符串的简单文本扫描器。</p><p>以下代码使用户能够从 <code>System.in</code> 中读取一个数： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt();<br></code></pre></td></tr></table></figure><p>以下代码使 <code>long</code> 类型可以通过 <code>myNumbers</code> 文件中的项分配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;myNumbers&quot;</span>));<br>      <span class="hljs-keyword">while</span> (sc.hasNextLong()) &#123;<br>          <span class="hljs-type">long</span> <span class="hljs-variable">aLong</span> <span class="hljs-operator">=</span> sc.nextLong();<br>      &#125;<br></code></pre></td></tr></table></figure><p>可以看出一般next和hasNext是一起用的</p><p>它可以通过<code>File</code> <code>String</code> <code>inputStream</code>进行构造</p><h1 id="JavaO"><a href="#JavaO" class="headerlink" title="JavaO"></a>JavaO</h1><h2 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h2><h3 id="构造方法-6"><a href="#构造方法-6" class="headerlink" title="构造方法"></a>构造方法</h3><p>FileOutputStream(File file)<br>          创建一个向指定 File 对象表示的文件中写入数据的文件输出流。<br>FileOutputStream(File file, boolean append)<br>          创建一个向指定 File 对象表示的文件中写入数据的文件输出流。<br>FileOutputStream(String name)<br>          创建一个向具有指定名称的文件中写入数据的输出文件流。<br>FileOutputStream(String name, boolean append)<br>          创建一个向具有指定 name 的文件中写入数据的输出文件流。 </p><h3 id="写入方法"><a href="#写入方法" class="headerlink" title="写入方法"></a>写入方法</h3><p>void write(byte[] b)<br>          将 b.length 个字节从指定 byte 数组写入此文件输出流中。<br> void write(byte[] b, int off, int len)<br>          将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此文件输出流。<br> void write(int b)<br>          将指定字节写入此文件输出流。 </p><h2 id="BufferedOutputStream"><a href="#BufferedOutputStream" class="headerlink" title="BufferedOutputStream"></a>BufferedOutputStream</h2><h3 id="构造方法-7"><a href="#构造方法-7" class="headerlink" title="构造方法"></a>构造方法</h3><p>BufferedOutputStream(OutputStream out)<br>          创建一个新的缓冲输出流，以将数据写入指定的底层输出流。<br>BufferedOutputStream(OutputStream out, int size)<br>          创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流。 </p><h3 id="写入方法-1"><a href="#写入方法-1" class="headerlink" title="写入方法"></a>写入方法</h3><p>void flush()<br>          刷新此缓冲的输出流。<br>void write(byte[] b, int off, int len)<br>          将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此缓冲的输出流。<br>void write(int b)<br>          将指定的字节写入此缓冲的输出流。 </p><h2 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h2><p>OutputStreamWriter 是字符流通向字节流的桥梁</p><h3 id="构造方法-8"><a href="#构造方法-8" class="headerlink" title="构造方法"></a>构造方法</h3><p>OutputStreamWriter(OutputStream out)<br>          创建使用默认字符编码的 OutputStreamWriter。<br>OutputStreamWriter(OutputStream out, Charset cs)<br>          创建使用给定字符集的 OutputStreamWriter。<br>OutputStreamWriter(OutputStream out, CharsetEncoder enc)<br>          创建使用给定字符集编码器的 OutputStreamWriter。<br>OutputStreamWriter(OutputStream out, String charsetName)<br>          创建使用指定字符集的 OutputStreamWriter。 </p><h3 id="写入方法-2"><a href="#写入方法-2" class="headerlink" title="写入方法"></a>写入方法</h3><p> void flush()<br>          刷新该流的缓冲。<br> void write(char[] cbuf, int off, int len)<br>          写入字符数组的某一部分。<br> void write(int c)<br>          写入单个字符。<br> void write(String str, int off, int len)<br>          写入字符串的某一部分。 </p><h2 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h2><h3 id="构造方法-9"><a href="#构造方法-9" class="headerlink" title="构造方法"></a>构造方法</h3><p>FileWriter(File file)<br>          根据给定的 File 对象构造一个 FileWriter 对象。<br>FileWriter(File file, boolean append)<br>          根据给定的 File 对象构造一个 FileWriter 对象。<br>FileWriter(String fileName)<br>          根据给定的文件名构造一个 FileWriter 对象。<br>FileWriter(String fileName, boolean append)<br>          根据给定的文件名以及指示是否附加写入数据的 boolean 值来构造 FileWriter 对象。 </p><h3 id="写入方法-3"><a href="#写入方法-3" class="headerlink" title="写入方法"></a>写入方法</h3><p>和OutputStreamWriter一样，继承于OutputStreamWriter</p><h2 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h2><h3 id="构造方法-10"><a href="#构造方法-10" class="headerlink" title="构造方法"></a>构造方法</h3><p>BufferedWriter(Writer out)<br>          创建一个使用默认大小输出缓冲区的缓冲字符输出流。<br>BufferedWriter(Writer out, int sz)<br>          创建一个使用给定大小输出缓冲区的新缓冲字符输出流。 </p><h3 id="写入方法-4"><a href="#写入方法-4" class="headerlink" title="写入方法"></a>写入方法</h3><p> void flush()<br>          刷新该流的缓冲。<br> void newLine()<br>          写入一个行分隔符。<br> void write(char[] cbuf, int off, int len)<br>          写入字符数组的某一部分。<br> void write(int c)<br>          写入单个字符。<br> void write(String s, int off, int len)<br>          写入字符串的某一部分。 </p><h2 id="System-out"><a href="#System-out" class="headerlink" title="System.out"></a>System.out</h2><p>static PrintStream out<br>          “标准”输出流。 </p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java转型</title>
    <link href="/2023/03/22/java-zhuan-xing/"/>
    <url>/2023/03/22/java-zhuan-xing/</url>
    
    <content type="html"><![CDATA[<h1 id="向上转型与向下转型"><a href="#向上转型与向下转型" class="headerlink" title="向上转型与向下转型"></a>向上转型与向下转型</h1><p>类型转换只是转换看待对象的引用的类型，对象本身没有也不可能参与转换</p><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p>父类引用可以自动指向子类对象，但只能访问和调用到来自于父类的属性和行为</p><p>调用属性看父类，调用方法先看子类，子类没有，再看父类，如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;father&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Father fun&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;son&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Son fun&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Father f=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>(); <br>System.out.println(f.name); <span class="hljs-comment">// 输出 &quot;father&quot;</span><br>f.fun();<span class="hljs-comment">// 输出 &quot;Son fun&quot;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h2><p>把父类引用赋给子类引用，语法上必须使用强制类型转换，要想运行也成功还必须保证父类引用指向的对象一定是该子类对象（最好使用instance判断后，再强转）</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>参考网址：<a href="http://c.biancheng.net/view/6503.html">Java对象类型转换：向上转型和向下转型 </a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Animal：动物&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">staticName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Animal：可爱的动物&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal：吃饭&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticEat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal：动物在吃饭&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Cat：猫&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Cat：可爱的小猫&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">staticName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dog：我是喵星人&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat：吃饭&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticEat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat：猫在吃饭&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eatMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat：猫喜欢吃鱼&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//Cat cat = new Animal();// 出错</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) animal; <span class="hljs-comment">// 向下转型</span><br>        System.out.println(animal.name); <span class="hljs-comment">// 输出Animal类的name变量</span><br>        System.out.println(animal.staticName); <span class="hljs-comment">// 输出Animal类的staticName变量</span><br>        animal.eat(); <span class="hljs-comment">// 输出Cat类的eat()方法</span><br>        animal.staticEat(); <span class="hljs-comment">// 输出Animal类的staticEat()方法</span><br>        System.out.println(cat.str); <span class="hljs-comment">// 调用Cat类的str变量</span><br>        cat.eatMethod(); <span class="hljs-comment">// 调用Cat类的eatMethod()方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="强制对象类型转换"><a href="#强制对象类型转换" class="headerlink" title="强制对象类型转换"></a>强制对象类型转换</h2><p>Java 编译器允许在具有直接或间接继承关系的类之间进行类型转换。对于向下转型，必须进行强制类型转换；对于向上转型，不必使用强制类型转换。</p><p>例如，对于一个引用类型的变量，Java 编译器按照它声明的类型来处理。如果使用 animal 调用 str 和 eatMethod() 方法将会出错，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">animal.str = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-comment">// 编译出错，提示Animal类中没有str属性</span><br>animal.eatMethod();    <span class="hljs-comment">// 编译出错，提示Animal类中没有eatMethod()方法</span><br></code></pre></td></tr></table></figure><p>如果要访问 Cat 类的成员，必须通过强制类型转换，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">((Cat)animal).str = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-comment">// 编译成功</span><br>((Cat)animal).eatMethod();    <span class="hljs-comment">// 编译成功</span><br></code></pre></td></tr></table></figure><p>把 Animal 对象类型强制转换为 Cat 对象类型，这时上面两句编译成功。对于如下语句，由于使用了强制类型转换，所以也会编译成功，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat)animal;    <span class="hljs-comment">// 编译成功，将Animal对象类型强制转换为Cat对象类型</span><br></code></pre></td></tr></table></figure><p>类型强制转换时想运行成功就必须保证父类引用指向的对象一定是该子类对象，最好使用 instanceof 运算符判断后，再强转，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Cat) <br>&#123;    <br>    <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) animal; <span class="hljs-comment">// 向下转型    ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>子类的对象可以转换成父类类型，而父类的对象实际上无法转换为子类类型。因为通俗地讲，父类拥有的成员子类肯定也有，而子类拥有的成员，父类不一定有。因此，对于向上转型，不必使用强制类型转换。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> cat;    <span class="hljs-comment">// 向上转型，不必使用强制类型转换</span><br></code></pre></td></tr></table></figure><p>如果两种类型之间没有继承关系，那么将不允许进行类型转换。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat)dog;    <span class="hljs-comment">// 编译出错，不允许把Dog对象类型转换为Cat对象类型</span><br></code></pre></td></tr></table></figure><h1 id="隐式转型与显式转型"><a href="#隐式转型与显式转型" class="headerlink" title="隐式转型与显式转型"></a>隐式转型与显式转型</h1><h2 id="隐式转型"><a href="#隐式转型" class="headerlink" title="隐式转型"></a>隐式转型</h2><p><strong>隐式转换也叫自动类型转换，指的是不需要调用函数，JVM自动将类型转换的一种方式。因为这种类型转换经常使用，Java语言在设计时，为了减轻开发人员的负担，都交给JVM来自动处理。</strong></p><p>1)转换规则从存储范围小的类型到存储范围大的类型(只有前面的数据才能随便转换为后边的)<br>byte—&gt; short,char—&gt; int —&gt; long—&gt; float —&gt; double<br>2)例子：<br>byte b &#x3D; 2; short s &#x3D; b; 首先JVM会将b的值转换为short类型，再将值赋值给s</p><h2 id="显式转型"><a href="#显式转型" class="headerlink" title="显式转型"></a>显式转型</h2><p><strong>显示转换也叫强制类型转换，指的是需要手动去处理才能完成的类型转换。该转换会存在精度损失。</strong><br>1)转换规则从存储范围大的类型到存储范围小的类型<br>double→float→long→int→short(char)→byte<br>2)例子：<br>double d &#x3D; 1.1; int i &#x3D; (int)d;<br>首先将d的值转换成int类型，然后赋值给变量i。需要注意的是小数强制转换为整数，采用的是“去1法”，也就是舍弃小数点后面所有数字，则以上转换出的结果是1。整数强制转换为整数时取数字的低位，例如int类型的变量转换为byte类型时，则只去int类型的低8位(也就是最后一个字节)的值。</p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java复习笔记</title>
    <link href="/2023/03/22/java-review/"/>
    <url>/2023/03/22/java-review/</url>
    
    <content type="html"><![CDATA[<h1 id="java复习"><a href="#java复习" class="headerlink" title="java复习"></a>java复习</h1><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p>示例：<a href="https://www.processon.com/view/link/633bec4ef346fb07dea52d90">UML类图-校园活动管理系统</a></p><p>在关联关系中注意：箭头方向(单向关联&#x2F;双向关联)，对应数量(1..*)，引用名(单向关联&#x2F;双向关联)【书本15页】</p><p>在继承关系中注意：箭头方向【书本18页】</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="形参按值传递"><a href="#形参按值传递" class="headerlink" title="形参按值传递"></a>形参按值传递</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;a++;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>fun(num);<br>System.out.println(num);<span class="hljs-comment">//输出0</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(String s)</span> &#123;s=<span class="hljs-string">&quot;world&quot;</span>;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>String string=<span class="hljs-string">&quot;hello&quot;</span>;<br>fun(string);<br>System.out.println(string);<span class="hljs-comment">//输出 hello</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>方法名相同但是参数列表不同</p><p>xxxxxxxxxx1 1conda create -n new_env –clone exist_envsh</p><h4 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li>方法名必须相同</li><li>参数列表必须不同(参数类型或个数或顺序，至少有一样不同)</li><li>返回类型没有要求</li></ol><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><h3 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h3><p>此变量需在定义时或在类构造函数中初始化</p><h3 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h3><p>此方法可被子类继承，但不能被子类覆写</p><h3 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h3><p>此类不能被继承</p><h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><ul><li><p>public:公开的，整体可见</p></li><li><p>private:只能被类自身访问</p></li><li><p>protected:只能被以下三种之一访问</p><ol><li><p>该类自己</p></li><li><p>同包的其他类</p></li><li><p>其他包中该类的子类</p></li></ol></li><li><p>缺省:可被同包的其他类访问</p></li></ul><h2 id="与equals"><a href="#与equals" class="headerlink" title="==与equals"></a><code>==</code>与<code>equals</code></h2><p>如果是基本数据类型，&#x3D;&#x3D;判断的是值</p><p>如果是对象类型，&#x3D;&#x3D;判断的是对象的地址</p><p>通过直接赋值而不是new的方式给String赋值，如果字符串常量池中有该对象，则不会再创建，此时通过 &#x3D;&#x3D; 判断，返回的是true。如：String str&#x3D;“wo”；String str1&#x3D;“wo”;str &#x3D;&#x3D; str1为true.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>String s1=<span class="hljs-string">&quot;hello&quot;</span>;<br>String s2=<span class="hljs-string">&quot;hello&quot;</span>;<br>String s3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(s1==s2);<span class="hljs-comment">//true</span><br>System.out.println(s1==s3);<span class="hljs-comment">//false</span><br>System.out.println(s1.equals(s3));<span class="hljs-comment">//true</span><br><span class="hljs-type">int</span> num1=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> num2=<span class="hljs-number">1</span>;<br>System.out.println(num1==num2);<span class="hljs-comment">//true</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><h3 id="基本数据类型转字符串"><a href="#基本数据类型转字符串" class="headerlink" title="基本数据类型转字符串"></a>基本数据类型转字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>String str1=String.valueOf(<span class="hljs-number">123</span>);<br>String str2=String.valueOf(<span class="hljs-literal">true</span>);<br>String str3=Integer.toString(<span class="hljs-number">456</span>);<br>System.out.println(str1);<br>System.out.println(str2);<br>System.out.println(str3);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串转基本数据类型"><a href="#字符串转基本数据类型" class="headerlink" title="字符串转基本数据类型"></a>字符串转基本数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> num1=Integer.valueOf(<span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-type">int</span> num2=Integer.parseInt(<span class="hljs-string">&quot;456&quot;</span>);<br>System.out.println(num1);<br>System.out.println(num2);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in)) &#123;<br>            a = scanner.nextInt();<br>            b = scanner.nextInt();<br>            System.out.println(a / b);<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException exception) &#123;<br>        System.out.println(<span class="hljs-string">&quot;除数为0&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;程序结束&quot;</span>);<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="throw-throws"><a href="#throw-throws" class="headerlink" title="throw-throws"></a>throw-throws</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> num1,<span class="hljs-type">int</span> num2)</span> <span class="hljs-keyword">throws</span> ArithmeticException&#123;<br><span class="hljs-keyword">if</span>(num2==<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArithmeticException</span>();<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> num1/num2;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in)) &#123;<br>            a = scanner.nextInt();<br>            b = scanner.nextInt();<br>            System.out.println(div(a,b));<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException exception) &#123;<br>        System.out.println(<span class="hljs-string">&quot;除数为0&quot;</span>);<br>        exception.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;程序结束&quot;</span>);<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="javadoc"><a href="#javadoc" class="headerlink" title="javadoc"></a>javadoc</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 小明</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 求输入两个参数的和</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> m 加数1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> n 加数2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 和</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-keyword">return</span> m + n;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>String id;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;animal : eat&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String id)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.id = id;<br><span class="hljs-comment">// some code</span><br>&#125;<br><br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;dog : eat&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String id)</span> &#123;<br><span class="hljs-built_in">super</span>(id);<br><span class="hljs-comment">// some code</span><br>&#125;<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&quot;animal&quot;</span>);<br>a.eat();<br><span class="hljs-type">Dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;dog&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>子类必须调用父类的构造器，完成父类的初始化。（在子类的构造器中的第一个语句默认有<code>super();</code>它默认去调用父类的无参构造器）。这个父类的构造函数必须写在子类构造函数的第一行</p><h3 id="覆写"><a href="#覆写" class="headerlink" title="覆写"></a>覆写</h3><p>子类写一个方法名，参数列表，返回类型与父类相同的方法</p><p>返回类型也要一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>String id;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;animal : eat&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String id)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.id = id;<br><span class="hljs-comment">// some code</span><br>&#125;<br><br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>String <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//报错:The return type is incompatible with Animal.eat()</span><br>System.out.println(<span class="hljs-string">&quot;dog : eat&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;eat&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String id)</span> &#123;<br><span class="hljs-built_in">super</span>(id);<br><span class="hljs-comment">// some code</span><br>&#125;<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="静态类方法和类属性的继承"><a href="#静态类方法和类属性的继承" class="headerlink" title="静态类方法和类属性的继承"></a>静态类方法和类属性的继承</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Animal : name&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;animal : eat&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;animal : sleep&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dog : name&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;dog : eat&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><span class="hljs-type">Dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><br>Dog.eat();<span class="hljs-comment">// dog : eat</span><br>a.eat();<span class="hljs-comment">// animal : eat</span><br>d.eat();<span class="hljs-comment">// dog : eat</span><br>System.out.println(a.name);<span class="hljs-comment">// Animal : name</span><br>System.out.println(d.name);<span class="hljs-comment">// Dog : name</span><br>System.out.println(Dog.name);<span class="hljs-comment">// Dog : name</span><br>Dog.sleep();<span class="hljs-comment">// 这行可以运行 输出结果是 animal : sleep</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>得出如下结论:父类中的静态成员变量和方法是可以被子类继承的,但是不能被自己重写,无法形成多态.</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p><strong>静态方法绑定类，在类加载时便与该类捆绑，不受其他类影响</strong></p><p><strong>而动态方法绑定实例对象，受子类重写的影响，若被重写即绑定到重写它的那个实例对象上</strong></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*初始化*/</span><br>List&lt;Integer&gt; l = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-comment">/*添加*/</span><br>l.add(<span class="hljs-number">1</span>);<br>l.add(<span class="hljs-number">2</span>);<br>l.add(<span class="hljs-number">3</span>);<br>l.add(<span class="hljs-number">4</span>);<br>        <span class="hljs-comment">/*获取*/</span><br>System.out.println(l.get(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 2</span><br>        <span class="hljs-comment">/*删除*/</span><br>l.remove(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">/*遍历*/</span><br>Iterator&lt;Integer&gt; i=l.iterator();<br><span class="hljs-keyword">while</span>(i.hasNext()) &#123;<br>System.out.println(i.next());<span class="hljs-comment">// 1 3 4</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三种遍历列表的方法"><a href="#三种遍历列表的方法" class="headerlink" title="三种遍历列表的方法"></a>三种遍历列表的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Product&gt; l_Products=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Product&gt;();<br><span class="hljs-comment">//choose one of the three following methods</span><br><span class="hljs-comment">//for-each</span><br><span class="hljs-keyword">for</span>(Product l_Product:l_Products)<br>&#123;<br>System.out.println(l_Product);<br>&#125;<br><br><span class="hljs-comment">//ArrayList&lt;&gt;.get</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;l_Products.size();i++)<br>&#123;<br>System.out.println(l_Products.get(i));<br>&#125;<br><br><br><span class="hljs-comment">//Iterator</span><br>Iterator&lt;Product&gt; iterator_Product=l_Products.iterator();<br><span class="hljs-keyword">while</span>(iterator_Product.hasNext())<br>&#123;<br>System.out.println(iterator_Product.next());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span><br><span class="hljs-comment">//在实例化泛型类时，必须指定T的具体类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic</span>&lt;T&gt; &#123;<br><span class="hljs-comment">// key这个成员变量的类型为T,T的类型由外部指定</span><br><span class="hljs-keyword">private</span> T key;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Generic</span><span class="hljs-params">(T key)</span> &#123; <span class="hljs-comment">// 泛型构造方法形参key的类型也为T，T的类型由外部指定</span><br><span class="hljs-built_in">this</span>.key = key;<br>&#125;<br><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 泛型方法getKey的返回值类型为T，T的类型由外部指定</span><br><span class="hljs-keyword">return</span> key;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 泛型的类型参数只能是类类型（包括自定义类），不能是简单类型</span><br><span class="hljs-comment">// 传入的实参类型需与泛型的类型参数类型相同，即为Integer.</span><br>Generic&lt;Integer&gt; genericInteger = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;Integer&gt;(<span class="hljs-number">2023</span>);<br><span class="hljs-comment">// 也可以这样定义，但是会警告，所以还是尽量避免</span><br><span class="hljs-type">Generic</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;Integer&gt;(<span class="hljs-number">2024</span>);<br><span class="hljs-type">Generic</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>(<span class="hljs-number">2025</span>);<br><br><span class="hljs-comment">// 传入的实参类型需与泛型的类型参数类型相同，即为String.</span><br>Generic&lt;String&gt; genericString = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;String&gt;(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + genericInteger.getKey());<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + genericString.getKey());<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + t1.getKey());<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + t2.getKey());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="初始化问题"><a href="#初始化问题" class="headerlink" title="初始化问题"></a>初始化问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//List l1=new ArrayList&lt;int&gt;();// 无法被正确初始化</span><br>List l2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>ArrayList l3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-comment">//ArrayList&lt;&gt; l4=new ArrayList&lt;String&gt;();// 无法被正确初始化</span><br>ArrayList&lt;String&gt; l5=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>List&lt;String&gt; l6=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>List&lt;String&gt; l7=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//List&lt;&gt; l8=new ArrayList&lt;&gt;();// 无法被正确初始化</span><br>List l9=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结，泛型中不能填基本数据类型，<code>=</code>号前面不能有空的<code>&lt;&gt;</code>，<code>=</code>号后面可以进行一些省略(会被警告)，但是最好还是不要偷懒，要写规范，否则会出一些问题</p><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><p>语法：修饰符 Class 类名称 &lt;泛型类型&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span><br><span class="hljs-comment">//在实例化泛型类时，必须指定T的具体类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic</span>&lt;T&gt; &#123;<br><span class="hljs-comment">// key这个成员变量的类型为T,T的类型由外部指定</span><br><span class="hljs-keyword">private</span> T key;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Generic</span><span class="hljs-params">(T key)</span> &#123; <span class="hljs-comment">// 泛型构造方法形参key的类型也为T，T的类型由外部指定</span><br><span class="hljs-built_in">this</span>.key = key;<br>&#125;<br><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 泛型方法getKey的返回值类型为T，T的类型由外部指定</span><br><span class="hljs-keyword">return</span> key;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 泛型的类型参数只能是类类型（包括自定义类），不能是简单类型</span><br><span class="hljs-comment">// 传入的实参类型需与泛型的类型参数类型相同，即为Integer.</span><br>Generic&lt;Integer&gt; genericInteger = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;Integer&gt;(<span class="hljs-number">2023</span>);<br><span class="hljs-comment">// 传入的实参类型需与泛型的类型参数类型相同，即为String.</span><br>Generic&lt;String&gt; genericString = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;String&gt;(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + genericInteger.getKey());<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + genericString.getKey());<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><p>泛型方法的格式：修饰符 &lt;泛型变量&gt; 方法返回值 方法名称(形参列表){方法体}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(T t)</span> &#123;System.out.println(t);&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>show(<span class="hljs-number">123</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><p>泛型接口的格式：修饰符 interface 接口名称&lt;泛型变量&gt;{}</p><h5 id="实现类也是泛型类"><a href="#实现类也是泛型类" class="headerlink" title="实现类也是泛型类"></a>实现类也是泛型类</h5><p>若实现类也是泛型类，实现类和接口的泛型类型要一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 泛型接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Generator</span>&lt;T&gt; &#123;<br>    T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 泛型接口的实现类，是一个泛型类，</span><br><span class="hljs-comment"> * 那么要保证实现接口的泛型类泛型标识包含泛型接口的泛型标识</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span>&lt;T,E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Generator</span>&lt;T&gt; &#123;<br> <br>    <span class="hljs-keyword">private</span> T key;<br>    <span class="hljs-keyword">private</span> E value;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">(T key, E value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.key = key;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h5 id="实现类不是泛型类"><a href="#实现类不是泛型类" class="headerlink" title="实现类不是泛型类"></a>实现类不是泛型类</h5><p>若实现类不是泛型类，接口要明确数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现泛型接口的类，不是泛型类，需要明确实现泛型接口的数据类型。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Apple</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Generator</span>&lt;String&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello generic&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>初始化及遍历</p><p>注意：给数组分配空间时，必须指定数组能够存储的元素个数来确定数组大小。创建数组之后不能修改数组的大小。可以使用length 属性获取数组的大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">/*初始化*/</span><br><span class="hljs-type">int</span> a[]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span>[] b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>&#125;;<br><span class="hljs-type">int</span>[] c=&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>&#125;;<br><span class="hljs-comment">//注意：给数组分配空间时，必须指定数组能够存储的元素个数来确定数组大小。</span><br>        <span class="hljs-comment">//创建数组之后不能修改数组的大小。可以使用length 属性获取数组的大小。</span><br><span class="hljs-comment">//int d[];d= &#123;1,2,3&#125;;//错误</span><br><span class="hljs-comment">//int e[5]=new int[5];//错误</span><br>        <br><span class="hljs-comment">/*遍历，使用length属性*/</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;b.length;i++) &#123;<br>System.out.println(b[i]);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><ul><li>抽象类不能被<code>new</code>实例化</li><li>任何子类必须重写父类的抽象方法，或者声明自身为抽象类。</li><li>构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法</li><li>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类</li><li>抽象类实现接口，可以不实现接口的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> width; <span class="hljs-comment">// 几何图形的长</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> height; <span class="hljs-comment">// 几何图形的宽</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Shape</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span> &#123;<br>        <span class="hljs-built_in">this</span>.width = width;<br>        <span class="hljs-built_in">this</span>.height = height;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 定义抽象方法，计算面积</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Square</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span> &#123;<br>        <span class="hljs-built_in">super</span>(width, height);<br>    &#125;<br>    <span class="hljs-comment">// 重写父类中的抽象方法，实现计算正方形面积的功能</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> width * height;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br> <span class="hljs-type">Square</span> <span class="hljs-variable">square</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Square</span>(<span class="hljs-number">5</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 创建正方形类对象</span><br>     System.out.println(<span class="hljs-string">&quot;正方形的面积为：&quot;</span> + square.area());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">travel</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MammalInt</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Mammal eats&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">travel</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Mammal travels&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">noOfLegs</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-comment">// 可以用接口来指向实现了的类的示例</span><br><span class="hljs-type">Animal</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MammalInt</span>();<br><span class="hljs-comment">//MammalInt m = new MammalInt();//当然也可以这样定义</span><br>m.eat();<br>m.travel();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="与class的区别"><a href="#与class的区别" class="headerlink" title="与class的区别"></a>与class的区别</h3><ul><li><p><strong>接口不能用于实例化对象。</strong></p></li><li><p><strong>接口没有构造方法。</strong></p></li><li><p><strong>接口中所有的方法必须是抽象方法</strong>，Java 8 之后 接口中可以使用 default 关键字修饰的非抽象方法。</p><p>​(接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 <strong>public abstract</strong>)</p></li><li><p><strong>接口不能包含成员变量</strong>，除了 static 和 final 变量。</p></li><li><p>接口不是被类继承了，而是要被类实现。</p></li><li><p>接口支持多继承。</p></li></ul><h3 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Sports</span><br>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHomeTeam</span><span class="hljs-params">(String name)</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setVisitingTeam</span><span class="hljs-params">(String name)</span>;<br>&#125;<br> <br><span class="hljs-comment">// 文件名: Football.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Football</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sports</span><br>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">homeTeamScored</span><span class="hljs-params">(<span class="hljs-type">int</span> points)</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visitingTeamScored</span><span class="hljs-params">(<span class="hljs-type">int</span> points)</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">endOfQuarter</span><span class="hljs-params">(<span class="hljs-type">int</span> quarter)</span>;<br>&#125;<br><br><span class="hljs-comment">/*接口可以多继承，而类不能</span><br><span class="hljs-comment">public interface Hockey extends Sports, Event</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h2><p>使用String类中的<code>split</code>方法分割</p><p> String[] split(String regex)<br>          根据给定正则表达式的匹配拆分此字符串。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>String sa[]=<span class="hljs-string">&quot;hello_world_!&quot;</span>.split(<span class="hljs-string">&quot;_&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;sa.length;i++) &#123;<br>System.out.println(sa[i]);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>StringTokenizer类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringTokenizer</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(<span class="hljs-string">&quot;this is a test&quot;</span>);<br><span class="hljs-keyword">while</span> (st.hasMoreTokens()) &#123;<br>    System.out.println(st.nextToken());<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>一个接口，需要实现<code>add</code>和<code>remove</code>和<code>size</code>等方法(不要求实现<code>get</code>)，不包含重复元素。正如其名称所暗示的，此接口模仿了数学上的 <em>set</em> 抽象。</p><p>实现了它的主要有<code>HashSet</code>和<code>TreeSet</code>等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>HashSet&lt;String&gt; hs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(); <span class="hljs-comment">// 创建HashSet对象</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> hs.add(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> hs.add(<span class="hljs-string">&quot;a&quot;</span>); <span class="hljs-comment">// 当向set集合中存储重复元素的时候返回为false</span><br><br>hs.add(<span class="hljs-string">&quot;b&quot;</span>);<br>hs.add(<span class="hljs-string">&quot;c&quot;</span>);<br>hs.add(<span class="hljs-string">&quot;d&quot;</span>);<br>System.out.println(hs); <span class="hljs-comment">// [d, b, c, a] 存取无序 并且去掉了重复元素</span><br>System.out.println(b1); <span class="hljs-comment">// true</span><br>System.out.println(b2); <span class="hljs-comment">// false</span><br>hs.remove(<span class="hljs-string">&quot;b&quot;</span>);<br><span class="hljs-keyword">for</span> (String string : hs) &#123; <span class="hljs-comment">// 只要能用迭代器迭代的,就可以使用增强for循环遍历</span><br>System.out.println(string);<span class="hljs-comment">// a c d</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>一个接口，需要实现<code>get</code>和<code>put</code>和<code>size</code>等方法</p><p>实现了它的主要有<code>HashMap</code>和<code>TreeMap</code>等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-comment">//创建Map对象</span><br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,String&gt;();       <span class="hljs-comment">//数据采用的哈希表结构</span><br>        <span class="hljs-comment">//给map中添加元素</span><br>        map.put(<span class="hljs-string">&quot;星期一&quot;</span>, <span class="hljs-string">&quot;Monday&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;星期日&quot;</span>, <span class="hljs-string">&quot;Sunday&quot;</span>);<br>        System.out.println(map); <span class="hljs-comment">// &#123;星期日=Sunday, 星期一=Monday&#125;</span><br> <br>        <span class="hljs-comment">//当给Map中添加元素，会返回key对应的原来的value值，若key没有对应的值，返回null</span><br>        System.out.println(map.put(<span class="hljs-string">&quot;星期一&quot;</span>, <span class="hljs-string">&quot;Mon&quot;</span>)); <span class="hljs-comment">// Monday</span><br>        System.out.println(map); <span class="hljs-comment">// &#123;星期日=Sunday, 星期一=Mon&#125;</span><br> <br>        <span class="hljs-comment">//根据指定的key获取对应的value</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">en</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;星期日&quot;</span>);<br>        System.out.println(en); <span class="hljs-comment">// Sunday</span><br>        <br>        <span class="hljs-comment">//根据key删除元素,会返回key对应的value值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> map.remove(<span class="hljs-string">&quot;星期日&quot;</span>);<br>        System.out.println(value); <span class="hljs-comment">// Sunday</span><br>        System.out.println(map); <span class="hljs-comment">// &#123;星期一=Mon&#125;</span><br>        <br>        <span class="hljs-comment">/* 修改对应的值</span><br><span class="hljs-comment">        使用replace(key,newValue)，查找出HashMap中，指定的key的curValue，</span><br><span class="hljs-comment">        如果replace的入参oldValue和curValue相等，则执行put(key,newValue)，把入参newValue替换掉原来对应的值。</span><br><span class="hljs-comment">        */</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="变量默认值"><a href="#变量默认值" class="headerlink" title="变量默认值"></a>变量默认值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">static</span> String str;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> i;<br><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> b;<br><span class="hljs-keyword">static</span> <span class="hljs-type">char</span> c;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(str);<span class="hljs-comment">// null</span><br>    System.out.println(i);<span class="hljs-comment">// 0</span><br>    System.out.println(b);<span class="hljs-comment">// false</span><br>    System.out.println(c);<span class="hljs-comment">// &#x27;\0&#x27;</span><br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java内存的结构"><a href="#java内存的结构" class="headerlink" title="java内存的结构"></a>java内存的结构</h2><p>Java程序在运行时，需要在内存中的分配空间。为了提高运算效率，就对数据进行了不同空间的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p><p><strong>具体划分为如下5个内存空间：</strong></p><ul><li>栈：存放局部变量</li><li>堆：存放所有new出来的东西</li><li>方法区：被虚拟机加载的类信息、常量、静态常量等。</li><li>程序计数器(和系统相关)</li><li>本地方法栈</li></ul><h2 id="查漏补缺"><a href="#查漏补缺" class="headerlink" title="查漏补缺"></a>查漏补缺</h2><ol><li>char所占空间为2字节，因为unicode</li><li>全局变量可以不赋值，直接使用，因为有默认值，局部变量必须赋值后才能使用，因为没有默认值。</li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>review</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jquery</title>
    <link href="/2023/03/22/jquery/"/>
    <url>/2023/03/22/jquery/</url>
    
    <content type="html"><![CDATA[<h1 id="jquery笔记"><a href="#jquery笔记" class="headerlink" title="jquery笔记"></a>jquery笔记</h1><h2 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h2><p>【尚硅谷最新版JavaWeb全套教程,java web零基础入门完整版】 <a href="https://www.bilibili.com/video/BV1Y7411K7zz/?p=63&share_source=copy_web&vd_source=dd2f1030c390db245979ca6615985682">【尚硅谷最新版JavaWeb全套教程】</a></p><p>这是一篇围绕这个视频教程和jquery文档的笔记</p><h2 id="关于"><a href="#关于" class="headerlink" title="关于$"></a>关于$</h2><p>注意下面这个程序导入了”..&#x2F;script&#x2F;jquery-1.7.2.js”，请确保工作目录下有这个文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// window.onload = function () &#123;</span></span><br><span class="language-javascript"><span class="hljs-comment">// var btnObj = document.getElementById(&quot;btnId&quot;);</span></span><br><span class="language-javascript"><span class="hljs-comment">// // alert(btnObj);//[object HTMLButtonElement]   ====&gt;&gt;&gt;  dom对象</span></span><br><span class="language-javascript"><span class="hljs-comment">// btnObj.onclick = function () &#123;</span></span><br><span class="language-javascript"><span class="hljs-comment">// alert(&quot;js 原生的单击事件&quot;);</span></span><br><span class="language-javascript"><span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"><span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 表示页面加载完成 之后，相当 window.onload = function () &#123;&#125;</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> $btnObj = $(<span class="hljs-string">&quot;#btnId&quot;</span>); <span class="hljs-comment">// 表示按id查询标签对象，返回的是一个jquery对象</span></span><br><span class="language-javascript">$btnObj.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 绑定单击事件</span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;jQuery 的单击事件&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnId&quot;</span>&gt;</span>SayHello<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>$()里面如果放一个函数，意思是这个函数要在window.onload时执行</p><p>四种用法见下面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//核心函数的4个作用</span></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// alert(&quot;页面加载完成之后，自动调用&quot;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;    &lt;div&gt;&quot;</span> +</span><br><span class="language-javascript">            <span class="hljs-string">&quot;        &lt;span&gt;div-span1&lt;/span&gt;&quot;</span> +</span><br><span class="language-javascript">            <span class="hljs-string">&quot;        &lt;span&gt;div-span2&lt;/span&gt;&quot;</span> +</span><br><span class="language-javascript">            <span class="hljs-string">&quot;    &lt;/div&gt;&quot;</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;body&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// alert($(&quot;button&quot;).length);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btnObj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn01&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// alert(btnObj);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// alert( $(btnObj) );</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// alert( $(&quot;&lt;h1&gt;&lt;/h1&gt;&quot;) );</span></span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;button&quot;</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"><span class="hljs-comment">//传入参数为[函数]时：在文档加载完成后执行这个函数</span></span><br><span class="language-javascript"><span class="hljs-comment">//传入参数为[HTML字符串]时：根据这个字符串创建元素节点对象</span></span><br><span class="language-javascript"><span class="hljs-comment">//传入参数为[选择器字符串]时：根据这个字符串查找元素节点对象，和queryselsctorAll类似，注意它返回的是一个Dom对象数组</span></span><br><span class="language-javascript"><span class="hljs-comment">//传入参数为[DOM对象]时：将DOM对象包装为jQuery对象返回</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn01&quot;</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="dom对象与jquery对象"><a href="#dom对象与jquery对象" class="headerlink" title="dom对象与jquery对象"></a>dom对象与jquery对象</h3><p>感觉后者是前者包装后的数组</p><p>互相转化的方法：</p><ul><li>$(dom)&#x3D;&#x3D;&#x3D;&gt;jquery</li><li>jquery[index]&#x3D;&#x3D;&#x3D;&gt;dom</li></ul><h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><ul><li>ancestor descendant 后代选择器 ：在给定的祖先元素下匹配所有的后代元素 </li><li>parent &gt; child 子元素选择器：在给定的父元素下匹配所有的子元素 </li><li>prev + next 相邻元素选择器：匹配所有紧接在 prev 元素后的 next 元素 </li><li>prev ~ sibings 之后的兄弟元素选择器：匹配 prev 元素之后的所有 siblings</li></ul><h2 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h2><p>即在选择到的基础上进行筛选</p><h3 id="基本过滤器"><a href="#基本过滤器" class="headerlink" title="基本过滤器"></a>基本过滤器</h3><ul><li>:first 获取第一个元素</li><li>:last 获取最后个元素 </li><li>:not(selector) 去除所有与给定选择器匹配的元素 </li><li>:even 匹配所有索引值为偶数的元素，从 0 开始计数 </li><li>:odd 匹配所有索引值为奇数的元素，从 0 开始计数 </li><li>:eq(index) 匹配一个给定索引值的元素 </li><li>:gt(index) 匹配所有大于给定索引值的元素 </li><li>:lt(index) 匹配所有小于给定索引值的元素 </li><li>:header 匹配如 h1, h2, h3 之类的标题元素 </li><li>:animated 匹配所有正在执行动画效果的元素</li></ul><h3 id="内容过滤器"><a href="#内容过滤器" class="headerlink" title="内容过滤器"></a>内容过滤器</h3><ul><li>:contains(text) 匹配包含给定文本的元素 </li><li>:empty 匹配所有不包含子元素或者文本的空元素 </li><li>:parent 匹配含有子元素或者文本的元素 </li><li>:has(selector) 匹配含有选择器所匹配的元素的元素</li></ul><h3 id="属性过滤器"><a href="#属性过滤器" class="headerlink" title="属性过滤器"></a>属性过滤器</h3><ul><li>[attribute] 匹配包含给定属性的元素。</li><li>[attribute&#x3D;value] 匹配给定的属性是某个特定值的元素</li><li>[attribute!&#x3D;value] 匹配所有不含有指定的属性，或者属性不等于特定值的元素。</li><li>[attribute^&#x3D;value] 匹配给定的属性是以某些值开始的元素</li><li>[attribute$&#x3D;value] 匹配给定的属性是以某些值结尾的元素</li><li>[attribute*&#x3D;value] 匹配给定的属性是以包含某些值的元素</li></ul><p>HTML 代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Hot Fuzz&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Cold Fusion&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;accept&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Evil Plans&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>jQuery 代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;input[name=&#x27;newsletter&#x27;]&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;checked&quot;</span>, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>结果:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">[ <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Hot Fuzz&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span></span>, <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Cold Fusion&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span></span> ]<br></code></pre></td></tr></table></figure><h3 id="表单过滤器"><a href="#表单过滤器" class="headerlink" title="表单过滤器"></a>表单过滤器</h3><ul><li>:input 匹配所有 input, textarea, select 和 button 元素</li><li>:text 匹配所有 文本输入框</li><li>:password 匹配所有的密码输入框</li><li>:radio 匹配所有的单选框</li><li>:checkbox 匹配所有的复选框</li><li>:submit 匹配所有提交按钮</li><li>:image 匹配所有 img 标签</li><li>:reset 匹配所有重置按钮</li><li>:button 匹配所有 input type&#x3D;button <button>按钮</button></li><li>:file 匹配所有 input type&#x3D;file 文件上传</li><li>:hidden 匹配所有不可见元素 display:none</li></ul><p>这个好像没啥特别的，就是专门用来匹配表单里面的，至于不用它能不能匹配到，这个还不太清楚</p><h3 id="表单对象属性过滤器"><a href="#表单对象属性过滤器" class="headerlink" title="表单对象属性过滤器"></a>表单对象属性过滤器</h3><p>跟之前的过滤器一样</p><ul><li>:enabled 匹配所有可用元素 </li><li>:disabled 匹配所有不可用元素</li></ul><h2 id="元素筛选"><a href="#元素筛选" class="headerlink" title="元素筛选"></a>元素筛选</h2><p>和过滤选择其实差不多，这里略</p><h2 id="一个简单的区分"><a href="#一个简单的区分" class="headerlink" title="一个简单的区分"></a>一个简单的区分</h2><h3 id="selector1-selector2-selectorN"><a href="#selector1-selector2-selectorN" class="headerlink" title="selector1,selector2,selectorN"></a>selector1,selector2,selectorN</h3><blockquote><p>返回值:Array&lt;Element(s)&gt;</p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="HTML-代码"><a href="#HTML-代码" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;myClass&quot;</span>&gt;</span>p class=&quot;myClass&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;notMyClass&quot;</span>&gt;</span>p class=&quot;notMyClass&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码"><a href="#jQuery-代码" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;div,span,p.myClass&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果"><a href="#结果" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;myClass&quot;</span>&gt;</span>p class=&quot;myClass&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="ancestor-descendant"><a href="#ancestor-descendant" class="headerlink" title="ancestor descendant"></a>ancestor descendant</h3><p>返回值:Array&lt;Element(s)&gt;</p><p>在给定的祖先元素下匹配所有的后代元素</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>找到表单中所有的 input 元素</p><h5 id="HTML-代码-1"><a href="#HTML-代码-1" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Newsletter:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-1"><a href="#jQuery-代码-1" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;form input&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果-1"><a href="#结果-1" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="parent-gt-child"><a href="#parent-gt-child" class="headerlink" title="parent &gt; child"></a>parent &gt; child</h3><p>返回值:Array&lt;Element(s)&gt;</p><p>在给定的父元素下匹配所有的子元素</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p>匹配表单中所有的子级input元素。</p><h5 id="HTML-代码-2"><a href="#HTML-代码-2" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Newsletter:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-2"><a href="#jQuery-代码-2" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;form &gt; input&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果-2"><a href="#结果-2" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="prev-next"><a href="#prev-next" class="headerlink" title="prev + next"></a>prev + next</h3><p>返回值:Array&lt;Element(s)&gt;</p><p>匹配所有紧接在 prev 元素后的 next 元素</p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><p>匹配所有跟在 label 后面的 input 元素</p><h5 id="HTML-代码-3"><a href="#HTML-代码-3" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Newsletter:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-3"><a href="#jQuery-代码-3" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;label + input&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果-3"><a href="#结果-3" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="prev-siblings"><a href="#prev-siblings" class="headerlink" title="prev ~ siblings"></a>prev ~ siblings</h3><p>返回值:Array&lt;Element(s)&gt;</p><p>匹配 prev 元素之后的所有 siblings 元素</p><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><p>找到所有与表单同辈的 input 元素</p><h5 id="HTML-代码-4"><a href="#HTML-代码-4" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Newsletter:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-4"><a href="#jQuery-代码-4" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;form ~ input&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果-4"><a href="#结果-4" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="first"><a href="#first" class="headerlink" title=":first"></a>:first</h3><p>返回值:jQuery</p><p>获取第一个元素</p><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><p>获取匹配的第一个元素</p><h5 id="HTML-代码-5"><a href="#HTML-代码-5" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-5"><a href="#jQuery-代码-5" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;li:first&#x27;</span>);<br></code></pre></td></tr></table></figure><h5 id="结果-5"><a href="#结果-5" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="nth-child"><a href="#nth-child" class="headerlink" title=":nth-child"></a>:nth-child</h3><p>返回值:Array&lt;Element(s)&gt;</p><p>匹配其父元素下的第N个子或奇偶元素</p><p>‘:eq(index)’  只匹配一个元素，而这个将为每一个父元素匹配子元素。:nth-child<strong>从1开始的</strong>，而:eq()是从0算起的！可以使用:<br>nth-child(even)<br>:nth-child(odd)<br>:nth-child(3n)<br>:nth-child(2)<br>:nth-child(3n+1)<br>:nth-child(3n+2)</p><h4 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h4><p>在每个 ul 查找第 2 个li</p><h5 id="HTML-代码-6"><a href="#HTML-代码-6" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>John<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Karl<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Brandon<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Glen<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Tane<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Ralph<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-6"><a href="#jQuery-代码-6" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;ul li:nth-child(2)&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果-6"><a href="#结果-6" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Karl<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>,   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Tane<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> ]<br></code></pre></td></tr></table></figure><h2 id="jQuery-的属性操作"><a href="#jQuery-的属性操作" class="headerlink" title="jQuery 的属性操作"></a>jQuery 的属性操作</h2><p>html() 它可以设置和获取起始标签和结束标签中的内容。 跟 dom 属性 innerHTML 一样。<br>text() 它可以设置和获取起始标签和结束标签中的文本。 跟 dom 属性 innerText 一样。<br>val() 它可以设置和获取表单项的 value 属性值。 跟 dom 属性 value 一</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 不传参数，是获取，传递参数是设置</span></span><br><span class="language-javascript">            <span class="hljs-comment">// alert( $(&quot;div&quot;).html() );// 获取</span></span><br><span class="language-javascript">            <span class="hljs-comment">// $(&quot;div&quot;).html(&quot;&lt;h1&gt;我是div中的标题 1&lt;/h1&gt;&quot;);// 设置</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 不传参数，是获取，传递参数是设置</span></span><br><span class="language-javascript">            <span class="hljs-comment">// alert( $(&quot;div&quot;).text() ); // 获取</span></span><br><span class="language-javascript">            <span class="hljs-comment">// $(&quot;div&quot;).text(&quot;&lt;h1&gt;我是div中的标题 1&lt;/h1&gt;&quot;); // 设置</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 不传参数，是获取，传递参数是设置</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>());<span class="hljs-comment">//获取</span></span><br><span class="language-javascript">                $(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;超级程序猿&quot;</span>);<span class="hljs-comment">// 设置</span></span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div标签 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是div中的span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>操作输入框<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>attr() 可以设置和获取属性的值，不推荐操作 checked、readOnly、selected、disabled 等等<br>attr 方法还可以操作非标准的属性。比如自定义属性：abc,bbj<br>prop() 可以设置和获取属性的值,只推荐操作 checked、readOnly、selected、disabled 等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 给全选绑定单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedAllBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-literal">true</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 给全不选绑定单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedNoBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-literal">false</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 反选单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedRevBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 查询全部的球类的复选框</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 在each遍历的function函数中，有一个this对象。这个this对象是当前正在遍历到的dom对象</span></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span>;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 要检查 是否满选</span></span><br><span class="language-javascript"><span class="hljs-comment">// 获取全部的球类个数</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> allCount = $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-property">length</span>;</span><br><span class="language-javascript"><span class="hljs-comment">// 再获取选中的球类个数</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> checkedCount = $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).<span class="hljs-property">length</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// if (allCount == checkedCount) &#123;</span></span><br><span class="language-javascript"><span class="hljs-comment">// $(&quot;#checkedAllBox&quot;).prop(&quot;checked&quot;,true);</span></span><br><span class="language-javascript"><span class="hljs-comment">// &#125; else &#123;</span></span><br><span class="language-javascript"><span class="hljs-comment">// $(&quot;#checkedAllBox&quot;).prop(&quot;checked&quot;,false);</span></span><br><span class="language-javascript"><span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,allCount == checkedCount);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 【提交】按钮单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#sendBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 获取选中的球类的复选框</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 给【全选/全不选】绑定单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 在事件的function函数中，有一个this对象，这个this对象是当前正在响应事件的dom对象</span></span><br><span class="language-javascript"><span class="hljs-comment">// alert(this.checked);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 给全部球类绑定单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 要检查 是否满选</span></span><br><span class="language-javascript"><span class="hljs-comment">// 获取全部的球类个数</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> allCount = $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-property">length</span>;</span><br><span class="language-javascript"><span class="hljs-comment">// 再获取选中的球类个数</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> checkedCount = $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).<span class="hljs-property">length</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,allCount == checkedCount);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><br>你爱好的运动是？<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedAllBox&quot;</span> /&gt;</span>全选/全不选 <br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;足球&quot;</span> /&gt;</span>足球<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;篮球&quot;</span> /&gt;</span>篮球<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;羽毛球&quot;</span> /&gt;</span>羽毛球<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;乒乓球&quot;</span> /&gt;</span>乒乓球<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedAllBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全　选&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedNoBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全不选&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedRevBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;反　选&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sendBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提　交&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="DOM-的增删改"><a href="#DOM-的增删改" class="headerlink" title="DOM 的增删改"></a>DOM 的增删改</h2><p>内部插入：<br>appendTo() a.appendTo(b) 把 a 插入到 b 子元素末尾，成为最后一个子元素<br>prependTo() a.prependTo(b) 把 a 插到 b 所有子元素前面，成为第一个子元素<br>外部插入：<br>insertAfter() a.insertAfter(b) 得到 ba<br>insertBefore() a.insertBefore(b) 得到 ab<br>替换:<br>replaceWith() a.replaceWith(b) 用 b 替换掉 a<br>replaceAll() a.replaceAll(b) 用 a 替换掉所有 b<br>删除：<br>remove() a.remove(); 删除 a 标签<br>empty() a.empty(); 清空 a 标签里的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">select &#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">140px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">130px</span>;</span><br><span class="language-css"><span class="hljs-attribute">float</span>: left;</span><br><span class="language-css"><span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//选中添加到右边</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;button:eq(0)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;select[name=sel01] :selected&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//alert(this);</span></span><br><span class="language-javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;select[name=sel02]&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//全部添加到右边</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;button:eq(1)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;select[name=sel01] option&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//alert(this);</span></span><br><span class="language-javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;select[name=sel02]&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//选中删除到左边</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;button:eq(2)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;select[name=sel02] :selected&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//alert(this);</span></span><br><span class="language-javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;select[name=sel01]&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"><span class="hljs-comment">//全部删除到左边</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;button:eq(3)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;select[name=sel02] option&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//alert(this);</span></span><br><span class="language-javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;select[name=sel01]&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sel01&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt01&quot;</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt02&quot;</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt03&quot;</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt04&quot;</span>&gt;</span>选项4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt05&quot;</span>&gt;</span>选项5<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt06&quot;</span>&gt;</span>选项6<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt07&quot;</span>&gt;</span>选项7<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt08&quot;</span>&gt;</span>选项8<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>选中添加到右边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>全部添加到右边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rigth&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sel02&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>选中删除到左边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>全部删除到左边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="设置css"><a href="#设置css" class="headerlink" title="设置css"></a>设置css</h2><p>就像这样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">$(&quot;p&quot;).css(&#123; color: &quot;#ff0011&quot;, background: &quot;blue&quot; &#125;);<br></code></pre></td></tr></table></figure><h2 id="事件的冒泡"><a href="#事件的冒泡" class="headerlink" title="事件的冒泡"></a>事件的冒泡</h2><p>什么是事件的冒泡？<br>事件的冒泡是指，父子元素同时监听同一个事件。当触发子元素的事件的时候，同一个事件也被传递到了父元素的事件里去<br>响应。<br>那么如何阻止事件冒泡呢？<br>在子元素事件函数体内，return false; 可以阻止事件的冒泡传递。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">*&#123;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>;</span><br><span class="language-css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">130%</span>;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-id">#content</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">220px</span>;</span><br><span class="language-css"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#0050D0</span>;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#96E555</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#666666</span>;</span><br><span class="language-css"><span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: white;</span><br><span class="language-css"><span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#888</span>;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: white;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//冒泡就是事件的向上传导，子元素的事件被触发，父元素的响应事件也会触发</span></span><br><span class="language-javascript"><span class="hljs-comment">//解决冒泡问题：return false;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//给span绑定一个单击响应函数</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我是span的单击响应函数&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//给id为content的div绑定一个单击响应函数</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#content&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我是div的单击响应函数&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//给body绑定一个单击响应函数</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//alert(&quot;我是body的单击响应函数&quot;);</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//取消默认行为</span></span><br><span class="language-javascript"><span class="hljs-comment">/* $(&quot;a&quot;).click(function()&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">return false;</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;) */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>外层div元素<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>内层span元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>外层div元素<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.hao123.com&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;return false;&quot;</span>&gt;</span>WWW.HAO123.COM<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><h3 id="1-原生-javascript-获取事件对象"><a href="#1-原生-javascript-获取事件对象" class="headerlink" title="1.原生 javascript 获取事件对象"></a>1.原生 javascript 获取事件对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;areaDiv&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-jQuery-代码获取事件对象"><a href="#2-jQuery-代码获取事件对象" class="headerlink" title="2.jQuery 代码获取事件对象"></a>2.jQuery 代码获取事件对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>$(<span class="hljs-string">&quot;#areaDiv&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="3-使用-bind-同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。"><a href="#3-使用-bind-同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。" class="headerlink" title="3.使用 bind 同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。"></a>3.使用 bind 同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#areaDiv&quot;</span>).<span class="hljs-title function_">bind</span>(<span class="hljs-string">&quot;mouseover mouseout&quot;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><span class="hljs-keyword">if</span> (event.<span class="hljs-property">type</span> == <span class="hljs-string">&quot;mouseover&quot;</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;鼠标移入&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.<span class="hljs-property">type</span> == <span class="hljs-string">&quot;mouseout&quot;</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;鼠标移出&quot;</span>);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python类型注解</title>
    <link href="/2023/03/22/python-lei-xing-zhu-jie/"/>
    <url>/2023/03/22/python-lei-xing-zhu-jie/</url>
    
    <content type="html"><![CDATA[<h1 id="Python类型注解"><a href="#Python类型注解" class="headerlink" title="Python类型注解"></a>Python类型注解</h1><h2 id="学习网址"><a href="#学习网址" class="headerlink" title="学习网址"></a>学习网址</h2><p>第1个是详细版，第2个是简单版</p><ul><li><a href="https://zhuanlan.zhihu.com/p/419955374">Python类型注解，你需要知道的都在这里了 - 知乎</a></li><li><a href="https://blog.csdn.net/mahoon411/article/details/125657457">Python类型注解-CSDN</a></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h3><p>类型注解<strong>仅仅</strong>是提供给编辑器进行类型检查的机会，也就是起提示的作用，对 Python 程序的运行不会产生任何影响。也就是说，Python 跟以前一样自由，即使你进行了错误的类型赋值，只要不直接引发错误，程序依旧可以运行。</p><p>要有报错的话，需要装一些插件，如vscode的<strong>Pylance</strong></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">age: <span class="hljs-built_in">int</span> = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>其实就是在变量的后面加<code>:type</code>，其他照旧</p><p>在指定之后，此变量不应该被赋值为其他类型（不过解释器不会报错），在 <strong>VS Code</strong>中，安装好类型注解插件 <strong>Pylance</strong> 后，如果写出下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">age: <span class="hljs-built_in">int</span> = <span class="hljs-number">20</span><br>age = <span class="hljs-string">&#x27;20&#x27;</span><br></code></pre></td></tr></table></figure><p>那么编辑器会用<strong>醒目</strong>的方式告诉你：孙子，你这里的类型写错了！</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hi</span>(<span class="hljs-params">name: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Hello <span class="hljs-subst">&#123;name&#125;</span>!&#x27;</span><br></code></pre></td></tr></table></figure><p>在形参上还是如上文一样，<code>-&gt;type</code>写括号后面代表返回值，如果没有返回值，可以写<code>-&gt;None</code></p><h4 id="带默认值的函数"><a href="#带默认值的函数" class="headerlink" title="带默认值的函数"></a>带默认值的函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">first: <span class="hljs-built_in">int</span> = <span class="hljs-number">10</span>, second: <span class="hljs-built_in">float</span> = <span class="hljs-number">5.5</span></span>) -&gt; <span class="hljs-built_in">float</span>:<br>    <span class="hljs-keyword">return</span> first + second<br></code></pre></td></tr></table></figure><p>道理是一样的</p><h3 id="列表、字典、元组"><a href="#列表、字典、元组" class="headerlink" title="列表、字典、元组"></a>列表、字典、元组</h3><p>列表、字典、元组等包含元素的复合类型，用简单的 list，dict，tuple 不能够明确说明内部元素的具体类型。</p><p>因此要用到 <code>typing</code> 模块提供的<strong>复合注解</strong>功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span>, <span class="hljs-type">Dict</span>, <span class="hljs-type">Tuple</span><br><br><span class="hljs-comment"># 参数1: 元素为 int 的列表</span><br><span class="hljs-comment"># 参数2: 键为字符串，值为 int 的字典</span><br><span class="hljs-comment"># 返回值: 包含两个元素的元组</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mix</span>(<span class="hljs-params">scores: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], ages: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">Tuple</span>[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>]:<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>如果你用的是 Python 3.9+ 版本，甚至连 <code>typing</code> 模块都不需要了，内置的容器类型就支持了复合注解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">mix</span>(<span class="hljs-params">scores: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>], ages: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">tuple</span>[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>]:<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>在某些情况下，不需要严格区分参数到底是列表还是元组（这种情况还蛮多的）。这时候就可以将它们的特征抽象为更泛化的类型（泛型），比如 Sequence（序列）。</p><p>下面是例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Python 3.8 之前的版本</span><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Sequence</span> <span class="hljs-keyword">as</span> Seq1<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">seq: Seq1[<span class="hljs-built_in">str</span>]</span>):<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> seq:<br>        <span class="hljs-built_in">print</span>(item)<br><br><br><span class="hljs-comment"># Python 3.9+ 也可以这么写</span><br><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> <span class="hljs-type">Sequence</span> <span class="hljs-keyword">as</span> Seq2<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">seq: Seq2[<span class="hljs-built_in">str</span>]</span>):<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> seq:<br>        <span class="hljs-built_in">print</span>(item)<br></code></pre></td></tr></table></figure><p>例子中函数的参数不对容器的类型做具体要求，只要它是个序列（比如列表和元组）就可以。</p><h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><p>如果你实在不知道某个类型注解应该怎么写时，这里还有个最后的逃生通道：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>() -&gt; <span class="hljs-type">Any</span>:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>任何类型都与 <code>Any</code> 兼容。当然如果你把所有的类型都注解为 <code>Any</code> 将毫无意义，因此 <code>Any</code> 应当尽量少使用。</p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Regex</title>
    <link href="/2023/03/22/regex/"/>
    <url>/2023/03/22/regex/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="学习网址"><a href="#学习网址" class="headerlink" title="学习网址"></a>学习网址</h2><ol><li><a href="https://www.bilibili.com/video/BV1da4y1p7iZ/?share_source=copy_web&vd_source=dd2f1030c390db245979ca6615985682">【10分钟快速掌握正则表达式】</a></li><li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md">learn-regex</a></li></ol><h2 id="在线测试工具"><a href="#在线测试工具" class="headerlink" title="在线测试工具"></a>在线测试工具</h2><p><a href="https://regex101.com/">https://regex101.com/</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><ul><li><code>a*</code>:a出现0次或多次</li><li><code>a+</code>:a出现1次或多次</li><li><code>a?</code>:a出现0次或1次</li><li><code>a&#123;6&#125;</code>:a出现6次</li><li><code>a&#123;2,6&#125;</code>:a出现2-6次</li><li><code>a&#123;2,&#125;</code>:a出现2次及以上</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li><code>(a|b)</code>:匹配a或者b</li><li><code>(ab)|(cd)</code>:匹配ab或者cd</li></ul><p><em>小括号代表括号内的内容应视为一个整体</em></p><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><ul><li><code>[abc]</code>:匹配a或b或c</li><li><code>[a-c]</code>:同上</li><li><code>[a-zA-Z0-9]</code>:匹配小写+大写英文字符及数字</li><li><code>[^0-9]</code>:匹配非数字字符</li></ul><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><ul><li><code>\d</code>:匹配数字字符</li><li><code>\D</code>:匹配非数字字符</li><li><code>\w</code>:匹配单词字符(英文、数字、下划线)</li><li><code>\W</code>:匹配非单词字符</li><li><code>\s</code>:匹配空白符(包括换行符、Tab)</li><li><code>\S</code>:匹配非空白符</li><li><code>.</code>:匹配任意字符(除换行符)</li><li><code>\b</code>:标注字符边界，\bword\b，只标注位置，不匹配任何字符(包括空白)</li><li><code>^</code>:匹配行首</li><li><code>$</code>:匹配行尾</li></ul><h3 id="贪婪-x2F-懒惰匹配"><a href="#贪婪-x2F-懒惰匹配" class="headerlink" title="贪婪&#x2F;懒惰匹配"></a>贪婪&#x2F;懒惰匹配</h3><p>一般正则表达式会匹配尽可能多的字符</p><p>如<code>&lt;.+&gt;</code>去匹配<code>&lt;div&gt;&lt;a&gt;&lt;a/&gt;&lt;/div&gt;</code>会默认把全部匹配完，若使用<code>&lt;.+?&gt;</code>则尽可能少的匹配，如只匹配<code>&lt;div&gt;</code>、<code>&lt;a&gt;</code>及其结束标签</p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>regex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个关于冒号的bug</title>
    <link href="/2023/03/19/yi-ge-guan-yu-mou-hao-de-bug/"/>
    <url>/2023/03/19/yi-ge-guan-yu-mou-hao-de-bug/</url>
    
    <content type="html"><![CDATA[<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p><code>npx hexo server</code>遇到报错：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs fortran">ERROR &#123;<br>  err: YAMLException: can not read a <span class="hljs-keyword">block</span> mapping <span class="hljs-built_in">entry</span>; a multiline key may not be an <span class="hljs-keyword">implicit</span> key at line <span class="hljs-number">4</span>, column <span class="hljs-number">1</span>:<br>......<br>    reason: <span class="hljs-string">&#x27;can not read a block mapping entry; a multiline key may not be an implicit key&#x27;</span>,<br>    mark: Mark &#123;<br>      <span class="hljs-keyword">name</span>: null,<br>      buffer: <span class="hljs-string">&#x27;title: 第一篇博客\ndate: 2023-03-19 19:33:41\ntags:博客相关\n\x00&#x27;</span>,<br>      <span class="hljs-keyword">position</span>: <span class="hljs-number">49</span>,<br>      line: <span class="hljs-number">3</span>,<br>      column: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br>&#125; Process failed: %s _posts/第一篇博客.md<br></code></pre></td></tr></table></figure><p>使用<code>hexo clean</code>也无法解决</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>title: 第一篇博客<br>date: 2023-03-19 19:33:41<br>tags: 博客相关</p></blockquote><p>这是对应博客的开头，tags冒号后面缺少一个空格，加上就好了，如图：</p><p><img src="/2023/03/19/yi-ge-guan-yu-mou-hao-de-bug/bug_of_colon.png" alt="bug截图"></p><h2 id="如何在博客中插入图片"><a href="#如何在博客中插入图片" class="headerlink" title="如何在博客中插入图片"></a>如何在博客中插入图片</h2><p>发现在md文档同目录下新建img文件夹再引用没有用，查到了这篇</p><p><a href="https://blog.csdn.net/weixin_42030522/article/details/123075824"> 解决Hexo无法显示图片的几种方案-CSDN博客</a></p><p>将<code>post_asset_folder</code>赋值为true，并将图片放入md文件同名文件夹</p>]]></content>
    
    
    <categories>
      
      <category>bug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2023/03/19/di-yi-pian-bo-ke/"/>
    <url>/2023/03/19/di-yi-pian-bo-ke/</url>
    
    <content type="html"><![CDATA[<h2 id="小小感悟"><a href="#小小感悟" class="headerlink" title="小小感悟"></a>小小感悟</h2><p>第一次使用<code>github</code>和<code>hexo</code>创建了这个博客，踩了一些小坑，但还是做出来了。算是有点了解<code>hexo</code>的用法和<code>npm</code>的用法了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&#x27;文章名&#x27;</span> <span class="hljs-comment"># 创建文章 相当于hexo n</span><br><br>$ hexo generate <span class="hljs-comment"># 创建静态文件 相当于hexo g</span><br>$ hexo deploy <span class="hljs-comment"># 部署网站 相当于hexo d</span><br>$ hexo server <span class="hljs-comment"># 本地预览 相当于hexo s</span><br><span class="hljs-comment"># 以上命令有问题时，是因为hexo不在环境变量里面，可在命令前加上npx解决</span><br>$ hexo clean <span class="hljs-comment"># 当出了玄学的报错的时候，然后重新用以上三条</span><br></code></pre></td></tr></table></figure><p>点击<a href="https://hexo.io/zh-cn/docs/index.html">这里</a>，查看<code>hexo</code>的官方中文文档</p><p>但是目前还是有些不是很明白的地方</p><ol><li>缺少更换主题的实践</li><li>如何从github上面拉下已经有的这个项目仓库(此仓库只有hexo文件夹的public文件夹里面的内容)，并进行修改</li><li>其他实用步骤</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><p>这会在根文件夹下的<code>themes</code>文件夹下建立一个<code>next</code>文件夹，并导入这个项目。</p><p>然后只需要改一下根文件夹下的<code>_config.yml</code>文件中的<code>theme</code>的值为<code>next</code>就可以了。</p><p>此外，<code>next</code>文件夹下也有一个<code>_config.yml</code>文件，可以修改一些配置，如<code>scheme</code>的值有4种选择，每种选择都会导致主题不一样。</p><h3 id="上传Github"><a href="#上传Github" class="headerlink" title="上传Github"></a>上传Github</h3><p>把项目仓库上传到github上，但需要设置好<code>.gitignore</code>这个文件</p>]]></content>
    
    
    
    <tags>
      
      <tag>博客相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
