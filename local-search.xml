<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python实用函数</title>
    <link href="/2023/12/03/python-%E5%AE%9E%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <url>/2023/12/03/python-%E5%AE%9E%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="python实用函数"><a href="#python实用函数" class="headerlink" title="python实用函数"></a>python实用函数</h1><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><blockquote><p>合并两个列表</p></blockquote><p>返回值为一个<code>zip</code>对象</p><p><code>zip</code>中的每个元素都是一个元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># zip是将两个列表合在一起</span><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>b = [<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>]<br><span class="hljs-comment"># print(zip(a,b)) # &lt;zip object at 0x00000234EA475140&gt;</span><br><span class="hljs-keyword">for</span> (i, j) <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b):<br>    <span class="hljs-built_in">print</span>(i, j)  <span class="hljs-comment"># 1 4 - 2 5 - 3 6</span><br><br></code></pre></td></tr></table></figure><h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h2><blockquote><p>enumerate会给列表加上序号 从0开始</p></blockquote><p>返回值为一个<code>enumerate</code>对象</p><p><code>enumerate</code>中的每个元素都是一个元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># enumerate会给列表加上序号 从0开始</span><br>c = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><span class="hljs-comment"># print(enumerate(c)) # &lt;enumerate object at 0x0000027817E216C0&gt;</span><br><span class="hljs-keyword">for</span> (i, j) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(c):<br>    <span class="hljs-built_in">print</span>(i, j)  <span class="hljs-comment"># 0 a - 1 b - 2 c</span><br></code></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>格式: lambda &lt;args&gt; : &lt;expression&gt;</p><p>参考: <a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017451447842528">匿名函数 - 廖雪峰的官方网站</a></p><blockquote><p>关键字<code>lambda</code>表示匿名函数，冒号前面的<code>x</code>表示函数参数。</p><p>匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。</p><p>用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">d=<span class="hljs-keyword">lambda</span> x,y,z:x*y*z<br><span class="hljs-built_in">print</span>(d(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>((<span class="hljs-keyword">lambda</span> x:x**<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><h3 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h3><blockquote><p>map()是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">map</span>(function, iterable, ...)<br></code></pre></td></tr></table></figure><p>事实上<code>map</code>函数返回的是一个<code>map</code>对象</p><p><code>map</code>的第一个参数可以写一个已知的函数，也可以写一个<strong>lambda</strong>表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">d</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x + <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">map</span>(d, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]):<br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x ** <span class="hljs-number">2</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]):<br>    <span class="hljs-built_in">print</span>(j)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-rich</title>
    <link href="/2023/11/09/python-rich/"/>
    <url>/2023/11/09/python-rich/</url>
    
    <content type="html"><![CDATA[<h1 id="python-rich库笔记"><a href="#python-rich库笔记" class="headerlink" title="python rich库笔记"></a>python <code>rich</code>库笔记</h1><p><a href="https://github.com/textualize/rich/blob/master/README.cn.md">官网中文文档</a></p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>在命令行输入以下命令进行预览</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python -m rich<br></code></pre></td></tr></table></figure><h2 id="rich-print"><a href="#rich-print" class="headerlink" title="rich.print"></a>rich.print</h2><p>这是一个导入即用的函数，它的参数与<code>python</code>自带的<code>print</code>函数一致</p><p>以下是一个示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rich <span class="hljs-keyword">import</span> <span class="hljs-built_in">print</span><br><br><span class="hljs-comment"># rich的print会根据数据类型给打印的对象加上不同的颜色</span><br><span class="hljs-built_in">print</span>(&#123;<span class="hljs-number">1</span>:[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]&#125;)<br><span class="hljs-comment"># 标签语法 输出红色的hello和斜体+下划线的world</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[red]hello[/red] [i u]world[/i u]&quot;</span>)<br><br></code></pre></td></tr></table></figure><p><img src="/2023/11/09/python-rich/fig1.png"></p><h2 id="rich-console-Console"><a href="#rich-console-Console" class="headerlink" title="rich.console.Console"></a>rich.console.Console</h2><p>这个比刚刚的<code>print</code>更高级一些</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rich.console <span class="hljs-keyword">import</span> Console<br><br>console = Console()<br>console.<span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>) <span class="hljs-comment"># 和之前的rich.print一样</span><br><span class="hljs-comment"># log会打印时间和所在行数</span><br>console.log(<span class="hljs-string">&#x27;[blue]world[/blue]&#x27;</span>) <span class="hljs-comment"># [16:34:39] world     t.py:4</span><br>console.log(<span class="hljs-string">&#x27;log_locals选项可以用来打印局部变量的值&#x27;</span>,log_locals=<span class="hljs-literal">True</span>) <span class="hljs-comment"># 不过还是觉得需要看什么变量就直接打印就行了</span><br></code></pre></td></tr></table></figure><p><img src="/2023/11/09/python-rich/fig2.png"></p><p><em>图的右侧还有代码的行数，这里没有截到右边</em></p><h2 id="rich-inspect"><a href="#rich-inspect" class="headerlink" title="rich.inspect"></a>rich.inspect</h2><p>可以用来检查对应对象或者实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rich <span class="hljs-keyword">import</span> inspect<br><br>my_list = [<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>]<br><span class="hljs-comment"># methods参数决定是否显示对应方法</span><br>inspect(my_list, methods=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 当然你也可以查看它自己</span><br>inspect(inspect)<br></code></pre></td></tr></table></figure><p><img src="/2023/11/09/python-rich/fig3.png"></p><h2 id="rich-progress-track"><a href="#rich-progress-track" class="headerlink" title="rich.progress.track"></a>rich.progress.track</h2><p>打印无闪烁的进度条</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rich.progress <span class="hljs-keyword">import</span> track<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">do_step</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-comment"># print(arg)</span><br>    <span class="hljs-comment"># 如果有打印的话 可以发现那个进度条永远是在最后的</span><br>    time.sleep(<span class="hljs-number">0.1</span>)<br><br><span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> track(<span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>)):<br>    do_step(step)<br></code></pre></td></tr></table></figure><p><img src="/2023/11/09/python-rich/fig4.png"></p><p><em>进度条右侧的剩余时间是它自己估计的</em></p><h2 id="rich-console-Console-status"><a href="#rich-console-Console-status" class="headerlink" title="rich.console.Console.status"></a>rich.console.Console.status</h2><p>对于那些很难计算进度的情况，你可以使用 status 方法，它会展示一个“环形旋转”的动画和文字信息。这个动画并不会妨碍你正常使用控制台。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> rich.console <span class="hljs-keyword">import</span> Console<br><br>console = Console()<br>tasks = [<span class="hljs-string">f&quot;task <span class="hljs-subst">&#123;n&#125;</span>&quot;</span> <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)]<br><br><span class="hljs-keyword">with</span> console.status(<span class="hljs-string">&quot;[bold green]Working on tasks...&quot;</span>) <span class="hljs-keyword">as</span> status:<br>    <span class="hljs-keyword">while</span> tasks:<br>        task = tasks.pop(<span class="hljs-number">0</span>)<br>        sleep(<span class="hljs-number">1</span>)<br>        console.log(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;task&#125;</span> complete&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/11/09/python-rich/fig5.png"></p><p><em>这个小动画和前面的进度条不同，进度条结束了也会保留，而这个小动画结束之后会消失。</em></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>还有一些类似显示$Markdown$和语法高亮的功能，感觉挺实用的，以后要用的时候可以学一下</p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-decorator</title>
    <link href="/2023/11/09/python-decorator/"/>
    <url>/2023/11/09/python-decorator/</url>
    
    <content type="html"><![CDATA[<h1 id="python装饰器"><a href="#python装饰器" class="headerlink" title="python装饰器"></a>python装饰器</h1><h2 id="函数内的函数定义"><a href="#函数内的函数定义" class="headerlink" title="函数内的函数定义"></a>函数内的函数定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>(<span class="hljs-params">b</span>):<br>        <span class="hljs-keyword">return</span> a + b<br>    <span class="hljs-keyword">return</span> f2<br><br><span class="hljs-comment"># 计算3+4=7</span><br>t = f1(<span class="hljs-number">3</span>) <span class="hljs-comment"># 这里返回的是一个函数</span><br><span class="hljs-built_in">print</span>(t(<span class="hljs-number">4</span>)) <span class="hljs-comment"># 7</span><br></code></pre></td></tr></table></figure><h2 id="一个简单的装饰器"><a href="#一个简单的装饰器" class="headerlink" title="一个简单的装饰器"></a>一个简单的装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fun_to_run</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    输入参数是一个函数</span><br><span class="hljs-string">    返回值也是一个函数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        t_begin = time.time()<br>        fun_to_run()<br>        t_end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@timer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>():<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>):<br>        r+=i<br>    <span class="hljs-built_in">print</span>(r)<br><br>my_func() <span class="hljs-comment"># 函数my_func的运行时间为: 0.04650068283081055 s</span><br></code></pre></td></tr></table></figure><p>相当于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fun_to_run</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    输入参数是一个函数</span><br><span class="hljs-string">    返回值也是一个函数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        t_begin = time.time()<br>        fun_to_run()<br>        t_end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>():<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>):<br>        r+=i<br>    <span class="hljs-built_in">print</span>(r)<br><br>t=timer(my_func)<br>t() <span class="hljs-comment"># 函数my_func的运行时间为: 0.04343557357788086 s</span><br></code></pre></td></tr></table></figure><h2 id="在装饰器中使用函数参数"><a href="#在装饰器中使用函数参数" class="headerlink" title="在装饰器中使用函数参数"></a>在装饰器中使用函数参数</h2><p>按照一定的顺序进行定义，如下面的代码所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fun_to_run</span>):<br>    <span class="hljs-comment"># 第一个参数是要装饰的函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args,**kargs</span>):<br>        <span class="hljs-comment"># 第二个参数是要装饰的函数的参数</span><br>        t_begin = time.time()<br>        fun_to_run(*args,**kargs)<br>        t_end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@timer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">num</span>):<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        r+=i<br>    <span class="hljs-built_in">print</span>(r)<br><br>my_func(<span class="hljs-number">5555</span>) <span class="hljs-comment"># 函数my_func的运行时间为: 0.04650068283081055 s</span><br></code></pre></td></tr></table></figure><h2 id="带参数的函数装饰器"><a href="#带参数的函数装饰器" class="headerlink" title="带参数的函数装饰器"></a>带参数的函数装饰器</h2><p>按照一定的顺序进行定义，如下面的代码所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">unit</span>):<br>    <span class="hljs-comment"># 第一个参数是装饰器参数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">middle</span>(<span class="hljs-params">fun_to_run</span>):<br>        <span class="hljs-comment"># 第二个参数是要装饰的函数</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            <span class="hljs-comment"># 第三个参数是要装饰的函数的参数</span><br>            t_begin = time.time()<br>            fun_to_run(*args, **kwargs)<br>            t_end = time.time()<br>            <span class="hljs-keyword">if</span> unit == <span class="hljs-string">&quot;ms&quot;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;(t_end - t_begin)*<span class="hljs-number">1000</span>&#125;</span> ms&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> unit == <span class="hljs-string">&quot;s&quot;</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> middle<br><br><span class="hljs-meta">@timer(<span class="hljs-params"><span class="hljs-string">&quot;ms&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">num</span>):<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        r+=i<br>    <span class="hljs-built_in">print</span>(r)<br><br>my_func(<span class="hljs-number">500000</span>) <span class="hljs-comment"># 函数my_func的运行时间为: 0.0 ms</span><br></code></pre></td></tr></table></figure><h2 id="使用被装饰的函数的返回值"><a href="#使用被装饰的函数的返回值" class="headerlink" title="使用被装饰的函数的返回值"></a>使用被装饰的函数的返回值</h2><p>这样装饰器就不是返回一个函数了，而是返回对应的返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fun_to_run</span>):<br>    <span class="hljs-comment"># 第一个参数是要装饰的函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args,**kargs</span>):<br>        <span class="hljs-comment"># 第二个参数是要装饰的函数的参数</span><br>        t_begin = time.time()<br>        result =fun_to_run(*args,**kargs)<br>        t_end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>        <span class="hljs-comment"># 要在wrapper函数设定返回值</span><br>        <span class="hljs-keyword">return</span> result<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@timer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">num</span>):<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        r+=i<br>    <span class="hljs-keyword">return</span> r<br><br>res = my_func(<span class="hljs-number">5555</span>) <span class="hljs-comment"># 函数my_func的运行时间为: 0.0 s</span><br><span class="hljs-built_in">print</span>(res) <span class="hljs-comment"># 15426235</span><br></code></pre></td></tr></table></figure><p>如果按老样子，不改的话，就会输出以下内容，这是因为<code>wrapper</code>函数没有返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">fun_to_run</span>):<br>    <span class="hljs-comment"># 第一个参数是要装饰的函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args,**kargs</span>):<br>        <span class="hljs-comment"># 第二个参数是要装饰的函数的参数</span><br>        t_begin = time.time()<br>        result = fun_to_run(*args,**kargs)<br>        t_end = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;函数<span class="hljs-subst">&#123;fun_to_run.__name__&#125;</span>的运行时间为: <span class="hljs-subst">&#123;t_end - t_begin&#125;</span> s&#x27;</span>)<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@timer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">num</span>):<br>    r=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        r+=i<br>    <span class="hljs-keyword">return</span> r<br><br>res = my_func(<span class="hljs-number">5555</span>) <span class="hljs-comment"># 函数my_func的运行时间为: 0.0 s</span><br><span class="hljs-built_in">print</span>(res) <span class="hljs-comment"># None</span><br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>此外也有类装饰器等，可以以后有需要了再学。</p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python传参机制</title>
    <link href="/2023/08/08/python%E4%BC%A0%E5%8F%82%E6%9C%BA%E5%88%B6/"/>
    <url>/2023/08/08/python%E4%BC%A0%E5%8F%82%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p><em>这篇笔记只是个人拙见，可能有不对的地方，还请海涵</em></p><h1 id="Python传参机制"><a href="#Python传参机制" class="headerlink" title="Python传参机制"></a>Python传参机制</h1><blockquote><p>Python 中一切皆为对象，数字是对象，列表是对象，函数也是对象，任何东西都是对象。而变量只是对象的一个引用，对象的操作都是通过引用来完成的</p></blockquote><p>个人认为，python函数内重新赋值时，不会改变函数外的值，但在函数内修改成员变量的值时，会改变函数外的值</p><h2 id="python内存分配机制"><a href="#python内存分配机制" class="headerlink" title="python内存分配机制"></a>python内存分配机制</h2><p>这个机制让我想起了Java的字符串分配内存的情形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>String s1=<span class="hljs-string">&quot;hello&quot;</span>;<br>String s2=<span class="hljs-string">&quot;hello&quot;</span>;<br>String s3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(s1==s2);<span class="hljs-comment">//true</span><br>System.out.println(s1==s3);<span class="hljs-comment">//false</span><br>System.out.println(s1.equals(s3));<span class="hljs-comment">//true</span><br><span class="hljs-type">int</span> num1=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> num2=<span class="hljs-number">1</span>;<br>System.out.println(num1==num2);<span class="hljs-comment">//true</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>放一段代码以做对照</p><h3 id="对于不可变对象"><a href="#对于不可变对象" class="headerlink" title="对于不可变对象"></a>对于不可变对象</h3><p>关于不可变对象（数字、字符或元组），来看一个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">1</span><br>b=<span class="hljs-number">1</span><br>c=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a),<span class="hljs-built_in">id</span>(b),<span class="hljs-built_in">id</span>(c))  <span class="hljs-comment"># 140706301014824 140706301014824 140706301014824</span><br>b=<span class="hljs-number">2</span><br>c+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a),<span class="hljs-built_in">id</span>(b),<span class="hljs-built_in">id</span>(c))  <span class="hljs-comment"># 140706301014824 140706301014856 140706301014856</span><br><br></code></pre></td></tr></table></figure><p>可以看出，值相同，就是指向一样的内存地址</p><h3 id="对于可变对象"><a href="#对于可变对象" class="headerlink" title="对于可变对象"></a>对于可变对象</h3><p>关于可变对象（字典、列表），来看一个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>b=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>c=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a),<span class="hljs-built_in">id</span>(b),<span class="hljs-built_in">id</span>(c))  <span class="hljs-comment"># 140706301014824 140706301014824 140706301014824</span><br>b.append(<span class="hljs-number">3</span>) <span class="hljs-comment"># [1, 2, 3]</span><br>c.append(<span class="hljs-number">3</span>) <span class="hljs-comment"># [1, 2, 3]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a),<span class="hljs-built_in">id</span>(b),<span class="hljs-built_in">id</span>(c))  <span class="hljs-comment"># 140706301014824 140706301014856 140706301014856</span><br><br></code></pre></td></tr></table></figure><p>修改其中的值后，会指向新的对象</p><h2 id="对于赋值"><a href="#对于赋值" class="headerlink" title="对于赋值"></a>对于赋值</h2><p>赋值会为新的值开辟新的空间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值前x的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(x))) <span class="hljs-comment"># 140706301014824 x和a指向的位置一样</span><br>    x=<span class="hljs-number">2</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值后x的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(x))) <span class="hljs-comment"># 140706301014856 x的指向改变，不再指向1</span><br><br><br>a=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值前a的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(a))) <span class="hljs-comment"># 140706301014824</span><br>fun(a)<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><p>即使是实参是列表也是一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值前x的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(x))) <span class="hljs-comment"># 140706301014824</span><br>    x=<span class="hljs-number">2</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值后x的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(x))) <span class="hljs-comment"># 140706301014856</span><br><br><br>a=[<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;赋值前a的地址是&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>(a))) <span class="hljs-comment"># 140706301014824</span><br>fun(a)<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><h2 id="对于修改值"><a href="#对于修改值" class="headerlink" title="对于修改值"></a>对于修改值</h2><p>修改值会影响函数外面的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x</span>):<br>    x[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-number">1</span><br>    x[<span class="hljs-string">&#x27;b&#x27;</span>] = <span class="hljs-number">2</span>      <br>    <span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span><br>    x = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">4</span>&#125;<br>    <span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># &#123;&#x27;a&#x27;: 3, &#x27;b&#x27;: 4&#125;</span><br><br><br>t = &#123;&#125;<br>func(t)<br><span class="hljs-built_in">print</span>(t)  <span class="hljs-comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span><br><br></code></pre></td></tr></table></figure><p>看一个类的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        x=<span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">t:Test</span>):<br>    t.x=<span class="hljs-number">2</span><br>    t()<br><br>a=Test()<br>fun(a)  <span class="hljs-comment"># 2</span><br><br></code></pre></td></tr></table></figure><p>也是一样的</p><h1 id="修改全局变量"><a href="#修改全局变量" class="headerlink" title="修改全局变量"></a>修改全局变量</h1><p>顺便说一下怎么修改全局变量</p><p>直接修改是修改不了的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>():<br>    a=<span class="hljs-number">2</span><br><br>a=<span class="hljs-number">1</span><br>fun()<br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><p>事实上，修改不了的原因应该在于函数内部是无法直接访问全局变量的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">1</span>  <span class="hljs-comment"># 可以看到，即使把a提到最前面也会报错</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>():<br>    <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># UnboundLocalError: cannot access local variable &#x27;a&#x27; where it is not associated with a value</span><br>    a=<span class="hljs-number">2</span><br><br>fun()<br></code></pre></td></tr></table></figure><p>想要修改的话，可以使用<code>global</code>这个关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>():<br>    <span class="hljs-comment"># 下面这种写法是错误的</span><br>    <span class="hljs-keyword">global</span> a=<span class="hljs-number">2</span>  <span class="hljs-comment"># SyntaxError: invalid syntax</span><br><br>a=<span class="hljs-number">1</span><br>fun()<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><p>像这样就修改成功了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>():<br>    <span class="hljs-keyword">global</span> a<br>    a=<span class="hljs-number">2</span><br><br>a=<span class="hljs-number">1</span><br>fun()<br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 2</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于python -m visdom.server缓慢</title>
    <link href="/2023/07/15/%E5%85%B3%E4%BA%8Epython-m-visdom-server%E7%BC%93%E6%85%A2/"/>
    <url>/2023/07/15/%E5%85%B3%E4%BA%8Epython-m-visdom-server%E7%BC%93%E6%85%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="解决python-m-visdom-server缓慢的问题"><a href="#解决python-m-visdom-server缓慢的问题" class="headerlink" title="解决python -m visdom.server缓慢的问题"></a>解决<code>python -m visdom.server</code>缓慢的问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>使用<code>python -m visdom.server</code>后没反应</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta">E:\pprogram\test&gt;python -m visdom.<span class="hljs-keyword">server</span><br>Checking <span class="hljs-keyword">for</span> scripts.<br>Downloading scripts, <span class="hljs-keyword">this</span> may take a little <span class="hljs-keyword">while</span><br></code></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>下载这个文件夹中的所有文件<a href="https://github.com/fossasia/visdom/tree/master/py/visdom/static">visdom&#x2F;py&#x2F;visdom&#x2F;static at master · fossasia&#x2F;visdom (github.com)</a></p><p>去替换conda库环境下的文件夹，如我这里是<code>D:\Anaconda3\envs\torch\Lib\site-packages\visdom\static</code></p><p>对于版本为<code>0.2.4</code> 可以去找<code>D:\Anaconda3\envs\torch\Lib\site-packages\visdom\server\run_server.py</code>这个文件</p><p>靠前一些的版本如果没有这个文件，可以去找找看有没有叫<code>server.py</code>的文件</p><p>找到这里，如我这里是在235行，将其注释掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_scripts_and_run</span>():<br>  <span class="hljs-comment"># download_scripts()</span><br>  main()<br></code></pre></td></tr></table></figure><p>然后就重新开始就好了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">(torch) E:\pprogram\test&gt;python -m visdom.server<br>It&#x27;s Alive!<br>INFO:root:Application Started<br>INFO:root:Working directory: C:\Users\Administrator\.visdom<br>You can navigate to http://localhost:8097<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>bug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>torch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>torch-learn</title>
    <link href="/2023/07/12/torch-learn/"/>
    <url>/2023/07/12/torch-learn/</url>
    
    <content type="html"><![CDATA[<h1 id="torch笔记"><a href="#torch笔记" class="headerlink" title="torch笔记"></a>torch笔记</h1><h2 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h2><p><a href="http://www.bilibili.com/video/BV1hE411t7RN">www.bilibili.com/video/BV1hE411t7RN</a></p><h2 id="基本类的使用"><a href="#基本类的使用" class="headerlink" title="基本类的使用"></a>基本类的使用</h2><h3 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h3><p>作用：数据导入</p><p>模块位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Dataset需要重写下面这三个函数</span><br><span class="hljs-string">__init__:写初始化的准备工作，当然可以空着</span><br><span class="hljs-string">__getitem__:如何获取指定元素</span><br><span class="hljs-string">__len__:数据集有多大</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image <span class="hljs-comment"># python image lib, py自带的库</span><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root_dir, image_dir, label_dir</span>): <span class="hljs-comment"># 参数的个数和名字随意，只要有__init__这个函数就行</span><br>        self.root_dir = root_dir<br>        self.image_dir = image_dir<br>        self.label_dir = label_dir<br>        self.label_path = os.path.join(self.root_dir, self.label_dir)<br>        self.image_path = os.path.join(self.root_dir, self.image_dir)<br>        self.image_list = os.listdir(self.image_path)<br>        self.label_list = os.listdir(self.label_path)<br>        <span class="hljs-comment"># 因为label 和 Image文件名相同，进行一样的排序，可以保证取出的数据和label是一一对应的</span><br>        self.image_list.sort()<br>        self.label_list.sort()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>): <span class="hljs-comment"># idx是序号</span><br>        img_name = self.image_list[idx]<br>        label_name = self.label_list[idx]<br>        img_item_path = os.path.join(self.root_dir, self.image_dir, img_name)<br>        label_item_path = os.path.join(self.root_dir, self.label_dir, label_name)<br>        img = Image.<span class="hljs-built_in">open</span>(img_item_path)<br><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(label_item_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            label = f.readline()<br><br>        <span class="hljs-comment"># img = np.array(img)</span><br>        sample = &#123;<span class="hljs-string">&#x27;img&#x27;</span>: img, <span class="hljs-string">&#x27;label&#x27;</span>: label&#125;<br>        <span class="hljs-keyword">return</span> sample<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(self.image_list) == <span class="hljs-built_in">len</span>(self.label_list)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.image_list)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    root_dir = <span class="hljs-string">&quot;F:\\test\\pytorch-tutorial-master\\dataset\\train&quot;</span><br>    image_ants = <span class="hljs-string">&quot;ants_image&quot;</span><br>    label_ants = <span class="hljs-string">&quot;ants_label&quot;</span><br>    ants_dataset = MyData(root_dir, image_ants, label_ants)<br>    ants_dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;img&#x27;</span>].show() <span class="hljs-comment"># 获得第一张图片</span><br></code></pre></td></tr></table></figure><h3 id="tensorboard-SummaryWriter"><a href="#tensorboard-SummaryWriter" class="headerlink" title="tensorboard.SummaryWriter"></a>tensorboard.SummaryWriter</h3><p>日志记录，可以记录标量或者图片的变化</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br>image_path = <span class="hljs-string">&quot;F:\\test\\pytorch-tutorial-master\\dataset\\train\\ants_image\\6240329_72c01e663e.jpg&quot;</span><br>img_PIL = Image.<span class="hljs-built_in">open</span>(image_path)<br>img_array = np.array(img_PIL)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img_array))<br><span class="hljs-built_in">print</span>(img_array.shape)<br><br>writer.add_image(<span class="hljs-string">&quot;train&quot;</span>, img_array, <span class="hljs-number">1</span>, dataformats=<span class="hljs-string">&#x27;HWC&#x27;</span>) <span class="hljs-comment"># dataformats这个参数用来指明数组中通道的意义(长宽高顺序),1是第一张,后面还可以加第2张第3张等</span><br><span class="hljs-comment"># 如果是加入图片数组的话是使用add_images()方法 显示时是一堆图片拼接在一起</span><br><span class="hljs-comment"># y = 2x</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    writer.add_scalar(<span class="hljs-string">&quot;y=2x&quot;</span>, <span class="hljs-number">3</span>*i, i) <span class="hljs-comment"># 加入标量</span><br><br>writer.close()  <span class="hljs-comment"># 别忘了关</span><br></code></pre></td></tr></table></figure><p>查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda activate torch<br>tensorboard --logdir=E:\pprogram\<span class="hljs-built_in">test</span>\logs <span class="hljs-comment"># 这个是代码中指定的路径</span><br></code></pre></td></tr></table></figure><h3 id="transforms"><a href="#transforms" class="headerlink" title="transforms"></a>transforms</h3><p>图片处理类</p><p>导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset, DataLoader<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root_dir, image_dir, label_dir, transform=<span class="hljs-literal">None</span></span>):<br>        self.root_dir = root_dir<br>        self.image_dir = image_dir<br>        self.label_dir = label_dir<br>        self.label_path = os.path.join(self.root_dir, self.label_dir)<br>        self.image_path = os.path.join(self.root_dir, self.image_dir)<br>        self.image_list = os.listdir(self.image_path)<br>        self.label_list = os.listdir(self.label_path)<br>        self.transform = transform<br>        <span class="hljs-comment"># 因为label 和 Image文件名相同，进行一样的排序，可以保证取出的数据和label是一一对应的</span><br>        self.image_list.sort()<br>        self.label_list.sort()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        img_name = self.image_list[idx]<br>        label_name = self.label_list[idx]<br>        img_item_path = os.path.join(self.root_dir, self.image_dir, img_name)<br>        label_item_path = os.path.join(self.root_dir, self.label_dir, label_name)<br>        img = Image.<span class="hljs-built_in">open</span>(img_item_path)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(label_item_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            label = f.readline()<br><br>        <span class="hljs-keyword">if</span> self.transform:<br>            img = transform(img)<br>            <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            python里面有一个魔法函数叫__call__()</span><br><span class="hljs-string">            在实现它后 类的实例可以发挥出类似函数的功能</span><br><span class="hljs-string">            e.g.</span><br><span class="hljs-string">            p=new Person(&quot;lihua&quot;) # 这里调用构造函数__init__(str)</span><br><span class="hljs-string">            age=p(18) # 这里调用魔法函数__call__(int)</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br><br>        <span class="hljs-keyword">return</span> img, label<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(self.image_list) == <span class="hljs-built_in">len</span>(self.label_list)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.image_list)<br><br>transform = transforms.Compose([transforms.Resize(<span class="hljs-number">400</span>), transforms.ToTensor()])<br>root_dir = <span class="hljs-string">&quot;dataset/train&quot;</span><br>image_ants = <span class="hljs-string">&quot;ants_image&quot;</span><br>label_ants = <span class="hljs-string">&quot;ants_label&quot;</span><br>ants_dataset = MyData(root_dir, image_ants, label_ants, transform=transform)<br>image_bees = <span class="hljs-string">&quot;bees_image&quot;</span><br>label_bees = <span class="hljs-string">&quot;bees_label&quot;</span><br>bees_dataset = MyData(root_dir, image_bees, label_bees, transform=transform)<br></code></pre></td></tr></table></figure><p><code>transform = transforms.ToTensor()</code>使所有数据转换为<code>Tensor</code>，如果不进行转换则返回的是PIL图片。<code>transforms.ToTensor()</code>将尺寸为 (H x W x C) 且数据位于[0, 255]的PIL图片或者数据类型为<code>np.uint8</code>的NumPy数组转换为尺寸为(C x H x W)且数据类型为<code>torch.float32</code>且位于[0.0, 1.0]的<code>Tensor</code>。</p><h3 id="dataloader"><a href="#dataloader" class="headerlink" title="dataloader"></a>dataloader</h3><p>数据分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><br><span class="hljs-comment"># 准备的测试数据集</span><br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>test_data = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor())<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">batch_size:一组有多少的数据</span><br><span class="hljs-string">shuffle:是否打乱</span><br><span class="hljs-string">num_workers:多线程装载,windows下最好写0</span><br><span class="hljs-string">drop_last:是否丢弃最后一组不满一组的</span><br><span class="hljs-string">它的装载方式是这样的:</span><br><span class="hljs-string">例如如果dataset中的每一项是x,y;batch_size=4</span><br><span class="hljs-string">那test_loader中的每一项是(Xs,Ys),其中Xs和Ys都是4元组</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>test_loader = DataLoader(dataset=test_data, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">0</span>, drop_last=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># 测试数据集中第一张图片及target</span><br>img, target = test_data[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(img.shape)<br><span class="hljs-built_in">print</span>(target)<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;dataloader&quot;</span>)<br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    step = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader:<br>        <span class="hljs-comment"># 由于shuffle=True,所以两次for循环中test_loader返回的东西不一样</span><br>        imgs, targets = data<br>        <span class="hljs-comment"># print(imgs.shape)</span><br>        <span class="hljs-comment"># print(targets)</span><br>        writer.add_images(<span class="hljs-string">&quot;Epoch: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch), imgs, step)<br>        step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="一些注意"><a href="#一些注意" class="headerlink" title="一些注意"></a>一些注意</h3><p>需要多看看官方文档，一方面要看看输入输出的数据类型是什么，另一方面不清楚返回值的话要试试<code>print(type(x))</code>或者关注一下<code>print(x.shape)</code>的值</p><h2 id="使用torch自带的数据集"><a href="#使用torch自带的数据集" class="headerlink" title="使用torch自带的数据集"></a>使用torch自带的数据集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset_transform = torchvision.transforms.Compose([<br>    torchvision.transforms.ToTensor()<br>])<br><br>train_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=dataset_transform, download=<span class="hljs-literal">True</span>) <span class="hljs-comment"># 用CIFAR10数据集,download=True代表要从网上在线下载,如果已经有的话,就不会再下载了</span><br>test_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=dataset_transform, download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># print(test_set[0])</span><br><span class="hljs-comment"># print(test_set.classes)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># img, target = test_set[0]</span><br><span class="hljs-comment"># print(img)</span><br><span class="hljs-comment"># print(target)</span><br><span class="hljs-comment"># print(test_set.classes[target])</span><br><span class="hljs-comment"># img.show()</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># print(test_set[0])</span><br><br>writer = SummaryWriter(<span class="hljs-string">&quot;p10&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    img, target = test_set[i]<br>    writer.add_image(<span class="hljs-string">&quot;test_set&quot;</span>, img, i)<br><br>writer.close()<br></code></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="nn-module"><a href="#nn-module" class="headerlink" title="nn.module"></a>nn.module</h3><p>torch.nn.Module is Base class for all neural network modules.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        <span class="hljs-comment"># 前趋,需要实现</span><br>        output = <span class="hljs-built_in">input</span> + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br>x = torch.tensor(<span class="hljs-number">1.0</span>)<br>output = tudui(x) <span class="hljs-comment"># 感觉这里有点像魔法函数__call__</span><br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><h3 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h3><p>F.conv2d</p><p>导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">torch.nn.functional.conv2d(input, weight, bias=None, stride=1, padding=0, dilation=1, groups=1) → Tensor</span><br><span class="hljs-string">input:(minibatch , in_channels , iH , iW) 最小批量 通道数 高 宽</span><br><span class="hljs-string">weight:(&#123;out_channels&#125; , \frac&#123;\text&#123;in\_channels&#125;&#125;&#123;\text&#123;groups&#125;&#125; , kH , kW) 卷积核</span><br><span class="hljs-string">bias: 偏置量 默认没有</span><br><span class="hljs-string">stride:每步长度 默认为1</span><br><span class="hljs-string">padding:外侧空白填充的行或者列数 默认为0</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>                      [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]])<br><br>kernel = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>],<br>                       [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>],<br>                       [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]])<br><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>))<br>kernel = torch.reshape(kernel, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><span class="hljs-built_in">print</span>(kernel.shape)<br><br>output = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output)<br><br>output2 = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(output2)<br><br>output3 = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output3)<br></code></pre></td></tr></table></figure><h3 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h3><p>Conv2d</p><p>用于选取特征</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        <span class="hljs-comment"># 和之前的代码不同，这里的只需要指定输入输出通道数，卷积核大小，卷积核内的权重是会自己随机初始化的</span><br>        self.conv1 = Conv2d(in_channels=<span class="hljs-number">3</span>, out_channels=<span class="hljs-number">6</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;./logs&quot;</span>)<br><br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    output = tudui(imgs)<br>    <span class="hljs-built_in">print</span>(imgs.shape)<br>    <span class="hljs-built_in">print</span>(output.shape)<br>    <span class="hljs-comment"># torch.Size([64, 3, 32, 32])</span><br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>    <span class="hljs-comment"># torch.Size([64, 6, 30, 30])  -&gt; [xxx, 3, 30, 30]</span><br><br>    output = torch.reshape(output, (-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>))  <span class="hljs-comment"># 6通道无法正常显示 所以reshape</span><br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br><br>    step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h3><p>用于减少数据量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d<br></code></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, download=<span class="hljs-literal">True</span>,<br>                                       transform=torchvision.transforms.ToTensor())<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.maxpool1 = MaxPool2d(kernel_size=<span class="hljs-number">3</span>, ceil_mode=<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 多出来的部分的处理方式 为False为不保留</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.maxpool1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_maxpool&quot;</span>)<br>step = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>    output = tudui(imgs)<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step = step + <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="非线性激活"><a href="#非线性激活" class="headerlink" title="非线性激活"></a>非线性激活</h3><p>拟合特征</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> ReLU, Sigmoid<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>, -<span class="hljs-number">0.5</span>],<br>                      [-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>]])<br><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, download=<span class="hljs-literal">True</span>,<br>                                       transform=torchvision.transforms.ToTensor())<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.relu1 = ReLU()<br>        self.sigmoid1 = Sigmoid()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.sigmoid1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_relu&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, global_step=step)<br>    output = tudui(imgs)<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step += <span class="hljs-number">1</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="线性层"><a href="#线性层" class="headerlink" title="线性层"></a>线性层</h3><p><img src="https://img-blog.csdnimg.cn/b7bc507721f3420f9ae5202676331b80.png" alt="img"></p><p>图中每个箭头都是一个线性计算 $$y&#x3D;ax+b$$ 具体是矩阵乘法</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>, drop_last=<span class="hljs-literal">True</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.linear1 = Linear(<span class="hljs-number">196608</span>, <span class="hljs-number">10</span>)  <span class="hljs-comment"># 将196608维输入变为10层的输出</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.linear1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br>tudui = Tudui()<br><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    <span class="hljs-built_in">print</span>(imgs.shape)<br>    output = torch.flatten(imgs)  <span class="hljs-comment"># torch.flatten可以将Tenor展开成一行(1,1,1,...,n)这种形式</span><br>    <span class="hljs-built_in">print</span>(output.shape)<br>    output = tudui(output)<br>    <span class="hljs-built_in">print</span>(output.shape)<br></code></pre></td></tr></table></figure><h3 id="seq"><a href="#seq" class="headerlink" title="seq"></a>seq</h3><p>用于简化表达</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br><span class="hljs-built_in">print</span>(tudui)<br><span class="hljs-built_in">input</span> = torch.ones((<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))  <span class="hljs-comment"># 用来检验网络参数是否正确</span><br>output = tudui(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output.shape)<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_seq&quot;</span>)<br>writer.add_graph(tudui, <span class="hljs-built_in">input</span>)  <span class="hljs-comment"># 画流程图</span><br>writer.close()<br><br></code></pre></td></tr></table></figure><p><code>net[0]</code>这样根据下标访问子模块的写法只有当<code>net</code>是个<code>ModuleList</code>或者<code>Sequential</code>实例时才可以</p><h3 id="损失"><a href="#损失" class="headerlink" title="损失"></a>损失</h3><h4 id="loss"><a href="#loss" class="headerlink" title="loss"></a>loss</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> L1Loss<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>inputs = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], dtype=torch.float32)<br>targets = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>], dtype=torch.float32)<br><br>inputs = torch.reshape(inputs, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br>targets = torch.reshape(targets, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br><br>loss = L1Loss(reduction=<span class="hljs-string">&#x27;sum&#x27;</span>)  <span class="hljs-comment"># 作差然后绝对值</span><br>result = loss(inputs, targets)<br><br>loss_mse = nn.MSELoss()  <span class="hljs-comment"># 平方差</span><br>result_mse = loss_mse(inputs, targets)<br><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-built_in">print</span>(result_mse)<br><br><br>x = torch.tensor([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>])<br>y = torch.tensor([<span class="hljs-number">1</span>])<br>x = torch.reshape(x, (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br>loss_cross = nn.CrossEntropyLoss()<br>result_cross = loss_cross(x, y)<br><span class="hljs-built_in">print</span>(result_cross)<br></code></pre></td></tr></table></figure><h4 id="backward"><a href="#backward" class="headerlink" title="backward"></a>backward</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>loss = nn.CrossEntropyLoss()<br>tudui = Tudui()<br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    outputs = tudui(imgs)<br>    result_loss = loss(outputs, targets)<br>    result_loss.backward()  <span class="hljs-comment"># 和forward对应</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ok&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br><br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>loss = nn.CrossEntropyLoss()<br>tudui = Tudui()<br>optim = torch.optim.SGD(tudui.parameters(), lr=<span class="hljs-number">0.01</span>)  <span class="hljs-comment"># 用指定的网络初始化它的参数</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>    <span class="hljs-comment"># 训练20次</span><br>    running_loss = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>        imgs, targets = data<br>        outputs = tudui(imgs)  <span class="hljs-comment"># 前向计算</span><br>        result_loss = loss(outputs, targets)  <span class="hljs-comment"># 损失计算</span><br>        optim.zero_grad()  <span class="hljs-comment"># 梯度置0</span><br>        result_loss.backward()  <span class="hljs-comment"># 反向传播</span><br>        optim.step()  <span class="hljs-comment"># 优化</span><br>        running_loss = running_loss + result_loss<br>    <span class="hljs-built_in">print</span>(running_loss)  <span class="hljs-comment"># 看每次的loss总和</span><br><br></code></pre></td></tr></table></figure><h3 id="打印参数及初始化参数"><a href="#打印参数及初始化参数" class="headerlink" title="打印参数及初始化参数"></a>打印参数及初始化参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> init<br><br>net = nn.Sequential(nn.Linear(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>), nn.ReLU(), nn.Linear(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># pytorch已进行默认初始化</span><br><span class="hljs-built_in">print</span>(net)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(net.named_parameters()))<br><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> net.named_parameters():<br>    <span class="hljs-comment"># 返回的名字自动加上了层数的索引作为前缀。 </span><br>    <span class="hljs-built_in">print</span>(name, param.size())<br><span class="hljs-comment"># 我们再来访问net中单层的参数。对于使用Sequential类构造的神经网络，我们可以通过方括号[]来访问网络的任一层。索引0表示隐藏层为Sequential实例最先添加的层。</span><br><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> net[<span class="hljs-number">0</span>].named_parameters():<br>    <span class="hljs-built_in">print</span>(name, param.size(), <span class="hljs-built_in">type</span>(param))<br><br><span class="hljs-comment"># 将权重参数初始化成均值为0、标准差为0.01的正态分布随机数，并依然将偏差参数清零</span><br><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> net.named_parameters():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;weight&#x27;</span> <span class="hljs-keyword">in</span> name:<br>        init.normal_(param, mean=<span class="hljs-number">0</span>, std=<span class="hljs-number">0.01</span>)<br>        <span class="hljs-built_in">print</span>(name, param.data)<br>        <br><span class="hljs-comment"># 使用常数来初始化权重参数</span><br><span class="hljs-keyword">for</span> name, param <span class="hljs-keyword">in</span> net.named_parameters():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;bias&#x27;</span> <span class="hljs-keyword">in</span> name:<br>        init.constant_(param, val=<span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">print</span>(name, param.data)<br></code></pre></td></tr></table></figure><h2 id="使用预下载好的模型"><a href="#使用预下载好的模型" class="headerlink" title="使用预下载好的模型"></a>使用预下载好的模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><br><span class="hljs-comment"># train_data = torchvision.datasets.ImageNet(&quot;data_image_net&quot;, split=&#x27;train&#x27;, download=True,</span><br><span class="hljs-comment">#                                            transform=torchvision.transforms.ToTensor())  # 这个数据集太大了</span><br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>vgg16_false = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 只是初始化 没有训练好参数</span><br>vgg16_true = torchvision.models.vgg16(pretrained=<span class="hljs-literal">True</span>) <span class="hljs-comment"># 已经预训练好参数</span><br><br><span class="hljs-built_in">print</span>(vgg16_true)<br><br>train_data = torchvision.datasets.CIFAR10(<span class="hljs-string">&#x27;dataset&#x27;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 训练集</span><br><br><span class="hljs-comment"># 由于vgg16的最后一层会输出1000维 也就是1000类的分类 有时候我们只需要10分类 所以可以修改为10维的输出</span><br>vgg16_true.classifier.add_module(<span class="hljs-string">&#x27;add_linear&#x27;</span>, nn.Linear(<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>))  <span class="hljs-comment"># 在网络中的classifier层的最后加一层</span><br><span class="hljs-built_in">print</span>(vgg16_true)<br><br><span class="hljs-built_in">print</span>(vgg16_false)<br>vgg16_false.classifier[-<span class="hljs-number">1</span>] = nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">10</span>)  <span class="hljs-comment"># 修改网络中的classifier层的最后层</span><br><span class="hljs-built_in">print</span>(vgg16_false)<br></code></pre></td></tr></table></figure><h2 id="测试网络参数是否正确"><a href="#测试网络参数是否正确" class="headerlink" title="测试网络参数是否正确"></a>测试网络参数是否正确</h2><p>使用<code>torch.zeros</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">import</span> torch<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Net</span>(nn.Module):<br>    <span class="hljs-comment"># 自定义网络</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 调用Net的父类的构造函数，初始化神经网络对象</span><br>        <span class="hljs-built_in">super</span>(Net, self).__init__()<br>        self.conv1 = nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, kernel_size=<span class="hljs-number">5</span>)<br>        self.conv2 = nn.Conv2d(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, kernel_size=<span class="hljs-number">5</span>)<br>        <span class="hljs-comment"># 对卷积层的输出进行dropout操作，随机丢弃一些神经元，防止过拟合</span><br>        self.conv2_drop = nn.Dropout2d()<br>        self.fc1 = nn.Linear(<span class="hljs-number">320</span>, <span class="hljs-number">50</span>)<br>        self.fc2 = nn.Linear(<span class="hljs-number">50</span>, <span class="hljs-number">10</span>)<br><br>    <span class="hljs-comment"># 定义了给定的层之间的连接方式</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-comment"># 卷积，池化核大小为2的最大池化操作，对池化结果进行激活操作，池化核大小是一个超参数，常取2/3</span><br>        x = F.relu(F.max_pool2d(self.conv1(x), <span class="hljs-number">2</span>))<br>        <span class="hljs-comment"># x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))</span><br>        x = F.relu(F.max_pool2d(self.conv2(x), <span class="hljs-number">2</span>))<br>        <span class="hljs-comment"># 重塑张量x，-1表示根据其他维度推断（行数），320列数</span><br>        x = x.view(-<span class="hljs-number">1</span>, <span class="hljs-number">320</span>)<br>        x = F.relu(self.fc1(x))<br>        <span class="hljs-comment"># dropout函数用于全连接层，Dropout2d用于卷积层</span><br>        <span class="hljs-comment"># x = F.dropout(x, training=self.training)</span><br>        x = self.fc2(x)<br>        <span class="hljs-keyword">return</span> F.log_softmax(x, dim=-<span class="hljs-number">1</span>)<br><br><br>net = Net()<br><span class="hljs-built_in">print</span>(net)<br><span class="hljs-comment"># 这是1张图,但直接用会</span><br><span class="hljs-comment"># RuntimeError: Expected 3D (unbatched) or 4D (batched) input to conv2d, but got input of size: [28, 28]</span><br>test_in_1 = torch.zeros([<span class="hljs-number">28</span>, <span class="hljs-number">28</span>], dtype=torch.float32)  <span class="hljs-comment"># 需要用float32,否则报错</span><br>test_in_2 = torch.zeros([<span class="hljs-number">28</span>, <span class="hljs-number">28</span>], dtype=torch.float32)  <span class="hljs-comment"># 需要用float32,否则报错</span><br><span class="hljs-comment"># test_in_2 = torch.zeros([2, 1, 28, 28], dtype=torch.float32)  # 也可以直接这样</span><br>test_in_1 = test_in_1.view(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>)  <span class="hljs-comment"># 要加等号,这里的conv1需要单通道的输入</span><br>test_in_2 = torch.reshape(test_in_2, (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>))  <span class="hljs-comment"># 要加等号,这里的conv1需要单通道的输入</span><br>test_out_1 = net(test_in_1)<br>test_out_2 = net(test_in_2)<br><span class="hljs-built_in">print</span>(test_out_1)<br><span class="hljs-built_in">print</span>(test_out_2)<br></code></pre></td></tr></table></figure><h2 id="保存和使用已有模型的参数"><a href="#保存和使用已有模型的参数" class="headerlink" title="保存和使用已有模型的参数"></a>保存和使用已有模型的参数</h2><p>保存参数 两种方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>vgg16 = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># 保存方式1,模型结构+模型参数</span><br>torch.save(vgg16, <span class="hljs-string">&quot;vgg16_method1.pth&quot;</span>)<br><br><span class="hljs-comment"># 保存方式2，模型参数（官方推荐）</span><br>torch.save(vgg16.state_dict(), <span class="hljs-string">&quot;vgg16_method2.pth&quot;</span>)<br><br><span class="hljs-comment"># 陷阱</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.conv1 = nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">64</span>, kernel_size=<span class="hljs-number">3</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br>torch.save(tudui, <span class="hljs-string">&quot;tudui_method1.pth&quot;</span>)<br></code></pre></td></tr></table></figure><p>读取参数 与之对应的两种方法，这两种方法就相当于加载好了实例了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-comment"># from model_save import *</span><br><span class="hljs-comment"># 方式1-》保存方式1，加载模型</span><br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>model = torch.load(<span class="hljs-string">&quot;vgg16_method1.pth&quot;</span>)<br><span class="hljs-comment"># print(model)</span><br><br><span class="hljs-comment"># 方式2，加载模型</span><br>vgg16 = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br>vgg16.load_state_dict(torch.load(<span class="hljs-string">&quot;vgg16_method2.pth&quot;</span>))<br><span class="hljs-comment"># model = torch.load(&quot;vgg16_method2.pth&quot;)</span><br><span class="hljs-comment"># print(vgg16)</span><br><br><span class="hljs-comment"># 陷阱1 需要导入其中所有的包</span><br><span class="hljs-comment"># class Tudui(nn.Module):</span><br><span class="hljs-comment">#     def __init__(self):</span><br><span class="hljs-comment">#         super(Tudui, self).__init__()</span><br><span class="hljs-comment">#         self.conv1 = nn.Conv2d(3, 64, kernel_size=3)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     def forward(self, x):</span><br><span class="hljs-comment">#         x = self.conv1(x)</span><br><span class="hljs-comment">#         return x</span><br><br>model = torch.load(<span class="hljs-string">&#x27;tudui_method1.pth&#x27;</span>)<br><span class="hljs-built_in">print</span>(model)<br></code></pre></td></tr></table></figure><h2 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-keyword">from</span> model <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># 准备数据集</span><br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>train_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;../data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                         download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># length 长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><span class="hljs-comment"># 如果train_data_size=10, 训练数据集的长度为：10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><br><span class="hljs-comment"># 利用 DataLoader 来加载数据集</span><br>train_dataloader = DataLoader(train_data, batch_size=<span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br>tudui = Tudui()<br><br><span class="hljs-comment"># 损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br><br><span class="hljs-comment"># 优化器</span><br><span class="hljs-comment"># learning_rate = 0.01</span><br><span class="hljs-comment"># 1e-2=1 x (10)^(-2) = 1 /100 = 0.01</span><br>learning_rate = <span class="hljs-number">1e-2</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 设置训练网络的一些参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;../logs_train&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------第 &#123;&#125; 轮训练开始-------&quot;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))<br><br>    <span class="hljs-comment"># 训练步骤开始</span><br>    tudui.train()  <span class="hljs-comment"># 这步在一般情况下可以没有 训练状态</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        outputs = tudui(imgs)<br>        loss = loss_fn(outputs, targets)<br><br>        <span class="hljs-comment"># 优化器优化模型</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数：&#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    tudui.<span class="hljs-built_in">eval</span>()  <span class="hljs-comment"># 这步在一般情况下可以没有 评估状态</span><br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():  <span class="hljs-comment"># 评估的时候不用梯度</span><br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            <span class="hljs-comment"># argmax显示最大的参数是第几个 argmax(1)代表看每行的 argmax(0)代表看每列的</span><br>            <span class="hljs-comment"># 列表==列表 会返回一个列表 其中的每一项都是对应项比较后的True或者False</span><br>            <span class="hljs-comment"># 列表.sum()会计算列表中True的数量</span><br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br><br>    torch.save(tudui, <span class="hljs-string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br></code></pre></td></tr></table></figure><h2 id="GPU加速"><a href="#GPU加速" class="headerlink" title="GPU加速"></a>GPU加速</h2><p>需要在三个地方进行设置</p><ol><li>网络</li><li>数据集</li><li>损失函数</li></ol><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>用.cuda()的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>train_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                         download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># length 长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><span class="hljs-comment"># 如果train_data_size=10, 训练数据集的长度为：10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><br><span class="hljs-comment"># 利用 DataLoader 来加载数据集</span><br>train_dataloader = DataLoader(train_data, batch_size=<span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span>*<span class="hljs-number">4</span>*<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>tudui = Tudui()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    tudui = tudui.cuda()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在使用gpu&#x27;</span>)<br><br><span class="hljs-comment"># 损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    loss_fn = loss_fn.cuda()<br><span class="hljs-comment"># 优化器</span><br><span class="hljs-comment"># learning_rate = 0.01</span><br><span class="hljs-comment"># 1e-2=1 x (10)^(-2) = 1 /100 = 0.01</span><br>learning_rate = <span class="hljs-number">1e-2</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 设置训练网络的一些参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_train&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------第 &#123;&#125; 轮训练开始-------&quot;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))<br><br>    <span class="hljs-comment"># 训练步骤开始</span><br>    tudui.train()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        <span class="hljs-keyword">if</span> torch.cuda.is_available():<br>            imgs = imgs.cuda()<br>            targets = targets.cuda()<br>        outputs = tudui(imgs)<br>        loss = loss_fn(outputs, targets)<br><br>        <span class="hljs-comment"># 优化器优化模型</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数：&#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    tudui.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            <span class="hljs-keyword">if</span> torch.cuda.is_available():<br>                imgs = imgs.cuda()<br>                targets = targets.cuda()<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br><br>    torch.save(tudui, <span class="hljs-string">&quot;pth/tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>用to(device)的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br><span class="hljs-comment"># 定义训练的设备</span><br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>)  <span class="hljs-comment"># 也可以写成&quot;cuda:0&quot;表示第1块gpu,如果是cpu的话就直接写&#x27;cpu&#x27;</span><br><br>train_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                         download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment"># length 长度</span><br>train_data_size = <span class="hljs-built_in">len</span>(train_data)<br>test_data_size = <span class="hljs-built_in">len</span>(test_data)<br><span class="hljs-comment"># 如果train_data_size=10, 训练数据集的长度为：10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(train_data_size))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(test_data_size))<br><br><br><span class="hljs-comment"># 利用 DataLoader 来加载数据集</span><br>train_dataloader = DataLoader(train_data, batch_size=<span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, batch_size=<span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># 创建网络模型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(Tudui, self).__init__()<br>        self.model = nn.Sequential(<br>            nn.Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>),<br>            nn.Flatten(),<br>            nn.Linear(<span class="hljs-number">64</span>*<span class="hljs-number">4</span>*<span class="hljs-number">4</span>, <span class="hljs-number">64</span>),<br>            nn.Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model(x)<br>        <span class="hljs-keyword">return</span> x<br>tudui = Tudui()<br>tudui = tudui.to(device)  <span class="hljs-comment"># 模型网络和损失函数这里可以直接.to(device),不用赋值,但是在后面数据那里还是需要赋值的</span><br><br><span class="hljs-comment"># 损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br>loss_fn = loss_fn.to(device)  <span class="hljs-comment"># 模型网络和损失函数这里可以直接.to(device),不用赋值,但是在后面数据那里还是需要赋值的</span><br><span class="hljs-comment"># 优化器</span><br><span class="hljs-comment"># learning_rate = 0.01</span><br><span class="hljs-comment"># 1e-2=1 x (10)^(-2) = 1 /100 = 0.01</span><br>learning_rate = <span class="hljs-number">1e-2</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)<br><br><span class="hljs-comment"># 设置训练网络的一些参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs_train&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------第 &#123;&#125; 轮训练开始-------&quot;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))<br><br>    <span class="hljs-comment"># 训练步骤开始</span><br>    tudui.train()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        imgs = imgs.to(device)<br>        targets = targets.to(device)<br>        outputs = tudui(imgs)<br>        loss = loss_fn(outputs, targets)<br><br>        <span class="hljs-comment"># 优化器优化模型</span><br>        optimizer.zero_grad()<br>        loss.backward()<br>        optimizer.step()<br><br>        total_train_step = total_train_step + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数：&#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))<br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    tudui.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            imgs = imgs.to(device)<br>            targets = targets.to(device)<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss = total_test_loss + loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy = total_accuracy + accuracy<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy/test_data_size))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)<br>    total_test_step = total_test_step + <span class="hljs-number">1</span><br><br>    torch.save(tudui, <span class="hljs-string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;模型已保存&quot;</span>)<br><br>writer.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>torch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>conda配置</title>
    <link href="/2023/04/10/conda%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/04/10/conda%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="Windows系统下"><a href="#Windows系统下" class="headerlink" title="Windows系统下"></a>Windows系统下</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">conda config --<span class="hljs-built_in">set</span> show_channel_urls yes<br></code></pre></td></tr></table></figure><p>用这段命令在用户文件夹下生成<code>.condarc</code>文件</p><h2 id="其他系统下"><a href="#其他系统下" class="headerlink" title="其他系统下"></a>其他系统下</h2><p>直接就有<code>.condarc</code>文件，可以直接修改</p><h2 id="修改-condarc文件"><a href="#修改-condarc文件" class="headerlink" title="修改.condarc文件"></a>修改<code>.condarc</code>文件</h2><p>根据<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">镜像站使用帮助 | 清华大学开源软件镜像站</a></p><p>复制以下内容进去,<code>CtrlA</code>+<code>CtrlV</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs condarc">channels:<br>  - defaults<br>show_channel_urls: true<br>default_channels:<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r<br>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2<br>custom_channels:<br>  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br>  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud<br></code></pre></td></tr></table></figure><p>就可以了，亲测不会卡进度。</p><h2 id="复制已有环境"><a href="#复制已有环境" class="headerlink" title="复制已有环境"></a>复制已有环境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">conda create -n new_env --<span class="hljs-built_in">clone</span> exist_env<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>config</category>
      
    </categories>
    
    
    <tags>
      
      <tag>conda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL note</title>
    <link href="/2023/04/07/SQL-note/"/>
    <url>/2023/04/07/SQL-note/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL笔记"><a href="#SQL笔记" class="headerlink" title="SQL笔记"></a>SQL笔记</h1><h2 id="PSQL操作"><a href="#PSQL操作" class="headerlink" title="PSQL操作"></a>PSQL操作</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs psql">\?   帮助<br>\l   列举数据库<br>\c DBNAME  连接到新数据库<br>\d         描述表，视图，序列，或索引<br>\dt        列出表<br>\q   退出psgl<br></code></pre></td></tr></table></figure><h3 id="打开PSQL"><a href="#打开PSQL" class="headerlink" title="打开PSQL"></a>打开PSQL</h3><p>如下，一路enter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs psql">Server [localhost]:<br>Database [postgres]:<br>Port [5432]:<br>Username [postgres]: # 在这里输密码就可以了<br>用户 postgres 的口令：<br>psql (15.2)<br>输入 &quot;help&quot; 来获取帮助信息.<br></code></pre></td></tr></table></figure><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs psql">postgres=# \l<br><br># 看下面的截图<br>(4 行记录)<br><br><br>postgres=# drop database learndb<br>postgres-# ;<br>DROP DATABASE<br>postgres=# create database learndb<br>postgres-# ;<br>CREATE DATABASE<br>postgres=# \l<br><br># 看下面的截图<br>(4 行记录)<br><br><br>postgres=# \c learndb<br>您现在已经连接到数据库 &quot;learndb&quot;,用户 &quot;postgres&quot;.<br>learndb=# \d<br>没有找到任何关系<br></code></pre></td></tr></table></figure><p>这个时候其实已经是可以在里面输入数据库查询语句了，不过这个是空数据库，查不到任何东西。</p><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p><img src="/2023/04/07/SQL-note/PSQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.png" alt="截图"></p><h3 id="关于postgres"><a href="#关于postgres" class="headerlink" title="关于postgres=#"></a>关于<code>postgres=#</code></h3><ul><li>postgres:当前的数据库名</li><li>&#x3D;:当前是新语句</li><li>-:如果不是<code>=</code>而是<code>-</code>的话，说明PSQL没有读到<code>;</code>，认为上一句还没有结束</li><li>(:在图形化界面不是<code>-</code>而是<code>(</code></li></ul><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs postgresql">learndb=# <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> department(<br>learndb(#   dNo           <span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>)        <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br>learndb(#   dName         <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>learndb(#   officeRoom    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>),<br>learndb(#   homePage      <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">80</span>),<br>learndb(#   <span class="hljs-keyword">PRIMARY KEY</span>(dNo)<br>learndb(# );<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span><br></code></pre></td></tr></table></figure><p>也可以不在psql里面做这个事情，可以在postgreSQL专门的查询界面干这事</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> department(<br>  dNo           <span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>)        <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br>  dName         <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>  officeRoom    <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">40</span>),<br>  homePage      <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">80</span>),<br>  <span class="hljs-keyword">PRIMARY KEY</span>(dNo)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student(<br>  sNo <span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>)        <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br>  sName<span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)    <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  sex<span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>)        <span class="hljs-keyword">CHECK</span> (sex <span class="hljs-keyword">IN</span>(<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>)),      <br>  age<span class="hljs-type">INT</span>,<br>  email         <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>  dNo<span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>),<br>  <span class="hljs-keyword">PRIMARY KEY</span>(sNo),<br>  <span class="hljs-keyword">FOREIGN KEY</span> (dNo) <span class="hljs-keyword">REFERENCES</span>  department(dNo)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> course(<br>  cNo<span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>)       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>,<br>  cName<span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)    <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  cPNo<span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>),<br>  credit<span class="hljs-type">INT</span>,<br>  dNo           <span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>),<br>  <span class="hljs-keyword">PRIMARY KEY</span>(cNo),<br>  <span class="hljs-keyword">FOREIGN KEY</span> (cPNo) <span class="hljs-keyword">REFERENCES</span>  course(cNo),<br>  <span class="hljs-keyword">FOREIGN KEY</span> (dNo)  <span class="hljs-keyword">REFERENCES</span>  department(dNo)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> sc(<br>  sNo<span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>)       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  cNo<span class="hljs-type">CHAR</span>(<span class="hljs-number">6</span>)       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  score<span class="hljs-type">INT</span>,<br>  recordDate    <span class="hljs-type">date</span>           <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">current_date</span>,<br>  <span class="hljs-keyword">PRIMARY KEY</span>(sNo,cNo),<br>  <span class="hljs-keyword">FOREIGN KEY</span> (sNo) <span class="hljs-keyword">REFERENCES</span>  student(sNo),<br>  <span class="hljs-keyword">FOREIGN KEY</span> (cNo) <span class="hljs-keyword">REFERENCES</span>  course(cNo)<br>);<br></code></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;01&#x27;</span>,<span class="hljs-string">&#x27;信息学院&#x27;</span>,<span class="hljs-string">&#x27;行政楼409&#x27;</span>,<span class="hljs-string">&#x27;www.xxx.edu.cn&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;02&#x27;</span>,<span class="hljs-string">&#x27;软件学院&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;03&#x27;</span>,<span class="hljs-string">&#x27;理学院&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;04&#x27;</span>,<span class="hljs-string">&#x27;文学院&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> department <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;05&#x27;</span>,<span class="hljs-string">&#x27;外国语学院&#x27;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">......</span><br><span class="hljs-comment">下面省略不写</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> SC <br><span class="hljs-keyword">SET</span> score<span class="hljs-operator">=</span><span class="hljs-number">60</span><br><span class="hljs-keyword">WHERE</span> sNo<span class="hljs-operator">=</span><span class="hljs-number">123</span>;<br><br></code></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> Student<br><span class="hljs-keyword">WHERE</span> sNo<span class="hljs-operator">=</span><span class="hljs-string">&#x27;070122&#x27;</span>;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> STUDENT;<br></code></pre></td></tr></table></figure><h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> [<span class="hljs-keyword">DISTINCT</span><span class="hljs-operator">|</span><span class="hljs-keyword">ALL</span>]&#123;<span class="hljs-operator">*</span><span class="hljs-operator">|</span>[columnExpression[<span class="hljs-keyword">AS</span> <br>newName]][,…]&#125;<br><span class="hljs-keyword">FROM</span> TableName[alias][,…]<br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>]<br>[<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> columnList][<span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">condition</span>]<br>[<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> columnList]<br></code></pre></td></tr></table></figure><h3 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">这是多行注释</span><br><span class="hljs-comment">pgAdmin4的常用快捷键:</span><br><span class="hljs-comment">  - Ctrl+Shift+K:格式化</span><br><span class="hljs-comment">  - F5:运行</span><br><span class="hljs-comment">  - Alt+S:保存</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> STUDENT;<span class="hljs-comment">-- 这是单行注释，注意双减号后面要有空格</span><br><br><br><span class="hljs-keyword">SELECT</span> SNO,<br>SNAME<br><span class="hljs-keyword">FROM</span> STUDENT;<span class="hljs-comment">-- 查询两个字段</span><br><br><br><span class="hljs-keyword">SELECT</span> SNAME,<br><span class="hljs-number">2023</span> - AGE <span class="hljs-keyword">AS</span> X <span class="hljs-comment">-- 用AS进行重命名</span><br><span class="hljs-keyword">FROM</span> STUDENT;<br><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> SNO <span class="hljs-comment">-- DISTINCT代表多个重复结果只保留一个</span><br><span class="hljs-keyword">FROM</span> SC;<br><br><br><span class="hljs-keyword">SELECT</span> SNO<br><span class="hljs-keyword">FROM</span> STUDENT<br><span class="hljs-keyword">WHERE</span> AGE <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">20</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">23</span>; <span class="hljs-comment">-- 这里AGE后面可以用类似 &lt;= 17 / IN(18,19,20)之类的筛选条件，sql中用`=`而不是`==`表示相等</span><br></code></pre></td></tr></table></figure><h3 id="LIKE语句"><a href="#LIKE语句" class="headerlink" title="LIKE语句"></a>LIKE语句</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*LIKE*/</span><br><span class="hljs-keyword">SELECT</span> sNo,sName<br><span class="hljs-keyword">FROM</span> Student <br><span class="hljs-keyword">WHERE</span> sName <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;张%&#x27;</span>; <span class="hljs-comment">-- `%`可以指代一个及以上的字符</span><br><br><span class="hljs-keyword">SELECT</span> sNo,sName<br><span class="hljs-keyword">FROM</span> Student <br><span class="hljs-keyword">WHERE</span> sName <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;张_&#x27;</span>; <span class="hljs-comment">-- `_`可以指代一个字符</span><br><br><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> Course<br><span class="hljs-keyword">WHERE</span> cName <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;DB\_%i__&#x27;</span> <span class="hljs-keyword">ESCAPE</span> <span class="hljs-string">&#x27;\&#x27;</span>; <span class="hljs-comment">-- `ESCAPE`指出`\`是转义字符</span><br><br><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> Student <br><span class="hljs-keyword">WHERE</span> sName ~ <span class="hljs-string">&#x27;^[\u4E00-\u9FA5]&#123;3,4&#125;$&#x27;</span>; <span class="hljs-comment">-- `~`指出正则表达式</span><br></code></pre></td></tr></table></figure><h3 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h3><p><code>null</code>代表未知</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*NULL</span><br><span class="hljs-comment">NULL代表未知(注意不是&quot;&quot;空字符串),意思是所有可能都存在</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">以下是SQL中WHERE语句可能返回的三种结果及其原因</span><br><span class="hljs-comment">- true:有返回数据</span><br><span class="hljs-comment">- false:无返回数据</span><br><span class="hljs-comment">- NULL(未知):此时也无返回数据</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span>; <span class="hljs-comment">-- 有结果，因为1=1返回true</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span>=<span class="hljs-number">0</span>; <span class="hljs-comment">-- 无结果，因为1=0返回false</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span>=<span class="hljs-keyword">NULL</span>; <span class="hljs-comment">-- 无结果，因为SQL也不知道1是不是等于NULL(1=NULL返回NULL)</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NULL</span>=<span class="hljs-keyword">NULL</span>; <span class="hljs-comment">-- 无结果</span><br><br><span class="hljs-comment">-- NOT语句:false和null的区别</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span>(<span class="hljs-number">1</span>=<span class="hljs-number">0</span>); <span class="hljs-comment">-- 有结果，因为SQL知道NOT false就是true</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>; <span class="hljs-comment">-- 无结果， 而NOT(NULL)还是未知，说句题外话，NOT后面的东西只能是boolean值</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> SC <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span>(<span class="hljs-number">1</span>=<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 无结果，因为SQL也不知道1是不是等于NULL(true和false都有可能)</span><br><br><span class="hljs-comment">-- IS语句判断NULL</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> STUDENT <span class="hljs-keyword">WHERE</span> AGE = <span class="hljs-keyword">NULL</span>; <span class="hljs-comment">-- 无结果</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> STUDENT <span class="hljs-keyword">WHERE</span> AGE <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>; <span class="hljs-comment">-- 有结果</span><br><br><span class="hljs-comment">-- IN语句</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 有结果，因为1确实在元组里面</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">2</span>,<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 无结果，因为1在不在元组里面是未知的</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 无结果，因为两个NULL虽然都是未知，但是是不同的</span><br><span class="hljs-comment">-- NOT IN</span><br><span class="hljs-comment">-- 一旦NOT IN后面的括号里面有null,NOT IN表达式返回的只能是false或null</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 无结果，因为1确实在元组里面</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> <span class="hljs-number">1</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">2</span>,<span class="hljs-keyword">NULL</span>); <span class="hljs-comment">-- 无结果，因为1在不在元组里面是未知的</span><br><br><span class="hljs-comment">-- 比较</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> STUDENT <span class="hljs-keyword">WHERE</span> AGE &lt;&gt; <span class="hljs-number">18</span>; <span class="hljs-comment">-- AGE为null的人不被计入</span><br></code></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*排序*/</span><br><span class="hljs-keyword">SELECT</span> SNO,<br>SCORE<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> CNO = <span class="hljs-string">&#x27;010101&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> SCORE <span class="hljs-keyword">DESC</span>; <span class="hljs-comment">-- DESC代表降序排列  ASC代表升序排列(默认ASC)</span><br><br><span class="hljs-keyword">SELECT</span> * <br><span class="hljs-keyword">FROM</span> Student <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> dNo, age <span class="hljs-keyword">DESC</span>; <span class="hljs-comment">-- dNo为第一关键字，升序；age为第二关键字，降序</span><br><span class="hljs-comment">-- 另外，null在升序排序结果中在最后，而在降序排序中在最前，所以可以将null视为最大值</span><br></code></pre></td></tr></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>聚合函数输入的是一组数据的集合，输出的是单个值</p><p><strong>注意</strong>:聚合函数一般无视<code>null</code></p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs postgresql">COUNT([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] *)<br>COUNT([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] &lt;columnName&gt;) <br>SUM([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] &lt;columnName&gt;) <br>AVG([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] &lt; columnName &gt;)<br>MAX([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] &lt; columnName &gt;) <br>MIN([<span class="hljs-keyword">DISTINCT</span>|<span class="hljs-keyword">ALL</span>] &lt; columnName &gt;)<br></code></pre></td></tr></table></figure><h3 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*聚合函数*/</span><br><span class="hljs-comment">-- COUNT</span><br><span class="hljs-comment">-- 你会发现COUNT可以对多维数组进行处理，但是其他很多聚合函数只能对一列进行处理</span><br><span class="hljs-keyword">SELECT</span> COUNT(*) <span class="hljs-comment">-- 返回Student的列数</span><br><span class="hljs-keyword">FROM</span> Student;<br><br><span class="hljs-keyword">SELECT</span> COUNT(age) <span class="hljs-comment">-- 返回Student中age的列数</span><br><span class="hljs-keyword">FROM</span> Student; <span class="hljs-comment">-- 注意，由于聚合函数无视null，所以这个命令和上面那个命令的返回结果可能不同</span><br><br><span class="hljs-keyword">SELECT</span> COUNT(*) <span class="hljs-keyword">AS</span> countOf <span class="hljs-comment">-- 可以重命名结果</span><br><span class="hljs-keyword">FROM</span> Course<br><span class="hljs-keyword">WHERE</span> credit &gt;= <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">SELECT</span> COUNT(<span class="hljs-keyword">DISTINCT</span> sNo) <span class="hljs-comment">-- 重复的不管</span><br><span class="hljs-keyword">FROM</span> SC;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/07/SQL-note/COUNT.PNG" alt="COUNT示例"></p><h3 id="AVG"><a href="#AVG" class="headerlink" title="AVG"></a>AVG</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-keyword">SELECT</span> AVG(score) <br><span class="hljs-keyword">FROM</span> SC <br><span class="hljs-keyword">WHERE</span> cNo=<span class="hljs-string">&#x27;010101&#x27;</span>; <span class="hljs-comment">-- 可以先进行筛选再聚合</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/07/SQL-note/AVG.PNG" alt="AVG示例"></p><p>其他<code>MIN</code> <code>MAX</code> <code>SUM</code>什么的都是类似的</p><h3 id="GROUP"><a href="#GROUP" class="headerlink" title="GROUP"></a>GROUP</h3><p>类似合并单元格</p><p>先分组后聚合(null也会被分成一组)</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">-- HAVING</span><br><span class="hljs-comment">-- 满足HAVING 子句中条件的分组将被显示</span><br><span class="hljs-keyword">SELECT</span> sNo<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> score&gt;<span class="hljs-number">60</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sNo<br><span class="hljs-keyword">HAVING</span> COUNT(*)&gt;<span class="hljs-number">3</span>; <span class="hljs-comment">-- 每个分组中有超过3行</span><br><br><span class="hljs-keyword">SELECT</span> sNo<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">WHERE</span> score&gt;<span class="hljs-number">60</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sNo<br><span class="hljs-keyword">HAVING</span> sNo=<span class="hljs-string">&#x27;170102&#x27;</span>; <span class="hljs-comment">-- having后面一般是用聚合函数的，这里可以用sNo是因为sNo是分组依据(GROUP BY sNo)</span><br></code></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs postgresql"><span class="hljs-comment">/*子查询*/</span><br><span class="hljs-keyword">SELECT</span> SNAME<br><span class="hljs-keyword">FROM</span> STUDENT<br><span class="hljs-keyword">WHERE</span> DNO =<br>(<span class="hljs-keyword">SELECT</span> DNO<br><span class="hljs-keyword">FROM</span> STUDENT<br><span class="hljs-keyword">WHERE</span> SNAME = <span class="hljs-string">&#x27;宁灿&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> INDEX sName_index <span class="hljs-keyword">ON</span> Student(sName);<br><span class="hljs-keyword">DROP</span> INDEX sName_index;<br><br></code></pre></td></tr></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> view_1 <br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> s.sName, c.cName, sc.score<br><span class="hljs-keyword">FROM</span> Student s, Course c, sc<br><span class="hljs-keyword">WHERE</span> s.sNo<span class="hljs-operator">=</span>sc.sNo <span class="hljs-keyword">and</span> c.cNo<span class="hljs-operator">=</span>sc.cNo<br><span class="hljs-keyword">and</span> c.cName<span class="hljs-operator">=</span><span class="hljs-string">&#x27;离散数学&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> sName, score<br><span class="hljs-keyword">FROM</span> view_1<br><span class="hljs-keyword">WHERE</span> score<span class="hljs-operator">&lt;</span><span class="hljs-number">60</span>;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> view_1;<br></code></pre></td></tr></table></figure><p>感觉和<code>table</code>差不多</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">BEGIN</span> TRANSACTION;<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> department<br><span class="hljs-keyword">WHERE</span> dno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;03&#x27;</span>;<br><span class="hljs-keyword">UPDATE</span> student<br><span class="hljs-keyword">SET</span> dno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;02&#x27;</span><br><span class="hljs-keyword">WHERE</span> sno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;008&#x27;</span>;<br><span class="hljs-keyword">commit</span>;<br><br></code></pre></td></tr></table></figure><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><h3 id="码"><a href="#码" class="headerlink" title="码"></a>码</h3><p>候选码，简称为码</p><h3 id="主属性"><a href="#主属性" class="headerlink" title="主属性"></a>主属性</h3><p>包含在任何一个码中的属性成为主属性</p><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p>符合1NF的关系中的 每个属性都不可再分</p><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p>2NF在1NF的基础之上，消除了非主属性对于码的部分函数依赖</p><p>如(<strong>SNo,CNo</strong>,Department,score)不满足2NF</p><h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><p>3NF在2NF的基础之上，消除了非主属性对于码的传递函数依赖</p><p>如(<strong>ID</strong>,school,headmaster)不满足3NF</p><h3 id="BCNF"><a href="#BCNF" class="headerlink" title="BCNF"></a>BCNF</h3><p>在 3NF 的基础上消除主属性对于码的部分与传递函数依赖</p><p>如(<strong>ID</strong>,<code>phone</code>,Name)不满足BCNF</p><h2 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h2><p>实体完整性（entity integrity）、参照完整性（referential integrity）和用户定义的完整性（user-defined integrity）</p><p>实体完整性：主属性（可能是一个或者一组属性）是不能取空值的</p><p>参照完整性：若属性（或属性组）F是基本关系R的外码，它与基本关系S的主码Ks相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值必须为S中某个元组的值</p><h2 id="DDL、DML、DCL"><a href="#DDL、DML、DCL" class="headerlink" title="DDL、DML、DCL"></a>DDL、DML、DCL</h2><p>DDL: （data definition language）数据定义语言，主要用于创建数据库对象。<br>DML:  (data manipulation language)数据操纵语言，主要用于操纵数据库对象。<br>DCL：（Data Control Language）数据控制语言，主要用于设置或更改数据库用户或角色权限的语句。<br>示例：</p><p>DDL示例： 如CREATE、ALTER、DROP、TRUNCATE、COMMENT、GRANT、REVOKE<br>DML示例：如SELECT、INSERT、UPDATE、DELETE、CALL、EXPLAIN PLAN、LOCK TABLE<br>DCL示例：如COMMIT、SAVEPOINT、ROLLBACK、SET TRANSACTION</p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源与目标的操作</title>
    <link href="/2023/03/22/%E6%BA%90%E4%B8%8E%E7%9B%AE%E6%A0%87%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/03/22/%E6%BA%90%E4%B8%8E%E7%9B%AE%E6%A0%87%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>稍微总结一下一些控制台命令中的输入和输出目标的指定顺序</p><h3 id="shell-cp"><a href="#shell-cp" class="headerlink" title="shell:cp"></a>shell:cp</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">[root@www ~]<span class="hljs-comment"># cp [-adfilprsu] 来源档(source) 目标档(destination)</span><br>[root@www ~]<span class="hljs-comment"># cp [options] source1 source2 source3 .... directory</span><br></code></pre></td></tr></table></figure><h3 id="gcc-o"><a href="#gcc-o" class="headerlink" title="gcc:-o"></a>gcc:-o</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">gcc -o hello.exe hello.c<br>gcc hello.c -o hello.exe<br></code></pre></td></tr></table></figure><p>因为<code>-o</code>的意思是制定目标名称，这里<code>hello.exe</code>就是<code>-o</code>的参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gcc -S hello.c <br></code></pre></td></tr></table></figure><p>像这样的，就是先在命令后面跟选项，然后再跟src</p><p>如果是</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">gcc main.c<br></code></pre></td></tr></table></figure><p>会直接生成一个a.exe</p><h3 id="opencv-cvtColor"><a href="#opencv-cvtColor" class="headerlink" title="opencv:cvtColor"></a>opencv:cvtColor</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cvtColor</span><span class="hljs-params">(InputArray src, OutputArray dst, <span class="hljs-type">int</span> code, <span class="hljs-type">int</span> dstCn = <span class="hljs-number">0</span>)</span></span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javaIO</title>
    <link href="/2023/03/22/javaIO/"/>
    <url>/2023/03/22/javaIO/</url>
    
    <content type="html"><![CDATA[<h1 id="javaI"><a href="#javaI" class="headerlink" title="javaI"></a>javaI</h1><p>参考了网络上的一些示例和java文档中的说明，归纳了比较常见的一些用法</p><h2 id="简单概念"><a href="#简单概念" class="headerlink" title="简单概念"></a>简单概念</h2><ul><li><p>字节流</p></li><li><p>字符流</p></li><li><p>输入流</p></li><li><p>输出流</p></li></ul><p>参考网址:<a href="https://blog.csdn.net/qq_52519008/article/details/127135476">主要看这个网址的第一张图</a></p><h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>FileInputStream(File file)<br>          通过打开一个到实际文件的连接来创建一个 FileInputStream，该文件通过文件系统中的 File 对象 file 指定。<br>FileInputStream(FileDescriptor fdObj)<br>          通过使用文件描述符 fdObj 创建一个 FileInputStream，该文件描述符表示到文件系统中某个实际文件的现有连接。<br>FileInputStream(String name)<br>          通过打开一个到实际文件的连接来创建一个 FileInputStream，该文件通过文件系统中的路径名 name 指定。 </p><h3 id="读取方法"><a href="#读取方法" class="headerlink" title="读取方法"></a>读取方法</h3><p> int read()<br>          从此输入流中读取一个数据字节。<br> int read(byte[] b)<br>          从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。<br> int read(byte[] b, int off, int len)<br>          从此输入流中将最多 len 个字节的数据读入一个 byte 数组中。 </p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>java.io.InputStream:字节输入流,此抽象类是表示字节输入流的所有类的超类。<br>定义了所有子类共性的方法:</p><ul><li><p>public abstract int read()从输入流中读取数据的下一个字节。</p></li><li><p>public int read(byte[] b) 从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。</p></li><li><p>public void close() 关闭此输入流并释放与该流关联的所有系统资源。</p></li></ul><p>InputStream的子类之一FileInputStream（文件字节输入流）,作用是把硬盘文件中的数据,读取到内存中使用。<br>   定义了构造方法:</p><ul><li><p>public FileInputStream(String name)通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。</p></li><li><p>public FileInputStream(File file) 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。<br>使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，建议开发中使用</p></li></ul><p>下面代码中的show1和show2展示了两种不同的初始化和文件读取方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputStreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        show1();<br>   &#125;<br>  <span class="hljs-comment">/**show1():从文件中读取单个字节</span><br><span class="hljs-comment">   * 1.创建FileInputStream对象,构造方法中绑定要读取的数据源</span><br><span class="hljs-comment">   * 2.使用FileInputStream对象中的方法read,读取文件</span><br><span class="hljs-comment">   * 3.释放资源</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-comment">//1.</span><br>        <span class="hljs-comment">/* 构造方法的作用:</span><br><span class="hljs-comment">            1.会创建一个FileInputStream对象</span><br><span class="hljs-comment">            2.会把FileInputStream对象指向构造方法中要读取的文件的第一个字节</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;09_IOAndProperties\\c.txt&quot;</span>); <span class="hljs-comment">//文件内容为abc</span><br>        <span class="hljs-comment">//FileInputStream fis = new FileInputStream(new File(&quot;09_IOAndProperties\\c.txt&quot;));</span><br>        <br>        <span class="hljs-comment">//2.int read()通过JVM，再通过OS，读取文件中的指针指向的字节并提升到int返回,连续读取时指针依次向后移，读取到文件的末尾返回-1</span><br>        len = fis.read();<br>        System.out.println(len);<span class="hljs-comment">//97 a</span><br>        len = fis.read();<br>        System.out.println(len);<span class="hljs-comment">// 98 b</span><br>        len = fis.read();<br>        System.out.println(len);<span class="hljs-comment">//99 c</span><br>        len = fis.read();<br>        System.out.println(len);<span class="hljs-comment">//-1</span><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">        int len = 0; //记录读取到的字节</span><br><span class="hljs-comment">        while((len = fis.read())!=-1)&#123;</span><br><span class="hljs-comment">            System.out.print((char)len);//abc</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br> <br>        <span class="hljs-comment">//3.</span><br>        fis.close();<br>    &#125;<br> <br>   <span class="hljs-comment">/**show2():从文件中读取字节数组</span><br><span class="hljs-comment">    *1.创建FileInputStream对象,构造方法中绑定要读取的数据源</span><br><span class="hljs-comment">    *2.使用FileInputStream对象中的方法read读取文件</span><br><span class="hljs-comment">    *3.关闭资源</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//1.</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;09_IOAndProperties\\b.txt&quot;</span>);<span class="hljs-comment">//文件内容为ABCDE</span><br>        <br>        <span class="hljs-comment">//2.</span><br>        <span class="hljs-comment">//int read(byte[] b) 从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span>]; <span class="hljs-comment">// byte[]起到缓冲作用,存储每次读取到的多个字节,数组的长度一把定义为1024(1kb)或者1024的整数倍</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//不同于读取单个字节int len记录每次读取的有效字节个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> fis.read(bytes); <br>        System.out.println(len);<span class="hljs-comment">//2</span><br>        <span class="hljs-comment">//System.out.println(Arrays.toString(bytes));//[65, 66]</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//String(byte[] bytes) :把字节数组转换为字符串</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<span class="hljs-comment">//AB</span><br>        len = fis.read(bytes);<br>        System.out.println(len);<span class="hljs-comment">//2</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<span class="hljs-comment">//CD</span><br>        len = fis.read(bytes);<br>        System.out.println(len);<span class="hljs-comment">//1</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//String(byte[] bytes, int offset, int length) 把字节数组的一部分转换为字符串 offset:数组的开始索引 length:转换的字节个数</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">0</span>,len));<br>        <span class="hljs-comment">//System.out.println(new String(bytes)); ED 错于当数组容量大于剩余字节时，上次读取的数据没有被完全替换而重复读取，所以要通过 len ，获取有效的字节.</span><br>        len = fis.read(bytes);<br>        System.out.println(len);<span class="hljs-comment">//-1       </span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        byte[] bytes = new byte[1024];</span><br><span class="hljs-comment">        int len = 0;</span><br><span class="hljs-comment">        while((len = fis.read(bytes))!=-1)&#123;</span><br><span class="hljs-comment">            //</span><br><span class="hljs-comment">            //当数组容量大于读取内容时，直接转换成字符串会生成大量空格，所以只转换有效字节</span><br><span class="hljs-comment">            System.out.println(new String(bytes,0,len));</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br> <br>        <span class="hljs-comment">//3.</span><br>        fis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="BufferedInputStream（缓冲字节流）"><a href="#BufferedInputStream（缓冲字节流）" class="headerlink" title="BufferedInputStream（缓冲字节流）"></a>BufferedInputStream（缓冲字节流）</h2><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><p>BufferedInputStream(InputStream in)<br>          创建一个 BufferedInputStream 并保存其参数，即输入流 in，以便将来使用。</p><h3 id="读取方法-1"><a href="#读取方法-1" class="headerlink" title="读取方法"></a>读取方法</h3><p> int read()<br>          参见 InputStream 的 read 方法的常规协定。<br> int read(byte[] b, int off, int len)<br>          从此字节输入流中给定偏移量处开始将各字节读取到指定的 byte 数组中。 </p><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>缓冲字节流是为高效率而设计的，真正的读写操作还是靠<code>FileOutputStream</code>和<code>FileInputStream</code>，所以其构造方法入参是这两个类的对象也就不奇怪了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">// 缓冲字节流，提高了效率</span><br><span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file, <span class="hljs-literal">true</span>));<br><br><span class="hljs-comment">// 要写入的字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;松下问童子，言师采药去。只在此山中，云深不知处。&quot;</span>;<br><span class="hljs-comment">// 写入文件</span><br>bis.write(string.getBytes());<br><span class="hljs-comment">// 关闭流</span><br>bis.close();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">read</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file));<br><br><span class="hljs-comment">// 一次性取多少个字节</span><br><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">// 用来接收读取的字节数组</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-comment">// 读取到的字节数组长度，为-1时表示没有数据</span><br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 循环取数据</span><br><span class="hljs-keyword">while</span> ((length = fis.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 将读取的内容转换成字符串</span><br>sb.append(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span>, length));<br>&#125;<br><span class="hljs-comment">// 关闭流</span><br>fis.close();<br><br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h2><p>InputStreamReader 是字节流通向字符流的桥梁</p><h3 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h3><p>InputStreamReader(InputStream in)<br>          创建一个使用默认字符集的 InputStreamReader。<br>InputStreamReader(InputStream in, Charset cs)<br>          创建使用给定字符集的 InputStreamReader。<br>InputStreamReader(InputStream in, CharsetDecoder dec)<br>          创建使用给定字符集解码器的 InputStreamReader。<br>InputStreamReader(InputStream in, String charsetName)<br>          创建使用指定字符集的 InputStreamReader。 </p><h3 id="读取方法-2"><a href="#读取方法-2" class="headerlink" title="读取方法"></a>读取方法</h3><p>int read()<br>          读取单个字符。<br> int read(char[] cbuf, int offset, int length)<br>          将字符读入数组中的某一部分。 </p><h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><p><strong>字符流适用于文本文件的读写</strong>，<code>OutputStreamWriter</code>类其实也是借助<code>FileOutputStream</code>类实现的，故其构造方法是<code>FileOutputStream</code>的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">// OutputStreamWriter可以显示指定字符集，否则使用默认字符集</span><br><span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file, <span class="hljs-literal">true</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br><span class="hljs-comment">// 要写入的字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;松下问童子，言师采药去。只在此山中，云深不知处。&quot;</span>;<br>osw.write(string);<br>osw.close();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">read</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-comment">// 字符数组：一次读取多少个字符</span><br><span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">// 每次读取的字符数组先append到StringBuilder中</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-comment">// 读取到的字符数组长度，为-1时表示没有数据</span><br><span class="hljs-type">int</span> length;<br><span class="hljs-comment">// 循环取数据</span><br><span class="hljs-keyword">while</span> ((length = isr.read(chars)) != -<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 将读取的内容转换成字符串</span><br>sb.append(chars, <span class="hljs-number">0</span>, length);<br>&#125;<br><span class="hljs-comment">// 关闭流</span><br>isr.close();<br><br><span class="hljs-keyword">return</span> sb.toString()<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><p>Java提供了<code>FileWriter</code>和<code>FileReader</code>简化字符流的读写，<code>new FileReader(file)</code>等同于<code>new InputStreamReader(new FileInputStream(file, true))</code></p><h3 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h3><p>FileReader(File file)<br>          在给定从中读取数据的 File 的情况下创建一个新 FileReader。<br>FileReader(String fileName)<br>          在给定从中读取数据的文件名的情况下创建一个新 FileReader。 </p><h3 id="读取方法-3"><a href="#读取方法-3" class="headerlink" title="读取方法"></a>读取方法</h3><p>和InputStreamReader的方法一样，都是从InputStreamReader那里继承的</p><h3 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file, <span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 要写入的字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;松下问童子，言师采药去。只在此山中，云深不知处。&quot;</span>;<br>fw.write(string);<br>fw.close();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">read</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file);<br><span class="hljs-comment">// 一次性取多少个字节</span><br><span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">// 用来接收读取的字节数组</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-comment">// 读取到的字节数组长度，为-1时表示没有数据</span><br><span class="hljs-type">int</span> length;<br><span class="hljs-comment">// 循环取数据</span><br><span class="hljs-keyword">while</span> ((length = fr.read(chars)) != -<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 将读取的内容转换成字符串</span><br>sb.append(chars, <span class="hljs-number">0</span>, length);<br>&#125;<br><span class="hljs-comment">// 关闭流</span><br>fr.close();<br><br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="BufferedReader（字符缓冲流）"><a href="#BufferedReader（字符缓冲流）" class="headerlink" title="BufferedReader（字符缓冲流）"></a>BufferedReader<strong>（字符缓冲流）</strong></h2><h3 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h3><p>BufferedReader(Reader in)<br>          创建一个使用默认大小输入缓冲区的缓冲字符输入流。<br>BufferedReader(Reader in, int sz)<br>          创建一个使用指定大小输入缓冲区的缓冲字符输入流。 </p><h3 id="读取方法-4"><a href="#读取方法-4" class="headerlink" title="读取方法"></a>读取方法</h3><p> int read()<br>          读取单个字符。<br> int read(char[] cbuf, int off, int len)<br>          将字符读入数组的某一部分。<br> String readLine()<br>          读取一个文本行。 </p><h3 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h3><p>整个文档里面只有它是支持readline的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">// BufferedWriter fw = new BufferedWriter(new OutputStreamWriter(new</span><br><span class="hljs-comment">// FileOutputStream(file, true), &quot;UTF-8&quot;));</span><br><span class="hljs-comment">// FileWriter可以大幅度简化代码</span><br><span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(file, <span class="hljs-literal">true</span>));<br><br><span class="hljs-comment">// 要写入的字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;松下问童子，言师采药去。只在此山中，云深不知处。&quot;</span>;<br>bw.write(string);<br>bw.close();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">read</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file));<br><span class="hljs-comment">// 用来接收读取的字节数组</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br><span class="hljs-comment">// 按行读数据</span><br>String line;<br><span class="hljs-comment">// 循环取数据</span><br><span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 将读取的内容转换成字符串</span><br>sb.append(line);<br>&#125;<br><span class="hljs-comment">// 关闭流</span><br>br.close();<br><br><span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="InputStreamReader类与FileReader类关系"><a href="#InputStreamReader类与FileReader类关系" class="headerlink" title="InputStreamReader类与FileReader类关系"></a>InputStreamReader类与FileReader类关系</h2><p>1、FileReader类仅仅是InputStreamReader的简单衍生并未扩展任何功能</p><p>2、FileReader类读取数据实质是InputStreamReader类在读取，而InputStreamReader读取数据实际是StreamDecoder类读取</p><p>3、因此在使用字符输入流的时候实际是StreamDecoder类在发挥作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InputStreamReader</span><br></code></pre></td></tr></table></figure><h2 id="System-in"><a href="#System-in" class="headerlink" title="System.in"></a>System.in</h2><p>static InputStream in<br>          “标准”输入流。 </p><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><p>实现的接口： <code>Iterator&lt;String&gt; </code></p><h3 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h3><p>Scanner(File source)<br>          构造一个新的 Scanner，它生成的值是从指定文件扫描的。<br>Scanner(InputStream source)<br>          构造一个新的 Scanner，它生成的值是从指定的输入流扫描的。<br>Scanner(Readable source)<br>          构造一个新的 Scanner，它生成的值是从指定源扫描的。<br>Scanner(String source)<br>          构造一个新的 Scanner，它生成的值是从指定字符串扫描的。 </p><p>此外还有的构造方法在以上的基础上，可以允许程序员指定字符集</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>boolean hasNextInt()<br>          如果通过使用 nextInt() 方法，此扫描器输入信息中的下一个标记可以解释为默认基数中的一个 int 值，则返回 true。<br>boolean hasNextLine()<br>          如果在此扫描器的输入中存在另一行，则返回 true。<br>int nextInt()<br>          将输入信息的下一个标记扫描为一个 int。<br>String nextLine()<br>          此扫描器执行当前行，并返回跳过的输入信息。 </p><p>此外，还有nextByte nextFloat nextDouble hasNextFloat这种方法</p><h3 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h3><p>一个可以使用正则表达式来解析基本类型和字符串的简单文本扫描器。</p><p>以下代码使用户能够从 <code>System.in</code> 中读取一个数： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt();<br></code></pre></td></tr></table></figure><p>以下代码使 <code>long</code> 类型可以通过 <code>myNumbers</code> 文件中的项分配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;myNumbers&quot;</span>));<br>      <span class="hljs-keyword">while</span> (sc.hasNextLong()) &#123;<br>          <span class="hljs-type">long</span> <span class="hljs-variable">aLong</span> <span class="hljs-operator">=</span> sc.nextLong();<br>      &#125;<br></code></pre></td></tr></table></figure><p>可以看出一般next和hasNext是一起用的</p><p>它可以通过<code>File</code> <code>String</code> <code>inputStream</code>进行构造</p><h1 id="JavaO"><a href="#JavaO" class="headerlink" title="JavaO"></a>JavaO</h1><h2 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h2><h3 id="构造方法-6"><a href="#构造方法-6" class="headerlink" title="构造方法"></a>构造方法</h3><p>FileOutputStream(File file)<br>          创建一个向指定 File 对象表示的文件中写入数据的文件输出流。<br>FileOutputStream(File file, boolean append)<br>          创建一个向指定 File 对象表示的文件中写入数据的文件输出流。<br>FileOutputStream(String name)<br>          创建一个向具有指定名称的文件中写入数据的输出文件流。<br>FileOutputStream(String name, boolean append)<br>          创建一个向具有指定 name 的文件中写入数据的输出文件流。 </p><h3 id="写入方法"><a href="#写入方法" class="headerlink" title="写入方法"></a>写入方法</h3><p>void write(byte[] b)<br>          将 b.length 个字节从指定 byte 数组写入此文件输出流中。<br> void write(byte[] b, int off, int len)<br>          将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此文件输出流。<br> void write(int b)<br>          将指定字节写入此文件输出流。 </p><h2 id="BufferedOutputStream"><a href="#BufferedOutputStream" class="headerlink" title="BufferedOutputStream"></a>BufferedOutputStream</h2><h3 id="构造方法-7"><a href="#构造方法-7" class="headerlink" title="构造方法"></a>构造方法</h3><p>BufferedOutputStream(OutputStream out)<br>          创建一个新的缓冲输出流，以将数据写入指定的底层输出流。<br>BufferedOutputStream(OutputStream out, int size)<br>          创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流。 </p><h3 id="写入方法-1"><a href="#写入方法-1" class="headerlink" title="写入方法"></a>写入方法</h3><p>void flush()<br>          刷新此缓冲的输出流。<br>void write(byte[] b, int off, int len)<br>          将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此缓冲的输出流。<br>void write(int b)<br>          将指定的字节写入此缓冲的输出流。 </p><h2 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h2><p>OutputStreamWriter 是字符流通向字节流的桥梁</p><h3 id="构造方法-8"><a href="#构造方法-8" class="headerlink" title="构造方法"></a>构造方法</h3><p>OutputStreamWriter(OutputStream out)<br>          创建使用默认字符编码的 OutputStreamWriter。<br>OutputStreamWriter(OutputStream out, Charset cs)<br>          创建使用给定字符集的 OutputStreamWriter。<br>OutputStreamWriter(OutputStream out, CharsetEncoder enc)<br>          创建使用给定字符集编码器的 OutputStreamWriter。<br>OutputStreamWriter(OutputStream out, String charsetName)<br>          创建使用指定字符集的 OutputStreamWriter。 </p><h3 id="写入方法-2"><a href="#写入方法-2" class="headerlink" title="写入方法"></a>写入方法</h3><p> void flush()<br>          刷新该流的缓冲。<br> void write(char[] cbuf, int off, int len)<br>          写入字符数组的某一部分。<br> void write(int c)<br>          写入单个字符。<br> void write(String str, int off, int len)<br>          写入字符串的某一部分。 </p><h2 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h2><h3 id="构造方法-9"><a href="#构造方法-9" class="headerlink" title="构造方法"></a>构造方法</h3><p>FileWriter(File file)<br>          根据给定的 File 对象构造一个 FileWriter 对象。<br>FileWriter(File file, boolean append)<br>          根据给定的 File 对象构造一个 FileWriter 对象。<br>FileWriter(String fileName)<br>          根据给定的文件名构造一个 FileWriter 对象。<br>FileWriter(String fileName, boolean append)<br>          根据给定的文件名以及指示是否附加写入数据的 boolean 值来构造 FileWriter 对象。 </p><h3 id="写入方法-3"><a href="#写入方法-3" class="headerlink" title="写入方法"></a>写入方法</h3><p>和OutputStreamWriter一样，继承于OutputStreamWriter</p><h2 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h2><h3 id="构造方法-10"><a href="#构造方法-10" class="headerlink" title="构造方法"></a>构造方法</h3><p>BufferedWriter(Writer out)<br>          创建一个使用默认大小输出缓冲区的缓冲字符输出流。<br>BufferedWriter(Writer out, int sz)<br>          创建一个使用给定大小输出缓冲区的新缓冲字符输出流。 </p><h3 id="写入方法-4"><a href="#写入方法-4" class="headerlink" title="写入方法"></a>写入方法</h3><p> void flush()<br>          刷新该流的缓冲。<br> void newLine()<br>          写入一个行分隔符。<br> void write(char[] cbuf, int off, int len)<br>          写入字符数组的某一部分。<br> void write(int c)<br>          写入单个字符。<br> void write(String s, int off, int len)<br>          写入字符串的某一部分。 </p><h2 id="System-out"><a href="#System-out" class="headerlink" title="System.out"></a>System.out</h2><p>static PrintStream out<br>          “标准”输出流。 </p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java转型</title>
    <link href="/2023/03/22/java%E8%BD%AC%E5%9E%8B/"/>
    <url>/2023/03/22/java%E8%BD%AC%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="向上转型与向下转型"><a href="#向上转型与向下转型" class="headerlink" title="向上转型与向下转型"></a>向上转型与向下转型</h1><p>类型转换只是转换看待对象的引用的类型，对象本身没有也不可能参与转换</p><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p>父类引用可以自动指向子类对象，但只能访问和调用到来自于父类的属性和行为</p><p>调用属性看父类，调用方法先看子类，子类没有，再看父类，如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;father&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Father fun&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;son&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Son fun&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Father f=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>(); <br>System.out.println(f.name); <span class="hljs-comment">// 输出 &quot;father&quot;</span><br>f.fun();<span class="hljs-comment">// 输出 &quot;Son fun&quot;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h2><p>把父类引用赋给子类引用，语法上必须使用强制类型转换，要想运行也成功还必须保证父类引用指向的对象一定是该子类对象（最好使用instance判断后，再强转）</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>参考网址：<a href="http://c.biancheng.net/view/6503.html">Java对象类型转换：向上转型和向下转型 </a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Animal：动物&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">staticName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Animal：可爱的动物&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal：吃饭&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticEat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal：动物在吃饭&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Cat：猫&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Cat：可爱的小猫&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">staticName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dog：我是喵星人&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat：吃饭&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">staticEat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat：猫在吃饭&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eatMethod</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Cat：猫喜欢吃鱼&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//Cat cat = new Animal();// 出错</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) animal; <span class="hljs-comment">// 向下转型</span><br>        System.out.println(animal.name); <span class="hljs-comment">// 输出Animal类的name变量</span><br>        System.out.println(animal.staticName); <span class="hljs-comment">// 输出Animal类的staticName变量</span><br>        animal.eat(); <span class="hljs-comment">// 输出Cat类的eat()方法</span><br>        animal.staticEat(); <span class="hljs-comment">// 输出Animal类的staticEat()方法</span><br>        System.out.println(cat.str); <span class="hljs-comment">// 调用Cat类的str变量</span><br>        cat.eatMethod(); <span class="hljs-comment">// 调用Cat类的eatMethod()方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="强制对象类型转换"><a href="#强制对象类型转换" class="headerlink" title="强制对象类型转换"></a>强制对象类型转换</h2><p>Java 编译器允许在具有直接或间接继承关系的类之间进行类型转换。对于向下转型，必须进行强制类型转换；对于向上转型，不必使用强制类型转换。</p><p>例如，对于一个引用类型的变量，Java 编译器按照它声明的类型来处理。如果使用 animal 调用 str 和 eatMethod() 方法将会出错，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">animal.str = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-comment">// 编译出错，提示Animal类中没有str属性</span><br>animal.eatMethod();    <span class="hljs-comment">// 编译出错，提示Animal类中没有eatMethod()方法</span><br></code></pre></td></tr></table></figure><p>如果要访问 Cat 类的成员，必须通过强制类型转换，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">((Cat)animal).str = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-comment">// 编译成功</span><br>((Cat)animal).eatMethod();    <span class="hljs-comment">// 编译成功</span><br></code></pre></td></tr></table></figure><p>把 Animal 对象类型强制转换为 Cat 对象类型，这时上面两句编译成功。对于如下语句，由于使用了强制类型转换，所以也会编译成功，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat)animal;    <span class="hljs-comment">// 编译成功，将Animal对象类型强制转换为Cat对象类型</span><br></code></pre></td></tr></table></figure><p>类型强制转换时想运行成功就必须保证父类引用指向的对象一定是该子类对象，最好使用 instanceof 运算符判断后，再强转，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Cat) <br>&#123;    <br>    <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) animal; <span class="hljs-comment">// 向下转型    ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>子类的对象可以转换成父类类型，而父类的对象实际上无法转换为子类类型。因为通俗地讲，父类拥有的成员子类肯定也有，而子类拥有的成员，父类不一定有。因此，对于向上转型，不必使用强制类型转换。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> cat;    <span class="hljs-comment">// 向上转型，不必使用强制类型转换</span><br></code></pre></td></tr></table></figure><p>如果两种类型之间没有继承关系，那么将不允许进行类型转换。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat)dog;    <span class="hljs-comment">// 编译出错，不允许把Dog对象类型转换为Cat对象类型</span><br></code></pre></td></tr></table></figure><h1 id="隐式转型与显式转型"><a href="#隐式转型与显式转型" class="headerlink" title="隐式转型与显式转型"></a>隐式转型与显式转型</h1><h2 id="隐式转型"><a href="#隐式转型" class="headerlink" title="隐式转型"></a>隐式转型</h2><p><strong>隐式转换也叫自动类型转换，指的是不需要调用函数，JVM自动将类型转换的一种方式。因为这种类型转换经常使用，Java语言在设计时，为了减轻开发人员的负担，都交给JVM来自动处理。</strong></p><p>1)转换规则从存储范围小的类型到存储范围大的类型(只有前面的数据才能随便转换为后边的)<br>byte—&gt; short,char—&gt; int —&gt; long—&gt; float —&gt; double<br>2)例子：<br>byte b &#x3D; 2; short s &#x3D; b; 首先JVM会将b的值转换为short类型，再将值赋值给s</p><h2 id="显式转型"><a href="#显式转型" class="headerlink" title="显式转型"></a>显式转型</h2><p><strong>显示转换也叫强制类型转换，指的是需要手动去处理才能完成的类型转换。该转换会存在精度损失。</strong><br>1)转换规则从存储范围大的类型到存储范围小的类型<br>double→float→long→int→short(char)→byte<br>2)例子：<br>double d &#x3D; 1.1; int i &#x3D; (int)d;<br>首先将d的值转换成int类型，然后赋值给变量i。需要注意的是小数强制转换为整数，采用的是“去1法”，也就是舍弃小数点后面所有数字，则以上转换出的结果是1。整数强制转换为整数时取数字的低位，例如int类型的变量转换为byte类型时，则只去int类型的低8位(也就是最后一个字节)的值。</p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java review</title>
    <link href="/2023/03/22/java-review/"/>
    <url>/2023/03/22/java-review/</url>
    
    <content type="html"><![CDATA[<h1 id="java复习"><a href="#java复习" class="headerlink" title="java复习"></a>java复习</h1><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p>示例：<a href="https://www.processon.com/view/link/633bec4ef346fb07dea52d90">UML类图-校园活动管理系统</a></p><p>在关联关系中注意：箭头方向(单向关联&#x2F;双向关联)，对应数量(1..*)，引用名(单向关联&#x2F;双向关联)【书本15页】</p><p>在继承关系中注意：箭头方向【书本18页】</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="形参按值传递"><a href="#形参按值传递" class="headerlink" title="形参按值传递"></a>形参按值传递</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;a++;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br>fun(num);<br>System.out.println(num);<span class="hljs-comment">//输出0</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(String s)</span> &#123;s=<span class="hljs-string">&quot;world&quot;</span>;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>String string=<span class="hljs-string">&quot;hello&quot;</span>;<br>fun(string);<br>System.out.println(string);<span class="hljs-comment">//输出 hello</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>方法名相同但是参数列表不同</p><p>xxxxxxxxxx1 1conda create -n new_env –clone exist_envsh</p><h4 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li>方法名必须相同</li><li>参数列表必须不同(参数类型或个数或顺序，至少有一样不同)</li><li>返回类型没有要求</li></ol><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><h3 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h3><p>此变量需在定义时或在类构造函数中初始化</p><h3 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h3><p>此方法可被子类继承，但不能被子类覆写</p><h3 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h3><p>此类不能被继承</p><h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><ul><li><p>public:公开的，整体可见</p></li><li><p>private:只能被类自身访问</p></li><li><p>protected:只能被以下三种之一访问</p><ol><li><p>该类自己</p></li><li><p>同包的其他类</p></li><li><p>其他包中该类的子类</p></li></ol></li><li><p>缺省:可被同包的其他类访问</p></li></ul><h2 id="与equals"><a href="#与equals" class="headerlink" title="==与equals"></a><code>==</code>与<code>equals</code></h2><p>如果是基本数据类型，&#x3D;&#x3D;判断的是值</p><p>如果是对象类型，&#x3D;&#x3D;判断的是对象的地址</p><p>通过直接赋值而不是new的方式给String赋值，如果字符串常量池中有该对象，则不会再创建，此时通过 &#x3D;&#x3D; 判断，返回的是true。如：String str&#x3D;“wo”；String str1&#x3D;“wo”;str &#x3D;&#x3D; str1为true.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>String s1=<span class="hljs-string">&quot;hello&quot;</span>;<br>String s2=<span class="hljs-string">&quot;hello&quot;</span>;<br>String s3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(s1==s2);<span class="hljs-comment">//true</span><br>System.out.println(s1==s3);<span class="hljs-comment">//false</span><br>System.out.println(s1.equals(s3));<span class="hljs-comment">//true</span><br><span class="hljs-type">int</span> num1=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> num2=<span class="hljs-number">1</span>;<br>System.out.println(num1==num2);<span class="hljs-comment">//true</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><h3 id="基本数据类型转字符串"><a href="#基本数据类型转字符串" class="headerlink" title="基本数据类型转字符串"></a>基本数据类型转字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>String str1=String.valueOf(<span class="hljs-number">123</span>);<br>String str2=String.valueOf(<span class="hljs-literal">true</span>);<br>String str3=Integer.toString(<span class="hljs-number">456</span>);<br>System.out.println(str1);<br>System.out.println(str2);<br>System.out.println(str3);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串转基本数据类型"><a href="#字符串转基本数据类型" class="headerlink" title="字符串转基本数据类型"></a>字符串转基本数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> num1=Integer.valueOf(<span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-type">int</span> num2=Integer.parseInt(<span class="hljs-string">&quot;456&quot;</span>);<br>System.out.println(num1);<br>System.out.println(num2);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in)) &#123;<br>            a = scanner.nextInt();<br>            b = scanner.nextInt();<br>            System.out.println(a / b);<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException exception) &#123;<br>        System.out.println(<span class="hljs-string">&quot;除数为0&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;程序结束&quot;</span>);<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="throw-throws"><a href="#throw-throws" class="headerlink" title="throw-throws"></a>throw-throws</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> num1,<span class="hljs-type">int</span> num2)</span> <span class="hljs-keyword">throws</span> ArithmeticException&#123;<br><span class="hljs-keyword">if</span>(num2==<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArithmeticException</span>();<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> num1/num2;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in)) &#123;<br>            a = scanner.nextInt();<br>            b = scanner.nextInt();<br>            System.out.println(div(a,b));<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException exception) &#123;<br>        System.out.println(<span class="hljs-string">&quot;除数为0&quot;</span>);<br>        exception.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;程序结束&quot;</span>);<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="javadoc"><a href="#javadoc" class="headerlink" title="javadoc"></a>javadoc</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 小明</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 求输入两个参数的和</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> m 加数1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> n 加数2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 和</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-keyword">return</span> m + n;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>String id;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;animal : eat&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String id)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.id = id;<br><span class="hljs-comment">// some code</span><br>&#125;<br><br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;dog : eat&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String id)</span> &#123;<br><span class="hljs-built_in">super</span>(id);<br><span class="hljs-comment">// some code</span><br>&#125;<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&quot;animal&quot;</span>);<br>a.eat();<br><span class="hljs-type">Dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;dog&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>子类必须调用父类的构造器，完成父类的初始化。（在子类的构造器中的第一个语句默认有<code>super();</code>它默认去调用父类的无参构造器）。这个父类的构造函数必须写在子类构造函数的第一行</p><h3 id="覆写"><a href="#覆写" class="headerlink" title="覆写"></a>覆写</h3><p>子类写一个方法名，参数列表，返回类型与父类相同的方法</p><p>返回类型也要一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>String id;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;animal : eat&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String id)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.id = id;<br><span class="hljs-comment">// some code</span><br>&#125;<br><br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>String <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//报错:The return type is incompatible with Animal.eat()</span><br>System.out.println(<span class="hljs-string">&quot;dog : eat&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;eat&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String id)</span> &#123;<br><span class="hljs-built_in">super</span>(id);<br><span class="hljs-comment">// some code</span><br>&#125;<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="静态类方法和类属性的继承"><a href="#静态类方法和类属性的继承" class="headerlink" title="静态类方法和类属性的继承"></a>静态类方法和类属性的继承</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Animal : name&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;animal : eat&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;animal : sleep&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dog : name&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;dog : eat&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><span class="hljs-type">Dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><br>Dog.eat();<span class="hljs-comment">// dog : eat</span><br>a.eat();<span class="hljs-comment">// animal : eat</span><br>d.eat();<span class="hljs-comment">// dog : eat</span><br>System.out.println(a.name);<span class="hljs-comment">// Animal : name</span><br>System.out.println(d.name);<span class="hljs-comment">// Dog : name</span><br>System.out.println(Dog.name);<span class="hljs-comment">// Dog : name</span><br>Dog.sleep();<span class="hljs-comment">// 这行可以运行 输出结果是 animal : sleep</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>得出如下结论:父类中的静态成员变量和方法是可以被子类继承的,但是不能被自己重写,无法形成多态.</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p><strong>静态方法绑定类，在类加载时便与该类捆绑，不受其他类影响</strong></p><p><strong>而动态方法绑定实例对象，受子类重写的影响，若被重写即绑定到重写它的那个实例对象上</strong></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*初始化*/</span><br>List&lt;Integer&gt; l = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-comment">/*添加*/</span><br>l.add(<span class="hljs-number">1</span>);<br>l.add(<span class="hljs-number">2</span>);<br>l.add(<span class="hljs-number">3</span>);<br>l.add(<span class="hljs-number">4</span>);<br>        <span class="hljs-comment">/*获取*/</span><br>System.out.println(l.get(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 2</span><br>        <span class="hljs-comment">/*删除*/</span><br>l.remove(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">/*遍历*/</span><br>Iterator&lt;Integer&gt; i=l.iterator();<br><span class="hljs-keyword">while</span>(i.hasNext()) &#123;<br>System.out.println(i.next());<span class="hljs-comment">// 1 3 4</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三种遍历列表的方法"><a href="#三种遍历列表的方法" class="headerlink" title="三种遍历列表的方法"></a>三种遍历列表的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Product&gt; l_Products=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Product&gt;();<br><span class="hljs-comment">//choose one of the three following methods</span><br><span class="hljs-comment">//for-each</span><br><span class="hljs-keyword">for</span>(Product l_Product:l_Products)<br>&#123;<br>System.out.println(l_Product);<br>&#125;<br><br><span class="hljs-comment">//ArrayList&lt;&gt;.get</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;l_Products.size();i++)<br>&#123;<br>System.out.println(l_Products.get(i));<br>&#125;<br><br><br><span class="hljs-comment">//Iterator</span><br>Iterator&lt;Product&gt; iterator_Product=l_Products.iterator();<br><span class="hljs-keyword">while</span>(iterator_Product.hasNext())<br>&#123;<br>System.out.println(iterator_Product.next());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span><br><span class="hljs-comment">//在实例化泛型类时，必须指定T的具体类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic</span>&lt;T&gt; &#123;<br><span class="hljs-comment">// key这个成员变量的类型为T,T的类型由外部指定</span><br><span class="hljs-keyword">private</span> T key;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Generic</span><span class="hljs-params">(T key)</span> &#123; <span class="hljs-comment">// 泛型构造方法形参key的类型也为T，T的类型由外部指定</span><br><span class="hljs-built_in">this</span>.key = key;<br>&#125;<br><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 泛型方法getKey的返回值类型为T，T的类型由外部指定</span><br><span class="hljs-keyword">return</span> key;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 泛型的类型参数只能是类类型（包括自定义类），不能是简单类型</span><br><span class="hljs-comment">// 传入的实参类型需与泛型的类型参数类型相同，即为Integer.</span><br>Generic&lt;Integer&gt; genericInteger = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;Integer&gt;(<span class="hljs-number">2023</span>);<br><span class="hljs-comment">// 也可以这样定义，但是会警告，所以还是尽量避免</span><br><span class="hljs-type">Generic</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;Integer&gt;(<span class="hljs-number">2024</span>);<br><span class="hljs-type">Generic</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>(<span class="hljs-number">2025</span>);<br><br><span class="hljs-comment">// 传入的实参类型需与泛型的类型参数类型相同，即为String.</span><br>Generic&lt;String&gt; genericString = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;String&gt;(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + genericInteger.getKey());<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + genericString.getKey());<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + t1.getKey());<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + t2.getKey());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="初始化问题"><a href="#初始化问题" class="headerlink" title="初始化问题"></a>初始化问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//List l1=new ArrayList&lt;int&gt;();// 无法被正确初始化</span><br>List l2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>ArrayList l3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-comment">//ArrayList&lt;&gt; l4=new ArrayList&lt;String&gt;();// 无法被正确初始化</span><br>ArrayList&lt;String&gt; l5=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>List&lt;String&gt; l6=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>List&lt;String&gt; l7=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//List&lt;&gt; l8=new ArrayList&lt;&gt;();// 无法被正确初始化</span><br>List l9=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结，泛型中不能填基本数据类型，<code>=</code>号前面不能有空的<code>&lt;&gt;</code>，<code>=</code>号后面可以进行一些省略(会被警告)，但是最好还是不要偷懒，要写规范，否则会出一些问题</p><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><p>语法：修饰符 Class 类名称 &lt;泛型类型&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span><br><span class="hljs-comment">//在实例化泛型类时，必须指定T的具体类型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic</span>&lt;T&gt; &#123;<br><span class="hljs-comment">// key这个成员变量的类型为T,T的类型由外部指定</span><br><span class="hljs-keyword">private</span> T key;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Generic</span><span class="hljs-params">(T key)</span> &#123; <span class="hljs-comment">// 泛型构造方法形参key的类型也为T，T的类型由外部指定</span><br><span class="hljs-built_in">this</span>.key = key;<br>&#125;<br><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 泛型方法getKey的返回值类型为T，T的类型由外部指定</span><br><span class="hljs-keyword">return</span> key;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 泛型的类型参数只能是类类型（包括自定义类），不能是简单类型</span><br><span class="hljs-comment">// 传入的实参类型需与泛型的类型参数类型相同，即为Integer.</span><br>Generic&lt;Integer&gt; genericInteger = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;Integer&gt;(<span class="hljs-number">2023</span>);<br><span class="hljs-comment">// 传入的实参类型需与泛型的类型参数类型相同，即为String.</span><br>Generic&lt;String&gt; genericString = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;String&gt;(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + genericInteger.getKey());<br>System.out.println(<span class="hljs-string">&quot;key is &quot;</span> + genericString.getKey());<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><p>泛型方法的格式：修饰符 &lt;泛型变量&gt; 方法返回值 方法名称(形参列表){方法体}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(T t)</span> &#123;System.out.println(t);&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>show(<span class="hljs-number">123</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><p>泛型接口的格式：修饰符 interface 接口名称&lt;泛型变量&gt;{}</p><h5 id="实现类也是泛型类"><a href="#实现类也是泛型类" class="headerlink" title="实现类也是泛型类"></a>实现类也是泛型类</h5><p>若实现类也是泛型类，实现类和接口的泛型类型要一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 泛型接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Generator</span>&lt;T&gt; &#123;<br>    T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 泛型接口的实现类，是一个泛型类，</span><br><span class="hljs-comment"> * 那么要保证实现接口的泛型类泛型标识包含泛型接口的泛型标识</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span>&lt;T,E&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Generator</span>&lt;T&gt; &#123;<br> <br>    <span class="hljs-keyword">private</span> T key;<br>    <span class="hljs-keyword">private</span> E value;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">(T key, E value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.key = key;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure><h5 id="实现类不是泛型类"><a href="#实现类不是泛型类" class="headerlink" title="实现类不是泛型类"></a>实现类不是泛型类</h5><p>若实现类不是泛型类，接口要明确数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现泛型接口的类，不是泛型类，需要明确实现泛型接口的数据类型。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Apple</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Generator</span>&lt;String&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello generic&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>初始化及遍历</p><p>注意：给数组分配空间时，必须指定数组能够存储的元素个数来确定数组大小。创建数组之后不能修改数组的大小。可以使用length 属性获取数组的大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">/*初始化*/</span><br><span class="hljs-type">int</span> a[]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span>[] b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>&#125;;<br><span class="hljs-type">int</span>[] c=&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>&#125;;<br><span class="hljs-comment">//注意：给数组分配空间时，必须指定数组能够存储的元素个数来确定数组大小。</span><br>        <span class="hljs-comment">//创建数组之后不能修改数组的大小。可以使用length 属性获取数组的大小。</span><br><span class="hljs-comment">//int d[];d= &#123;1,2,3&#125;;//错误</span><br><span class="hljs-comment">//int e[5]=new int[5];//错误</span><br>        <br><span class="hljs-comment">/*遍历，使用length属性*/</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;b.length;i++) &#123;<br>System.out.println(b[i]);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><ul><li>抽象类不能被<code>new</code>实例化</li><li>任何子类必须重写父类的抽象方法，或者声明自身为抽象类。</li><li>构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法</li><li>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类</li><li>抽象类实现接口，可以不实现接口的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> width; <span class="hljs-comment">// 几何图形的长</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> height; <span class="hljs-comment">// 几何图形的宽</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Shape</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span> &#123;<br>        <span class="hljs-built_in">this</span>.width = width;<br>        <span class="hljs-built_in">this</span>.height = height;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 定义抽象方法，计算面积</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Shape</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Square</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span> &#123;<br>        <span class="hljs-built_in">super</span>(width, height);<br>    &#125;<br>    <span class="hljs-comment">// 重写父类中的抽象方法，实现计算正方形面积的功能</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> width * height;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br> <span class="hljs-type">Square</span> <span class="hljs-variable">square</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Square</span>(<span class="hljs-number">5</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 创建正方形类对象</span><br>     System.out.println(<span class="hljs-string">&quot;正方形的面积为：&quot;</span> + square.area());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">travel</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MammalInt</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Animal</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Mammal eats&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">travel</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Mammal travels&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">noOfLegs</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-comment">// 可以用接口来指向实现了的类的示例</span><br><span class="hljs-type">Animal</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MammalInt</span>();<br><span class="hljs-comment">//MammalInt m = new MammalInt();//当然也可以这样定义</span><br>m.eat();<br>m.travel();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="与class的区别"><a href="#与class的区别" class="headerlink" title="与class的区别"></a>与class的区别</h3><ul><li><p><strong>接口不能用于实例化对象。</strong></p></li><li><p><strong>接口没有构造方法。</strong></p></li><li><p><strong>接口中所有的方法必须是抽象方法</strong>，Java 8 之后 接口中可以使用 default 关键字修饰的非抽象方法。</p><p>​(接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 <strong>public abstract</strong>)</p></li><li><p><strong>接口不能包含成员变量</strong>，除了 static 和 final 变量。</p></li><li><p>接口不是被类继承了，而是要被类实现。</p></li><li><p>接口支持多继承。</p></li></ul><h3 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Sports</span><br>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHomeTeam</span><span class="hljs-params">(String name)</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setVisitingTeam</span><span class="hljs-params">(String name)</span>;<br>&#125;<br> <br><span class="hljs-comment">// 文件名: Football.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Football</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sports</span><br>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">homeTeamScored</span><span class="hljs-params">(<span class="hljs-type">int</span> points)</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visitingTeamScored</span><span class="hljs-params">(<span class="hljs-type">int</span> points)</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">endOfQuarter</span><span class="hljs-params">(<span class="hljs-type">int</span> quarter)</span>;<br>&#125;<br><br><span class="hljs-comment">/*接口可以多继承，而类不能</span><br><span class="hljs-comment">public interface Hockey extends Sports, Event</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h2><p>使用String类中的<code>split</code>方法分割</p><p> String[] split(String regex)<br>          根据给定正则表达式的匹配拆分此字符串。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>String sa[]=<span class="hljs-string">&quot;hello_world_!&quot;</span>.split(<span class="hljs-string">&quot;_&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;sa.length;i++) &#123;<br>System.out.println(sa[i]);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>StringTokenizer类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringTokenizer</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(<span class="hljs-string">&quot;this is a test&quot;</span>);<br><span class="hljs-keyword">while</span> (st.hasMoreTokens()) &#123;<br>    System.out.println(st.nextToken());<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>一个接口，需要实现<code>add</code>和<code>remove</code>和<code>size</code>等方法(不要求实现<code>get</code>)，不包含重复元素。正如其名称所暗示的，此接口模仿了数学上的 <em>set</em> 抽象。</p><p>实现了它的主要有<code>HashSet</code>和<code>TreeSet</code>等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>HashSet&lt;String&gt; hs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(); <span class="hljs-comment">// 创建HashSet对象</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> hs.add(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> hs.add(<span class="hljs-string">&quot;a&quot;</span>); <span class="hljs-comment">// 当向set集合中存储重复元素的时候返回为false</span><br><br>hs.add(<span class="hljs-string">&quot;b&quot;</span>);<br>hs.add(<span class="hljs-string">&quot;c&quot;</span>);<br>hs.add(<span class="hljs-string">&quot;d&quot;</span>);<br>System.out.println(hs); <span class="hljs-comment">// [d, b, c, a] 存取无序 并且去掉了重复元素</span><br>System.out.println(b1); <span class="hljs-comment">// true</span><br>System.out.println(b2); <span class="hljs-comment">// false</span><br>hs.remove(<span class="hljs-string">&quot;b&quot;</span>);<br><span class="hljs-keyword">for</span> (String string : hs) &#123; <span class="hljs-comment">// 只要能用迭代器迭代的,就可以使用增强for循环遍历</span><br>System.out.println(string);<span class="hljs-comment">// a c d</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>一个接口，需要实现<code>get</code>和<code>put</code>和<code>size</code>等方法</p><p>实现了它的主要有<code>HashMap</code>和<code>TreeMap</code>等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br><span class="hljs-comment">//创建Map对象</span><br>        Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,String&gt;();       <span class="hljs-comment">//数据采用的哈希表结构</span><br>        <span class="hljs-comment">//给map中添加元素</span><br>        map.put(<span class="hljs-string">&quot;星期一&quot;</span>, <span class="hljs-string">&quot;Monday&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;星期日&quot;</span>, <span class="hljs-string">&quot;Sunday&quot;</span>);<br>        System.out.println(map); <span class="hljs-comment">// &#123;星期日=Sunday, 星期一=Monday&#125;</span><br> <br>        <span class="hljs-comment">//当给Map中添加元素，会返回key对应的原来的value值，若key没有对应的值，返回null</span><br>        System.out.println(map.put(<span class="hljs-string">&quot;星期一&quot;</span>, <span class="hljs-string">&quot;Mon&quot;</span>)); <span class="hljs-comment">// Monday</span><br>        System.out.println(map); <span class="hljs-comment">// &#123;星期日=Sunday, 星期一=Mon&#125;</span><br> <br>        <span class="hljs-comment">//根据指定的key获取对应的value</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">en</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;星期日&quot;</span>);<br>        System.out.println(en); <span class="hljs-comment">// Sunday</span><br>        <br>        <span class="hljs-comment">//根据key删除元素,会返回key对应的value值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> map.remove(<span class="hljs-string">&quot;星期日&quot;</span>);<br>        System.out.println(value); <span class="hljs-comment">// Sunday</span><br>        System.out.println(map); <span class="hljs-comment">// &#123;星期一=Mon&#125;</span><br>        <br>        <span class="hljs-comment">/* 修改对应的值</span><br><span class="hljs-comment">        使用replace(key,newValue)，查找出HashMap中，指定的key的curValue，</span><br><span class="hljs-comment">        如果replace的入参oldValue和curValue相等，则执行put(key,newValue)，把入参newValue替换掉原来对应的值。</span><br><span class="hljs-comment">        */</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="变量默认值"><a href="#变量默认值" class="headerlink" title="变量默认值"></a>变量默认值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">static</span> String str;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> i;<br><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> b;<br><span class="hljs-keyword">static</span> <span class="hljs-type">char</span> c;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(str);<span class="hljs-comment">// null</span><br>    System.out.println(i);<span class="hljs-comment">// 0</span><br>    System.out.println(b);<span class="hljs-comment">// false</span><br>    System.out.println(c);<span class="hljs-comment">// &#x27;\0&#x27;</span><br>    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java内存的结构"><a href="#java内存的结构" class="headerlink" title="java内存的结构"></a>java内存的结构</h2><p>Java程序在运行时，需要在内存中的分配空间。为了提高运算效率，就对数据进行了不同空间的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p><p><strong>具体划分为如下5个内存空间：</strong></p><ul><li>栈：存放局部变量</li><li>堆：存放所有new出来的东西</li><li>方法区：被虚拟机加载的类信息、常量、静态常量等。</li><li>程序计数器(和系统相关)</li><li>本地方法栈</li></ul><h2 id="查漏补缺"><a href="#查漏补缺" class="headerlink" title="查漏补缺"></a>查漏补缺</h2><ol><li>char所占空间为2字节，因为unicode</li><li>全局变量可以不赋值，直接使用，因为有默认值，局部变量必须赋值后才能使用，因为没有默认值。</li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>review</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jquery</title>
    <link href="/2023/03/22/jquery/"/>
    <url>/2023/03/22/jquery/</url>
    
    <content type="html"><![CDATA[<h1 id="jquery笔记"><a href="#jquery笔记" class="headerlink" title="jquery笔记"></a>jquery笔记</h1><h2 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h2><p>【尚硅谷最新版JavaWeb全套教程,java web零基础入门完整版】 <a href="https://www.bilibili.com/video/BV1Y7411K7zz/?p=63&share_source=copy_web&vd_source=dd2f1030c390db245979ca6615985682">【尚硅谷最新版JavaWeb全套教程】</a></p><p>这是一篇围绕这个视频教程和jquery文档的笔记</p><h2 id="关于"><a href="#关于" class="headerlink" title="关于$"></a>关于$</h2><p>注意下面这个程序导入了”..&#x2F;script&#x2F;jquery-1.7.2.js”，请确保工作目录下有这个文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// window.onload = function () &#123;</span></span><br><span class="language-javascript"><span class="hljs-comment">// var btnObj = document.getElementById(&quot;btnId&quot;);</span></span><br><span class="language-javascript"><span class="hljs-comment">// // alert(btnObj);//[object HTMLButtonElement]   ====&gt;&gt;&gt;  dom对象</span></span><br><span class="language-javascript"><span class="hljs-comment">// btnObj.onclick = function () &#123;</span></span><br><span class="language-javascript"><span class="hljs-comment">// alert(&quot;js 原生的单击事件&quot;);</span></span><br><span class="language-javascript"><span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"><span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 表示页面加载完成 之后，相当 window.onload = function () &#123;&#125;</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> $btnObj = $(<span class="hljs-string">&quot;#btnId&quot;</span>); <span class="hljs-comment">// 表示按id查询标签对象，返回的是一个jquery对象</span></span><br><span class="language-javascript">$btnObj.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 绑定单击事件</span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;jQuery 的单击事件&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnId&quot;</span>&gt;</span>SayHello<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>$()里面如果放一个函数，意思是这个函数要在window.onload时执行</p><p>四种用法见下面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//核心函数的4个作用</span></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// alert(&quot;页面加载完成之后，自动调用&quot;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;    &lt;div&gt;&quot;</span> +</span><br><span class="language-javascript">            <span class="hljs-string">&quot;        &lt;span&gt;div-span1&lt;/span&gt;&quot;</span> +</span><br><span class="language-javascript">            <span class="hljs-string">&quot;        &lt;span&gt;div-span2&lt;/span&gt;&quot;</span> +</span><br><span class="language-javascript">            <span class="hljs-string">&quot;    &lt;/div&gt;&quot;</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;body&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// alert($(&quot;button&quot;).length);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btnObj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn01&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// alert(btnObj);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// alert( $(btnObj) );</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// alert( $(&quot;&lt;h1&gt;&lt;/h1&gt;&quot;) );</span></span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;button&quot;</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"><span class="hljs-comment">//传入参数为[函数]时：在文档加载完成后执行这个函数</span></span><br><span class="language-javascript"><span class="hljs-comment">//传入参数为[HTML字符串]时：根据这个字符串创建元素节点对象</span></span><br><span class="language-javascript"><span class="hljs-comment">//传入参数为[选择器字符串]时：根据这个字符串查找元素节点对象，和queryselsctorAll类似，注意它返回的是一个Dom对象数组</span></span><br><span class="language-javascript"><span class="hljs-comment">//传入参数为[DOM对象]时：将DOM对象包装为jQuery对象返回</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn01&quot;</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="dom对象与jquery对象"><a href="#dom对象与jquery对象" class="headerlink" title="dom对象与jquery对象"></a>dom对象与jquery对象</h3><p>感觉后者是前者包装后的数组</p><p>互相转化的方法：</p><ul><li>$(dom)&#x3D;&#x3D;&#x3D;&gt;jquery</li><li>jquery[index]&#x3D;&#x3D;&#x3D;&gt;dom</li></ul><h2 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h2><ul><li>ancestor descendant 后代选择器 ：在给定的祖先元素下匹配所有的后代元素 </li><li>parent &gt; child 子元素选择器：在给定的父元素下匹配所有的子元素 </li><li>prev + next 相邻元素选择器：匹配所有紧接在 prev 元素后的 next 元素 </li><li>prev ~ sibings 之后的兄弟元素选择器：匹配 prev 元素之后的所有 siblings</li></ul><h2 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h2><p>即在选择到的基础上进行筛选</p><h3 id="基本过滤器"><a href="#基本过滤器" class="headerlink" title="基本过滤器"></a>基本过滤器</h3><ul><li>:first 获取第一个元素</li><li>:last 获取最后个元素 </li><li>:not(selector) 去除所有与给定选择器匹配的元素 </li><li>:even 匹配所有索引值为偶数的元素，从 0 开始计数 </li><li>:odd 匹配所有索引值为奇数的元素，从 0 开始计数 </li><li>:eq(index) 匹配一个给定索引值的元素 </li><li>:gt(index) 匹配所有大于给定索引值的元素 </li><li>:lt(index) 匹配所有小于给定索引值的元素 </li><li>:header 匹配如 h1, h2, h3 之类的标题元素 </li><li>:animated 匹配所有正在执行动画效果的元素</li></ul><h3 id="内容过滤器"><a href="#内容过滤器" class="headerlink" title="内容过滤器"></a>内容过滤器</h3><ul><li>:contains(text) 匹配包含给定文本的元素 </li><li>:empty 匹配所有不包含子元素或者文本的空元素 </li><li>:parent 匹配含有子元素或者文本的元素 </li><li>:has(selector) 匹配含有选择器所匹配的元素的元素</li></ul><h3 id="属性过滤器"><a href="#属性过滤器" class="headerlink" title="属性过滤器"></a>属性过滤器</h3><ul><li>[attribute] 匹配包含给定属性的元素。</li><li>[attribute&#x3D;value] 匹配给定的属性是某个特定值的元素</li><li>[attribute!&#x3D;value] 匹配所有不含有指定的属性，或者属性不等于特定值的元素。</li><li>[attribute^&#x3D;value] 匹配给定的属性是以某些值开始的元素</li><li>[attribute$&#x3D;value] 匹配给定的属性是以某些值结尾的元素</li><li>[attribute*&#x3D;value] 匹配给定的属性是以包含某些值的元素</li></ul><p>HTML 代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Hot Fuzz&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Cold Fusion&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;accept&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Evil Plans&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>jQuery 代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;input[name=&#x27;newsletter&#x27;]&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;checked&quot;</span>, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>结果:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">[ <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Hot Fuzz&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span></span>, <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Cold Fusion&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span></span> ]<br></code></pre></td></tr></table></figure><h3 id="表单过滤器"><a href="#表单过滤器" class="headerlink" title="表单过滤器"></a>表单过滤器</h3><ul><li>:input 匹配所有 input, textarea, select 和 button 元素</li><li>:text 匹配所有 文本输入框</li><li>:password 匹配所有的密码输入框</li><li>:radio 匹配所有的单选框</li><li>:checkbox 匹配所有的复选框</li><li>:submit 匹配所有提交按钮</li><li>:image 匹配所有 img 标签</li><li>:reset 匹配所有重置按钮</li><li>:button 匹配所有 input type&#x3D;button <button>按钮</button></li><li>:file 匹配所有 input type&#x3D;file 文件上传</li><li>:hidden 匹配所有不可见元素 display:none</li></ul><p>这个好像没啥特别的，就是专门用来匹配表单里面的，至于不用它能不能匹配到，这个还不太清楚</p><h3 id="表单对象属性过滤器"><a href="#表单对象属性过滤器" class="headerlink" title="表单对象属性过滤器"></a>表单对象属性过滤器</h3><p>跟之前的过滤器一样</p><ul><li>:enabled 匹配所有可用元素 </li><li>:disabled 匹配所有不可用元素</li></ul><h2 id="元素筛选"><a href="#元素筛选" class="headerlink" title="元素筛选"></a>元素筛选</h2><p>和过滤选择其实差不多，这里略</p><h2 id="一个简单的区分"><a href="#一个简单的区分" class="headerlink" title="一个简单的区分"></a>一个简单的区分</h2><h3 id="selector1-selector2-selectorN"><a href="#selector1-selector2-selectorN" class="headerlink" title="selector1,selector2,selectorN"></a>selector1,selector2,selectorN</h3><blockquote><p>返回值:Array&lt;Element(s)&gt;</p></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="HTML-代码"><a href="#HTML-代码" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;myClass&quot;</span>&gt;</span>p class=&quot;myClass&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;notMyClass&quot;</span>&gt;</span>p class=&quot;notMyClass&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码"><a href="#jQuery-代码" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;div,span,p.myClass&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果"><a href="#结果" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;myClass&quot;</span>&gt;</span>p class=&quot;myClass&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="ancestor-descendant"><a href="#ancestor-descendant" class="headerlink" title="ancestor descendant"></a>ancestor descendant</h3><p>返回值:Array&lt;Element(s)&gt;</p><p>在给定的祖先元素下匹配所有的后代元素</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>找到表单中所有的 input 元素</p><h5 id="HTML-代码-1"><a href="#HTML-代码-1" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Newsletter:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-1"><a href="#jQuery-代码-1" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;form input&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果-1"><a href="#结果-1" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="parent-gt-child"><a href="#parent-gt-child" class="headerlink" title="parent &gt; child"></a>parent &gt; child</h3><p>返回值:Array&lt;Element(s)&gt;</p><p>在给定的父元素下匹配所有的子元素</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p>匹配表单中所有的子级input元素。</p><h5 id="HTML-代码-2"><a href="#HTML-代码-2" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Newsletter:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-2"><a href="#jQuery-代码-2" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;form &gt; input&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果-2"><a href="#结果-2" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="prev-next"><a href="#prev-next" class="headerlink" title="prev + next"></a>prev + next</h3><p>返回值:Array&lt;Element(s)&gt;</p><p>匹配所有紧接在 prev 元素后的 next 元素</p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><p>匹配所有跟在 label 后面的 input 元素</p><h5 id="HTML-代码-3"><a href="#HTML-代码-3" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Newsletter:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-3"><a href="#jQuery-代码-3" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;label + input&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果-3"><a href="#结果-3" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="prev-siblings"><a href="#prev-siblings" class="headerlink" title="prev ~ siblings"></a>prev ~ siblings</h3><p>返回值:Array&lt;Element(s)&gt;</p><p>匹配 prev 元素之后的所有 siblings 元素</p><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><p>找到所有与表单同辈的 input 元素</p><h5 id="HTML-代码-4"><a href="#HTML-代码-4" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Newsletter:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-4"><a href="#jQuery-代码-4" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;form ~ input&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果-4"><a href="#结果-4" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;none&quot;</span> /&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="first"><a href="#first" class="headerlink" title=":first"></a>:first</h3><p>返回值:jQuery</p><p>获取第一个元素</p><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><p>获取匹配的第一个元素</p><h5 id="HTML-代码-5"><a href="#HTML-代码-5" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-5"><a href="#jQuery-代码-5" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;li:first&#x27;</span>);<br></code></pre></td></tr></table></figure><h5 id="结果-5"><a href="#结果-5" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>list item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> ]<br></code></pre></td></tr></table></figure><h3 id="nth-child"><a href="#nth-child" class="headerlink" title=":nth-child"></a>:nth-child</h3><p>返回值:Array&lt;Element(s)&gt;</p><p>匹配其父元素下的第N个子或奇偶元素</p><p>‘:eq(index)’  只匹配一个元素，而这个将为每一个父元素匹配子元素。:nth-child<strong>从1开始的</strong>，而:eq()是从0算起的！可以使用:<br>nth-child(even)<br>:nth-child(odd)<br>:nth-child(3n)<br>:nth-child(2)<br>:nth-child(3n+1)<br>:nth-child(3n+2)</p><h4 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h4><p>在每个 ul 查找第 2 个li</p><h5 id="HTML-代码-6"><a href="#HTML-代码-6" class="headerlink" title="HTML 代码:"></a>HTML 代码:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>John<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Karl<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Brandon<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Glen<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Tane<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Ralph<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="jQuery-代码-6"><a href="#jQuery-代码-6" class="headerlink" title="jQuery 代码:"></a>jQuery 代码:</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;ul li:nth-child(2)&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="结果-6"><a href="#结果-6" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[ <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Karl<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>,   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Tane<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> ]<br></code></pre></td></tr></table></figure><h2 id="jQuery-的属性操作"><a href="#jQuery-的属性操作" class="headerlink" title="jQuery 的属性操作"></a>jQuery 的属性操作</h2><p>html() 它可以设置和获取起始标签和结束标签中的内容。 跟 dom 属性 innerHTML 一样。<br>text() 它可以设置和获取起始标签和结束标签中的文本。 跟 dom 属性 innerText 一样。<br>val() 它可以设置和获取表单项的 value 属性值。 跟 dom 属性 value 一</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 不传参数，是获取，传递参数是设置</span></span><br><span class="language-javascript">            <span class="hljs-comment">// alert( $(&quot;div&quot;).html() );// 获取</span></span><br><span class="language-javascript">            <span class="hljs-comment">// $(&quot;div&quot;).html(&quot;&lt;h1&gt;我是div中的标题 1&lt;/h1&gt;&quot;);// 设置</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 不传参数，是获取，传递参数是设置</span></span><br><span class="language-javascript">            <span class="hljs-comment">// alert( $(&quot;div&quot;).text() ); // 获取</span></span><br><span class="language-javascript">            <span class="hljs-comment">// $(&quot;div&quot;).text(&quot;&lt;h1&gt;我是div中的标题 1&lt;/h1&gt;&quot;); // 设置</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 不传参数，是获取，传递参数是设置</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>());<span class="hljs-comment">//获取</span></span><br><span class="language-javascript">                $(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;超级程序猿&quot;</span>);<span class="hljs-comment">// 设置</span></span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div标签 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是div中的span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>操作输入框<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>attr() 可以设置和获取属性的值，不推荐操作 checked、readOnly、selected、disabled 等等<br>attr 方法还可以操作非标准的属性。比如自定义属性：abc,bbj<br>prop() 可以设置和获取属性的值,只推荐操作 checked、readOnly、selected、disabled 等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 给全选绑定单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedAllBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-literal">true</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 给全不选绑定单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedNoBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-literal">false</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 反选单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedRevBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 查询全部的球类的复选框</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 在each遍历的function函数中，有一个this对象。这个this对象是当前正在遍历到的dom对象</span></span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span>;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 要检查 是否满选</span></span><br><span class="language-javascript"><span class="hljs-comment">// 获取全部的球类个数</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> allCount = $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-property">length</span>;</span><br><span class="language-javascript"><span class="hljs-comment">// 再获取选中的球类个数</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> checkedCount = $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).<span class="hljs-property">length</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// if (allCount == checkedCount) &#123;</span></span><br><span class="language-javascript"><span class="hljs-comment">// $(&quot;#checkedAllBox&quot;).prop(&quot;checked&quot;,true);</span></span><br><span class="language-javascript"><span class="hljs-comment">// &#125; else &#123;</span></span><br><span class="language-javascript"><span class="hljs-comment">// $(&quot;#checkedAllBox&quot;).prop(&quot;checked&quot;,false);</span></span><br><span class="language-javascript"><span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,allCount == checkedCount);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 【提交】按钮单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#sendBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 获取选中的球类的复选框</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 给【全选/全不选】绑定单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 在事件的function函数中，有一个this对象，这个this对象是当前正在响应事件的dom对象</span></span><br><span class="language-javascript"><span class="hljs-comment">// alert(this.checked);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 给全部球类绑定单击事件</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 要检查 是否满选</span></span><br><span class="language-javascript"><span class="hljs-comment">// 获取全部的球类个数</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> allCount = $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-property">length</span>;</span><br><span class="language-javascript"><span class="hljs-comment">// 再获取选中的球类个数</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> checkedCount = $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).<span class="hljs-property">length</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,allCount == checkedCount);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><br>你爱好的运动是？<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedAllBox&quot;</span> /&gt;</span>全选/全不选 <br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;足球&quot;</span> /&gt;</span>足球<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;篮球&quot;</span> /&gt;</span>篮球<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;羽毛球&quot;</span> /&gt;</span>羽毛球<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;乒乓球&quot;</span> /&gt;</span>乒乓球<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedAllBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全　选&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedNoBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全不选&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedRevBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;反　选&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sendBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提　交&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="DOM-的增删改"><a href="#DOM-的增删改" class="headerlink" title="DOM 的增删改"></a>DOM 的增删改</h2><p>内部插入：<br>appendTo() a.appendTo(b) 把 a 插入到 b 子元素末尾，成为最后一个子元素<br>prependTo() a.prependTo(b) 把 a 插到 b 所有子元素前面，成为第一个子元素<br>外部插入：<br>insertAfter() a.insertAfter(b) 得到 ba<br>insertBefore() a.insertBefore(b) 得到 ab<br>替换:<br>replaceWith() a.replaceWith(b) 用 b 替换掉 a<br>replaceAll() a.replaceAll(b) 用 a 替换掉所有 b<br>删除：<br>remove() a.remove(); 删除 a 标签<br>empty() a.empty(); 清空 a 标签里的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">select &#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">140px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">130px</span>;</span><br><span class="language-css"><span class="hljs-attribute">float</span>: left;</span><br><span class="language-css"><span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//选中添加到右边</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;button:eq(0)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;select[name=sel01] :selected&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//alert(this);</span></span><br><span class="language-javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;select[name=sel02]&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//全部添加到右边</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;button:eq(1)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;select[name=sel01] option&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//alert(this);</span></span><br><span class="language-javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;select[name=sel02]&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//选中删除到左边</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;button:eq(2)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;select[name=sel02] :selected&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//alert(this);</span></span><br><span class="language-javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;select[name=sel01]&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"><span class="hljs-comment">//全部删除到左边</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;button:eq(3)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;select[name=sel02] option&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//alert(this);</span></span><br><span class="language-javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;select[name=sel01]&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sel01&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt01&quot;</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt02&quot;</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt03&quot;</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt04&quot;</span>&gt;</span>选项4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt05&quot;</span>&gt;</span>选项5<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt06&quot;</span>&gt;</span>选项6<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt07&quot;</span>&gt;</span>选项7<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt08&quot;</span>&gt;</span>选项8<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>选中添加到右边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>全部添加到右边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rigth&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sel02&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>选中删除到左边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>全部删除到左边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="设置css"><a href="#设置css" class="headerlink" title="设置css"></a>设置css</h2><p>就像这样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">$(&quot;p&quot;).css(&#123; color: &quot;#ff0011&quot;, background: &quot;blue&quot; &#125;);<br></code></pre></td></tr></table></figure><h2 id="事件的冒泡"><a href="#事件的冒泡" class="headerlink" title="事件的冒泡"></a>事件的冒泡</h2><p>什么是事件的冒泡？<br>事件的冒泡是指，父子元素同时监听同一个事件。当触发子元素的事件的时候，同一个事件也被传递到了父元素的事件里去<br>响应。<br>那么如何阻止事件冒泡呢？<br>在子元素事件函数体内，return false; 可以阻止事件的冒泡传递。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">*&#123;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>;</span><br><span class="language-css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">130%</span>;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-id">#content</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">220px</span>;</span><br><span class="language-css"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#0050D0</span>;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#96E555</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#666666</span>;</span><br><span class="language-css"><span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: white;</span><br><span class="language-css"><span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#888</span>;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: white;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//冒泡就是事件的向上传导，子元素的事件被触发，父元素的响应事件也会触发</span></span><br><span class="language-javascript"><span class="hljs-comment">//解决冒泡问题：return false;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//给span绑定一个单击响应函数</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我是span的单击响应函数&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//给id为content的div绑定一个单击响应函数</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#content&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我是div的单击响应函数&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//给body绑定一个单击响应函数</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;body&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//alert(&quot;我是body的单击响应函数&quot;);</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//取消默认行为</span></span><br><span class="language-javascript"><span class="hljs-comment">/* $(&quot;a&quot;).click(function()&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">return false;</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;) */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>外层div元素<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>内层span元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>外层div元素<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.hao123.com&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;return false;&quot;</span>&gt;</span>WWW.HAO123.COM<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><h3 id="1-原生-javascript-获取事件对象"><a href="#1-原生-javascript-获取事件对象" class="headerlink" title="1.原生 javascript 获取事件对象"></a>1.原生 javascript 获取事件对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;areaDiv&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-jQuery-代码获取事件对象"><a href="#2-jQuery-代码获取事件对象" class="headerlink" title="2.jQuery 代码获取事件对象"></a>2.jQuery 代码获取事件对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>$(<span class="hljs-string">&quot;#areaDiv&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="3-使用-bind-同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。"><a href="#3-使用-bind-同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。" class="headerlink" title="3.使用 bind 同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。"></a>3.使用 bind 同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#areaDiv&quot;</span>).<span class="hljs-title function_">bind</span>(<span class="hljs-string">&quot;mouseover mouseout&quot;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br><span class="hljs-keyword">if</span> (event.<span class="hljs-property">type</span> == <span class="hljs-string">&quot;mouseover&quot;</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;鼠标移入&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.<span class="hljs-property">type</span> == <span class="hljs-string">&quot;mouseout&quot;</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;鼠标移出&quot;</span>);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python类型注解</title>
    <link href="/2023/03/22/Python%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/"/>
    <url>/2023/03/22/Python%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Python类型注解"><a href="#Python类型注解" class="headerlink" title="Python类型注解"></a>Python类型注解</h1><h2 id="学习网址"><a href="#学习网址" class="headerlink" title="学习网址"></a>学习网址</h2><p>第1个是详细版，第2个是简单版</p><ul><li><a href="https://zhuanlan.zhihu.com/p/419955374">Python类型注解，你需要知道的都在这里了 - 知乎</a></li><li><a href="https://blog.csdn.net/mahoon411/article/details/125657457">Python类型注解-CSDN</a></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h3><p>类型注解<strong>仅仅</strong>是提供给编辑器进行类型检查的机会，也就是起提示的作用，对 Python 程序的运行不会产生任何影响。也就是说，Python 跟以前一样自由，即使你进行了错误的类型赋值，只要不直接引发错误，程序依旧可以运行。</p><p>要有报错的话，需要装一些插件，如vscode的<strong>Pylance</strong></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">age: <span class="hljs-built_in">int</span> = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>其实就是在变量的后面加<code>:type</code>，其他照旧</p><p>在指定之后，此变量不应该被赋值为其他类型（不过解释器不会报错），在 <strong>VS Code</strong>中，安装好类型注解插件 <strong>Pylance</strong> 后，如果写出下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">age: <span class="hljs-built_in">int</span> = <span class="hljs-number">20</span><br>age = <span class="hljs-string">&#x27;20&#x27;</span><br></code></pre></td></tr></table></figure><p>那么编辑器会用<strong>醒目</strong>的方式告诉你：孙子，你这里的类型写错了！</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hi</span>(<span class="hljs-params">name: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Hello <span class="hljs-subst">&#123;name&#125;</span>!&#x27;</span><br></code></pre></td></tr></table></figure><p>在形参上还是如上文一样，<code>-&gt;type</code>写括号后面代表返回值，如果没有返回值，可以写<code>-&gt;None</code></p><h4 id="带默认值的函数"><a href="#带默认值的函数" class="headerlink" title="带默认值的函数"></a>带默认值的函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">first: <span class="hljs-built_in">int</span> = <span class="hljs-number">10</span>, second: <span class="hljs-built_in">float</span> = <span class="hljs-number">5.5</span></span>) -&gt; <span class="hljs-built_in">float</span>:<br>    <span class="hljs-keyword">return</span> first + second<br></code></pre></td></tr></table></figure><p>道理是一样的</p><h3 id="列表、字典、元组"><a href="#列表、字典、元组" class="headerlink" title="列表、字典、元组"></a>列表、字典、元组</h3><p>列表、字典、元组等包含元素的复合类型，用简单的 list，dict，tuple 不能够明确说明内部元素的具体类型。</p><p>因此要用到 <code>typing</code> 模块提供的<strong>复合注解</strong>功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span>, <span class="hljs-type">Dict</span>, <span class="hljs-type">Tuple</span><br><br><span class="hljs-comment"># 参数1: 元素为 int 的列表</span><br><span class="hljs-comment"># 参数2: 键为字符串，值为 int 的字典</span><br><span class="hljs-comment"># 返回值: 包含两个元素的元组</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mix</span>(<span class="hljs-params">scores: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], ages: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">Tuple</span>[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>]:<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>如果你用的是 Python 3.9+ 版本，甚至连 <code>typing</code> 模块都不需要了，内置的容器类型就支持了复合注解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">mix</span>(<span class="hljs-params">scores: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>], ages: <span class="hljs-built_in">dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">tuple</span>[<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>]:<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>在某些情况下，不需要严格区分参数到底是列表还是元组（这种情况还蛮多的）。这时候就可以将它们的特征抽象为更泛化的类型（泛型），比如 Sequence（序列）。</p><p>下面是例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Python 3.8 之前的版本</span><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Sequence</span> <span class="hljs-keyword">as</span> Seq1<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">seq: Seq1[<span class="hljs-built_in">str</span>]</span>):<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> seq:<br>        <span class="hljs-built_in">print</span>(item)<br><br><br><span class="hljs-comment"># Python 3.9+ 也可以这么写</span><br><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> <span class="hljs-type">Sequence</span> <span class="hljs-keyword">as</span> Seq2<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">seq: Seq2[<span class="hljs-built_in">str</span>]</span>):<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> seq:<br>        <span class="hljs-built_in">print</span>(item)<br></code></pre></td></tr></table></figure><p>例子中函数的参数不对容器的类型做具体要求，只要它是个序列（比如列表和元组）就可以。</p><h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><p>如果你实在不知道某个类型注解应该怎么写时，这里还有个最后的逃生通道：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Any</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>() -&gt; <span class="hljs-type">Any</span>:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>任何类型都与 <code>Any</code> 兼容。当然如果你把所有的类型都注解为 <code>Any</code> 将毫无意义，因此 <code>Any</code> 应当尽量少使用。</p>]]></content>
    
    
    <categories>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Regex</title>
    <link href="/2023/03/22/Regex/"/>
    <url>/2023/03/22/Regex/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="学习网址"><a href="#学习网址" class="headerlink" title="学习网址"></a>学习网址</h2><ol><li><a href="https://www.bilibili.com/video/BV1da4y1p7iZ/?share_source=copy_web&vd_source=dd2f1030c390db245979ca6615985682">【10分钟快速掌握正则表达式】</a></li><li><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md">learn-regex</a></li></ol><h2 id="在线测试工具"><a href="#在线测试工具" class="headerlink" title="在线测试工具"></a>在线测试工具</h2><p><a href="https://regex101.com/">https://regex101.com/</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><ul><li><code>a*</code>:a出现0次或多次</li><li><code>a+</code>:a出现1次或多次</li><li><code>a?</code>:a出现0次或1次</li><li><code>a&#123;6&#125;</code>:a出现6次</li><li><code>a&#123;2,6&#125;</code>:a出现2-6次</li><li><code>a&#123;2,&#125;</code>:a出现2次及以上</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li><code>(a|b)</code>:匹配a或者b</li><li><code>(ab)|(cd)</code>:匹配ab或者cd</li></ul><p><em>小括号代表括号内的内容应视为一个整体</em></p><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><ul><li><code>[abc]</code>:匹配a或b或c</li><li><code>[a-c]</code>:同上</li><li><code>[a-zA-Z0-9]</code>:匹配小写+大写英文字符及数字</li><li><code>[^0-9]</code>:匹配非数字字符</li></ul><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><ul><li><code>\d</code>:匹配数字字符</li><li><code>\D</code>:匹配非数字字符</li><li><code>\w</code>:匹配单词字符(英文、数字、下划线)</li><li><code>\W</code>:匹配非单词字符</li><li><code>\s</code>:匹配空白符(包括换行符、Tab)</li><li><code>\S</code>:匹配非空白符</li><li><code>.</code>:匹配任意字符(除换行符)</li><li><code>\b</code>:标注字符边界，\bword\b，只标注位置，不匹配任何字符(包括空白)</li><li><code>^</code>:匹配行首</li><li><code>$</code>:匹配行尾</li></ul><h3 id="贪婪-x2F-懒惰匹配"><a href="#贪婪-x2F-懒惰匹配" class="headerlink" title="贪婪&#x2F;懒惰匹配"></a>贪婪&#x2F;懒惰匹配</h3><p>一般正则表达式会匹配尽可能多的字符</p><p>如<code>&lt;.+&gt;</code>去匹配<code>&lt;div&gt;&lt;a&gt;&lt;a/&gt;&lt;/div&gt;</code>会默认把全部匹配完，若使用<code>&lt;.+?&gt;</code>则尽可能少的匹配，如只匹配<code>&lt;div&gt;</code>、<code>&lt;a&gt;</code>及其结束标签</p>]]></content>
    
    
    <categories>
      
      <category>learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>regex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个关于冒号的bug</title>
    <link href="/2023/03/19/%E4%B8%80%E4%B8%AA%E5%85%B3%E4%BA%8E%E5%86%92%E5%8F%B7%E7%9A%84bug/"/>
    <url>/2023/03/19/%E4%B8%80%E4%B8%AA%E5%85%B3%E4%BA%8E%E5%86%92%E5%8F%B7%E7%9A%84bug/</url>
    
    <content type="html"><![CDATA[<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p><code>npx hexo server</code>遇到报错：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs fortran">ERROR &#123;<br>  err: YAMLException: can not read a <span class="hljs-keyword">block</span> mapping <span class="hljs-built_in">entry</span>; a multiline key may not be an <span class="hljs-keyword">implicit</span> key at line <span class="hljs-number">4</span>, column <span class="hljs-number">1</span>:<br>......<br>    reason: <span class="hljs-string">&#x27;can not read a block mapping entry; a multiline key may not be an implicit key&#x27;</span>,<br>    mark: Mark &#123;<br>      <span class="hljs-keyword">name</span>: null,<br>      buffer: <span class="hljs-string">&#x27;title: 第一篇博客\ndate: 2023-03-19 19:33:41\ntags:博客相关\n\x00&#x27;</span>,<br>      <span class="hljs-keyword">position</span>: <span class="hljs-number">49</span>,<br>      line: <span class="hljs-number">3</span>,<br>      column: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br>&#125; Process failed: %s _posts/第一篇博客.md<br></code></pre></td></tr></table></figure><p>使用<code>hexo clean</code>也无法解决</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>title: 第一篇博客<br>date: 2023-03-19 19:33:41<br>tags: 博客相关</p></blockquote><p>这是对应博客的开头，tags冒号后面缺少一个空格，加上就好了，如图：</p><p><img src="/2023/03/19/%E4%B8%80%E4%B8%AA%E5%85%B3%E4%BA%8E%E5%86%92%E5%8F%B7%E7%9A%84bug/bug_of_colon.png" alt="bug截图"></p><h2 id="如何在博客中插入图片"><a href="#如何在博客中插入图片" class="headerlink" title="如何在博客中插入图片"></a>如何在博客中插入图片</h2><p>发现在md文档同目录下新建img文件夹再引用没有用，查到了这篇</p><p><a href="https://blog.csdn.net/weixin_42030522/article/details/123075824"> 解决Hexo无法显示图片的几种方案-CSDN博客</a></p><p>将<code>post_asset_folder</code>赋值为true，并将图片放入md文件同名文件夹</p>]]></content>
    
    
    <categories>
      
      <category>bug</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2023/03/19/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/03/19/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="小小感悟"><a href="#小小感悟" class="headerlink" title="小小感悟"></a>小小感悟</h2><p>第一次使用<code>github</code>和<code>hexo</code>创建了这个博客，踩了一些小坑，但还是做出来了。算是有点了解<code>hexo</code>的用法和<code>npm</code>的用法了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&#x27;文章名&#x27;</span> <span class="hljs-comment"># 创建文章 相当于hexo n</span><br><br>$ hexo generate <span class="hljs-comment"># 创建静态文件 相当于hexo g</span><br>$ hexo deploy <span class="hljs-comment"># 部署网站 相当于hexo d</span><br>$ hexo server <span class="hljs-comment"># 本地预览 相当于hexo s</span><br><span class="hljs-comment"># 以上命令有问题时，是因为hexo不在环境变量里面，可在命令前加上npx解决</span><br>$ hexo clean <span class="hljs-comment"># 当出了玄学的报错的时候，然后重新用以上三条</span><br></code></pre></td></tr></table></figure><p>点击<a href="https://hexo.io/zh-cn/docs/index.html">这里</a>，查看<code>hexo</code>的官方中文文档</p><p>但是目前还是有些不是很明白的地方</p><ol><li>缺少更换主题的实践</li><li>如何从github上面拉下已经有的这个项目仓库(此仓库只有hexo文件夹的public文件夹里面的内容)，并进行修改</li><li>其他实用步骤</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><p>这会在根文件夹下的<code>themes</code>文件夹下建立一个<code>next</code>文件夹，并导入这个项目。</p><p>然后只需要改一下根文件夹下的<code>_config.yml</code>文件中的<code>theme</code>的值为<code>next</code>就可以了。</p><p>此外，<code>next</code>文件夹下也有一个<code>_config.yml</code>文件，可以修改一些配置，如<code>scheme</code>的值有4种选择，每种选择都会导致主题不一样。</p><h3 id="上传Github"><a href="#上传Github" class="headerlink" title="上传Github"></a>上传Github</h3><p>把项目仓库上传到github上，但需要设置好<code>.gitignore</code>这个文件</p>]]></content>
    
    
    
    <tags>
      
      <tag>博客相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
